
NHK2024_Temp_Line_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088f8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08008ad8  08008ad8  00018ad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ed4  08008ed4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008ed4  08008ed4  00018ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008edc  08008edc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008edc  08008edc  00018edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ee0  08008ee0  00018ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  200001d8  080090b8  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  080090b8  00020634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014717  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002908  00000000  00000000  0003495e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  00037268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d46  00000000  00000000  000383c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002099f  00000000  00000000  00039106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000131eb  00000000  00000000  00059aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d338a  00000000  00000000  0006cc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a4c  00000000  00000000  0014001c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00145a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008ac0 	.word	0x08008ac0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	08008ac0 	.word	0x08008ac0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <clip_zero_one>:
    } else {
        return val;
    }
}

double clip_zero_one(double val, double min, double max) {
 8000ef4:	b5b0      	push	{r4, r5, r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	ed87 0b04 	vstr	d0, [r7, #16]
 8000efe:	ed87 1b02 	vstr	d1, [r7, #8]
 8000f02:	ed87 2b00 	vstr	d2, [r7]
    if (val < min) {
 8000f06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f0e:	f7ff fe0d 	bl	8000b2c <__aeabi_dcmplt>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d004      	beq.n	8000f22 <clip_zero_one+0x2e>
        return 0.0;
 8000f18:	f04f 0200 	mov.w	r2, #0
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	e024      	b.n	8000f6c <clip_zero_one+0x78>
    } else if (val > max) {
 8000f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f26:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f2a:	f7ff fe1d 	bl	8000b68 <__aeabi_dcmpgt>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <clip_zero_one+0x48>
        return 1.0;
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <clip_zero_one+0x8c>)
 8000f3a:	e017      	b.n	8000f6c <clip_zero_one+0x78>
    } else {
        return (val - min) / (max - min);
 8000f3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f44:	f7ff f9c8 	bl	80002d8 <__aeabi_dsub>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4614      	mov	r4, r2
 8000f4e:	461d      	mov	r5, r3
 8000f50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f58:	f7ff f9be 	bl	80002d8 <__aeabi_dsub>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4620      	mov	r0, r4
 8000f62:	4629      	mov	r1, r5
 8000f64:	f7ff fc9a 	bl	800089c <__aeabi_ddiv>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
    }
    
 8000f6c:	ec43 2b17 	vmov	d7, r2, r3
 8000f70:	eeb0 0a47 	vmov.f32	s0, s14
 8000f74:	eef0 0a67 	vmov.f32	s1, s15
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	3ff00000 	.word	0x3ff00000

08000f84 <Sensor_Settings_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Sensor_Settings_Init(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
	line_sensor_settings = (struct LineSensor*)malloc(8 * sizeof(struct LineSensor));
 8000f8a:	2040      	movs	r0, #64	; 0x40
 8000f8c:	f005 faea 	bl	8006564 <malloc>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <Sensor_Settings_Init+0x50>)
 8000f96:	601a      	str	r2, [r3, #0]
	// To do: implement initialize algorithm
	for (int i = 0; i < 8; i++ ) {
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	e011      	b.n	8000fc2 <Sensor_Settings_Init+0x3e>
		line_sensor_settings[i].max = 3000;
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <Sensor_Settings_Init+0x50>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	4413      	add	r3, r2
 8000fa8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000fac:	601a      	str	r2, [r3, #0]
		line_sensor_settings[i].min = 200;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <Sensor_Settings_Init+0x50>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	22c8      	movs	r2, #200	; 0xc8
 8000fba:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 8; i++ ) {
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b07      	cmp	r3, #7
 8000fc6:	ddea      	ble.n	8000f9e <Sensor_Settings_Init+0x1a>
	}
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001f4 	.word	0x200001f4

08000fd8 <ADC_Init>:

void ADC_Init(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	// ADC1 initialize and start
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000fdc:	217f      	movs	r1, #127	; 0x7f
 8000fde:	4809      	ldr	r0, [pc, #36]	; (8001004 <ADC_Init+0x2c>)
 8000fe0:	f002 f98a 	bl	80032f8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ADC1_buffer, 1);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4908      	ldr	r1, [pc, #32]	; (8001008 <ADC_Init+0x30>)
 8000fe8:	4806      	ldr	r0, [pc, #24]	; (8001004 <ADC_Init+0x2c>)
 8000fea:	f001 faf7 	bl	80025dc <HAL_ADC_Start_DMA>

	// ADC2 initialize and start
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000fee:	217f      	movs	r1, #127	; 0x7f
 8000ff0:	4806      	ldr	r0, [pc, #24]	; (800100c <ADC_Init+0x34>)
 8000ff2:	f002 f981 	bl	80032f8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)&ADC2_buffer, 7);
 8000ff6:	2207      	movs	r2, #7
 8000ff8:	4905      	ldr	r1, [pc, #20]	; (8001010 <ADC_Init+0x38>)
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <ADC_Init+0x34>)
 8000ffc:	f001 faee 	bl	80025dc <HAL_ADC_Start_DMA>
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000024c 	.word	0x2000024c
 8001008:	20000238 	.word	0x20000238
 800100c:	200002b8 	.word	0x200002b8
 8001010:	2000023c 	.word	0x2000023c

08001014 <update_sensor_value>:

void update_sensor_value(void) {
 8001014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001018:	b097      	sub	sp, #92	; 0x5c
 800101a:	af0e      	add	r7, sp, #56	; 0x38
	if (line_sensor_settings == NULL) {
 800101c:	4b54      	ldr	r3, [pc, #336]	; (8001170 <update_sensor_value+0x15c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <update_sensor_value+0x14>
		Error_Handler();
 8001024:	f000 fb84 	bl	8001730 <Error_Handler>
	* temp_sensor_value[5] -> ADC2_buffer[4] -> PF10 -> Sensor6
	* temp_sensor_value[6] -> ADC2_buffer[5] -> PA5  -> Sensor7
	* temp_sensor_value[7] -> ADC2_buffer[6] -> PA4  -> Sensor8
	*/
	uint16_t temp_sensor_value[8] = {
			ADC1_buffer[0],
 8001028:	4b52      	ldr	r3, [pc, #328]	; (8001174 <update_sensor_value+0x160>)
 800102a:	881b      	ldrh	r3, [r3, #0]
	uint16_t temp_sensor_value[8] = {
 800102c:	81bb      	strh	r3, [r7, #12]
			ADC2_buffer[0],
 800102e:	4b52      	ldr	r3, [pc, #328]	; (8001178 <update_sensor_value+0x164>)
 8001030:	881b      	ldrh	r3, [r3, #0]
	uint16_t temp_sensor_value[8] = {
 8001032:	81fb      	strh	r3, [r7, #14]
			ADC2_buffer[1],
 8001034:	4b50      	ldr	r3, [pc, #320]	; (8001178 <update_sensor_value+0x164>)
 8001036:	885b      	ldrh	r3, [r3, #2]
	uint16_t temp_sensor_value[8] = {
 8001038:	823b      	strh	r3, [r7, #16]
			ADC2_buffer[2],
 800103a:	4b4f      	ldr	r3, [pc, #316]	; (8001178 <update_sensor_value+0x164>)
 800103c:	889b      	ldrh	r3, [r3, #4]
	uint16_t temp_sensor_value[8] = {
 800103e:	827b      	strh	r3, [r7, #18]
			ADC2_buffer[3],
 8001040:	4b4d      	ldr	r3, [pc, #308]	; (8001178 <update_sensor_value+0x164>)
 8001042:	88db      	ldrh	r3, [r3, #6]
	uint16_t temp_sensor_value[8] = {
 8001044:	82bb      	strh	r3, [r7, #20]
			ADC2_buffer[4],
 8001046:	4b4c      	ldr	r3, [pc, #304]	; (8001178 <update_sensor_value+0x164>)
 8001048:	891b      	ldrh	r3, [r3, #8]
	uint16_t temp_sensor_value[8] = {
 800104a:	82fb      	strh	r3, [r7, #22]
			ADC2_buffer[5],
 800104c:	4b4a      	ldr	r3, [pc, #296]	; (8001178 <update_sensor_value+0x164>)
 800104e:	895b      	ldrh	r3, [r3, #10]
	uint16_t temp_sensor_value[8] = {
 8001050:	833b      	strh	r3, [r7, #24]
			ADC2_buffer[6],
 8001052:	4b49      	ldr	r3, [pc, #292]	; (8001178 <update_sensor_value+0x164>)
 8001054:	899b      	ldrh	r3, [r3, #12]
	uint16_t temp_sensor_value[8] = {
 8001056:	837b      	strh	r3, [r7, #26]

	// To do: print only if debug mode
	// original value
	printf(
			"%d, %d, %d, %d, %d, %d, %d, %d\r\n",
			temp_sensor_value[0],
 8001058:	89bb      	ldrh	r3, [r7, #12]
	printf(
 800105a:	461d      	mov	r5, r3
			temp_sensor_value[1],
 800105c:	89fb      	ldrh	r3, [r7, #14]
	printf(
 800105e:	461e      	mov	r6, r3
			temp_sensor_value[2],
 8001060:	8a3b      	ldrh	r3, [r7, #16]
	printf(
 8001062:	469c      	mov	ip, r3
			temp_sensor_value[3],
 8001064:	8a7b      	ldrh	r3, [r7, #18]
			temp_sensor_value[4],
 8001066:	8aba      	ldrh	r2, [r7, #20]
			temp_sensor_value[5],
 8001068:	8af9      	ldrh	r1, [r7, #22]
			temp_sensor_value[6],
 800106a:	8b38      	ldrh	r0, [r7, #24]
			temp_sensor_value[7]
 800106c:	8b7c      	ldrh	r4, [r7, #26]
	printf(
 800106e:	9404      	str	r4, [sp, #16]
 8001070:	9003      	str	r0, [sp, #12]
 8001072:	9102      	str	r1, [sp, #8]
 8001074:	9201      	str	r2, [sp, #4]
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	4663      	mov	r3, ip
 800107a:	4632      	mov	r2, r6
 800107c:	4629      	mov	r1, r5
 800107e:	483f      	ldr	r0, [pc, #252]	; (800117c <update_sensor_value+0x168>)
 8001080:	f005 fe8e 	bl	8006da0 <iprintf>
	);

	// normalize sensor value (0 to 1) and set
	for (int i = 0; i < 8; i++ ) {
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	e037      	b.n	80010fa <update_sensor_value+0xe6>
		line_sensor_value[i] = clip_zero_one(
				(double)temp_sensor_value[i],
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	3318      	adds	r3, #24
 8001090:	f107 0208 	add.w	r2, r7, #8
 8001094:	4413      	add	r3, r2
 8001096:	f833 3c14 	ldrh.w	r3, [r3, #-20]
		line_sensor_value[i] = clip_zero_one(
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa5a 	bl	8000554 <__aeabi_ui2d>
 80010a0:	4604      	mov	r4, r0
 80010a2:	460d      	mov	r5, r1
				(double)line_sensor_settings[i].min, // min value
 80010a4:	4b32      	ldr	r3, [pc, #200]	; (8001170 <update_sensor_value+0x15c>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4413      	add	r3, r2
 80010ae:	685b      	ldr	r3, [r3, #4]
		line_sensor_value[i] = clip_zero_one(
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa5f 	bl	8000574 <__aeabi_i2d>
 80010b6:	4680      	mov	r8, r0
 80010b8:	4689      	mov	r9, r1
				(double)line_sensor_settings[i].max  // max value
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <update_sensor_value+0x15c>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4413      	add	r3, r2
 80010c4:	681b      	ldr	r3, [r3, #0]
		line_sensor_value[i] = clip_zero_one(
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fa54 	bl	8000574 <__aeabi_i2d>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	ec43 2b12 	vmov	d2, r2, r3
 80010d4:	ec49 8b11 	vmov	d1, r8, r9
 80010d8:	ec45 4b10 	vmov	d0, r4, r5
 80010dc:	f7ff ff0a 	bl	8000ef4 <clip_zero_one>
 80010e0:	eeb0 7a40 	vmov.f32	s14, s0
 80010e4:	eef0 7a60 	vmov.f32	s15, s1
 80010e8:	4a25      	ldr	r2, [pc, #148]	; (8001180 <update_sensor_value+0x16c>)
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4413      	add	r3, r2
 80010f0:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < 8; i++ ) {
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	3301      	adds	r3, #1
 80010f8:	61fb      	str	r3, [r7, #28]
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	2b07      	cmp	r3, #7
 80010fe:	ddc4      	ble.n	800108a <update_sensor_value+0x76>
		);
	}

	// To do: print only if debug mode
	printf(
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <update_sensor_value+0x16c>)
 8001102:	ed93 7b00 	vldr	d7, [r3]
 8001106:	ed87 7b00 	vstr	d7, [r7]
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <update_sensor_value+0x16c>)
 800110c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <update_sensor_value+0x16c>)
 8001112:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <update_sensor_value+0x16c>)
 8001118:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <update_sensor_value+0x16c>)
 800111e:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <update_sensor_value+0x16c>)
 8001124:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <update_sensor_value+0x16c>)
 800112a:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <update_sensor_value+0x16c>)
 8001130:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001134:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001138:	ed8d 6b0a 	vstr	d6, [sp, #40]	; 0x28
 800113c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001140:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001144:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001148:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800114c:	e9cd 0100 	strd	r0, r1, [sp]
 8001150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <update_sensor_value+0x170>)
 8001156:	f005 fe23 	bl	8006da0 <iprintf>
			line_sensor_value[4],
			line_sensor_value[5],
			line_sensor_value[6],
			line_sensor_value[7]
		);
	printf("%f\n", line_sensor_value[0]);
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <update_sensor_value+0x16c>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	4809      	ldr	r0, [pc, #36]	; (8001188 <update_sensor_value+0x174>)
 8001162:	f005 fe1d 	bl	8006da0 <iprintf>
}
 8001166:	bf00      	nop
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001170:	200001f4 	.word	0x200001f4
 8001174:	20000238 	.word	0x20000238
 8001178:	2000023c 	.word	0x2000023c
 800117c:	08008ad8 	.word	0x08008ad8
 8001180:	200001f8 	.word	0x200001f8
 8001184:	08008afc 	.word	0x08008afc
 8001188:	08008b20 	.word	0x08008b20

0800118c <_write>:

int _write(int file, char *ptr, int len)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	b29a      	uxth	r2, r3
 800119c:	230a      	movs	r3, #10
 800119e:	68b9      	ldr	r1, [r7, #8]
 80011a0:	4803      	ldr	r0, [pc, #12]	; (80011b0 <_write+0x24>)
 80011a2:	f004 f88d 	bl	80052c0 <HAL_UART_Transmit>
	return len;
 80011a6:	687b      	ldr	r3, [r7, #4]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000448 	.word	0x20000448

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  setbuf(stdout, NULL);
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <main+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f005 fc07 	bl	80069d4 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c6:	f000 fdd0 	bl	8001d6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ca:	f000 f815 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ce:	f000 fa63 	bl	8001698 <MX_GPIO_Init>
  MX_DMA_Init();
 80011d2:	f000 fa2f 	bl	8001634 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011d6:	f000 f9e1 	bl	800159c <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 80011da:	f000 f999 	bl	8001510 <MX_FDCAN1_Init>
  MX_ADC1_Init();
 80011de:	f000 f857 	bl	8001290 <MX_ADC1_Init>
  MX_ADC2_Init();
 80011e2:	f000 f8cd 	bl	8001380 <MX_ADC2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ADC_Init();
 80011e6:	f7ff fef7 	bl	8000fd8 <ADC_Init>
  Sensor_Settings_Init();
 80011ea:	f7ff fecb 	bl	8000f84 <Sensor_Settings_Init>
  while (1)
  {
	update_sensor_value();
 80011ee:	f7ff ff11 	bl	8001014 <update_sensor_value>
 80011f2:	e7fc      	b.n	80011ee <main+0x3a>
 80011f4:	20000064 	.word	0x20000064

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b094      	sub	sp, #80	; 0x50
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0318 	add.w	r3, r7, #24
 8001202:	2238      	movs	r2, #56	; 0x38
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f005 fddc 	bl	8006dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800121a:	2000      	movs	r0, #0
 800121c:	f003 f83e 	bl	800429c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001220:	2302      	movs	r3, #2
 8001222:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001224:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122a:	2340      	movs	r3, #64	; 0x40
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122e:	2302      	movs	r3, #2
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001232:	2302      	movs	r3, #2
 8001234:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001236:	2304      	movs	r3, #4
 8001238:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800123a:	2355      	movs	r3, #85	; 0x55
 800123c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800123e:	2302      	movs	r3, #2
 8001240:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001242:	2302      	movs	r3, #2
 8001244:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001246:	2302      	movs	r3, #2
 8001248:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124a:	f107 0318 	add.w	r3, r7, #24
 800124e:	4618      	mov	r0, r3
 8001250:	f003 f8c8 	bl	80043e4 <HAL_RCC_OscConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800125a:	f000 fa69 	bl	8001730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125e:	230f      	movs	r3, #15
 8001260:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001262:	2303      	movs	r3, #3
 8001264:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2104      	movs	r1, #4
 8001276:	4618      	mov	r0, r3
 8001278:	f003 fbc6 	bl	8004a08 <HAL_RCC_ClockConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001282:	f000 fa55 	bl	8001730 <Error_Handler>
  }
}
 8001286:	bf00      	nop
 8001288:	3750      	adds	r7, #80	; 0x50
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08c      	sub	sp, #48	; 0x30
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	2220      	movs	r2, #32
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f005 fd8b 	bl	8006dc4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012ae:	4b32      	ldr	r3, [pc, #200]	; (8001378 <MX_ADC1_Init+0xe8>)
 80012b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <MX_ADC1_Init+0xe8>)
 80012b8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012be:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <MX_ADC1_Init+0xe8>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012c4:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <MX_ADC1_Init+0xe8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80012ca:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <MX_ADC1_Init+0xe8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012d0:	4b29      	ldr	r3, [pc, #164]	; (8001378 <MX_ADC1_Init+0xe8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012d6:	4b28      	ldr	r3, [pc, #160]	; (8001378 <MX_ADC1_Init+0xe8>)
 80012d8:	2204      	movs	r2, #4
 80012da:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012dc:	4b26      	ldr	r3, [pc, #152]	; (8001378 <MX_ADC1_Init+0xe8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012e2:	4b25      	ldr	r3, [pc, #148]	; (8001378 <MX_ADC1_Init+0xe8>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80012e8:	4b23      	ldr	r3, [pc, #140]	; (8001378 <MX_ADC1_Init+0xe8>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ee:	4b22      	ldr	r3, [pc, #136]	; (8001378 <MX_ADC1_Init+0xe8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <MX_ADC1_Init+0xe8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012fc:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <MX_ADC1_Init+0xe8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <MX_ADC1_Init+0xe8>)
 8001304:	2201      	movs	r2, #1
 8001306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <MX_ADC1_Init+0xe8>)
 800130c:	2200      	movs	r2, #0
 800130e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <MX_ADC1_Init+0xe8>)
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001318:	4817      	ldr	r0, [pc, #92]	; (8001378 <MX_ADC1_Init+0xe8>)
 800131a:	f000 ffdb 	bl	80022d4 <HAL_ADC_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001324:	f000 fa04 	bl	8001730 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800132c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001330:	4619      	mov	r1, r3
 8001332:	4811      	ldr	r0, [pc, #68]	; (8001378 <MX_ADC1_Init+0xe8>)
 8001334:	f002 f842 	bl	80033bc <HAL_ADCEx_MultiModeConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800133e:	f000 f9f7 	bl	8001730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_ADC1_Init+0xec>)
 8001344:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001346:	2306      	movs	r3, #6
 8001348:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800134a:	2307      	movs	r3, #7
 800134c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800134e:	237f      	movs	r3, #127	; 0x7f
 8001350:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001352:	2304      	movs	r3, #4
 8001354:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4619      	mov	r1, r3
 800135e:	4806      	ldr	r0, [pc, #24]	; (8001378 <MX_ADC1_Init+0xe8>)
 8001360:	f001 fa0e 	bl	8002780 <HAL_ADC_ConfigChannel>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800136a:	f000 f9e1 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	3730      	adds	r7, #48	; 0x30
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000024c 	.word	0x2000024c
 800137c:	3ef08000 	.word	0x3ef08000

08001380 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001386:	463b      	mov	r3, r7
 8001388:	2220      	movs	r2, #32
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f005 fd19 	bl	8006dc4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001392:	4b56      	ldr	r3, [pc, #344]	; (80014ec <MX_ADC2_Init+0x16c>)
 8001394:	4a56      	ldr	r2, [pc, #344]	; (80014f0 <MX_ADC2_Init+0x170>)
 8001396:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001398:	4b54      	ldr	r3, [pc, #336]	; (80014ec <MX_ADC2_Init+0x16c>)
 800139a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800139e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013a0:	4b52      	ldr	r3, [pc, #328]	; (80014ec <MX_ADC2_Init+0x16c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013a6:	4b51      	ldr	r3, [pc, #324]	; (80014ec <MX_ADC2_Init+0x16c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80013ac:	4b4f      	ldr	r3, [pc, #316]	; (80014ec <MX_ADC2_Init+0x16c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013b2:	4b4e      	ldr	r3, [pc, #312]	; (80014ec <MX_ADC2_Init+0x16c>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b8:	4b4c      	ldr	r3, [pc, #304]	; (80014ec <MX_ADC2_Init+0x16c>)
 80013ba:	2204      	movs	r2, #4
 80013bc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80013be:	4b4b      	ldr	r3, [pc, #300]	; (80014ec <MX_ADC2_Init+0x16c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80013c4:	4b49      	ldr	r3, [pc, #292]	; (80014ec <MX_ADC2_Init+0x16c>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 7;
 80013ca:	4b48      	ldr	r3, [pc, #288]	; (80014ec <MX_ADC2_Init+0x16c>)
 80013cc:	2207      	movs	r2, #7
 80013ce:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013d0:	4b46      	ldr	r3, [pc, #280]	; (80014ec <MX_ADC2_Init+0x16c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d8:	4b44      	ldr	r3, [pc, #272]	; (80014ec <MX_ADC2_Init+0x16c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013de:	4b43      	ldr	r3, [pc, #268]	; (80014ec <MX_ADC2_Init+0x16c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80013e4:	4b41      	ldr	r3, [pc, #260]	; (80014ec <MX_ADC2_Init+0x16c>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013ec:	4b3f      	ldr	r3, [pc, #252]	; (80014ec <MX_ADC2_Init+0x16c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80013f2:	4b3e      	ldr	r3, [pc, #248]	; (80014ec <MX_ADC2_Init+0x16c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013fa:	483c      	ldr	r0, [pc, #240]	; (80014ec <MX_ADC2_Init+0x16c>)
 80013fc:	f000 ff6a 	bl	80022d4 <HAL_ADC_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001406:	f000 f993 	bl	8001730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800140a:	4b3a      	ldr	r3, [pc, #232]	; (80014f4 <MX_ADC2_Init+0x174>)
 800140c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800140e:	2306      	movs	r3, #6
 8001410:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001412:	2307      	movs	r3, #7
 8001414:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001416:	237f      	movs	r3, #127	; 0x7f
 8001418:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800141a:	2304      	movs	r3, #4
 800141c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001422:	463b      	mov	r3, r7
 8001424:	4619      	mov	r1, r3
 8001426:	4831      	ldr	r0, [pc, #196]	; (80014ec <MX_ADC2_Init+0x16c>)
 8001428:	f001 f9aa 	bl	8002780 <HAL_ADC_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001432:	f000 f97d 	bl	8001730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001436:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <MX_ADC2_Init+0x178>)
 8001438:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800143a:	230c      	movs	r3, #12
 800143c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800143e:	463b      	mov	r3, r7
 8001440:	4619      	mov	r1, r3
 8001442:	482a      	ldr	r0, [pc, #168]	; (80014ec <MX_ADC2_Init+0x16c>)
 8001444:	f001 f99c 	bl	8002780 <HAL_ADC_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 800144e:	f000 f96f 	bl	8001730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001452:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <MX_ADC2_Init+0x17c>)
 8001454:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001456:	2312      	movs	r3, #18
 8001458:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800145a:	463b      	mov	r3, r7
 800145c:	4619      	mov	r1, r3
 800145e:	4823      	ldr	r0, [pc, #140]	; (80014ec <MX_ADC2_Init+0x16c>)
 8001460:	f001 f98e 	bl	8002780 <HAL_ADC_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 800146a:	f000 f961 	bl	8001730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <MX_ADC2_Init+0x180>)
 8001470:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001472:	2318      	movs	r3, #24
 8001474:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001476:	463b      	mov	r3, r7
 8001478:	4619      	mov	r1, r3
 800147a:	481c      	ldr	r0, [pc, #112]	; (80014ec <MX_ADC2_Init+0x16c>)
 800147c:	f001 f980 	bl	8002780 <HAL_ADC_ConfigChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 8001486:	f000 f953 	bl	8001730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800148a:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <MX_ADC2_Init+0x184>)
 800148c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800148e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001492:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	4619      	mov	r1, r3
 8001498:	4814      	ldr	r0, [pc, #80]	; (80014ec <MX_ADC2_Init+0x16c>)
 800149a:	f001 f971 	bl	8002780 <HAL_ADC_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 80014a4:	f000 f944 	bl	8001730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <MX_ADC2_Init+0x188>)
 80014aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80014ac:	f44f 7383 	mov.w	r3, #262	; 0x106
 80014b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	4619      	mov	r1, r3
 80014b6:	480d      	ldr	r0, [pc, #52]	; (80014ec <MX_ADC2_Init+0x16c>)
 80014b8:	f001 f962 	bl	8002780 <HAL_ADC_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_ADC2_Init+0x146>
  {
    Error_Handler();
 80014c2:	f000 f935 	bl	8001730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_ADC2_Init+0x18c>)
 80014c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80014ca:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80014ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014d0:	463b      	mov	r3, r7
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_ADC2_Init+0x16c>)
 80014d6:	f001 f953 	bl	8002780 <HAL_ADC_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_ADC2_Init+0x164>
  {
    Error_Handler();
 80014e0:	f000 f926 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	3720      	adds	r7, #32
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200002b8 	.word	0x200002b8
 80014f0:	50000100 	.word	0x50000100
 80014f4:	04300002 	.word	0x04300002
 80014f8:	08600004 	.word	0x08600004
 80014fc:	10c00010 	.word	0x10c00010
 8001500:	0c900008 	.word	0x0c900008
 8001504:	2a000400 	.word	0x2a000400
 8001508:	36902000 	.word	0x36902000
 800150c:	47520000 	.word	0x47520000

08001510 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <MX_FDCAN1_Init+0x84>)
 8001516:	4a20      	ldr	r2, [pc, #128]	; (8001598 <MX_FDCAN1_Init+0x88>)
 8001518:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800151a:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <MX_FDCAN1_Init+0x84>)
 800151c:	2200      	movs	r2, #0
 800151e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001520:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <MX_FDCAN1_Init+0x84>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <MX_FDCAN1_Init+0x84>)
 8001528:	2200      	movs	r2, #0
 800152a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <MX_FDCAN1_Init+0x84>)
 800152e:	2200      	movs	r2, #0
 8001530:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <MX_FDCAN1_Init+0x84>)
 8001534:	2200      	movs	r2, #0
 8001536:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <MX_FDCAN1_Init+0x84>)
 800153a:	2200      	movs	r2, #0
 800153c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <MX_FDCAN1_Init+0x84>)
 8001540:	2210      	movs	r2, #16
 8001542:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <MX_FDCAN1_Init+0x84>)
 8001546:	2201      	movs	r2, #1
 8001548:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <MX_FDCAN1_Init+0x84>)
 800154c:	2202      	movs	r2, #2
 800154e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <MX_FDCAN1_Init+0x84>)
 8001552:	2202      	movs	r2, #2
 8001554:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <MX_FDCAN1_Init+0x84>)
 8001558:	2201      	movs	r2, #1
 800155a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800155c:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <MX_FDCAN1_Init+0x84>)
 800155e:	2201      	movs	r2, #1
 8001560:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_FDCAN1_Init+0x84>)
 8001564:	2201      	movs	r2, #1
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <MX_FDCAN1_Init+0x84>)
 800156a:	2201      	movs	r2, #1
 800156c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_FDCAN1_Init+0x84>)
 8001570:	2200      	movs	r2, #0
 8001572:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <MX_FDCAN1_Init+0x84>)
 8001576:	2200      	movs	r2, #0
 8001578:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_FDCAN1_Init+0x84>)
 800157c:	2200      	movs	r2, #0
 800157e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <MX_FDCAN1_Init+0x84>)
 8001582:	f002 fb41 	bl	8003c08 <HAL_FDCAN_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800158c:	f000 f8d0 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200003e4 	.word	0x200003e4
 8001598:	40006400 	.word	0x40006400

0800159c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015a0:	4b22      	ldr	r3, [pc, #136]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015a2:	4a23      	ldr	r2, [pc, #140]	; (8001630 <MX_USART2_UART_Init+0x94>)
 80015a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015a6:	4b21      	ldr	r3, [pc, #132]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015c2:	220c      	movs	r2, #12
 80015c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015da:	2200      	movs	r2, #0
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015e4:	4811      	ldr	r0, [pc, #68]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015e6:	f003 fe1b 	bl	8005220 <HAL_UART_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015f0:	f000 f89e 	bl	8001730 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f4:	2100      	movs	r1, #0
 80015f6:	480d      	ldr	r0, [pc, #52]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015f8:	f004 fc14 	bl	8005e24 <HAL_UARTEx_SetTxFifoThreshold>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001602:	f000 f895 	bl	8001730 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001606:	2100      	movs	r1, #0
 8001608:	4808      	ldr	r0, [pc, #32]	; (800162c <MX_USART2_UART_Init+0x90>)
 800160a:	f004 fc49 	bl	8005ea0 <HAL_UARTEx_SetRxFifoThreshold>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001614:	f000 f88c 	bl	8001730 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001618:	4804      	ldr	r0, [pc, #16]	; (800162c <MX_USART2_UART_Init+0x90>)
 800161a:	f004 fbca 	bl	8005db2 <HAL_UARTEx_DisableFifoMode>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001624:	f000 f884 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000448 	.word	0x20000448
 8001630:	40004400 	.word	0x40004400

08001634 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <MX_DMA_Init+0x60>)
 800163c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800163e:	4a15      	ldr	r2, [pc, #84]	; (8001694 <MX_DMA_Init+0x60>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	6493      	str	r3, [r2, #72]	; 0x48
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <MX_DMA_Init+0x60>)
 8001648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <MX_DMA_Init+0x60>)
 8001654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001656:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <MX_DMA_Init+0x60>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6493      	str	r3, [r2, #72]	; 0x48
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <MX_DMA_Init+0x60>)
 8001660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	200b      	movs	r0, #11
 8001670:	f002 f823 	bl	80036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001674:	200b      	movs	r0, #11
 8001676:	f002 f83a 	bl	80036ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	200c      	movs	r0, #12
 8001680:	f002 f81b 	bl	80036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001684:	200c      	movs	r0, #12
 8001686:	f002 f832 	bl	80036ee <HAL_NVIC_EnableIRQ>

}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000

08001698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 030c 	add.w	r3, r7, #12
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <MX_GPIO_Init+0x90>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <MX_GPIO_Init+0x90>)
 80016b4:	f043 0320 	orr.w	r3, r3, #32
 80016b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <MX_GPIO_Init+0x90>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	f003 0320 	and.w	r3, r3, #32
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <MX_GPIO_Init+0x90>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	4a17      	ldr	r2, [pc, #92]	; (8001728 <MX_GPIO_Init+0x90>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <MX_GPIO_Init+0x90>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <MX_GPIO_Init+0x90>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	4a11      	ldr	r2, [pc, #68]	; (8001728 <MX_GPIO_Init+0x90>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <MX_GPIO_Init+0x90>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016fc:	480b      	ldr	r0, [pc, #44]	; (800172c <MX_GPIO_Init+0x94>)
 80016fe:	f002 fdb5 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001706:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	4619      	mov	r1, r3
 800171a:	4804      	ldr	r0, [pc, #16]	; (800172c <MX_GPIO_Init+0x94>)
 800171c:	f002 fc24 	bl	8003f68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001720:	bf00      	nop
 8001722:	3720      	adds	r7, #32
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000
 800172c:	48000400 	.word	0x48000400

08001730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001734:	b672      	cpsid	i
}
 8001736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001738:	e7fe      	b.n	8001738 <Error_Handler+0x8>
	...

0800173c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <HAL_MspInit+0x44>)
 8001744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001746:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <HAL_MspInit+0x44>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6613      	str	r3, [r2, #96]	; 0x60
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <HAL_MspInit+0x44>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_MspInit+0x44>)
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175e:	4a08      	ldr	r2, [pc, #32]	; (8001780 <HAL_MspInit+0x44>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	6593      	str	r3, [r2, #88]	; 0x58
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_MspInit+0x44>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000

08001784 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b09e      	sub	sp, #120	; 0x78
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800179c:	f107 0320 	add.w	r3, r7, #32
 80017a0:	2244      	movs	r2, #68	; 0x44
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f005 fb0d 	bl	8006dc4 <memset>
  if(hadc->Instance==ADC1)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017b2:	d168      	bne.n	8001886 <HAL_ADC_MspInit+0x102>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80017b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80017ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80017be:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c0:	f107 0320 	add.w	r3, r7, #32
 80017c4:	4618      	mov	r0, r3
 80017c6:	f003 fb3b 	bl	8004e40 <HAL_RCCEx_PeriphCLKConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80017d0:	f7ff ffae 	bl	8001730 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80017d4:	4b71      	ldr	r3, [pc, #452]	; (800199c <HAL_ADC_MspInit+0x218>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	3301      	adds	r3, #1
 80017da:	4a70      	ldr	r2, [pc, #448]	; (800199c <HAL_ADC_MspInit+0x218>)
 80017dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80017de:	4b6f      	ldr	r3, [pc, #444]	; (800199c <HAL_ADC_MspInit+0x218>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d10b      	bne.n	80017fe <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80017e6:	4b6e      	ldr	r3, [pc, #440]	; (80019a0 <HAL_ADC_MspInit+0x21c>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	4a6d      	ldr	r2, [pc, #436]	; (80019a0 <HAL_ADC_MspInit+0x21c>)
 80017ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f2:	4b6b      	ldr	r3, [pc, #428]	; (80019a0 <HAL_ADC_MspInit+0x21c>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	4b68      	ldr	r3, [pc, #416]	; (80019a0 <HAL_ADC_MspInit+0x21c>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	4a67      	ldr	r2, [pc, #412]	; (80019a0 <HAL_ADC_MspInit+0x21c>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180a:	4b65      	ldr	r3, [pc, #404]	; (80019a0 <HAL_ADC_MspInit+0x21c>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	61bb      	str	r3, [r7, #24]
 8001814:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001816:	2301      	movs	r3, #1
 8001818:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181a:	2303      	movs	r3, #3
 800181c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001826:	4619      	mov	r1, r3
 8001828:	485e      	ldr	r0, [pc, #376]	; (80019a4 <HAL_ADC_MspInit+0x220>)
 800182a:	f002 fb9d 	bl	8003f68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800182e:	4b5e      	ldr	r3, [pc, #376]	; (80019a8 <HAL_ADC_MspInit+0x224>)
 8001830:	4a5e      	ldr	r2, [pc, #376]	; (80019ac <HAL_ADC_MspInit+0x228>)
 8001832:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001834:	4b5c      	ldr	r3, [pc, #368]	; (80019a8 <HAL_ADC_MspInit+0x224>)
 8001836:	2205      	movs	r2, #5
 8001838:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800183a:	4b5b      	ldr	r3, [pc, #364]	; (80019a8 <HAL_ADC_MspInit+0x224>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001840:	4b59      	ldr	r3, [pc, #356]	; (80019a8 <HAL_ADC_MspInit+0x224>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001846:	4b58      	ldr	r3, [pc, #352]	; (80019a8 <HAL_ADC_MspInit+0x224>)
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800184c:	4b56      	ldr	r3, [pc, #344]	; (80019a8 <HAL_ADC_MspInit+0x224>)
 800184e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001852:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001854:	4b54      	ldr	r3, [pc, #336]	; (80019a8 <HAL_ADC_MspInit+0x224>)
 8001856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800185a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800185c:	4b52      	ldr	r3, [pc, #328]	; (80019a8 <HAL_ADC_MspInit+0x224>)
 800185e:	2220      	movs	r2, #32
 8001860:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001862:	4b51      	ldr	r3, [pc, #324]	; (80019a8 <HAL_ADC_MspInit+0x224>)
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001868:	484f      	ldr	r0, [pc, #316]	; (80019a8 <HAL_ADC_MspInit+0x224>)
 800186a:	f001 ff5b 	bl	8003724 <HAL_DMA_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_ADC_MspInit+0xf4>
    {
      Error_Handler();
 8001874:	f7ff ff5c 	bl	8001730 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a4b      	ldr	r2, [pc, #300]	; (80019a8 <HAL_ADC_MspInit+0x224>)
 800187c:	655a      	str	r2, [r3, #84]	; 0x54
 800187e:	4a4a      	ldr	r2, [pc, #296]	; (80019a8 <HAL_ADC_MspInit+0x224>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001884:	e086      	b.n	8001994 <HAL_ADC_MspInit+0x210>
  else if(hadc->Instance==ADC2)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a49      	ldr	r2, [pc, #292]	; (80019b0 <HAL_ADC_MspInit+0x22c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	f040 8081 	bne.w	8001994 <HAL_ADC_MspInit+0x210>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001896:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001898:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800189c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800189e:	f107 0320 	add.w	r3, r7, #32
 80018a2:	4618      	mov	r0, r3
 80018a4:	f003 facc 	bl	8004e40 <HAL_RCCEx_PeriphCLKConfig>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 80018ae:	f7ff ff3f 	bl	8001730 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018b2:	4b3a      	ldr	r3, [pc, #232]	; (800199c <HAL_ADC_MspInit+0x218>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	4a38      	ldr	r2, [pc, #224]	; (800199c <HAL_ADC_MspInit+0x218>)
 80018ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80018bc:	4b37      	ldr	r3, [pc, #220]	; (800199c <HAL_ADC_MspInit+0x218>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d10b      	bne.n	80018dc <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80018c4:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <HAL_ADC_MspInit+0x21c>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	4a35      	ldr	r2, [pc, #212]	; (80019a0 <HAL_ADC_MspInit+0x21c>)
 80018ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d0:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <HAL_ADC_MspInit+0x21c>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018dc:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <HAL_ADC_MspInit+0x21c>)
 80018de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e0:	4a2f      	ldr	r2, [pc, #188]	; (80019a0 <HAL_ADC_MspInit+0x21c>)
 80018e2:	f043 0320 	orr.w	r3, r3, #32
 80018e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e8:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <HAL_ADC_MspInit+0x21c>)
 80018ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ec:	f003 0320 	and.w	r3, r3, #32
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <HAL_ADC_MspInit+0x21c>)
 80018f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f8:	4a29      	ldr	r2, [pc, #164]	; (80019a0 <HAL_ADC_MspInit+0x21c>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <HAL_ADC_MspInit+0x21c>)
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800190c:	2302      	movs	r3, #2
 800190e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001910:	2303      	movs	r3, #3
 8001912:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001918:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800191c:	4619      	mov	r1, r3
 800191e:	4825      	ldr	r0, [pc, #148]	; (80019b4 <HAL_ADC_MspInit+0x230>)
 8001920:	f002 fb22 	bl	8003f68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001924:	23f3      	movs	r3, #243	; 0xf3
 8001926:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001928:	2303      	movs	r3, #3
 800192a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001934:	4619      	mov	r1, r3
 8001936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193a:	f002 fb15 	bl	8003f68 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800193e:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <HAL_ADC_MspInit+0x234>)
 8001940:	4a1e      	ldr	r2, [pc, #120]	; (80019bc <HAL_ADC_MspInit+0x238>)
 8001942:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001944:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <HAL_ADC_MspInit+0x234>)
 8001946:	2224      	movs	r2, #36	; 0x24
 8001948:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800194a:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <HAL_ADC_MspInit+0x234>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001950:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_ADC_MspInit+0x234>)
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_ADC_MspInit+0x234>)
 8001958:	2280      	movs	r2, #128	; 0x80
 800195a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800195c:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <HAL_ADC_MspInit+0x234>)
 800195e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001962:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_ADC_MspInit+0x234>)
 8001966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800196a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_ADC_MspInit+0x234>)
 800196e:	2220      	movs	r2, #32
 8001970:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_ADC_MspInit+0x234>)
 8001974:	2200      	movs	r2, #0
 8001976:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001978:	480f      	ldr	r0, [pc, #60]	; (80019b8 <HAL_ADC_MspInit+0x234>)
 800197a:	f001 fed3 	bl	8003724 <HAL_DMA_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_ADC_MspInit+0x204>
      Error_Handler();
 8001984:	f7ff fed4 	bl	8001730 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <HAL_ADC_MspInit+0x234>)
 800198c:	655a      	str	r2, [r3, #84]	; 0x54
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <HAL_ADC_MspInit+0x234>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001994:	bf00      	nop
 8001996:	3778      	adds	r7, #120	; 0x78
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200004dc 	.word	0x200004dc
 80019a0:	40021000 	.word	0x40021000
 80019a4:	48000400 	.word	0x48000400
 80019a8:	20000324 	.word	0x20000324
 80019ac:	40020008 	.word	0x40020008
 80019b0:	50000100 	.word	0x50000100
 80019b4:	48001400 	.word	0x48001400
 80019b8:	20000384 	.word	0x20000384
 80019bc:	4002001c 	.word	0x4002001c

080019c0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b09a      	sub	sp, #104	; 0x68
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	2244      	movs	r2, #68	; 0x44
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f005 f9ef 	bl	8006dc4 <memset>
  if(hfdcan->Instance==FDCAN1)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a20      	ldr	r2, [pc, #128]	; (8001a6c <HAL_FDCAN_MspInit+0xac>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d139      	bne.n	8001a64 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80019f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80019f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019fa:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	4618      	mov	r0, r3
 8001a02:	f003 fa1d 	bl	8004e40 <HAL_RCCEx_PeriphCLKConfig>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001a0c:	f7ff fe90 	bl	8001730 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001a10:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <HAL_FDCAN_MspInit+0xb0>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	4a16      	ldr	r2, [pc, #88]	; (8001a70 <HAL_FDCAN_MspInit+0xb0>)
 8001a16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <HAL_FDCAN_MspInit+0xb0>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_FDCAN_MspInit+0xb0>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2c:	4a10      	ldr	r2, [pc, #64]	; (8001a70 <HAL_FDCAN_MspInit+0xb0>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <HAL_FDCAN_MspInit+0xb0>)
 8001a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a40:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a44:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001a52:	2309      	movs	r3, #9
 8001a54:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a60:	f002 fa82 	bl	8003f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001a64:	bf00      	nop
 8001a66:	3768      	adds	r7, #104	; 0x68
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40006400 	.word	0x40006400
 8001a70:	40021000 	.word	0x40021000

08001a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b09a      	sub	sp, #104	; 0x68
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	2244      	movs	r2, #68	; 0x44
 8001a92:	2100      	movs	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f005 f995 	bl	8006dc4 <memset>
  if(huart->Instance==USART2)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a1f      	ldr	r2, [pc, #124]	; (8001b1c <HAL_UART_MspInit+0xa8>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d136      	bne.n	8001b12 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f003 f9c5 	bl	8004e40 <HAL_RCCEx_PeriphCLKConfig>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001abc:	f7ff fe38 	bl	8001730 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ac0:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <HAL_UART_MspInit+0xac>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	4a16      	ldr	r2, [pc, #88]	; (8001b20 <HAL_UART_MspInit+0xac>)
 8001ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aca:	6593      	str	r3, [r2, #88]	; 0x58
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <HAL_UART_MspInit+0xac>)
 8001ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_UART_MspInit+0xac>)
 8001ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001adc:	4a10      	ldr	r2, [pc, #64]	; (8001b20 <HAL_UART_MspInit+0xac>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_UART_MspInit+0xac>)
 8001ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001af0:	230c      	movs	r3, #12
 8001af2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b00:	2307      	movs	r3, #7
 8001b02:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0e:	f002 fa2b 	bl	8003f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b12:	bf00      	nop
 8001b14:	3768      	adds	r7, #104	; 0x68
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40004400 	.word	0x40004400
 8001b20:	40021000 	.word	0x40021000

08001b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <NMI_Handler+0x4>

08001b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <HardFault_Handler+0x4>

08001b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <MemManage_Handler+0x4>

08001b36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3a:	e7fe      	b.n	8001b3a <BusFault_Handler+0x4>

08001b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <UsageFault_Handler+0x4>

08001b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b70:	f000 f94e 	bl	8001e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <DMA1_Channel1_IRQHandler+0x10>)
 8001b7e:	f001 fef4 	bl	800396a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000324 	.word	0x20000324

08001b8c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <DMA1_Channel2_IRQHandler+0x10>)
 8001b92:	f001 feea 	bl	800396a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000384 	.word	0x20000384

08001ba0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return 1;
 8001ba4:	2301      	movs	r3, #1
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <_kill>:

int _kill(int pid, int sig)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bba:	f005 f941 	bl	8006e40 <__errno>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2216      	movs	r2, #22
 8001bc2:	601a      	str	r2, [r3, #0]
  return -1;
 8001bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_exit>:

void _exit (int status)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ffe7 	bl	8001bb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001be2:	e7fe      	b.n	8001be2 <_exit+0x12>

08001be4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	e00a      	b.n	8001c0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bf6:	f3af 8000 	nop.w
 8001bfa:	4601      	mov	r1, r0
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	60ba      	str	r2, [r7, #8]
 8001c02:	b2ca      	uxtb	r2, r1
 8001c04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	dbf0      	blt.n	8001bf6 <_read+0x12>
  }

  return len;
 8001c14:	687b      	ldr	r3, [r7, #4]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c46:	605a      	str	r2, [r3, #4]
  return 0;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <_isatty>:

int _isatty(int file)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c90:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <_sbrk+0x5c>)
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <_sbrk+0x60>)
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d102      	bne.n	8001caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <_sbrk+0x64>)
 8001ca6:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <_sbrk+0x68>)
 8001ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d207      	bcs.n	8001cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb8:	f005 f8c2 	bl	8006e40 <__errno>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cc6:	e009      	b.n	8001cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <_sbrk+0x64>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <_sbrk+0x64>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <_sbrk+0x64>)
 8001cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cda:	68fb      	ldr	r3, [r7, #12]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20008000 	.word	0x20008000
 8001ce8:	00000400 	.word	0x00000400
 8001cec:	200004e0 	.word	0x200004e0
 8001cf0:	20000638 	.word	0x20000638

08001cf4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <SystemInit+0x20>)
 8001cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfe:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <SystemInit+0x20>)
 8001d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d18:	480d      	ldr	r0, [pc, #52]	; (8001d50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d1a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d1c:	f7ff ffea 	bl	8001cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d20:	480c      	ldr	r0, [pc, #48]	; (8001d54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d22:	490d      	ldr	r1, [pc, #52]	; (8001d58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d24:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <LoopForever+0xe>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d28:	e002      	b.n	8001d30 <LoopCopyDataInit>

08001d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2e:	3304      	adds	r3, #4

08001d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d34:	d3f9      	bcc.n	8001d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d38:	4c0a      	ldr	r4, [pc, #40]	; (8001d64 <LoopForever+0x16>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d3c:	e001      	b.n	8001d42 <LoopFillZerobss>

08001d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d40:	3204      	adds	r2, #4

08001d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d44:	d3fb      	bcc.n	8001d3e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001d46:	f005 f881 	bl	8006e4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d4a:	f7ff fa33 	bl	80011b4 <main>

08001d4e <LoopForever>:

LoopForever:
    b LoopForever
 8001d4e:	e7fe      	b.n	8001d4e <LoopForever>
  ldr   r0, =_estack
 8001d50:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d58:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d5c:	08008ee4 	.word	0x08008ee4
  ldr r2, =_sbss
 8001d60:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001d64:	20000634 	.word	0x20000634

08001d68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d68:	e7fe      	b.n	8001d68 <ADC1_2_IRQHandler>

08001d6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d74:	2003      	movs	r0, #3
 8001d76:	f001 fc95 	bl	80036a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f000 f80e 	bl	8001d9c <HAL_InitTick>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d002      	beq.n	8001d8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	71fb      	strb	r3, [r7, #7]
 8001d8a:	e001      	b.n	8001d90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d8c:	f7ff fcd6 	bl	800173c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d90:	79fb      	ldrb	r3, [r7, #7]

}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001da8:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <HAL_InitTick+0x68>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d022      	beq.n	8001df6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <HAL_InitTick+0x6c>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <HAL_InitTick+0x68>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f001 fca0 	bl	800370a <HAL_SYSTICK_Config>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10f      	bne.n	8001df0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b0f      	cmp	r3, #15
 8001dd4:	d809      	bhi.n	8001dea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dde:	f001 fc6c 	bl	80036ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HAL_InitTick+0x70>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	e007      	b.n	8001dfa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	73fb      	strb	r3, [r7, #15]
 8001dee:	e004      	b.n	8001dfa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	e001      	b.n	8001dfa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000008 	.word	0x20000008
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	20000004 	.word	0x20000004

08001e10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_IncTick+0x1c>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_IncTick+0x20>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	4a03      	ldr	r2, [pc, #12]	; (8001e2c <HAL_IncTick+0x1c>)
 8001e20:	6013      	str	r3, [r2, #0]
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	200004e4 	.word	0x200004e4
 8001e30:	20000008 	.word	0x20000008

08001e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return uwTick;
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_GetTick+0x14>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	200004e4 	.word	0x200004e4

08001e4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	609a      	str	r2, [r3, #8]
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	3360      	adds	r3, #96	; 0x60
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <LL_ADC_SetOffset+0x44>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001eec:	bf00      	nop
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	03fff000 	.word	0x03fff000

08001efc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3360      	adds	r3, #96	; 0x60
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b087      	sub	sp, #28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	3360      	adds	r3, #96	; 0x60
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f52:	bf00      	nop
 8001f54:	371c      	adds	r7, #28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b087      	sub	sp, #28
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	3360      	adds	r3, #96	; 0x60
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001f88:	bf00      	nop
 8001f8a:	371c      	adds	r7, #28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3360      	adds	r3, #96	; 0x60
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001fbe:	bf00      	nop
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	615a      	str	r2, [r3, #20]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002016:	b480      	push	{r7}
 8002018:	b087      	sub	sp, #28
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	3330      	adds	r3, #48	; 0x30
 8002026:	461a      	mov	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	0a1b      	lsrs	r3, r3, #8
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	4413      	add	r3, r2
 8002034:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	211f      	movs	r1, #31
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	401a      	ands	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	0e9b      	lsrs	r3, r3, #26
 800204e:	f003 011f 	and.w	r1, r3, #31
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f003 031f 	and.w	r3, r3, #31
 8002058:	fa01 f303 	lsl.w	r3, r1, r3
 800205c:	431a      	orrs	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002062:	bf00      	nop
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800206e:	b480      	push	{r7}
 8002070:	b087      	sub	sp, #28
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3314      	adds	r3, #20
 800207e:	461a      	mov	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	0e5b      	lsrs	r3, r3, #25
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	4413      	add	r3, r2
 800208c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	0d1b      	lsrs	r3, r3, #20
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	2107      	movs	r1, #7
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	401a      	ands	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	0d1b      	lsrs	r3, r3, #20
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	431a      	orrs	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020b8:	bf00      	nop
 80020ba:	371c      	adds	r7, #28
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020dc:	43db      	mvns	r3, r3
 80020de:	401a      	ands	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0318 	and.w	r3, r3, #24
 80020e6:	4908      	ldr	r1, [pc, #32]	; (8002108 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020e8:	40d9      	lsrs	r1, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	400b      	ands	r3, r1
 80020ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f2:	431a      	orrs	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	0007ffff 	.word	0x0007ffff

0800210c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 031f 	and.w	r3, r3, #31
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002138:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6093      	str	r3, [r2, #8]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800215c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002160:	d101      	bne.n	8002166 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002184:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002188:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021b0:	d101      	bne.n	80021b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021d8:	f043 0201 	orr.w	r2, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002200:	f043 0202 	orr.w	r2, r3, #2
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <LL_ADC_IsEnabled+0x18>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <LL_ADC_IsEnabled+0x1a>
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b02      	cmp	r3, #2
 800224c:	d101      	bne.n	8002252 <LL_ADC_IsDisableOngoing+0x18>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <LL_ADC_IsDisableOngoing+0x1a>
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002270:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002274:	f043 0204 	orr.w	r2, r3, #4
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b04      	cmp	r3, #4
 800229a:	d101      	bne.n	80022a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d101      	bne.n	80022c6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b089      	sub	sp, #36	; 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e167      	b.n	80025be <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff fa41 	bl	8001784 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff19 	bl	800214c <LL_ADC_IsDeepPowerDownEnabled>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d004      	beq.n	800232a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff feff 	bl	8002128 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ff34 	bl	800219c <LL_ADC_IsInternalRegulatorEnabled>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d115      	bne.n	8002366 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ff18 	bl	8002174 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002344:	4ba0      	ldr	r3, [pc, #640]	; (80025c8 <HAL_ADC_Init+0x2f4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	099b      	lsrs	r3, r3, #6
 800234a:	4aa0      	ldr	r2, [pc, #640]	; (80025cc <HAL_ADC_Init+0x2f8>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	099b      	lsrs	r3, r3, #6
 8002352:	3301      	adds	r3, #1
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002358:	e002      	b.n	8002360 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3b01      	subs	r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f9      	bne.n	800235a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff16 	bl	800219c <LL_ADC_IsInternalRegulatorEnabled>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10d      	bne.n	8002392 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237a:	f043 0210 	orr.w	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002386:	f043 0201 	orr.w	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ff76 	bl	8002288 <LL_ADC_REG_IsConversionOngoing>
 800239c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f040 8100 	bne.w	80025ac <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 80fc 	bne.w	80025ac <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023bc:	f043 0202 	orr.w	r2, r3, #2
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff23 	bl	8002214 <LL_ADC_IsEnabled>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d111      	bne.n	80023f8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80023d8:	f7ff ff1c 	bl	8002214 <LL_ADC_IsEnabled>
 80023dc:	4604      	mov	r4, r0
 80023de:	487c      	ldr	r0, [pc, #496]	; (80025d0 <HAL_ADC_Init+0x2fc>)
 80023e0:	f7ff ff18 	bl	8002214 <LL_ADC_IsEnabled>
 80023e4:	4603      	mov	r3, r0
 80023e6:	4323      	orrs	r3, r4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d105      	bne.n	80023f8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4619      	mov	r1, r3
 80023f2:	4878      	ldr	r0, [pc, #480]	; (80025d4 <HAL_ADC_Init+0x300>)
 80023f4:	f7ff fd2a 	bl	8001e4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7f5b      	ldrb	r3, [r3, #29]
 80023fc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002402:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002408:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800240e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002416:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002422:	2b01      	cmp	r3, #1
 8002424:	d106      	bne.n	8002434 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	3b01      	subs	r3, #1
 800242c:	045b      	lsls	r3, r3, #17
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	2b00      	cmp	r3, #0
 800243a:	d009      	beq.n	8002450 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	4b60      	ldr	r3, [pc, #384]	; (80025d8 <HAL_ADC_Init+0x304>)
 8002458:	4013      	ands	r3, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	69b9      	ldr	r1, [r7, #24]
 8002460:	430b      	orrs	r3, r1
 8002462:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff ff15 	bl	80022ae <LL_ADC_INJ_IsConversionOngoing>
 8002484:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d16d      	bne.n	8002568 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d16a      	bne.n	8002568 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002496:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800249e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024ae:	f023 0302 	bic.w	r3, r3, #2
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	69b9      	ldr	r1, [r7, #24]
 80024b8:	430b      	orrs	r3, r1
 80024ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d017      	beq.n	80024f4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6911      	ldr	r1, [r2, #16]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6812      	ldr	r2, [r2, #0]
 80024ec:	430b      	orrs	r3, r1
 80024ee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80024f2:	e013      	b.n	800251c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002502:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002514:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002518:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002522:	2b01      	cmp	r3, #1
 8002524:	d118      	bne.n	8002558 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002530:	f023 0304 	bic.w	r3, r3, #4
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800253c:	4311      	orrs	r1, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002542:	4311      	orrs	r1, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002548:	430a      	orrs	r2, r1
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0201 	orr.w	r2, r2, #1
 8002554:	611a      	str	r2, [r3, #16]
 8002556:	e007      	b.n	8002568 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d10c      	bne.n	800258a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f023 010f 	bic.w	r1, r3, #15
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	1e5a      	subs	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	631a      	str	r2, [r3, #48]	; 0x30
 8002588:	e007      	b.n	800259a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 020f 	bic.w	r2, r2, #15
 8002598:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259e:	f023 0303 	bic.w	r3, r3, #3
 80025a2:	f043 0201 	orr.w	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80025aa:	e007      	b.n	80025bc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b0:	f043 0210 	orr.w	r2, r3, #16
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3724      	adds	r7, #36	; 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd90      	pop	{r4, r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000000 	.word	0x20000000
 80025cc:	053e2d63 	.word	0x053e2d63
 80025d0:	50000100 	.word	0x50000100
 80025d4:	50000300 	.word	0x50000300
 80025d8:	fff04007 	.word	0xfff04007

080025dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025e8:	4851      	ldr	r0, [pc, #324]	; (8002730 <HAL_ADC_Start_DMA+0x154>)
 80025ea:	f7ff fd8f 	bl	800210c <LL_ADC_GetMultimode>
 80025ee:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fe47 	bl	8002288 <LL_ADC_REG_IsConversionOngoing>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f040 808f 	bne.w	8002720 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_ADC_Start_DMA+0x34>
 800260c:	2302      	movs	r3, #2
 800260e:	e08a      	b.n	8002726 <HAL_ADC_Start_DMA+0x14a>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d005      	beq.n	800262a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b05      	cmp	r3, #5
 8002622:	d002      	beq.n	800262a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	2b09      	cmp	r3, #9
 8002628:	d173      	bne.n	8002712 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 fc98 	bl	8002f60 <ADC_Enable>
 8002630:	4603      	mov	r3, r0
 8002632:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002634:	7dfb      	ldrb	r3, [r7, #23]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d166      	bne.n	8002708 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002642:	f023 0301 	bic.w	r3, r3, #1
 8002646:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a38      	ldr	r2, [pc, #224]	; (8002734 <HAL_ADC_Start_DMA+0x158>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d002      	beq.n	800265e <HAL_ADC_Start_DMA+0x82>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	e001      	b.n	8002662 <HAL_ADC_Start_DMA+0x86>
 800265e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	4293      	cmp	r3, r2
 8002668:	d002      	beq.n	8002670 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d105      	bne.n	800267c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002674:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d006      	beq.n	8002696 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800268c:	f023 0206 	bic.w	r2, r3, #6
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	661a      	str	r2, [r3, #96]	; 0x60
 8002694:	e002      	b.n	800269c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a0:	4a25      	ldr	r2, [pc, #148]	; (8002738 <HAL_ADC_Start_DMA+0x15c>)
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a8:	4a24      	ldr	r2, [pc, #144]	; (800273c <HAL_ADC_Start_DMA+0x160>)
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b0:	4a23      	ldr	r2, [pc, #140]	; (8002740 <HAL_ADC_Start_DMA+0x164>)
 80026b2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	221c      	movs	r2, #28
 80026ba:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0210 	orr.w	r2, r2, #16
 80026d2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3340      	adds	r3, #64	; 0x40
 80026ee:	4619      	mov	r1, r3
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f001 f8be 	bl	8003874 <HAL_DMA_Start_IT>
 80026f8:	4603      	mov	r3, r0
 80026fa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fdad 	bl	8002260 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002706:	e00d      	b.n	8002724 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002710:	e008      	b.n	8002724 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800271e:	e001      	b.n	8002724 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002720:	2302      	movs	r3, #2
 8002722:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002724:	7dfb      	ldrb	r3, [r7, #23]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	50000300 	.word	0x50000300
 8002734:	50000100 	.word	0x50000100
 8002738:	0800312b 	.word	0x0800312b
 800273c:	08003203 	.word	0x08003203
 8002740:	0800321f 	.word	0x0800321f

08002744 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b0b6      	sub	sp, #216	; 0xd8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x22>
 800279e:	2302      	movs	r3, #2
 80027a0:	e3c8      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x7b4>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fd6a 	bl	8002288 <LL_ADC_REG_IsConversionOngoing>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 83ad 	bne.w	8002f16 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	f7ff fc24 	bl	8002016 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fd58 	bl	8002288 <LL_ADC_REG_IsConversionOngoing>
 80027d8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fd64 	bl	80022ae <LL_ADC_INJ_IsConversionOngoing>
 80027e6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f040 81d9 	bne.w	8002ba6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f040 81d4 	bne.w	8002ba6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002806:	d10f      	bne.n	8002828 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2200      	movs	r2, #0
 8002812:	4619      	mov	r1, r3
 8002814:	f7ff fc2b 	bl	800206e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fbd2 	bl	8001fca <LL_ADC_SetSamplingTimeCommonConfig>
 8002826:	e00e      	b.n	8002846 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	6819      	ldr	r1, [r3, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	461a      	mov	r2, r3
 8002836:	f7ff fc1a 	bl	800206e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2100      	movs	r1, #0
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fbc2 	bl	8001fca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	08db      	lsrs	r3, r3, #3
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	2b04      	cmp	r3, #4
 8002866:	d022      	beq.n	80028ae <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	6919      	ldr	r1, [r3, #16]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002878:	f7ff fb1c 	bl	8001eb4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	6919      	ldr	r1, [r3, #16]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	461a      	mov	r2, r3
 800288a:	f7ff fb68 	bl	8001f5e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800289a:	2b01      	cmp	r3, #1
 800289c:	d102      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x124>
 800289e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028a2:	e000      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x126>
 80028a4:	2300      	movs	r3, #0
 80028a6:	461a      	mov	r2, r3
 80028a8:	f7ff fb74 	bl	8001f94 <LL_ADC_SetOffsetSaturation>
 80028ac:	e17b      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fb21 	bl	8001efc <LL_ADC_GetOffsetChannel>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10a      	bne.n	80028da <HAL_ADC_ConfigChannel+0x15a>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fb16 	bl	8001efc <LL_ADC_GetOffsetChannel>
 80028d0:	4603      	mov	r3, r0
 80028d2:	0e9b      	lsrs	r3, r3, #26
 80028d4:	f003 021f 	and.w	r2, r3, #31
 80028d8:	e01e      	b.n	8002918 <HAL_ADC_ConfigChannel+0x198>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fb0b 	bl	8001efc <LL_ADC_GetOffsetChannel>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028f0:	fa93 f3a3 	rbit	r3, r3
 80028f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002900:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002908:	2320      	movs	r3, #32
 800290a:	e004      	b.n	8002916 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800290c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002920:	2b00      	cmp	r3, #0
 8002922:	d105      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x1b0>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0e9b      	lsrs	r3, r3, #26
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	e018      	b.n	8002962 <HAL_ADC_ConfigChannel+0x1e2>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002944:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002948:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800294c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002954:	2320      	movs	r3, #32
 8002956:	e004      	b.n	8002962 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002958:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002962:	429a      	cmp	r2, r3
 8002964:	d106      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2200      	movs	r2, #0
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fada 	bl	8001f28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2101      	movs	r1, #1
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fabe 	bl	8001efc <LL_ADC_GetOffsetChannel>
 8002980:	4603      	mov	r3, r0
 8002982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10a      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x220>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2101      	movs	r1, #1
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fab3 	bl	8001efc <LL_ADC_GetOffsetChannel>
 8002996:	4603      	mov	r3, r0
 8002998:	0e9b      	lsrs	r3, r3, #26
 800299a:	f003 021f 	and.w	r2, r3, #31
 800299e:	e01e      	b.n	80029de <HAL_ADC_ConfigChannel+0x25e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2101      	movs	r1, #1
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff faa8 	bl	8001efc <LL_ADC_GetOffsetChannel>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80029be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80029c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80029ce:	2320      	movs	r3, #32
 80029d0:	e004      	b.n	80029dc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80029d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d105      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x276>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	0e9b      	lsrs	r3, r3, #26
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	e018      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x2a8>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002a0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002a12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	e004      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002a1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d106      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2200      	movs	r2, #0
 8002a32:	2101      	movs	r1, #1
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fa77 	bl	8001f28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2102      	movs	r1, #2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fa5b 	bl	8001efc <LL_ADC_GetOffsetChannel>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10a      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x2e6>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2102      	movs	r1, #2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fa50 	bl	8001efc <LL_ADC_GetOffsetChannel>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	0e9b      	lsrs	r3, r3, #26
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	e01e      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x324>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fa45 	bl	8001efc <LL_ADC_GetOffsetChannel>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002a84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002a8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002a94:	2320      	movs	r3, #32
 8002a96:	e004      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002a98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a9c:	fab3 f383 	clz	r3, r3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d105      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x33c>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	0e9b      	lsrs	r3, r3, #26
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	e016      	b.n	8002aea <HAL_ADC_ConfigChannel+0x36a>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ac8:	fa93 f3a3 	rbit	r3, r3
 8002acc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ace:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ad0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002adc:	2320      	movs	r3, #32
 8002ade:	e004      	b.n	8002aea <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ae4:	fab3 f383 	clz	r3, r3
 8002ae8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d106      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2200      	movs	r2, #0
 8002af4:	2102      	movs	r1, #2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fa16 	bl	8001f28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2103      	movs	r1, #3
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff f9fa 	bl	8001efc <LL_ADC_GetOffsetChannel>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10a      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x3a8>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2103      	movs	r1, #3
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff f9ef 	bl	8001efc <LL_ADC_GetOffsetChannel>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	0e9b      	lsrs	r3, r3, #26
 8002b22:	f003 021f 	and.w	r2, r3, #31
 8002b26:	e017      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x3d8>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2103      	movs	r1, #3
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff f9e4 	bl	8001efc <LL_ADC_GetOffsetChannel>
 8002b34:	4603      	mov	r3, r0
 8002b36:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b3a:	fa93 f3a3 	rbit	r3, r3
 8002b3e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002b40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b42:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002b4a:	2320      	movs	r3, #32
 8002b4c:	e003      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002b4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b50:	fab3 f383 	clz	r3, r3
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x3f0>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	0e9b      	lsrs	r3, r3, #26
 8002b6a:	f003 031f 	and.w	r3, r3, #31
 8002b6e:	e011      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x414>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b80:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002b88:	2320      	movs	r3, #32
 8002b8a:	e003      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d106      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2103      	movs	r1, #3
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff f9c1 	bl	8001f28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fb32 	bl	8002214 <LL_ADC_IsEnabled>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f040 8140 	bne.w	8002e38 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	6819      	ldr	r1, [r3, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f7ff fa7d 	bl	80020c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	4a8f      	ldr	r2, [pc, #572]	; (8002e0c <HAL_ADC_ConfigChannel+0x68c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	f040 8131 	bne.w	8002e38 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10b      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x47e>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	0e9b      	lsrs	r3, r3, #26
 8002bec:	3301      	adds	r3, #1
 8002bee:	f003 031f 	and.w	r3, r3, #31
 8002bf2:	2b09      	cmp	r3, #9
 8002bf4:	bf94      	ite	ls
 8002bf6:	2301      	movls	r3, #1
 8002bf8:	2300      	movhi	r3, #0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	e019      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x4b2>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002c0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c0e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002c16:	2320      	movs	r3, #32
 8002c18:	e003      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002c1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c1c:	fab3 f383 	clz	r3, r3
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	3301      	adds	r3, #1
 8002c24:	f003 031f 	and.w	r3, r3, #31
 8002c28:	2b09      	cmp	r3, #9
 8002c2a:	bf94      	ite	ls
 8002c2c:	2301      	movls	r3, #1
 8002c2e:	2300      	movhi	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d079      	beq.n	8002d2a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d107      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x4d2>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	0e9b      	lsrs	r3, r3, #26
 8002c48:	3301      	adds	r3, #1
 8002c4a:	069b      	lsls	r3, r3, #26
 8002c4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c50:	e015      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x4fe>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c62:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002c6a:	2320      	movs	r3, #32
 8002c6c:	e003      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c70:	fab3 f383 	clz	r3, r3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	3301      	adds	r3, #1
 8002c78:	069b      	lsls	r3, r3, #26
 8002c7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x51e>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	0e9b      	lsrs	r3, r3, #26
 8002c90:	3301      	adds	r3, #1
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	2101      	movs	r1, #1
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	e017      	b.n	8002cce <HAL_ADC_ConfigChannel+0x54e>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	e003      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cbc:	fab3 f383 	clz	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	2101      	movs	r1, #1
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	ea42 0103 	orr.w	r1, r2, r3
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10a      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x574>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	0e9b      	lsrs	r3, r3, #26
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f003 021f 	and.w	r2, r3, #31
 8002cea:	4613      	mov	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	051b      	lsls	r3, r3, #20
 8002cf2:	e018      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x5a6>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	e003      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f003 021f 	and.w	r2, r3, #31
 8002d1e:	4613      	mov	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	4413      	add	r3, r2
 8002d24:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d26:	430b      	orrs	r3, r1
 8002d28:	e081      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d107      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x5c6>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	0e9b      	lsrs	r3, r3, #26
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	069b      	lsls	r3, r3, #26
 8002d40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d44:	e015      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x5f2>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002d5e:	2320      	movs	r3, #32
 8002d60:	e003      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	069b      	lsls	r3, r3, #26
 8002d6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x612>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	0e9b      	lsrs	r3, r3, #26
 8002d84:	3301      	adds	r3, #1
 8002d86:	f003 031f 	and.w	r3, r3, #31
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d90:	e017      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x642>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	61fb      	str	r3, [r7, #28]
  return result;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002daa:	2320      	movs	r3, #32
 8002dac:	e003      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	fab3 f383 	clz	r3, r3
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc2:	ea42 0103 	orr.w	r1, r2, r3
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10d      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x66e>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	0e9b      	lsrs	r3, r3, #26
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f003 021f 	and.w	r2, r3, #31
 8002dde:	4613      	mov	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	4413      	add	r3, r2
 8002de4:	3b1e      	subs	r3, #30
 8002de6:	051b      	lsls	r3, r3, #20
 8002de8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dec:	e01e      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x6ac>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	613b      	str	r3, [r7, #16]
  return result;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d104      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002e06:	2320      	movs	r3, #32
 8002e08:	e006      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x698>
 8002e0a:	bf00      	nop
 8002e0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	3301      	adds	r3, #1
 8002e1a:	f003 021f 	and.w	r2, r3, #31
 8002e1e:	4613      	mov	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	3b1e      	subs	r3, #30
 8002e26:	051b      	lsls	r3, r3, #20
 8002e28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e2c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e32:	4619      	mov	r1, r3
 8002e34:	f7ff f91b 	bl	800206e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b3f      	ldr	r3, [pc, #252]	; (8002f3c <HAL_ADC_ConfigChannel+0x7bc>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d071      	beq.n	8002f28 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e44:	483e      	ldr	r0, [pc, #248]	; (8002f40 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e46:	f7ff f827 	bl	8001e98 <LL_ADC_GetCommonPathInternalCh>
 8002e4a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a3c      	ldr	r2, [pc, #240]	; (8002f44 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d004      	beq.n	8002e62 <HAL_ADC_ConfigChannel+0x6e2>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a3a      	ldr	r2, [pc, #232]	; (8002f48 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d127      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d121      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e76:	d157      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e80:	4619      	mov	r1, r3
 8002e82:	482f      	ldr	r0, [pc, #188]	; (8002f40 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e84:	f7fe fff5 	bl	8001e72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e88:	4b30      	ldr	r3, [pc, #192]	; (8002f4c <HAL_ADC_ConfigChannel+0x7cc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	099b      	lsrs	r3, r3, #6
 8002e8e:	4a30      	ldr	r2, [pc, #192]	; (8002f50 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e90:	fba2 2303 	umull	r2, r3, r2, r3
 8002e94:	099b      	lsrs	r3, r3, #6
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ea2:	e002      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f9      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eb0:	e03a      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a27      	ldr	r2, [pc, #156]	; (8002f54 <HAL_ADC_ConfigChannel+0x7d4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d113      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ebc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ec0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10d      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a22      	ldr	r2, [pc, #136]	; (8002f58 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d02a      	beq.n	8002f28 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ed2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eda:	4619      	mov	r1, r3
 8002edc:	4818      	ldr	r0, [pc, #96]	; (8002f40 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ede:	f7fe ffc8 	bl	8001e72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ee2:	e021      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1c      	ldr	r2, [pc, #112]	; (8002f5c <HAL_ADC_ConfigChannel+0x7dc>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d11c      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002eee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d116      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a16      	ldr	r2, [pc, #88]	; (8002f58 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d011      	beq.n	8002f28 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	480c      	ldr	r0, [pc, #48]	; (8002f40 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f10:	f7fe ffaf 	bl	8001e72 <LL_ADC_SetCommonPathInternalCh>
 8002f14:	e008      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1a:	f043 0220 	orr.w	r2, r3, #32
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f30:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	37d8      	adds	r7, #216	; 0xd8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	80080000 	.word	0x80080000
 8002f40:	50000300 	.word	0x50000300
 8002f44:	c3210000 	.word	0xc3210000
 8002f48:	90c00010 	.word	0x90c00010
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	053e2d63 	.word	0x053e2d63
 8002f54:	c7520000 	.word	0xc7520000
 8002f58:	50000100 	.word	0x50000100
 8002f5c:	cb840000 	.word	0xcb840000

08002f60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff f94f 	bl	8002214 <LL_ADC_IsEnabled>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d169      	bne.n	8003050 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	4b36      	ldr	r3, [pc, #216]	; (800305c <ADC_Enable+0xfc>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00d      	beq.n	8002fa6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8e:	f043 0210 	orr.w	r2, r3, #16
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9a:	f043 0201 	orr.w	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e055      	b.n	8003052 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff f90a 	bl	80021c4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002fb0:	482b      	ldr	r0, [pc, #172]	; (8003060 <ADC_Enable+0x100>)
 8002fb2:	f7fe ff71 	bl	8001e98 <LL_ADC_GetCommonPathInternalCh>
 8002fb6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002fb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d013      	beq.n	8002fe8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fc0:	4b28      	ldr	r3, [pc, #160]	; (8003064 <ADC_Enable+0x104>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	099b      	lsrs	r3, r3, #6
 8002fc6:	4a28      	ldr	r2, [pc, #160]	; (8003068 <ADC_Enable+0x108>)
 8002fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fcc:	099b      	lsrs	r3, r3, #6
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fda:	e002      	b.n	8002fe2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f9      	bne.n	8002fdc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002fe8:	f7fe ff24 	bl	8001e34 <HAL_GetTick>
 8002fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fee:	e028      	b.n	8003042 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff f90d 	bl	8002214 <LL_ADC_IsEnabled>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d104      	bne.n	800300a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff f8dd 	bl	80021c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800300a:	f7fe ff13 	bl	8001e34 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d914      	bls.n	8003042 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d00d      	beq.n	8003042 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302a:	f043 0210 	orr.w	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003036:	f043 0201 	orr.w	r2, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e007      	b.n	8003052 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b01      	cmp	r3, #1
 800304e:	d1cf      	bne.n	8002ff0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	8000003f 	.word	0x8000003f
 8003060:	50000300 	.word	0x50000300
 8003064:	20000000 	.word	0x20000000
 8003068:	053e2d63 	.word	0x053e2d63

0800306c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff f8de 	bl	800223a <LL_ADC_IsDisableOngoing>
 800307e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff f8c5 	bl	8002214 <LL_ADC_IsEnabled>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d047      	beq.n	8003120 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d144      	bne.n	8003120 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 030d 	and.w	r3, r3, #13
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d10c      	bne.n	80030be <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f89f 	bl	80021ec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2203      	movs	r2, #3
 80030b4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030b6:	f7fe febd 	bl	8001e34 <HAL_GetTick>
 80030ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030bc:	e029      	b.n	8003112 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c2:	f043 0210 	orr.w	r2, r3, #16
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ce:	f043 0201 	orr.w	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e023      	b.n	8003122 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030da:	f7fe feab 	bl	8001e34 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d914      	bls.n	8003112 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00d      	beq.n	8003112 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fa:	f043 0210 	orr.w	r2, r3, #16
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003106:	f043 0201 	orr.w	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e007      	b.n	8003122 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1dc      	bne.n	80030da <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003140:	2b00      	cmp	r3, #0
 8003142:	d14b      	bne.n	80031dc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003148:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d021      	beq.n	80031a2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7fe ff44 	bl	8001ff0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d032      	beq.n	80031d4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d12b      	bne.n	80031d4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d11f      	bne.n	80031d4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003198:	f043 0201 	orr.w	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	65da      	str	r2, [r3, #92]	; 0x5c
 80031a0:	e018      	b.n	80031d4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d111      	bne.n	80031d4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d105      	bne.n	80031d4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031cc:	f043 0201 	orr.w	r2, r3, #1
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f7ff fab5 	bl	8002744 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031da:	e00e      	b.n	80031fa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f7ff fabf 	bl	800276c <HAL_ADC_ErrorCallback>
}
 80031ee:	e004      	b.n	80031fa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	4798      	blx	r3
}
 80031fa:	bf00      	nop
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f7ff faa1 	bl	8002758 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b084      	sub	sp, #16
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003230:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800323c:	f043 0204 	orr.w	r2, r3, #4
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f7ff fa91 	bl	800276c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <LL_ADC_IsEnabled>:
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <LL_ADC_IsEnabled+0x18>
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <LL_ADC_IsEnabled+0x1a>
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <LL_ADC_StartCalibration>:
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800328a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003294:	4313      	orrs	r3, r2
 8003296:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	609a      	str	r2, [r3, #8]
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <LL_ADC_IsCalibrationOnGoing>:
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032be:	d101      	bne.n	80032c4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d101      	bne.n	80032ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_ADCEx_Calibration_Start+0x1c>
 8003310:	2302      	movs	r3, #2
 8003312:	e04d      	b.n	80033b0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff fea5 	bl	800306c <ADC_Disable>
 8003322:	4603      	mov	r3, r0
 8003324:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d136      	bne.n	800339a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003330:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003334:	f023 0302 	bic.w	r3, r3, #2
 8003338:	f043 0202 	orr.w	r2, r3, #2
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6839      	ldr	r1, [r7, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff ff96 	bl	8003278 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800334c:	e014      	b.n	8003378 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	3301      	adds	r3, #1
 8003352:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4a18      	ldr	r2, [pc, #96]	; (80033b8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d90d      	bls.n	8003378 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003360:	f023 0312 	bic.w	r3, r3, #18
 8003364:	f043 0210 	orr.w	r2, r3, #16
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e01b      	b.n	80033b0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ff94 	bl	80032aa <LL_ADC_IsCalibrationOnGoing>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e2      	bne.n	800334e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338c:	f023 0303 	bic.w	r3, r3, #3
 8003390:	f043 0201 	orr.w	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	65da      	str	r2, [r3, #92]	; 0x5c
 8003398:	e005      	b.n	80033a6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339e:	f043 0210 	orr.w	r2, r3, #16
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	0004de01 	.word	0x0004de01

080033bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80033bc:	b590      	push	{r4, r7, lr}
 80033be:	b0a1      	sub	sp, #132	; 0x84
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e08b      	b.n	80034f2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80033e2:	2300      	movs	r3, #0
 80033e4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80033e6:	2300      	movs	r3, #0
 80033e8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033f2:	d102      	bne.n	80033fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033f4:	4b41      	ldr	r3, [pc, #260]	; (80034fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80033f6:	60bb      	str	r3, [r7, #8]
 80033f8:	e001      	b.n	80033fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10b      	bne.n	800341c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003408:	f043 0220 	orr.w	r2, r3, #32
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e06a      	b.n	80034f2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff ff57 	bl	80032d2 <LL_ADC_REG_IsConversionOngoing>
 8003424:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff ff51 	bl	80032d2 <LL_ADC_REG_IsConversionOngoing>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d14c      	bne.n	80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003436:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003438:	2b00      	cmp	r3, #0
 800343a:	d149      	bne.n	80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800343c:	4b30      	ldr	r3, [pc, #192]	; (8003500 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800343e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d028      	beq.n	800349a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	6859      	ldr	r1, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800345a:	035b      	lsls	r3, r3, #13
 800345c:	430b      	orrs	r3, r1
 800345e:	431a      	orrs	r2, r3
 8003460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003462:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003464:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003468:	f7ff fef3 	bl	8003252 <LL_ADC_IsEnabled>
 800346c:	4604      	mov	r4, r0
 800346e:	4823      	ldr	r0, [pc, #140]	; (80034fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003470:	f7ff feef 	bl	8003252 <LL_ADC_IsEnabled>
 8003474:	4603      	mov	r3, r0
 8003476:	4323      	orrs	r3, r4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d133      	bne.n	80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800347c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003484:	f023 030f 	bic.w	r3, r3, #15
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	6811      	ldr	r1, [r2, #0]
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	6892      	ldr	r2, [r2, #8]
 8003490:	430a      	orrs	r2, r1
 8003492:	431a      	orrs	r2, r3
 8003494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003496:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003498:	e024      	b.n	80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800349a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034a6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80034aa:	f7ff fed2 	bl	8003252 <LL_ADC_IsEnabled>
 80034ae:	4604      	mov	r4, r0
 80034b0:	4812      	ldr	r0, [pc, #72]	; (80034fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80034b2:	f7ff fece 	bl	8003252 <LL_ADC_IsEnabled>
 80034b6:	4603      	mov	r3, r0
 80034b8:	4323      	orrs	r3, r4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d112      	bne.n	80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034c6:	f023 030f 	bic.w	r3, r3, #15
 80034ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80034cc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034ce:	e009      	b.n	80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d4:	f043 0220 	orr.w	r2, r3, #32
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80034e2:	e000      	b.n	80034e6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80034ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3784      	adds	r7, #132	; 0x84
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd90      	pop	{r4, r7, pc}
 80034fa:	bf00      	nop
 80034fc:	50000100 	.word	0x50000100
 8003500:	50000300 	.word	0x50000300

08003504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003514:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <__NVIC_SetPriorityGrouping+0x44>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003520:	4013      	ands	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800352c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003536:	4a04      	ldr	r2, [pc, #16]	; (8003548 <__NVIC_SetPriorityGrouping+0x44>)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	60d3      	str	r3, [r2, #12]
}
 800353c:	bf00      	nop
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003550:	4b04      	ldr	r3, [pc, #16]	; (8003564 <__NVIC_GetPriorityGrouping+0x18>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	0a1b      	lsrs	r3, r3, #8
 8003556:	f003 0307 	and.w	r3, r3, #7
}
 800355a:	4618      	mov	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	e000ed00 	.word	0xe000ed00

08003568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	2b00      	cmp	r3, #0
 8003578:	db0b      	blt.n	8003592 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	f003 021f 	and.w	r2, r3, #31
 8003580:	4907      	ldr	r1, [pc, #28]	; (80035a0 <__NVIC_EnableIRQ+0x38>)
 8003582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	2001      	movs	r0, #1
 800358a:	fa00 f202 	lsl.w	r2, r0, r2
 800358e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	e000e100 	.word	0xe000e100

080035a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	6039      	str	r1, [r7, #0]
 80035ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	db0a      	blt.n	80035ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	490c      	ldr	r1, [pc, #48]	; (80035f0 <__NVIC_SetPriority+0x4c>)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	0112      	lsls	r2, r2, #4
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	440b      	add	r3, r1
 80035c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035cc:	e00a      	b.n	80035e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4908      	ldr	r1, [pc, #32]	; (80035f4 <__NVIC_SetPriority+0x50>)
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	3b04      	subs	r3, #4
 80035dc:	0112      	lsls	r2, r2, #4
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	440b      	add	r3, r1
 80035e2:	761a      	strb	r2, [r3, #24]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000e100 	.word	0xe000e100
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b089      	sub	sp, #36	; 0x24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f1c3 0307 	rsb	r3, r3, #7
 8003612:	2b04      	cmp	r3, #4
 8003614:	bf28      	it	cs
 8003616:	2304      	movcs	r3, #4
 8003618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3304      	adds	r3, #4
 800361e:	2b06      	cmp	r3, #6
 8003620:	d902      	bls.n	8003628 <NVIC_EncodePriority+0x30>
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3b03      	subs	r3, #3
 8003626:	e000      	b.n	800362a <NVIC_EncodePriority+0x32>
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800362c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43da      	mvns	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	401a      	ands	r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003640:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa01 f303 	lsl.w	r3, r1, r3
 800364a:	43d9      	mvns	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	4313      	orrs	r3, r2
         );
}
 8003652:	4618      	mov	r0, r3
 8003654:	3724      	adds	r7, #36	; 0x24
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3b01      	subs	r3, #1
 800366c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003670:	d301      	bcc.n	8003676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003672:	2301      	movs	r3, #1
 8003674:	e00f      	b.n	8003696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003676:	4a0a      	ldr	r2, [pc, #40]	; (80036a0 <SysTick_Config+0x40>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800367e:	210f      	movs	r1, #15
 8003680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003684:	f7ff ff8e 	bl	80035a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <SysTick_Config+0x40>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800368e:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <SysTick_Config+0x40>)
 8003690:	2207      	movs	r2, #7
 8003692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	e000e010 	.word	0xe000e010

080036a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff29 	bl	8003504 <__NVIC_SetPriorityGrouping>
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4603      	mov	r3, r0
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036c8:	f7ff ff40 	bl	800354c <__NVIC_GetPriorityGrouping>
 80036cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	68b9      	ldr	r1, [r7, #8]
 80036d2:	6978      	ldr	r0, [r7, #20]
 80036d4:	f7ff ff90 	bl	80035f8 <NVIC_EncodePriority>
 80036d8:	4602      	mov	r2, r0
 80036da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036de:	4611      	mov	r1, r2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff ff5f 	bl	80035a4 <__NVIC_SetPriority>
}
 80036e6:	bf00      	nop
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	4603      	mov	r3, r0
 80036f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff ff33 	bl	8003568 <__NVIC_EnableIRQ>
}
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff ffa4 	bl	8003660 <SysTick_Config>
 8003718:	4603      	mov	r3, r0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e08d      	b.n	8003852 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	4b47      	ldr	r3, [pc, #284]	; (800385c <HAL_DMA_Init+0x138>)
 800373e:	429a      	cmp	r2, r3
 8003740:	d80f      	bhi.n	8003762 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	4b45      	ldr	r3, [pc, #276]	; (8003860 <HAL_DMA_Init+0x13c>)
 800374a:	4413      	add	r3, r2
 800374c:	4a45      	ldr	r2, [pc, #276]	; (8003864 <HAL_DMA_Init+0x140>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	091b      	lsrs	r3, r3, #4
 8003754:	009a      	lsls	r2, r3, #2
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a42      	ldr	r2, [pc, #264]	; (8003868 <HAL_DMA_Init+0x144>)
 800375e:	641a      	str	r2, [r3, #64]	; 0x40
 8003760:	e00e      	b.n	8003780 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	4b40      	ldr	r3, [pc, #256]	; (800386c <HAL_DMA_Init+0x148>)
 800376a:	4413      	add	r3, r2
 800376c:	4a3d      	ldr	r2, [pc, #244]	; (8003864 <HAL_DMA_Init+0x140>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	009a      	lsls	r2, r3, #2
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a3c      	ldr	r2, [pc, #240]	; (8003870 <HAL_DMA_Init+0x14c>)
 800377e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f9b6 	bl	8003b44 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037e0:	d102      	bne.n	80037e8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037fc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d010      	beq.n	8003828 <HAL_DMA_Init+0x104>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b04      	cmp	r3, #4
 800380c:	d80c      	bhi.n	8003828 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f9d6 	bl	8003bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	e008      	b.n	800383a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40020407 	.word	0x40020407
 8003860:	bffdfff8 	.word	0xbffdfff8
 8003864:	cccccccd 	.word	0xcccccccd
 8003868:	40020000 	.word	0x40020000
 800386c:	bffdfbf8 	.word	0xbffdfbf8
 8003870:	40020400 	.word	0x40020400

08003874 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_DMA_Start_IT+0x20>
 8003890:	2302      	movs	r3, #2
 8003892:	e066      	b.n	8003962 <HAL_DMA_Start_IT+0xee>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d155      	bne.n	8003954 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f8fb 	bl	8003ac8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d008      	beq.n	80038ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 020e 	orr.w	r2, r2, #14
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	e00f      	b.n	800390c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0204 	bic.w	r2, r2, #4
 80038fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 020a 	orr.w	r2, r2, #10
 800390a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d007      	beq.n	800392a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003928:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392e:	2b00      	cmp	r3, #0
 8003930:	d007      	beq.n	8003942 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003940:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0201 	orr.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	e005      	b.n	8003960 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800395c:	2302      	movs	r3, #2
 800395e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003960:	7dfb      	ldrb	r3, [r7, #23]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	f003 031f 	and.w	r3, r3, #31
 800398a:	2204      	movs	r2, #4
 800398c:	409a      	lsls	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4013      	ands	r3, r2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d026      	beq.n	80039e4 <HAL_DMA_IRQHandler+0x7a>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d021      	beq.n	80039e4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d107      	bne.n	80039be <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0204 	bic.w	r2, r2, #4
 80039bc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	f003 021f 	and.w	r2, r3, #31
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	2104      	movs	r1, #4
 80039cc:	fa01 f202 	lsl.w	r2, r1, r2
 80039d0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d071      	beq.n	8003abe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80039e2:	e06c      	b.n	8003abe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	2202      	movs	r2, #2
 80039ee:	409a      	lsls	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d02e      	beq.n	8003a56 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d029      	beq.n	8003a56 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0320 	and.w	r3, r3, #32
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10b      	bne.n	8003a28 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 020a 	bic.w	r2, r2, #10
 8003a1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2c:	f003 021f 	and.w	r2, r3, #31
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	2102      	movs	r1, #2
 8003a36:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d038      	beq.n	8003abe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a54:	e033      	b.n	8003abe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	f003 031f 	and.w	r3, r3, #31
 8003a5e:	2208      	movs	r2, #8
 8003a60:	409a      	lsls	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d02a      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d025      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 020e 	bic.w	r2, r2, #14
 8003a82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	f003 021f 	and.w	r2, r3, #31
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	2101      	movs	r1, #1
 8003a92:	fa01 f202 	lsl.w	r2, r1, r2
 8003a96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d004      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003abe:	bf00      	nop
 8003ac0:	bf00      	nop
}
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ade:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d004      	beq.n	8003af2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003af0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	f003 021f 	and.w	r2, r3, #31
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	2101      	movs	r1, #1
 8003b00:	fa01 f202 	lsl.w	r2, r1, r2
 8003b04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b10      	cmp	r3, #16
 8003b14:	d108      	bne.n	8003b28 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b26:	e007      	b.n	8003b38 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	60da      	str	r2, [r3, #12]
}
 8003b38:	bf00      	nop
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	4b16      	ldr	r3, [pc, #88]	; (8003bac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d802      	bhi.n	8003b5e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003b58:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	e001      	b.n	8003b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003b5e:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b60:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	3b08      	subs	r3, #8
 8003b6e:	4a12      	ldr	r2, [pc, #72]	; (8003bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b70:	fba2 2303 	umull	r2, r3, r2, r3
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7c:	089b      	lsrs	r3, r3, #2
 8003b7e:	009a      	lsls	r2, r3, #2
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4413      	add	r3, r2
 8003b84:	461a      	mov	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a0b      	ldr	r2, [pc, #44]	; (8003bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 031f 	and.w	r3, r3, #31
 8003b96:	2201      	movs	r2, #1
 8003b98:	409a      	lsls	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b9e:	bf00      	nop
 8003ba0:	371c      	adds	r7, #28
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40020407 	.word	0x40020407
 8003bb0:	40020800 	.word	0x40020800
 8003bb4:	40020820 	.word	0x40020820
 8003bb8:	cccccccd 	.word	0xcccccccd
 8003bbc:	40020880 	.word	0x40020880

08003bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	461a      	mov	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a08      	ldr	r2, [pc, #32]	; (8003c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003be2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	2201      	movs	r2, #1
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	1000823f 	.word	0x1000823f
 8003c04:	40020940 	.word	0x40020940

08003c08 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e147      	b.n	8003eaa <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fd fec6 	bl	80019c0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0210 	bic.w	r2, r2, #16
 8003c42:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c44:	f7fe f8f6 	bl	8001e34 <HAL_GetTick>
 8003c48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003c4a:	e012      	b.n	8003c72 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003c4c:	f7fe f8f2 	bl	8001e34 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b0a      	cmp	r3, #10
 8003c58:	d90b      	bls.n	8003c72 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5e:	f043 0201 	orr.w	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2203      	movs	r2, #3
 8003c6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e11b      	b.n	8003eaa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d0e5      	beq.n	8003c4c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c90:	f7fe f8d0 	bl	8001e34 <HAL_GetTick>
 8003c94:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003c96:	e012      	b.n	8003cbe <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003c98:	f7fe f8cc 	bl	8001e34 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b0a      	cmp	r3, #10
 8003ca4:	d90b      	bls.n	8003cbe <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003caa:	f043 0201 	orr.w	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e0f5      	b.n	8003eaa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0e5      	beq.n	8003c98 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0202 	orr.w	r2, r2, #2
 8003cda:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a74      	ldr	r2, [pc, #464]	; (8003eb4 <HAL_FDCAN_Init+0x2ac>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d103      	bne.n	8003cee <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003ce6:	4a74      	ldr	r2, [pc, #464]	; (8003eb8 <HAL_FDCAN_Init+0x2b0>)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	7c1b      	ldrb	r3, [r3, #16]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d108      	bne.n	8003d08 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699a      	ldr	r2, [r3, #24]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d04:	619a      	str	r2, [r3, #24]
 8003d06:	e007      	b.n	8003d18 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d16:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	7c5b      	ldrb	r3, [r3, #17]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d108      	bne.n	8003d32 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d2e:	619a      	str	r2, [r3, #24]
 8003d30:	e007      	b.n	8003d42 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699a      	ldr	r2, [r3, #24]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d40:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	7c9b      	ldrb	r3, [r3, #18]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d108      	bne.n	8003d5c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699a      	ldr	r2, [r3, #24]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d58:	619a      	str	r2, [r3, #24]
 8003d5a:	e007      	b.n	8003d6c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d6a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699a      	ldr	r2, [r3, #24]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003d90:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0210 	bic.w	r2, r2, #16
 8003da0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d108      	bne.n	8003dbc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699a      	ldr	r2, [r3, #24]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0204 	orr.w	r2, r2, #4
 8003db8:	619a      	str	r2, [r3, #24]
 8003dba:	e02c      	b.n	8003e16 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d028      	beq.n	8003e16 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d01c      	beq.n	8003e06 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003dda:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0210 	orr.w	r2, r2, #16
 8003dea:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d110      	bne.n	8003e16 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699a      	ldr	r2, [r3, #24]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0220 	orr.w	r2, r2, #32
 8003e02:	619a      	str	r2, [r3, #24]
 8003e04:	e007      	b.n	8003e16 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699a      	ldr	r2, [r3, #24]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 0220 	orr.w	r2, r2, #32
 8003e14:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e26:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e2e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003e3e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e40:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e4a:	d115      	bne.n	8003e78 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	3b01      	subs	r3, #1
 8003e58:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e5a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	3b01      	subs	r3, #1
 8003e62:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003e64:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003e74:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e76:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f814 	bl	8003ebc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40006400 	.word	0x40006400
 8003eb8:	40006500 	.word	0x40006500

08003ebc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003ec4:	4b27      	ldr	r3, [pc, #156]	; (8003f64 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003ec6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ede:	041a      	lsls	r2, r3, #16
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003efc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	061a      	lsls	r2, r3, #24
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	e005      	b.n	8003f4a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	3304      	adds	r3, #4
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d3f3      	bcc.n	8003f3e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003f56:	bf00      	nop
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	4000a400 	.word	0x4000a400

08003f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f76:	e15a      	b.n	800422e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	fa01 f303 	lsl.w	r3, r1, r3
 8003f84:	4013      	ands	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 814c 	beq.w	8004228 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d005      	beq.n	8003fa8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d130      	bne.n	800400a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fde:	2201      	movs	r2, #1
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4013      	ands	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	091b      	lsrs	r3, r3, #4
 8003ff4:	f003 0201 	and.w	r2, r3, #1
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b03      	cmp	r3, #3
 8004014:	d017      	beq.n	8004046 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	2203      	movs	r2, #3
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4013      	ands	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d123      	bne.n	800409a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	08da      	lsrs	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3208      	adds	r2, #8
 800405a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800405e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	220f      	movs	r2, #15
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	43db      	mvns	r3, r3
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4013      	ands	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	08da      	lsrs	r2, r3, #3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3208      	adds	r2, #8
 8004094:	6939      	ldr	r1, [r7, #16]
 8004096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	2203      	movs	r2, #3
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43db      	mvns	r3, r3
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4013      	ands	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f003 0203 	and.w	r2, r3, #3
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 80a6 	beq.w	8004228 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040dc:	4b5b      	ldr	r3, [pc, #364]	; (800424c <HAL_GPIO_Init+0x2e4>)
 80040de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e0:	4a5a      	ldr	r2, [pc, #360]	; (800424c <HAL_GPIO_Init+0x2e4>)
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	6613      	str	r3, [r2, #96]	; 0x60
 80040e8:	4b58      	ldr	r3, [pc, #352]	; (800424c <HAL_GPIO_Init+0x2e4>)
 80040ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040f4:	4a56      	ldr	r2, [pc, #344]	; (8004250 <HAL_GPIO_Init+0x2e8>)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	089b      	lsrs	r3, r3, #2
 80040fa:	3302      	adds	r3, #2
 80040fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004100:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	220f      	movs	r2, #15
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4013      	ands	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800411e:	d01f      	beq.n	8004160 <HAL_GPIO_Init+0x1f8>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a4c      	ldr	r2, [pc, #304]	; (8004254 <HAL_GPIO_Init+0x2ec>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d019      	beq.n	800415c <HAL_GPIO_Init+0x1f4>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a4b      	ldr	r2, [pc, #300]	; (8004258 <HAL_GPIO_Init+0x2f0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d013      	beq.n	8004158 <HAL_GPIO_Init+0x1f0>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a4a      	ldr	r2, [pc, #296]	; (800425c <HAL_GPIO_Init+0x2f4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d00d      	beq.n	8004154 <HAL_GPIO_Init+0x1ec>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a49      	ldr	r2, [pc, #292]	; (8004260 <HAL_GPIO_Init+0x2f8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d007      	beq.n	8004150 <HAL_GPIO_Init+0x1e8>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a48      	ldr	r2, [pc, #288]	; (8004264 <HAL_GPIO_Init+0x2fc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d101      	bne.n	800414c <HAL_GPIO_Init+0x1e4>
 8004148:	2305      	movs	r3, #5
 800414a:	e00a      	b.n	8004162 <HAL_GPIO_Init+0x1fa>
 800414c:	2306      	movs	r3, #6
 800414e:	e008      	b.n	8004162 <HAL_GPIO_Init+0x1fa>
 8004150:	2304      	movs	r3, #4
 8004152:	e006      	b.n	8004162 <HAL_GPIO_Init+0x1fa>
 8004154:	2303      	movs	r3, #3
 8004156:	e004      	b.n	8004162 <HAL_GPIO_Init+0x1fa>
 8004158:	2302      	movs	r3, #2
 800415a:	e002      	b.n	8004162 <HAL_GPIO_Init+0x1fa>
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <HAL_GPIO_Init+0x1fa>
 8004160:	2300      	movs	r3, #0
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	f002 0203 	and.w	r2, r2, #3
 8004168:	0092      	lsls	r2, r2, #2
 800416a:	4093      	lsls	r3, r2
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004172:	4937      	ldr	r1, [pc, #220]	; (8004250 <HAL_GPIO_Init+0x2e8>)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	089b      	lsrs	r3, r3, #2
 8004178:	3302      	adds	r3, #2
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004180:	4b39      	ldr	r3, [pc, #228]	; (8004268 <HAL_GPIO_Init+0x300>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	43db      	mvns	r3, r3
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4013      	ands	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041a4:	4a30      	ldr	r2, [pc, #192]	; (8004268 <HAL_GPIO_Init+0x300>)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041aa:	4b2f      	ldr	r3, [pc, #188]	; (8004268 <HAL_GPIO_Init+0x300>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4013      	ands	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041ce:	4a26      	ldr	r2, [pc, #152]	; (8004268 <HAL_GPIO_Init+0x300>)
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80041d4:	4b24      	ldr	r3, [pc, #144]	; (8004268 <HAL_GPIO_Init+0x300>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	43db      	mvns	r3, r3
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4013      	ands	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041f8:	4a1b      	ldr	r2, [pc, #108]	; (8004268 <HAL_GPIO_Init+0x300>)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80041fe:	4b1a      	ldr	r3, [pc, #104]	; (8004268 <HAL_GPIO_Init+0x300>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	43db      	mvns	r3, r3
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4013      	ands	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004222:	4a11      	ldr	r2, [pc, #68]	; (8004268 <HAL_GPIO_Init+0x300>)
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	3301      	adds	r3, #1
 800422c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	fa22 f303 	lsr.w	r3, r2, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	f47f ae9d 	bne.w	8003f78 <HAL_GPIO_Init+0x10>
  }
}
 800423e:	bf00      	nop
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40021000 	.word	0x40021000
 8004250:	40010000 	.word	0x40010000
 8004254:	48000400 	.word	0x48000400
 8004258:	48000800 	.word	0x48000800
 800425c:	48000c00 	.word	0x48000c00
 8004260:	48001000 	.word	0x48001000
 8004264:	48001400 	.word	0x48001400
 8004268:	40010400 	.word	0x40010400

0800426c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	807b      	strh	r3, [r7, #2]
 8004278:	4613      	mov	r3, r2
 800427a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800427c:	787b      	ldrb	r3, [r7, #1]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004282:	887a      	ldrh	r2, [r7, #2]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004288:	e002      	b.n	8004290 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800428a:	887a      	ldrh	r2, [r7, #2]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d141      	bne.n	800432e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042aa:	4b4b      	ldr	r3, [pc, #300]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b6:	d131      	bne.n	800431c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042b8:	4b47      	ldr	r3, [pc, #284]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042be:	4a46      	ldr	r2, [pc, #280]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042c8:	4b43      	ldr	r3, [pc, #268]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042d0:	4a41      	ldr	r2, [pc, #260]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042d8:	4b40      	ldr	r3, [pc, #256]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2232      	movs	r2, #50	; 0x32
 80042de:	fb02 f303 	mul.w	r3, r2, r3
 80042e2:	4a3f      	ldr	r2, [pc, #252]	; (80043e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	0c9b      	lsrs	r3, r3, #18
 80042ea:	3301      	adds	r3, #1
 80042ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042ee:	e002      	b.n	80042f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042f6:	4b38      	ldr	r3, [pc, #224]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004302:	d102      	bne.n	800430a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f2      	bne.n	80042f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800430a:	4b33      	ldr	r3, [pc, #204]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004316:	d158      	bne.n	80043ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e057      	b.n	80043cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800431c:	4b2e      	ldr	r3, [pc, #184]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800431e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004322:	4a2d      	ldr	r2, [pc, #180]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004328:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800432c:	e04d      	b.n	80043ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004334:	d141      	bne.n	80043ba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004336:	4b28      	ldr	r3, [pc, #160]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800433e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004342:	d131      	bne.n	80043a8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004344:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800434a:	4a23      	ldr	r2, [pc, #140]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004350:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004354:	4b20      	ldr	r3, [pc, #128]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800435c:	4a1e      	ldr	r2, [pc, #120]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800435e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004362:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004364:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2232      	movs	r2, #50	; 0x32
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	4a1c      	ldr	r2, [pc, #112]	; (80043e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	0c9b      	lsrs	r3, r3, #18
 8004376:	3301      	adds	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800437a:	e002      	b.n	8004382 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3b01      	subs	r3, #1
 8004380:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004382:	4b15      	ldr	r3, [pc, #84]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800438a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438e:	d102      	bne.n	8004396 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f2      	bne.n	800437c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004396:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800439e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a2:	d112      	bne.n	80043ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e011      	b.n	80043cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ae:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043b8:	e007      	b.n	80043ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043ba:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043c2:	4a05      	ldr	r2, [pc, #20]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043c8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	40007000 	.word	0x40007000
 80043dc:	20000000 	.word	0x20000000
 80043e0:	431bde83 	.word	0x431bde83

080043e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e2fe      	b.n	80049f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d075      	beq.n	80044ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004402:	4b97      	ldr	r3, [pc, #604]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800440c:	4b94      	ldr	r3, [pc, #592]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f003 0303 	and.w	r3, r3, #3
 8004414:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	2b0c      	cmp	r3, #12
 800441a:	d102      	bne.n	8004422 <HAL_RCC_OscConfig+0x3e>
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2b03      	cmp	r3, #3
 8004420:	d002      	beq.n	8004428 <HAL_RCC_OscConfig+0x44>
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b08      	cmp	r3, #8
 8004426:	d10b      	bne.n	8004440 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004428:	4b8d      	ldr	r3, [pc, #564]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d05b      	beq.n	80044ec <HAL_RCC_OscConfig+0x108>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d157      	bne.n	80044ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e2d9      	b.n	80049f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004448:	d106      	bne.n	8004458 <HAL_RCC_OscConfig+0x74>
 800444a:	4b85      	ldr	r3, [pc, #532]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a84      	ldr	r2, [pc, #528]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	e01d      	b.n	8004494 <HAL_RCC_OscConfig+0xb0>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004460:	d10c      	bne.n	800447c <HAL_RCC_OscConfig+0x98>
 8004462:	4b7f      	ldr	r3, [pc, #508]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a7e      	ldr	r2, [pc, #504]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	4b7c      	ldr	r3, [pc, #496]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a7b      	ldr	r2, [pc, #492]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	e00b      	b.n	8004494 <HAL_RCC_OscConfig+0xb0>
 800447c:	4b78      	ldr	r3, [pc, #480]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a77      	ldr	r2, [pc, #476]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	4b75      	ldr	r3, [pc, #468]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a74      	ldr	r2, [pc, #464]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800448e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d013      	beq.n	80044c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449c:	f7fd fcca 	bl	8001e34 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044a4:	f7fd fcc6 	bl	8001e34 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b64      	cmp	r3, #100	; 0x64
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e29e      	b.n	80049f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044b6:	4b6a      	ldr	r3, [pc, #424]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0xc0>
 80044c2:	e014      	b.n	80044ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c4:	f7fd fcb6 	bl	8001e34 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044cc:	f7fd fcb2 	bl	8001e34 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	; 0x64
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e28a      	b.n	80049f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044de:	4b60      	ldr	r3, [pc, #384]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f0      	bne.n	80044cc <HAL_RCC_OscConfig+0xe8>
 80044ea:	e000      	b.n	80044ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d075      	beq.n	80045e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044fa:	4b59      	ldr	r3, [pc, #356]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 030c 	and.w	r3, r3, #12
 8004502:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004504:	4b56      	ldr	r3, [pc, #344]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	2b0c      	cmp	r3, #12
 8004512:	d102      	bne.n	800451a <HAL_RCC_OscConfig+0x136>
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d002      	beq.n	8004520 <HAL_RCC_OscConfig+0x13c>
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b04      	cmp	r3, #4
 800451e:	d11f      	bne.n	8004560 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004520:	4b4f      	ldr	r3, [pc, #316]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_RCC_OscConfig+0x154>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e25d      	b.n	80049f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004538:	4b49      	ldr	r3, [pc, #292]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	061b      	lsls	r3, r3, #24
 8004546:	4946      	ldr	r1, [pc, #280]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004548:	4313      	orrs	r3, r2
 800454a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800454c:	4b45      	ldr	r3, [pc, #276]	; (8004664 <HAL_RCC_OscConfig+0x280>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f7fd fc23 	bl	8001d9c <HAL_InitTick>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d043      	beq.n	80045e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e249      	b.n	80049f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d023      	beq.n	80045b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004568:	4b3d      	ldr	r3, [pc, #244]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a3c      	ldr	r2, [pc, #240]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800456e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fd fc5e 	bl	8001e34 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800457c:	f7fd fc5a 	bl	8001e34 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e232      	b.n	80049f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800458e:	4b34      	ldr	r3, [pc, #208]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459a:	4b31      	ldr	r3, [pc, #196]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	061b      	lsls	r3, r3, #24
 80045a8:	492d      	ldr	r1, [pc, #180]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	604b      	str	r3, [r1, #4]
 80045ae:	e01a      	b.n	80045e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045b0:	4b2b      	ldr	r3, [pc, #172]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a2a      	ldr	r2, [pc, #168]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 80045b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fd fc3a 	bl	8001e34 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c4:	f7fd fc36 	bl	8001e34 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e20e      	b.n	80049f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045d6:	4b22      	ldr	r3, [pc, #136]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0x1e0>
 80045e2:	e000      	b.n	80045e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d041      	beq.n	8004676 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01c      	beq.n	8004634 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045fa:	4b19      	ldr	r3, [pc, #100]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 80045fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004600:	4a17      	ldr	r2, [pc, #92]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460a:	f7fd fc13 	bl	8001e34 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004612:	f7fd fc0f 	bl	8001e34 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e1e7      	b.n	80049f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004624:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0ef      	beq.n	8004612 <HAL_RCC_OscConfig+0x22e>
 8004632:	e020      	b.n	8004676 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800463a:	4a09      	ldr	r2, [pc, #36]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800463c:	f023 0301 	bic.w	r3, r3, #1
 8004640:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004644:	f7fd fbf6 	bl	8001e34 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800464a:	e00d      	b.n	8004668 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800464c:	f7fd fbf2 	bl	8001e34 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d906      	bls.n	8004668 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e1ca      	b.n	80049f4 <HAL_RCC_OscConfig+0x610>
 800465e:	bf00      	nop
 8004660:	40021000 	.word	0x40021000
 8004664:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004668:	4b8c      	ldr	r3, [pc, #560]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 800466a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1ea      	bne.n	800464c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 80a6 	beq.w	80047d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004684:	2300      	movs	r3, #0
 8004686:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004688:	4b84      	ldr	r3, [pc, #528]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 800468a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_RCC_OscConfig+0x2b4>
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <HAL_RCC_OscConfig+0x2b6>
 8004698:	2300      	movs	r3, #0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00d      	beq.n	80046ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800469e:	4b7f      	ldr	r3, [pc, #508]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 80046a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a2:	4a7e      	ldr	r2, [pc, #504]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 80046a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a8:	6593      	str	r3, [r2, #88]	; 0x58
 80046aa:	4b7c      	ldr	r3, [pc, #496]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 80046ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046b6:	2301      	movs	r3, #1
 80046b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ba:	4b79      	ldr	r3, [pc, #484]	; (80048a0 <HAL_RCC_OscConfig+0x4bc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d118      	bne.n	80046f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046c6:	4b76      	ldr	r3, [pc, #472]	; (80048a0 <HAL_RCC_OscConfig+0x4bc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a75      	ldr	r2, [pc, #468]	; (80048a0 <HAL_RCC_OscConfig+0x4bc>)
 80046cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d2:	f7fd fbaf 	bl	8001e34 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046da:	f7fd fbab 	bl	8001e34 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e183      	b.n	80049f4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ec:	4b6c      	ldr	r3, [pc, #432]	; (80048a0 <HAL_RCC_OscConfig+0x4bc>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0f0      	beq.n	80046da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d108      	bne.n	8004712 <HAL_RCC_OscConfig+0x32e>
 8004700:	4b66      	ldr	r3, [pc, #408]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004706:	4a65      	ldr	r2, [pc, #404]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004710:	e024      	b.n	800475c <HAL_RCC_OscConfig+0x378>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b05      	cmp	r3, #5
 8004718:	d110      	bne.n	800473c <HAL_RCC_OscConfig+0x358>
 800471a:	4b60      	ldr	r3, [pc, #384]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004720:	4a5e      	ldr	r2, [pc, #376]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004722:	f043 0304 	orr.w	r3, r3, #4
 8004726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800472a:	4b5c      	ldr	r3, [pc, #368]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 800472c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004730:	4a5a      	ldr	r2, [pc, #360]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800473a:	e00f      	b.n	800475c <HAL_RCC_OscConfig+0x378>
 800473c:	4b57      	ldr	r3, [pc, #348]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 800473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004742:	4a56      	ldr	r2, [pc, #344]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004744:	f023 0301 	bic.w	r3, r3, #1
 8004748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800474c:	4b53      	ldr	r3, [pc, #332]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004752:	4a52      	ldr	r2, [pc, #328]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004754:	f023 0304 	bic.w	r3, r3, #4
 8004758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d016      	beq.n	8004792 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004764:	f7fd fb66 	bl	8001e34 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800476a:	e00a      	b.n	8004782 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476c:	f7fd fb62 	bl	8001e34 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f241 3288 	movw	r2, #5000	; 0x1388
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e138      	b.n	80049f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004782:	4b46      	ldr	r3, [pc, #280]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0ed      	beq.n	800476c <HAL_RCC_OscConfig+0x388>
 8004790:	e015      	b.n	80047be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004792:	f7fd fb4f 	bl	8001e34 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004798:	e00a      	b.n	80047b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479a:	f7fd fb4b 	bl	8001e34 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e121      	b.n	80049f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047b0:	4b3a      	ldr	r3, [pc, #232]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1ed      	bne.n	800479a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047be:	7ffb      	ldrb	r3, [r7, #31]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d105      	bne.n	80047d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c4:	4b35      	ldr	r3, [pc, #212]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 80047c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c8:	4a34      	ldr	r2, [pc, #208]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 80047ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0320 	and.w	r3, r3, #32
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d03c      	beq.n	8004856 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01c      	beq.n	800481e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047e4:	4b2d      	ldr	r3, [pc, #180]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 80047e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ea:	4a2c      	ldr	r2, [pc, #176]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f4:	f7fd fb1e 	bl	8001e34 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047fc:	f7fd fb1a 	bl	8001e34 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e0f2      	b.n	80049f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800480e:	4b23      	ldr	r3, [pc, #140]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004810:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0ef      	beq.n	80047fc <HAL_RCC_OscConfig+0x418>
 800481c:	e01b      	b.n	8004856 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800481e:	4b1f      	ldr	r3, [pc, #124]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004820:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004824:	4a1d      	ldr	r2, [pc, #116]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482e:	f7fd fb01 	bl	8001e34 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004836:	f7fd fafd 	bl	8001e34 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e0d5      	b.n	80049f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004848:	4b14      	ldr	r3, [pc, #80]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 800484a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1ef      	bne.n	8004836 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 80c9 	beq.w	80049f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004860:	4b0e      	ldr	r3, [pc, #56]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f003 030c 	and.w	r3, r3, #12
 8004868:	2b0c      	cmp	r3, #12
 800486a:	f000 8083 	beq.w	8004974 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d15e      	bne.n	8004934 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004876:	4b09      	ldr	r3, [pc, #36]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a08      	ldr	r2, [pc, #32]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 800487c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004882:	f7fd fad7 	bl	8001e34 <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004888:	e00c      	b.n	80048a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800488a:	f7fd fad3 	bl	8001e34 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d905      	bls.n	80048a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e0ab      	b.n	80049f4 <HAL_RCC_OscConfig+0x610>
 800489c:	40021000 	.word	0x40021000
 80048a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048a4:	4b55      	ldr	r3, [pc, #340]	; (80049fc <HAL_RCC_OscConfig+0x618>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1ec      	bne.n	800488a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048b0:	4b52      	ldr	r3, [pc, #328]	; (80049fc <HAL_RCC_OscConfig+0x618>)
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	4b52      	ldr	r3, [pc, #328]	; (8004a00 <HAL_RCC_OscConfig+0x61c>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6a11      	ldr	r1, [r2, #32]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048c0:	3a01      	subs	r2, #1
 80048c2:	0112      	lsls	r2, r2, #4
 80048c4:	4311      	orrs	r1, r2
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80048ca:	0212      	lsls	r2, r2, #8
 80048cc:	4311      	orrs	r1, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048d2:	0852      	lsrs	r2, r2, #1
 80048d4:	3a01      	subs	r2, #1
 80048d6:	0552      	lsls	r2, r2, #21
 80048d8:	4311      	orrs	r1, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048de:	0852      	lsrs	r2, r2, #1
 80048e0:	3a01      	subs	r2, #1
 80048e2:	0652      	lsls	r2, r2, #25
 80048e4:	4311      	orrs	r1, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80048ea:	06d2      	lsls	r2, r2, #27
 80048ec:	430a      	orrs	r2, r1
 80048ee:	4943      	ldr	r1, [pc, #268]	; (80049fc <HAL_RCC_OscConfig+0x618>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048f4:	4b41      	ldr	r3, [pc, #260]	; (80049fc <HAL_RCC_OscConfig+0x618>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a40      	ldr	r2, [pc, #256]	; (80049fc <HAL_RCC_OscConfig+0x618>)
 80048fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004900:	4b3e      	ldr	r3, [pc, #248]	; (80049fc <HAL_RCC_OscConfig+0x618>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4a3d      	ldr	r2, [pc, #244]	; (80049fc <HAL_RCC_OscConfig+0x618>)
 8004906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800490a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490c:	f7fd fa92 	bl	8001e34 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004914:	f7fd fa8e 	bl	8001e34 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e066      	b.n	80049f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004926:	4b35      	ldr	r3, [pc, #212]	; (80049fc <HAL_RCC_OscConfig+0x618>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f0      	beq.n	8004914 <HAL_RCC_OscConfig+0x530>
 8004932:	e05e      	b.n	80049f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004934:	4b31      	ldr	r3, [pc, #196]	; (80049fc <HAL_RCC_OscConfig+0x618>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a30      	ldr	r2, [pc, #192]	; (80049fc <HAL_RCC_OscConfig+0x618>)
 800493a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800493e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004940:	f7fd fa78 	bl	8001e34 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004948:	f7fd fa74 	bl	8001e34 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e04c      	b.n	80049f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800495a:	4b28      	ldr	r3, [pc, #160]	; (80049fc <HAL_RCC_OscConfig+0x618>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004966:	4b25      	ldr	r3, [pc, #148]	; (80049fc <HAL_RCC_OscConfig+0x618>)
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	4924      	ldr	r1, [pc, #144]	; (80049fc <HAL_RCC_OscConfig+0x618>)
 800496c:	4b25      	ldr	r3, [pc, #148]	; (8004a04 <HAL_RCC_OscConfig+0x620>)
 800496e:	4013      	ands	r3, r2
 8004970:	60cb      	str	r3, [r1, #12]
 8004972:	e03e      	b.n	80049f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e039      	b.n	80049f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004980:	4b1e      	ldr	r3, [pc, #120]	; (80049fc <HAL_RCC_OscConfig+0x618>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f003 0203 	and.w	r2, r3, #3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	429a      	cmp	r2, r3
 8004992:	d12c      	bne.n	80049ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	3b01      	subs	r3, #1
 80049a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d123      	bne.n	80049ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d11b      	bne.n	80049ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d113      	bne.n	80049ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	085b      	lsrs	r3, r3, #1
 80049d2:	3b01      	subs	r3, #1
 80049d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d109      	bne.n	80049ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e4:	085b      	lsrs	r3, r3, #1
 80049e6:	3b01      	subs	r3, #1
 80049e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d001      	beq.n	80049f2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3720      	adds	r7, #32
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40021000 	.word	0x40021000
 8004a00:	019f800c 	.word	0x019f800c
 8004a04:	feeefffc 	.word	0xfeeefffc

08004a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a12:	2300      	movs	r3, #0
 8004a14:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e11e      	b.n	8004c5e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a20:	4b91      	ldr	r3, [pc, #580]	; (8004c68 <HAL_RCC_ClockConfig+0x260>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d910      	bls.n	8004a50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2e:	4b8e      	ldr	r3, [pc, #568]	; (8004c68 <HAL_RCC_ClockConfig+0x260>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f023 020f 	bic.w	r2, r3, #15
 8004a36:	498c      	ldr	r1, [pc, #560]	; (8004c68 <HAL_RCC_ClockConfig+0x260>)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3e:	4b8a      	ldr	r3, [pc, #552]	; (8004c68 <HAL_RCC_ClockConfig+0x260>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e106      	b.n	8004c5e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d073      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d129      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a64:	4b81      	ldr	r3, [pc, #516]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0f4      	b.n	8004c5e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004a74:	f000 f99e 	bl	8004db4 <RCC_GetSysClockFreqFromPLLSource>
 8004a78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4a7c      	ldr	r2, [pc, #496]	; (8004c70 <HAL_RCC_ClockConfig+0x268>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d93f      	bls.n	8004b02 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a82:	4b7a      	ldr	r3, [pc, #488]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d033      	beq.n	8004b02 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d12f      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004aa2:	4b72      	ldr	r3, [pc, #456]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aaa:	4a70      	ldr	r2, [pc, #448]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ab2:	2380      	movs	r3, #128	; 0x80
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	e024      	b.n	8004b02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d107      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ac0:	4b6a      	ldr	r3, [pc, #424]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d109      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e0c6      	b.n	8004c5e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ad0:	4b66      	ldr	r3, [pc, #408]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e0be      	b.n	8004c5e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ae0:	f000 f8ce 	bl	8004c80 <HAL_RCC_GetSysClockFreq>
 8004ae4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	4a61      	ldr	r2, [pc, #388]	; (8004c70 <HAL_RCC_ClockConfig+0x268>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d909      	bls.n	8004b02 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004aee:	4b5f      	ldr	r3, [pc, #380]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004af6:	4a5d      	ldr	r2, [pc, #372]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004afc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004afe:	2380      	movs	r3, #128	; 0x80
 8004b00:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b02:	4b5a      	ldr	r3, [pc, #360]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f023 0203 	bic.w	r2, r3, #3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	4957      	ldr	r1, [pc, #348]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b14:	f7fd f98e 	bl	8001e34 <HAL_GetTick>
 8004b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1a:	e00a      	b.n	8004b32 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b1c:	f7fd f98a 	bl	8001e34 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e095      	b.n	8004c5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b32:	4b4e      	ldr	r3, [pc, #312]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 020c 	and.w	r2, r3, #12
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d1eb      	bne.n	8004b1c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d023      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b5c:	4b43      	ldr	r3, [pc, #268]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	4a42      	ldr	r2, [pc, #264]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004b62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b66:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d007      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004b74:	4b3d      	ldr	r3, [pc, #244]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004b7c:	4a3b      	ldr	r2, [pc, #236]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004b7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b84:	4b39      	ldr	r3, [pc, #228]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	4936      	ldr	r1, [pc, #216]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
 8004b96:	e008      	b.n	8004baa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2b80      	cmp	r3, #128	; 0x80
 8004b9c:	d105      	bne.n	8004baa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b9e:	4b33      	ldr	r3, [pc, #204]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	4a32      	ldr	r2, [pc, #200]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004ba4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ba8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004baa:	4b2f      	ldr	r3, [pc, #188]	; (8004c68 <HAL_RCC_ClockConfig+0x260>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d21d      	bcs.n	8004bf4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb8:	4b2b      	ldr	r3, [pc, #172]	; (8004c68 <HAL_RCC_ClockConfig+0x260>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f023 020f 	bic.w	r2, r3, #15
 8004bc0:	4929      	ldr	r1, [pc, #164]	; (8004c68 <HAL_RCC_ClockConfig+0x260>)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004bc8:	f7fd f934 	bl	8001e34 <HAL_GetTick>
 8004bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bce:	e00a      	b.n	8004be6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd0:	f7fd f930 	bl	8001e34 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e03b      	b.n	8004c5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be6:	4b20      	ldr	r3, [pc, #128]	; (8004c68 <HAL_RCC_ClockConfig+0x260>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d1ed      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d008      	beq.n	8004c12 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c00:	4b1a      	ldr	r3, [pc, #104]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	4917      	ldr	r1, [pc, #92]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d009      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c1e:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	490f      	ldr	r1, [pc, #60]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c32:	f000 f825 	bl	8004c80 <HAL_RCC_GetSysClockFreq>
 8004c36:	4602      	mov	r2, r0
 8004c38:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <HAL_RCC_ClockConfig+0x264>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	091b      	lsrs	r3, r3, #4
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	490c      	ldr	r1, [pc, #48]	; (8004c74 <HAL_RCC_ClockConfig+0x26c>)
 8004c44:	5ccb      	ldrb	r3, [r1, r3]
 8004c46:	f003 031f 	and.w	r3, r3, #31
 8004c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4e:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <HAL_RCC_ClockConfig+0x270>)
 8004c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c52:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <HAL_RCC_ClockConfig+0x274>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fd f8a0 	bl	8001d9c <HAL_InitTick>
 8004c5c:	4603      	mov	r3, r0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40022000 	.word	0x40022000
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	04c4b400 	.word	0x04c4b400
 8004c74:	08008b24 	.word	0x08008b24
 8004c78:	20000000 	.word	0x20000000
 8004c7c:	20000004 	.word	0x20000004

08004c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c86:	4b2c      	ldr	r3, [pc, #176]	; (8004d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 030c 	and.w	r3, r3, #12
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d102      	bne.n	8004c98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c92:	4b2a      	ldr	r3, [pc, #168]	; (8004d3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	e047      	b.n	8004d28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c98:	4b27      	ldr	r3, [pc, #156]	; (8004d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 030c 	and.w	r3, r3, #12
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d102      	bne.n	8004caa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ca4:	4b26      	ldr	r3, [pc, #152]	; (8004d40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	e03e      	b.n	8004d28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004caa:	4b23      	ldr	r3, [pc, #140]	; (8004d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b0c      	cmp	r3, #12
 8004cb4:	d136      	bne.n	8004d24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cb6:	4b20      	ldr	r3, [pc, #128]	; (8004d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cc0:	4b1d      	ldr	r3, [pc, #116]	; (8004d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	091b      	lsrs	r3, r3, #4
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	3301      	adds	r3, #1
 8004ccc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d10c      	bne.n	8004cee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cd4:	4a1a      	ldr	r2, [pc, #104]	; (8004d40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cdc:	4a16      	ldr	r2, [pc, #88]	; (8004d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cde:	68d2      	ldr	r2, [r2, #12]
 8004ce0:	0a12      	lsrs	r2, r2, #8
 8004ce2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ce6:	fb02 f303 	mul.w	r3, r2, r3
 8004cea:	617b      	str	r3, [r7, #20]
      break;
 8004cec:	e00c      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cee:	4a13      	ldr	r2, [pc, #76]	; (8004d3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf6:	4a10      	ldr	r2, [pc, #64]	; (8004d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cf8:	68d2      	ldr	r2, [r2, #12]
 8004cfa:	0a12      	lsrs	r2, r2, #8
 8004cfc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d00:	fb02 f303 	mul.w	r3, r2, r3
 8004d04:	617b      	str	r3, [r7, #20]
      break;
 8004d06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d08:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	0e5b      	lsrs	r3, r3, #25
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	3301      	adds	r3, #1
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	e001      	b.n	8004d28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d28:	693b      	ldr	r3, [r7, #16]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	371c      	adds	r7, #28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	00f42400 	.word	0x00f42400
 8004d40:	007a1200 	.word	0x007a1200

08004d44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d48:	4b03      	ldr	r3, [pc, #12]	; (8004d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	20000000 	.word	0x20000000

08004d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d60:	f7ff fff0 	bl	8004d44 <HAL_RCC_GetHCLKFreq>
 8004d64:	4602      	mov	r2, r0
 8004d66:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	0a1b      	lsrs	r3, r3, #8
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	4904      	ldr	r1, [pc, #16]	; (8004d84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d72:	5ccb      	ldrb	r3, [r1, r3]
 8004d74:	f003 031f 	and.w	r3, r3, #31
 8004d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40021000 	.word	0x40021000
 8004d84:	08008b34 	.word	0x08008b34

08004d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d8c:	f7ff ffda 	bl	8004d44 <HAL_RCC_GetHCLKFreq>
 8004d90:	4602      	mov	r2, r0
 8004d92:	4b06      	ldr	r3, [pc, #24]	; (8004dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	0adb      	lsrs	r3, r3, #11
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	4904      	ldr	r1, [pc, #16]	; (8004db0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d9e:	5ccb      	ldrb	r3, [r1, r3]
 8004da0:	f003 031f 	and.w	r3, r3, #31
 8004da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40021000 	.word	0x40021000
 8004db0:	08008b34 	.word	0x08008b34

08004db4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dba:	4b1e      	ldr	r3, [pc, #120]	; (8004e34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dc4:	4b1b      	ldr	r3, [pc, #108]	; (8004e34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	091b      	lsrs	r3, r3, #4
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	3301      	adds	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b03      	cmp	r3, #3
 8004dd6:	d10c      	bne.n	8004df2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dd8:	4a17      	ldr	r2, [pc, #92]	; (8004e38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de0:	4a14      	ldr	r2, [pc, #80]	; (8004e34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004de2:	68d2      	ldr	r2, [r2, #12]
 8004de4:	0a12      	lsrs	r2, r2, #8
 8004de6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	617b      	str	r3, [r7, #20]
    break;
 8004df0:	e00c      	b.n	8004e0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004df2:	4a12      	ldr	r2, [pc, #72]	; (8004e3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfa:	4a0e      	ldr	r2, [pc, #56]	; (8004e34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dfc:	68d2      	ldr	r2, [r2, #12]
 8004dfe:	0a12      	lsrs	r2, r2, #8
 8004e00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e04:	fb02 f303 	mul.w	r3, r2, r3
 8004e08:	617b      	str	r3, [r7, #20]
    break;
 8004e0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e0c:	4b09      	ldr	r3, [pc, #36]	; (8004e34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	0e5b      	lsrs	r3, r3, #25
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	3301      	adds	r3, #1
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e26:	687b      	ldr	r3, [r7, #4]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	40021000 	.word	0x40021000
 8004e38:	007a1200 	.word	0x007a1200
 8004e3c:	00f42400 	.word	0x00f42400

08004e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e48:	2300      	movs	r3, #0
 8004e4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 8098 	beq.w	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e62:	4b43      	ldr	r3, [pc, #268]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10d      	bne.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e6e:	4b40      	ldr	r3, [pc, #256]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e72:	4a3f      	ldr	r2, [pc, #252]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e78:	6593      	str	r3, [r2, #88]	; 0x58
 8004e7a:	4b3d      	ldr	r3, [pc, #244]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e82:	60bb      	str	r3, [r7, #8]
 8004e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e86:	2301      	movs	r3, #1
 8004e88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e8a:	4b3a      	ldr	r3, [pc, #232]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a39      	ldr	r2, [pc, #228]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e96:	f7fc ffcd 	bl	8001e34 <HAL_GetTick>
 8004e9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e9c:	e009      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e9e:	f7fc ffc9 	bl	8001e34 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d902      	bls.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	74fb      	strb	r3, [r7, #19]
        break;
 8004eb0:	e005      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eb2:	4b30      	ldr	r3, [pc, #192]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0ef      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ebe:	7cfb      	ldrb	r3, [r7, #19]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d159      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ec4:	4b2a      	ldr	r3, [pc, #168]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ece:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01e      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d019      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ee0:	4b23      	ldr	r3, [pc, #140]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004eec:	4b20      	ldr	r3, [pc, #128]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef2:	4a1f      	ldr	r2, [pc, #124]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004efc:	4b1c      	ldr	r3, [pc, #112]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f02:	4a1b      	ldr	r2, [pc, #108]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f0c:	4a18      	ldr	r2, [pc, #96]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d016      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1e:	f7fc ff89 	bl	8001e34 <HAL_GetTick>
 8004f22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f24:	e00b      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f26:	f7fc ff85 	bl	8001e34 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d902      	bls.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	74fb      	strb	r3, [r7, #19]
            break;
 8004f3c:	e006      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0ec      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f4c:	7cfb      	ldrb	r3, [r7, #19]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10b      	bne.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f52:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	4903      	ldr	r1, [pc, #12]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f68:	e008      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f6a:	7cfb      	ldrb	r3, [r7, #19]
 8004f6c:	74bb      	strb	r3, [r7, #18]
 8004f6e:	e005      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f70:	40021000 	.word	0x40021000
 8004f74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f78:	7cfb      	ldrb	r3, [r7, #19]
 8004f7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f7c:	7c7b      	ldrb	r3, [r7, #17]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d105      	bne.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f82:	4ba6      	ldr	r3, [pc, #664]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f86:	4aa5      	ldr	r2, [pc, #660]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f8c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f9a:	4ba0      	ldr	r3, [pc, #640]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa0:	f023 0203 	bic.w	r2, r3, #3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	499c      	ldr	r1, [pc, #624]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fbc:	4b97      	ldr	r3, [pc, #604]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc2:	f023 020c 	bic.w	r2, r3, #12
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	4994      	ldr	r1, [pc, #592]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fde:	4b8f      	ldr	r3, [pc, #572]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	498b      	ldr	r1, [pc, #556]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0308 	and.w	r3, r3, #8
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005000:	4b86      	ldr	r3, [pc, #536]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005006:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	4983      	ldr	r1, [pc, #524]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005022:	4b7e      	ldr	r3, [pc, #504]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005028:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	497a      	ldr	r1, [pc, #488]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005044:	4b75      	ldr	r3, [pc, #468]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	4972      	ldr	r1, [pc, #456]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005066:	4b6d      	ldr	r3, [pc, #436]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	4969      	ldr	r1, [pc, #420]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005088:	4b64      	ldr	r3, [pc, #400]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800508a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	4961      	ldr	r1, [pc, #388]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050aa:	4b5c      	ldr	r3, [pc, #368]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	4958      	ldr	r1, [pc, #352]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d015      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050cc:	4b53      	ldr	r3, [pc, #332]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050da:	4950      	ldr	r1, [pc, #320]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ea:	d105      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050ec:	4b4b      	ldr	r3, [pc, #300]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	4a4a      	ldr	r2, [pc, #296]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005100:	2b00      	cmp	r3, #0
 8005102:	d015      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005104:	4b45      	ldr	r3, [pc, #276]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	4942      	ldr	r1, [pc, #264]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005122:	d105      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005124:	4b3d      	ldr	r3, [pc, #244]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	4a3c      	ldr	r2, [pc, #240]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800512a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800512e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d015      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800513c:	4b37      	ldr	r3, [pc, #220]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800513e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005142:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	4934      	ldr	r1, [pc, #208]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800515a:	d105      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800515c:	4b2f      	ldr	r3, [pc, #188]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	4a2e      	ldr	r2, [pc, #184]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005166:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d015      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005174:	4b29      	ldr	r3, [pc, #164]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005182:	4926      	ldr	r1, [pc, #152]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005192:	d105      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005194:	4b21      	ldr	r3, [pc, #132]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	4a20      	ldr	r2, [pc, #128]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800519a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800519e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d015      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051ac:	4b1b      	ldr	r3, [pc, #108]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	4918      	ldr	r1, [pc, #96]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ca:	d105      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051cc:	4b13      	ldr	r3, [pc, #76]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	4a12      	ldr	r2, [pc, #72]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d015      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051e4:	4b0d      	ldr	r3, [pc, #52]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f2:	490a      	ldr	r1, [pc, #40]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005202:	d105      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	4a04      	ldr	r2, [pc, #16]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800520a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800520e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005210:	7cbb      	ldrb	r3, [r7, #18]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	40021000 	.word	0x40021000

08005220 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e042      	b.n	80052b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	2b00      	cmp	r3, #0
 800523a:	d106      	bne.n	800524a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7fc fc15 	bl	8001a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2224      	movs	r2, #36	; 0x24
 800524e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0201 	bic.w	r2, r2, #1
 8005260:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fb82 	bl	8005974 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f8b3 	bl	80053dc <UART_SetConfig>
 8005276:	4603      	mov	r3, r0
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e01b      	b.n	80052b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800528e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800529e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 fc01 	bl	8005ab8 <UART_CheckIdleState>
 80052b6:	4603      	mov	r3, r0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08a      	sub	sp, #40	; 0x28
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	4613      	mov	r3, r2
 80052ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d17b      	bne.n	80053d2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <HAL_UART_Transmit+0x26>
 80052e0:	88fb      	ldrh	r3, [r7, #6]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e074      	b.n	80053d4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2221      	movs	r2, #33	; 0x21
 80052f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052fa:	f7fc fd9b 	bl	8001e34 <HAL_GetTick>
 80052fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	88fa      	ldrh	r2, [r7, #6]
 8005304:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	88fa      	ldrh	r2, [r7, #6]
 800530c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005318:	d108      	bne.n	800532c <HAL_UART_Transmit+0x6c>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d104      	bne.n	800532c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005322:	2300      	movs	r3, #0
 8005324:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	61bb      	str	r3, [r7, #24]
 800532a:	e003      	b.n	8005334 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005330:	2300      	movs	r3, #0
 8005332:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005334:	e030      	b.n	8005398 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2200      	movs	r2, #0
 800533e:	2180      	movs	r1, #128	; 0x80
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 fc63 	bl	8005c0c <UART_WaitOnFlagUntilTimeout>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e03d      	b.n	80053d4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10b      	bne.n	8005376 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800536c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	3302      	adds	r3, #2
 8005372:	61bb      	str	r3, [r7, #24]
 8005374:	e007      	b.n	8005386 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	781a      	ldrb	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	3301      	adds	r3, #1
 8005384:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800538c:	b29b      	uxth	r3, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1c8      	bne.n	8005336 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2200      	movs	r2, #0
 80053ac:	2140      	movs	r1, #64	; 0x40
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 fc2c 	bl	8005c0c <UART_WaitOnFlagUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d005      	beq.n	80053c6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2220      	movs	r2, #32
 80053be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e006      	b.n	80053d4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	e000      	b.n	80053d4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80053d2:	2302      	movs	r3, #2
  }
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3720      	adds	r7, #32
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053e0:	b08c      	sub	sp, #48	; 0x30
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	431a      	orrs	r2, r3
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	4313      	orrs	r3, r2
 8005402:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4bab      	ldr	r3, [pc, #684]	; (80056b8 <UART_SetConfig+0x2dc>)
 800540c:	4013      	ands	r3, r2
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	6812      	ldr	r2, [r2, #0]
 8005412:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005414:	430b      	orrs	r3, r1
 8005416:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4aa0      	ldr	r2, [pc, #640]	; (80056bc <UART_SetConfig+0x2e0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005444:	4313      	orrs	r3, r2
 8005446:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005452:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	6812      	ldr	r2, [r2, #0]
 800545a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800545c:	430b      	orrs	r3, r1
 800545e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005466:	f023 010f 	bic.w	r1, r3, #15
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a91      	ldr	r2, [pc, #580]	; (80056c0 <UART_SetConfig+0x2e4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d125      	bne.n	80054cc <UART_SetConfig+0xf0>
 8005480:	4b90      	ldr	r3, [pc, #576]	; (80056c4 <UART_SetConfig+0x2e8>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	2b03      	cmp	r3, #3
 800548c:	d81a      	bhi.n	80054c4 <UART_SetConfig+0xe8>
 800548e:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <UART_SetConfig+0xb8>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	080054a5 	.word	0x080054a5
 8005498:	080054b5 	.word	0x080054b5
 800549c:	080054ad 	.word	0x080054ad
 80054a0:	080054bd 	.word	0x080054bd
 80054a4:	2301      	movs	r3, #1
 80054a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054aa:	e0d6      	b.n	800565a <UART_SetConfig+0x27e>
 80054ac:	2302      	movs	r3, #2
 80054ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054b2:	e0d2      	b.n	800565a <UART_SetConfig+0x27e>
 80054b4:	2304      	movs	r3, #4
 80054b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ba:	e0ce      	b.n	800565a <UART_SetConfig+0x27e>
 80054bc:	2308      	movs	r3, #8
 80054be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054c2:	e0ca      	b.n	800565a <UART_SetConfig+0x27e>
 80054c4:	2310      	movs	r3, #16
 80054c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ca:	e0c6      	b.n	800565a <UART_SetConfig+0x27e>
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a7d      	ldr	r2, [pc, #500]	; (80056c8 <UART_SetConfig+0x2ec>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d138      	bne.n	8005548 <UART_SetConfig+0x16c>
 80054d6:	4b7b      	ldr	r3, [pc, #492]	; (80056c4 <UART_SetConfig+0x2e8>)
 80054d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054dc:	f003 030c 	and.w	r3, r3, #12
 80054e0:	2b0c      	cmp	r3, #12
 80054e2:	d82d      	bhi.n	8005540 <UART_SetConfig+0x164>
 80054e4:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <UART_SetConfig+0x110>)
 80054e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ea:	bf00      	nop
 80054ec:	08005521 	.word	0x08005521
 80054f0:	08005541 	.word	0x08005541
 80054f4:	08005541 	.word	0x08005541
 80054f8:	08005541 	.word	0x08005541
 80054fc:	08005531 	.word	0x08005531
 8005500:	08005541 	.word	0x08005541
 8005504:	08005541 	.word	0x08005541
 8005508:	08005541 	.word	0x08005541
 800550c:	08005529 	.word	0x08005529
 8005510:	08005541 	.word	0x08005541
 8005514:	08005541 	.word	0x08005541
 8005518:	08005541 	.word	0x08005541
 800551c:	08005539 	.word	0x08005539
 8005520:	2300      	movs	r3, #0
 8005522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005526:	e098      	b.n	800565a <UART_SetConfig+0x27e>
 8005528:	2302      	movs	r3, #2
 800552a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800552e:	e094      	b.n	800565a <UART_SetConfig+0x27e>
 8005530:	2304      	movs	r3, #4
 8005532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005536:	e090      	b.n	800565a <UART_SetConfig+0x27e>
 8005538:	2308      	movs	r3, #8
 800553a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800553e:	e08c      	b.n	800565a <UART_SetConfig+0x27e>
 8005540:	2310      	movs	r3, #16
 8005542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005546:	e088      	b.n	800565a <UART_SetConfig+0x27e>
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a5f      	ldr	r2, [pc, #380]	; (80056cc <UART_SetConfig+0x2f0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d125      	bne.n	800559e <UART_SetConfig+0x1c2>
 8005552:	4b5c      	ldr	r3, [pc, #368]	; (80056c4 <UART_SetConfig+0x2e8>)
 8005554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005558:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800555c:	2b30      	cmp	r3, #48	; 0x30
 800555e:	d016      	beq.n	800558e <UART_SetConfig+0x1b2>
 8005560:	2b30      	cmp	r3, #48	; 0x30
 8005562:	d818      	bhi.n	8005596 <UART_SetConfig+0x1ba>
 8005564:	2b20      	cmp	r3, #32
 8005566:	d00a      	beq.n	800557e <UART_SetConfig+0x1a2>
 8005568:	2b20      	cmp	r3, #32
 800556a:	d814      	bhi.n	8005596 <UART_SetConfig+0x1ba>
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <UART_SetConfig+0x19a>
 8005570:	2b10      	cmp	r3, #16
 8005572:	d008      	beq.n	8005586 <UART_SetConfig+0x1aa>
 8005574:	e00f      	b.n	8005596 <UART_SetConfig+0x1ba>
 8005576:	2300      	movs	r3, #0
 8005578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800557c:	e06d      	b.n	800565a <UART_SetConfig+0x27e>
 800557e:	2302      	movs	r3, #2
 8005580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005584:	e069      	b.n	800565a <UART_SetConfig+0x27e>
 8005586:	2304      	movs	r3, #4
 8005588:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800558c:	e065      	b.n	800565a <UART_SetConfig+0x27e>
 800558e:	2308      	movs	r3, #8
 8005590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005594:	e061      	b.n	800565a <UART_SetConfig+0x27e>
 8005596:	2310      	movs	r3, #16
 8005598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800559c:	e05d      	b.n	800565a <UART_SetConfig+0x27e>
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a4b      	ldr	r2, [pc, #300]	; (80056d0 <UART_SetConfig+0x2f4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d125      	bne.n	80055f4 <UART_SetConfig+0x218>
 80055a8:	4b46      	ldr	r3, [pc, #280]	; (80056c4 <UART_SetConfig+0x2e8>)
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055b2:	2bc0      	cmp	r3, #192	; 0xc0
 80055b4:	d016      	beq.n	80055e4 <UART_SetConfig+0x208>
 80055b6:	2bc0      	cmp	r3, #192	; 0xc0
 80055b8:	d818      	bhi.n	80055ec <UART_SetConfig+0x210>
 80055ba:	2b80      	cmp	r3, #128	; 0x80
 80055bc:	d00a      	beq.n	80055d4 <UART_SetConfig+0x1f8>
 80055be:	2b80      	cmp	r3, #128	; 0x80
 80055c0:	d814      	bhi.n	80055ec <UART_SetConfig+0x210>
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <UART_SetConfig+0x1f0>
 80055c6:	2b40      	cmp	r3, #64	; 0x40
 80055c8:	d008      	beq.n	80055dc <UART_SetConfig+0x200>
 80055ca:	e00f      	b.n	80055ec <UART_SetConfig+0x210>
 80055cc:	2300      	movs	r3, #0
 80055ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055d2:	e042      	b.n	800565a <UART_SetConfig+0x27e>
 80055d4:	2302      	movs	r3, #2
 80055d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055da:	e03e      	b.n	800565a <UART_SetConfig+0x27e>
 80055dc:	2304      	movs	r3, #4
 80055de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055e2:	e03a      	b.n	800565a <UART_SetConfig+0x27e>
 80055e4:	2308      	movs	r3, #8
 80055e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ea:	e036      	b.n	800565a <UART_SetConfig+0x27e>
 80055ec:	2310      	movs	r3, #16
 80055ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055f2:	e032      	b.n	800565a <UART_SetConfig+0x27e>
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a30      	ldr	r2, [pc, #192]	; (80056bc <UART_SetConfig+0x2e0>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d12a      	bne.n	8005654 <UART_SetConfig+0x278>
 80055fe:	4b31      	ldr	r3, [pc, #196]	; (80056c4 <UART_SetConfig+0x2e8>)
 8005600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005604:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005608:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800560c:	d01a      	beq.n	8005644 <UART_SetConfig+0x268>
 800560e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005612:	d81b      	bhi.n	800564c <UART_SetConfig+0x270>
 8005614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005618:	d00c      	beq.n	8005634 <UART_SetConfig+0x258>
 800561a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800561e:	d815      	bhi.n	800564c <UART_SetConfig+0x270>
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <UART_SetConfig+0x250>
 8005624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005628:	d008      	beq.n	800563c <UART_SetConfig+0x260>
 800562a:	e00f      	b.n	800564c <UART_SetConfig+0x270>
 800562c:	2300      	movs	r3, #0
 800562e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005632:	e012      	b.n	800565a <UART_SetConfig+0x27e>
 8005634:	2302      	movs	r3, #2
 8005636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800563a:	e00e      	b.n	800565a <UART_SetConfig+0x27e>
 800563c:	2304      	movs	r3, #4
 800563e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005642:	e00a      	b.n	800565a <UART_SetConfig+0x27e>
 8005644:	2308      	movs	r3, #8
 8005646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800564a:	e006      	b.n	800565a <UART_SetConfig+0x27e>
 800564c:	2310      	movs	r3, #16
 800564e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005652:	e002      	b.n	800565a <UART_SetConfig+0x27e>
 8005654:	2310      	movs	r3, #16
 8005656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a17      	ldr	r2, [pc, #92]	; (80056bc <UART_SetConfig+0x2e0>)
 8005660:	4293      	cmp	r3, r2
 8005662:	f040 80a8 	bne.w	80057b6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005666:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800566a:	2b08      	cmp	r3, #8
 800566c:	d834      	bhi.n	80056d8 <UART_SetConfig+0x2fc>
 800566e:	a201      	add	r2, pc, #4	; (adr r2, 8005674 <UART_SetConfig+0x298>)
 8005670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005674:	08005699 	.word	0x08005699
 8005678:	080056d9 	.word	0x080056d9
 800567c:	080056a1 	.word	0x080056a1
 8005680:	080056d9 	.word	0x080056d9
 8005684:	080056a7 	.word	0x080056a7
 8005688:	080056d9 	.word	0x080056d9
 800568c:	080056d9 	.word	0x080056d9
 8005690:	080056d9 	.word	0x080056d9
 8005694:	080056af 	.word	0x080056af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005698:	f7ff fb60 	bl	8004d5c <HAL_RCC_GetPCLK1Freq>
 800569c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800569e:	e021      	b.n	80056e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a0:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <UART_SetConfig+0x2f8>)
 80056a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056a4:	e01e      	b.n	80056e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056a6:	f7ff faeb 	bl	8004c80 <HAL_RCC_GetSysClockFreq>
 80056aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056ac:	e01a      	b.n	80056e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056b4:	e016      	b.n	80056e4 <UART_SetConfig+0x308>
 80056b6:	bf00      	nop
 80056b8:	cfff69f3 	.word	0xcfff69f3
 80056bc:	40008000 	.word	0x40008000
 80056c0:	40013800 	.word	0x40013800
 80056c4:	40021000 	.word	0x40021000
 80056c8:	40004400 	.word	0x40004400
 80056cc:	40004800 	.word	0x40004800
 80056d0:	40004c00 	.word	0x40004c00
 80056d4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80056e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 812a 	beq.w	8005940 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	4a9e      	ldr	r2, [pc, #632]	; (800596c <UART_SetConfig+0x590>)
 80056f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056f6:	461a      	mov	r2, r3
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80056fe:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	4613      	mov	r3, r2
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	4413      	add	r3, r2
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	429a      	cmp	r2, r3
 800570e:	d305      	bcc.n	800571c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	429a      	cmp	r2, r3
 800571a:	d903      	bls.n	8005724 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005722:	e10d      	b.n	8005940 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	2200      	movs	r2, #0
 8005728:	60bb      	str	r3, [r7, #8]
 800572a:	60fa      	str	r2, [r7, #12]
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	4a8e      	ldr	r2, [pc, #568]	; (800596c <UART_SetConfig+0x590>)
 8005732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005736:	b29b      	uxth	r3, r3
 8005738:	2200      	movs	r2, #0
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	607a      	str	r2, [r7, #4]
 800573e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005742:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005746:	f7fb fa57 	bl	8000bf8 <__aeabi_uldivmod>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4610      	mov	r0, r2
 8005750:	4619      	mov	r1, r3
 8005752:	f04f 0200 	mov.w	r2, #0
 8005756:	f04f 0300 	mov.w	r3, #0
 800575a:	020b      	lsls	r3, r1, #8
 800575c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005760:	0202      	lsls	r2, r0, #8
 8005762:	6979      	ldr	r1, [r7, #20]
 8005764:	6849      	ldr	r1, [r1, #4]
 8005766:	0849      	lsrs	r1, r1, #1
 8005768:	2000      	movs	r0, #0
 800576a:	460c      	mov	r4, r1
 800576c:	4605      	mov	r5, r0
 800576e:	eb12 0804 	adds.w	r8, r2, r4
 8005772:	eb43 0905 	adc.w	r9, r3, r5
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	469a      	mov	sl, r3
 800577e:	4693      	mov	fp, r2
 8005780:	4652      	mov	r2, sl
 8005782:	465b      	mov	r3, fp
 8005784:	4640      	mov	r0, r8
 8005786:	4649      	mov	r1, r9
 8005788:	f7fb fa36 	bl	8000bf8 <__aeabi_uldivmod>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4613      	mov	r3, r2
 8005792:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800579a:	d308      	bcc.n	80057ae <UART_SetConfig+0x3d2>
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057a2:	d204      	bcs.n	80057ae <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6a3a      	ldr	r2, [r7, #32]
 80057aa:	60da      	str	r2, [r3, #12]
 80057ac:	e0c8      	b.n	8005940 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80057b4:	e0c4      	b.n	8005940 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057be:	d167      	bne.n	8005890 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80057c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d828      	bhi.n	800581a <UART_SetConfig+0x43e>
 80057c8:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <UART_SetConfig+0x3f4>)
 80057ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ce:	bf00      	nop
 80057d0:	080057f5 	.word	0x080057f5
 80057d4:	080057fd 	.word	0x080057fd
 80057d8:	08005805 	.word	0x08005805
 80057dc:	0800581b 	.word	0x0800581b
 80057e0:	0800580b 	.word	0x0800580b
 80057e4:	0800581b 	.word	0x0800581b
 80057e8:	0800581b 	.word	0x0800581b
 80057ec:	0800581b 	.word	0x0800581b
 80057f0:	08005813 	.word	0x08005813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057f4:	f7ff fab2 	bl	8004d5c <HAL_RCC_GetPCLK1Freq>
 80057f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057fa:	e014      	b.n	8005826 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057fc:	f7ff fac4 	bl	8004d88 <HAL_RCC_GetPCLK2Freq>
 8005800:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005802:	e010      	b.n	8005826 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005804:	4b5a      	ldr	r3, [pc, #360]	; (8005970 <UART_SetConfig+0x594>)
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005808:	e00d      	b.n	8005826 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800580a:	f7ff fa39 	bl	8004c80 <HAL_RCC_GetSysClockFreq>
 800580e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005810:	e009      	b.n	8005826 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005816:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005818:	e005      	b.n	8005826 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005824:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8089 	beq.w	8005940 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	4a4e      	ldr	r2, [pc, #312]	; (800596c <UART_SetConfig+0x590>)
 8005834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005838:	461a      	mov	r2, r3
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005840:	005a      	lsls	r2, r3, #1
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	085b      	lsrs	r3, r3, #1
 8005848:	441a      	add	r2, r3
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005852:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	2b0f      	cmp	r3, #15
 8005858:	d916      	bls.n	8005888 <UART_SetConfig+0x4ac>
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005860:	d212      	bcs.n	8005888 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	b29b      	uxth	r3, r3
 8005866:	f023 030f 	bic.w	r3, r3, #15
 800586a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	085b      	lsrs	r3, r3, #1
 8005870:	b29b      	uxth	r3, r3
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	b29a      	uxth	r2, r3
 8005878:	8bfb      	ldrh	r3, [r7, #30]
 800587a:	4313      	orrs	r3, r2
 800587c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	8bfa      	ldrh	r2, [r7, #30]
 8005884:	60da      	str	r2, [r3, #12]
 8005886:	e05b      	b.n	8005940 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800588e:	e057      	b.n	8005940 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005890:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005894:	2b08      	cmp	r3, #8
 8005896:	d828      	bhi.n	80058ea <UART_SetConfig+0x50e>
 8005898:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <UART_SetConfig+0x4c4>)
 800589a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589e:	bf00      	nop
 80058a0:	080058c5 	.word	0x080058c5
 80058a4:	080058cd 	.word	0x080058cd
 80058a8:	080058d5 	.word	0x080058d5
 80058ac:	080058eb 	.word	0x080058eb
 80058b0:	080058db 	.word	0x080058db
 80058b4:	080058eb 	.word	0x080058eb
 80058b8:	080058eb 	.word	0x080058eb
 80058bc:	080058eb 	.word	0x080058eb
 80058c0:	080058e3 	.word	0x080058e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058c4:	f7ff fa4a 	bl	8004d5c <HAL_RCC_GetPCLK1Freq>
 80058c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058ca:	e014      	b.n	80058f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058cc:	f7ff fa5c 	bl	8004d88 <HAL_RCC_GetPCLK2Freq>
 80058d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058d2:	e010      	b.n	80058f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058d4:	4b26      	ldr	r3, [pc, #152]	; (8005970 <UART_SetConfig+0x594>)
 80058d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058d8:	e00d      	b.n	80058f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058da:	f7ff f9d1 	bl	8004c80 <HAL_RCC_GetSysClockFreq>
 80058de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058e0:	e009      	b.n	80058f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058e8:	e005      	b.n	80058f6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80058f4:	bf00      	nop
    }

    if (pclk != 0U)
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d021      	beq.n	8005940 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	4a1a      	ldr	r2, [pc, #104]	; (800596c <UART_SetConfig+0x590>)
 8005902:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005906:	461a      	mov	r2, r3
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	fbb3 f2f2 	udiv	r2, r3, r2
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	085b      	lsrs	r3, r3, #1
 8005914:	441a      	add	r2, r3
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	fbb2 f3f3 	udiv	r3, r2, r3
 800591e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	2b0f      	cmp	r3, #15
 8005924:	d909      	bls.n	800593a <UART_SetConfig+0x55e>
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592c:	d205      	bcs.n	800593a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	b29a      	uxth	r2, r3
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60da      	str	r2, [r3, #12]
 8005938:	e002      	b.n	8005940 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2201      	movs	r2, #1
 8005944:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2201      	movs	r2, #1
 800594c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2200      	movs	r2, #0
 8005954:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2200      	movs	r2, #0
 800595a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800595c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005960:	4618      	mov	r0, r3
 8005962:	3730      	adds	r7, #48	; 0x30
 8005964:	46bd      	mov	sp, r7
 8005966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800596a:	bf00      	nop
 800596c:	08008b3c 	.word	0x08008b3c
 8005970:	00f42400 	.word	0x00f42400

08005974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005980:	f003 0308 	and.w	r3, r3, #8
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a08:	f003 0310 	and.w	r3, r3, #16
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00a      	beq.n	8005a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	f003 0320 	and.w	r3, r3, #32
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d01a      	beq.n	8005a8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a72:	d10a      	bne.n	8005a8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	605a      	str	r2, [r3, #4]
  }
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b098      	sub	sp, #96	; 0x60
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ac8:	f7fc f9b4 	bl	8001e34 <HAL_GetTick>
 8005acc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d12f      	bne.n	8005b3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005adc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f88e 	bl	8005c0c <UART_WaitOnFlagUntilTimeout>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d022      	beq.n	8005b3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afe:	e853 3f00 	ldrex	r3, [r3]
 8005b02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b0a:	653b      	str	r3, [r7, #80]	; 0x50
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	461a      	mov	r2, r3
 8005b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b14:	647b      	str	r3, [r7, #68]	; 0x44
 8005b16:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b1c:	e841 2300 	strex	r3, r2, [r1]
 8005b20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1e6      	bne.n	8005af6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e063      	b.n	8005c04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d149      	bne.n	8005bde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b52:	2200      	movs	r2, #0
 8005b54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f857 	bl	8005c0c <UART_WaitOnFlagUntilTimeout>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d03c      	beq.n	8005bde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	623b      	str	r3, [r7, #32]
   return(result);
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b82:	633b      	str	r3, [r7, #48]	; 0x30
 8005b84:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e6      	bne.n	8005b64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f023 0301 	bic.w	r3, r3, #1
 8005bac:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3308      	adds	r3, #8
 8005bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bb6:	61fa      	str	r2, [r7, #28]
 8005bb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	69b9      	ldr	r1, [r7, #24]
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	617b      	str	r3, [r7, #20]
   return(result);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e5      	bne.n	8005b96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e012      	b.n	8005c04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3758      	adds	r7, #88	; 0x58
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c1c:	e04f      	b.n	8005cbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c24:	d04b      	beq.n	8005cbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c26:	f7fc f905 	bl	8001e34 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d302      	bcc.n	8005c3c <UART_WaitOnFlagUntilTimeout+0x30>
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e04e      	b.n	8005cde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0304 	and.w	r3, r3, #4
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d037      	beq.n	8005cbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b80      	cmp	r3, #128	; 0x80
 8005c52:	d034      	beq.n	8005cbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b40      	cmp	r3, #64	; 0x40
 8005c58:	d031      	beq.n	8005cbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	f003 0308 	and.w	r3, r3, #8
 8005c64:	2b08      	cmp	r3, #8
 8005c66:	d110      	bne.n	8005c8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2208      	movs	r2, #8
 8005c6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 f838 	bl	8005ce6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2208      	movs	r2, #8
 8005c7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e029      	b.n	8005cde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c98:	d111      	bne.n	8005cbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 f81e 	bl	8005ce6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e00f      	b.n	8005cde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69da      	ldr	r2, [r3, #28]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	bf0c      	ite	eq
 8005cce:	2301      	moveq	r3, #1
 8005cd0:	2300      	movne	r3, #0
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d0a0      	beq.n	8005c1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b095      	sub	sp, #84	; 0x54
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d0c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e6      	bne.n	8005cee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3308      	adds	r3, #8
 8005d26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	e853 3f00 	ldrex	r3, [r3]
 8005d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d36:	f023 0301 	bic.w	r3, r3, #1
 8005d3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3308      	adds	r3, #8
 8005d42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d4c:	e841 2300 	strex	r3, r2, [r1]
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1e3      	bne.n	8005d20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d118      	bne.n	8005d92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	e853 3f00 	ldrex	r3, [r3]
 8005d6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f023 0310 	bic.w	r3, r3, #16
 8005d74:	647b      	str	r3, [r7, #68]	; 0x44
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d7e:	61bb      	str	r3, [r7, #24]
 8005d80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d82:	6979      	ldr	r1, [r7, #20]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1e6      	bne.n	8005d60 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005da6:	bf00      	nop
 8005da8:	3754      	adds	r7, #84	; 0x54
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b085      	sub	sp, #20
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d101      	bne.n	8005dc8 <HAL_UARTEx_DisableFifoMode+0x16>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	e027      	b.n	8005e18 <HAL_UARTEx_DisableFifoMode+0x66>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2224      	movs	r2, #36	; 0x24
 8005dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0201 	bic.w	r2, r2, #1
 8005dee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005df6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	e02d      	b.n	8005e98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2224      	movs	r2, #36	; 0x24
 8005e48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0201 	bic.w	r2, r2, #1
 8005e62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f84f 	bl	8005f1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e02d      	b.n	8005f14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2224      	movs	r2, #36	; 0x24
 8005ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0201 	bic.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f811 	bl	8005f1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d108      	bne.n	8005f3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f3c:	e031      	b.n	8005fa2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f3e:	2308      	movs	r3, #8
 8005f40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f42:	2308      	movs	r3, #8
 8005f44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	0e5b      	lsrs	r3, r3, #25
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	0f5b      	lsrs	r3, r3, #29
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	f003 0307 	and.w	r3, r3, #7
 8005f64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f66:	7bbb      	ldrb	r3, [r7, #14]
 8005f68:	7b3a      	ldrb	r2, [r7, #12]
 8005f6a:	4911      	ldr	r1, [pc, #68]	; (8005fb0 <UARTEx_SetNbDataToProcess+0x94>)
 8005f6c:	5c8a      	ldrb	r2, [r1, r2]
 8005f6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f72:	7b3a      	ldrb	r2, [r7, #12]
 8005f74:	490f      	ldr	r1, [pc, #60]	; (8005fb4 <UARTEx_SetNbDataToProcess+0x98>)
 8005f76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f78:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	7b7a      	ldrb	r2, [r7, #13]
 8005f88:	4909      	ldr	r1, [pc, #36]	; (8005fb0 <UARTEx_SetNbDataToProcess+0x94>)
 8005f8a:	5c8a      	ldrb	r2, [r1, r2]
 8005f8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f90:	7b7a      	ldrb	r2, [r7, #13]
 8005f92:	4908      	ldr	r1, [pc, #32]	; (8005fb4 <UARTEx_SetNbDataToProcess+0x98>)
 8005f94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f96:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005fa2:	bf00      	nop
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	08008b54 	.word	0x08008b54
 8005fb4:	08008b5c 	.word	0x08008b5c

08005fb8 <__cvt>:
 8005fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fbc:	ec55 4b10 	vmov	r4, r5, d0
 8005fc0:	2d00      	cmp	r5, #0
 8005fc2:	460e      	mov	r6, r1
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	462b      	mov	r3, r5
 8005fc8:	bfbb      	ittet	lt
 8005fca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005fce:	461d      	movlt	r5, r3
 8005fd0:	2300      	movge	r3, #0
 8005fd2:	232d      	movlt	r3, #45	; 0x2d
 8005fd4:	700b      	strb	r3, [r1, #0]
 8005fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005fdc:	4691      	mov	r9, r2
 8005fde:	f023 0820 	bic.w	r8, r3, #32
 8005fe2:	bfbc      	itt	lt
 8005fe4:	4622      	movlt	r2, r4
 8005fe6:	4614      	movlt	r4, r2
 8005fe8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fec:	d005      	beq.n	8005ffa <__cvt+0x42>
 8005fee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005ff2:	d100      	bne.n	8005ff6 <__cvt+0x3e>
 8005ff4:	3601      	adds	r6, #1
 8005ff6:	2102      	movs	r1, #2
 8005ff8:	e000      	b.n	8005ffc <__cvt+0x44>
 8005ffa:	2103      	movs	r1, #3
 8005ffc:	ab03      	add	r3, sp, #12
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	ab02      	add	r3, sp, #8
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	ec45 4b10 	vmov	d0, r4, r5
 8006008:	4653      	mov	r3, sl
 800600a:	4632      	mov	r2, r6
 800600c:	f000 ffd0 	bl	8006fb0 <_dtoa_r>
 8006010:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006014:	4607      	mov	r7, r0
 8006016:	d102      	bne.n	800601e <__cvt+0x66>
 8006018:	f019 0f01 	tst.w	r9, #1
 800601c:	d022      	beq.n	8006064 <__cvt+0xac>
 800601e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006022:	eb07 0906 	add.w	r9, r7, r6
 8006026:	d110      	bne.n	800604a <__cvt+0x92>
 8006028:	783b      	ldrb	r3, [r7, #0]
 800602a:	2b30      	cmp	r3, #48	; 0x30
 800602c:	d10a      	bne.n	8006044 <__cvt+0x8c>
 800602e:	2200      	movs	r2, #0
 8006030:	2300      	movs	r3, #0
 8006032:	4620      	mov	r0, r4
 8006034:	4629      	mov	r1, r5
 8006036:	f7fa fd6f 	bl	8000b18 <__aeabi_dcmpeq>
 800603a:	b918      	cbnz	r0, 8006044 <__cvt+0x8c>
 800603c:	f1c6 0601 	rsb	r6, r6, #1
 8006040:	f8ca 6000 	str.w	r6, [sl]
 8006044:	f8da 3000 	ldr.w	r3, [sl]
 8006048:	4499      	add	r9, r3
 800604a:	2200      	movs	r2, #0
 800604c:	2300      	movs	r3, #0
 800604e:	4620      	mov	r0, r4
 8006050:	4629      	mov	r1, r5
 8006052:	f7fa fd61 	bl	8000b18 <__aeabi_dcmpeq>
 8006056:	b108      	cbz	r0, 800605c <__cvt+0xa4>
 8006058:	f8cd 900c 	str.w	r9, [sp, #12]
 800605c:	2230      	movs	r2, #48	; 0x30
 800605e:	9b03      	ldr	r3, [sp, #12]
 8006060:	454b      	cmp	r3, r9
 8006062:	d307      	bcc.n	8006074 <__cvt+0xbc>
 8006064:	9b03      	ldr	r3, [sp, #12]
 8006066:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006068:	1bdb      	subs	r3, r3, r7
 800606a:	4638      	mov	r0, r7
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	b004      	add	sp, #16
 8006070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006074:	1c59      	adds	r1, r3, #1
 8006076:	9103      	str	r1, [sp, #12]
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	e7f0      	b.n	800605e <__cvt+0xa6>

0800607c <__exponent>:
 800607c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800607e:	4603      	mov	r3, r0
 8006080:	2900      	cmp	r1, #0
 8006082:	bfb8      	it	lt
 8006084:	4249      	neglt	r1, r1
 8006086:	f803 2b02 	strb.w	r2, [r3], #2
 800608a:	bfb4      	ite	lt
 800608c:	222d      	movlt	r2, #45	; 0x2d
 800608e:	222b      	movge	r2, #43	; 0x2b
 8006090:	2909      	cmp	r1, #9
 8006092:	7042      	strb	r2, [r0, #1]
 8006094:	dd2a      	ble.n	80060ec <__exponent+0x70>
 8006096:	f10d 0207 	add.w	r2, sp, #7
 800609a:	4617      	mov	r7, r2
 800609c:	260a      	movs	r6, #10
 800609e:	4694      	mov	ip, r2
 80060a0:	fb91 f5f6 	sdiv	r5, r1, r6
 80060a4:	fb06 1415 	mls	r4, r6, r5, r1
 80060a8:	3430      	adds	r4, #48	; 0x30
 80060aa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80060ae:	460c      	mov	r4, r1
 80060b0:	2c63      	cmp	r4, #99	; 0x63
 80060b2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80060b6:	4629      	mov	r1, r5
 80060b8:	dcf1      	bgt.n	800609e <__exponent+0x22>
 80060ba:	3130      	adds	r1, #48	; 0x30
 80060bc:	f1ac 0402 	sub.w	r4, ip, #2
 80060c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80060c4:	1c41      	adds	r1, r0, #1
 80060c6:	4622      	mov	r2, r4
 80060c8:	42ba      	cmp	r2, r7
 80060ca:	d30a      	bcc.n	80060e2 <__exponent+0x66>
 80060cc:	f10d 0209 	add.w	r2, sp, #9
 80060d0:	eba2 020c 	sub.w	r2, r2, ip
 80060d4:	42bc      	cmp	r4, r7
 80060d6:	bf88      	it	hi
 80060d8:	2200      	movhi	r2, #0
 80060da:	4413      	add	r3, r2
 80060dc:	1a18      	subs	r0, r3, r0
 80060de:	b003      	add	sp, #12
 80060e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060e2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80060e6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80060ea:	e7ed      	b.n	80060c8 <__exponent+0x4c>
 80060ec:	2330      	movs	r3, #48	; 0x30
 80060ee:	3130      	adds	r1, #48	; 0x30
 80060f0:	7083      	strb	r3, [r0, #2]
 80060f2:	70c1      	strb	r1, [r0, #3]
 80060f4:	1d03      	adds	r3, r0, #4
 80060f6:	e7f1      	b.n	80060dc <__exponent+0x60>

080060f8 <_printf_float>:
 80060f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fc:	ed2d 8b02 	vpush	{d8}
 8006100:	b08d      	sub	sp, #52	; 0x34
 8006102:	460c      	mov	r4, r1
 8006104:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006108:	4616      	mov	r6, r2
 800610a:	461f      	mov	r7, r3
 800610c:	4605      	mov	r5, r0
 800610e:	f000 fe61 	bl	8006dd4 <_localeconv_r>
 8006112:	f8d0 a000 	ldr.w	sl, [r0]
 8006116:	4650      	mov	r0, sl
 8006118:	f7fa f8d2 	bl	80002c0 <strlen>
 800611c:	2300      	movs	r3, #0
 800611e:	930a      	str	r3, [sp, #40]	; 0x28
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	9305      	str	r3, [sp, #20]
 8006124:	f8d8 3000 	ldr.w	r3, [r8]
 8006128:	f894 b018 	ldrb.w	fp, [r4, #24]
 800612c:	3307      	adds	r3, #7
 800612e:	f023 0307 	bic.w	r3, r3, #7
 8006132:	f103 0208 	add.w	r2, r3, #8
 8006136:	f8c8 2000 	str.w	r2, [r8]
 800613a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800613e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006142:	9307      	str	r3, [sp, #28]
 8006144:	f8cd 8018 	str.w	r8, [sp, #24]
 8006148:	ee08 0a10 	vmov	s16, r0
 800614c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006150:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006154:	4b9e      	ldr	r3, [pc, #632]	; (80063d0 <_printf_float+0x2d8>)
 8006156:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800615a:	f7fa fd0f 	bl	8000b7c <__aeabi_dcmpun>
 800615e:	bb88      	cbnz	r0, 80061c4 <_printf_float+0xcc>
 8006160:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006164:	4b9a      	ldr	r3, [pc, #616]	; (80063d0 <_printf_float+0x2d8>)
 8006166:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800616a:	f7fa fce9 	bl	8000b40 <__aeabi_dcmple>
 800616e:	bb48      	cbnz	r0, 80061c4 <_printf_float+0xcc>
 8006170:	2200      	movs	r2, #0
 8006172:	2300      	movs	r3, #0
 8006174:	4640      	mov	r0, r8
 8006176:	4649      	mov	r1, r9
 8006178:	f7fa fcd8 	bl	8000b2c <__aeabi_dcmplt>
 800617c:	b110      	cbz	r0, 8006184 <_printf_float+0x8c>
 800617e:	232d      	movs	r3, #45	; 0x2d
 8006180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006184:	4a93      	ldr	r2, [pc, #588]	; (80063d4 <_printf_float+0x2dc>)
 8006186:	4b94      	ldr	r3, [pc, #592]	; (80063d8 <_printf_float+0x2e0>)
 8006188:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800618c:	bf94      	ite	ls
 800618e:	4690      	movls	r8, r2
 8006190:	4698      	movhi	r8, r3
 8006192:	2303      	movs	r3, #3
 8006194:	6123      	str	r3, [r4, #16]
 8006196:	9b05      	ldr	r3, [sp, #20]
 8006198:	f023 0304 	bic.w	r3, r3, #4
 800619c:	6023      	str	r3, [r4, #0]
 800619e:	f04f 0900 	mov.w	r9, #0
 80061a2:	9700      	str	r7, [sp, #0]
 80061a4:	4633      	mov	r3, r6
 80061a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80061a8:	4621      	mov	r1, r4
 80061aa:	4628      	mov	r0, r5
 80061ac:	f000 fa82 	bl	80066b4 <_printf_common>
 80061b0:	3001      	adds	r0, #1
 80061b2:	f040 8090 	bne.w	80062d6 <_printf_float+0x1de>
 80061b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061ba:	b00d      	add	sp, #52	; 0x34
 80061bc:	ecbd 8b02 	vpop	{d8}
 80061c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c4:	4642      	mov	r2, r8
 80061c6:	464b      	mov	r3, r9
 80061c8:	4640      	mov	r0, r8
 80061ca:	4649      	mov	r1, r9
 80061cc:	f7fa fcd6 	bl	8000b7c <__aeabi_dcmpun>
 80061d0:	b140      	cbz	r0, 80061e4 <_printf_float+0xec>
 80061d2:	464b      	mov	r3, r9
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	bfbc      	itt	lt
 80061d8:	232d      	movlt	r3, #45	; 0x2d
 80061da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80061de:	4a7f      	ldr	r2, [pc, #508]	; (80063dc <_printf_float+0x2e4>)
 80061e0:	4b7f      	ldr	r3, [pc, #508]	; (80063e0 <_printf_float+0x2e8>)
 80061e2:	e7d1      	b.n	8006188 <_printf_float+0x90>
 80061e4:	6863      	ldr	r3, [r4, #4]
 80061e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80061ea:	9206      	str	r2, [sp, #24]
 80061ec:	1c5a      	adds	r2, r3, #1
 80061ee:	d13f      	bne.n	8006270 <_printf_float+0x178>
 80061f0:	2306      	movs	r3, #6
 80061f2:	6063      	str	r3, [r4, #4]
 80061f4:	9b05      	ldr	r3, [sp, #20]
 80061f6:	6861      	ldr	r1, [r4, #4]
 80061f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80061fc:	2300      	movs	r3, #0
 80061fe:	9303      	str	r3, [sp, #12]
 8006200:	ab0a      	add	r3, sp, #40	; 0x28
 8006202:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006206:	ab09      	add	r3, sp, #36	; 0x24
 8006208:	ec49 8b10 	vmov	d0, r8, r9
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	6022      	str	r2, [r4, #0]
 8006210:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006214:	4628      	mov	r0, r5
 8006216:	f7ff fecf 	bl	8005fb8 <__cvt>
 800621a:	9b06      	ldr	r3, [sp, #24]
 800621c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800621e:	2b47      	cmp	r3, #71	; 0x47
 8006220:	4680      	mov	r8, r0
 8006222:	d108      	bne.n	8006236 <_printf_float+0x13e>
 8006224:	1cc8      	adds	r0, r1, #3
 8006226:	db02      	blt.n	800622e <_printf_float+0x136>
 8006228:	6863      	ldr	r3, [r4, #4]
 800622a:	4299      	cmp	r1, r3
 800622c:	dd41      	ble.n	80062b2 <_printf_float+0x1ba>
 800622e:	f1ab 0302 	sub.w	r3, fp, #2
 8006232:	fa5f fb83 	uxtb.w	fp, r3
 8006236:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800623a:	d820      	bhi.n	800627e <_printf_float+0x186>
 800623c:	3901      	subs	r1, #1
 800623e:	465a      	mov	r2, fp
 8006240:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006244:	9109      	str	r1, [sp, #36]	; 0x24
 8006246:	f7ff ff19 	bl	800607c <__exponent>
 800624a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800624c:	1813      	adds	r3, r2, r0
 800624e:	2a01      	cmp	r2, #1
 8006250:	4681      	mov	r9, r0
 8006252:	6123      	str	r3, [r4, #16]
 8006254:	dc02      	bgt.n	800625c <_printf_float+0x164>
 8006256:	6822      	ldr	r2, [r4, #0]
 8006258:	07d2      	lsls	r2, r2, #31
 800625a:	d501      	bpl.n	8006260 <_printf_float+0x168>
 800625c:	3301      	adds	r3, #1
 800625e:	6123      	str	r3, [r4, #16]
 8006260:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006264:	2b00      	cmp	r3, #0
 8006266:	d09c      	beq.n	80061a2 <_printf_float+0xaa>
 8006268:	232d      	movs	r3, #45	; 0x2d
 800626a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800626e:	e798      	b.n	80061a2 <_printf_float+0xaa>
 8006270:	9a06      	ldr	r2, [sp, #24]
 8006272:	2a47      	cmp	r2, #71	; 0x47
 8006274:	d1be      	bne.n	80061f4 <_printf_float+0xfc>
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1bc      	bne.n	80061f4 <_printf_float+0xfc>
 800627a:	2301      	movs	r3, #1
 800627c:	e7b9      	b.n	80061f2 <_printf_float+0xfa>
 800627e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006282:	d118      	bne.n	80062b6 <_printf_float+0x1be>
 8006284:	2900      	cmp	r1, #0
 8006286:	6863      	ldr	r3, [r4, #4]
 8006288:	dd0b      	ble.n	80062a2 <_printf_float+0x1aa>
 800628a:	6121      	str	r1, [r4, #16]
 800628c:	b913      	cbnz	r3, 8006294 <_printf_float+0x19c>
 800628e:	6822      	ldr	r2, [r4, #0]
 8006290:	07d0      	lsls	r0, r2, #31
 8006292:	d502      	bpl.n	800629a <_printf_float+0x1a2>
 8006294:	3301      	adds	r3, #1
 8006296:	440b      	add	r3, r1
 8006298:	6123      	str	r3, [r4, #16]
 800629a:	65a1      	str	r1, [r4, #88]	; 0x58
 800629c:	f04f 0900 	mov.w	r9, #0
 80062a0:	e7de      	b.n	8006260 <_printf_float+0x168>
 80062a2:	b913      	cbnz	r3, 80062aa <_printf_float+0x1b2>
 80062a4:	6822      	ldr	r2, [r4, #0]
 80062a6:	07d2      	lsls	r2, r2, #31
 80062a8:	d501      	bpl.n	80062ae <_printf_float+0x1b6>
 80062aa:	3302      	adds	r3, #2
 80062ac:	e7f4      	b.n	8006298 <_printf_float+0x1a0>
 80062ae:	2301      	movs	r3, #1
 80062b0:	e7f2      	b.n	8006298 <_printf_float+0x1a0>
 80062b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80062b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062b8:	4299      	cmp	r1, r3
 80062ba:	db05      	blt.n	80062c8 <_printf_float+0x1d0>
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	6121      	str	r1, [r4, #16]
 80062c0:	07d8      	lsls	r0, r3, #31
 80062c2:	d5ea      	bpl.n	800629a <_printf_float+0x1a2>
 80062c4:	1c4b      	adds	r3, r1, #1
 80062c6:	e7e7      	b.n	8006298 <_printf_float+0x1a0>
 80062c8:	2900      	cmp	r1, #0
 80062ca:	bfd4      	ite	le
 80062cc:	f1c1 0202 	rsble	r2, r1, #2
 80062d0:	2201      	movgt	r2, #1
 80062d2:	4413      	add	r3, r2
 80062d4:	e7e0      	b.n	8006298 <_printf_float+0x1a0>
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	055a      	lsls	r2, r3, #21
 80062da:	d407      	bmi.n	80062ec <_printf_float+0x1f4>
 80062dc:	6923      	ldr	r3, [r4, #16]
 80062de:	4642      	mov	r2, r8
 80062e0:	4631      	mov	r1, r6
 80062e2:	4628      	mov	r0, r5
 80062e4:	47b8      	blx	r7
 80062e6:	3001      	adds	r0, #1
 80062e8:	d12c      	bne.n	8006344 <_printf_float+0x24c>
 80062ea:	e764      	b.n	80061b6 <_printf_float+0xbe>
 80062ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80062f0:	f240 80e0 	bls.w	80064b4 <_printf_float+0x3bc>
 80062f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062f8:	2200      	movs	r2, #0
 80062fa:	2300      	movs	r3, #0
 80062fc:	f7fa fc0c 	bl	8000b18 <__aeabi_dcmpeq>
 8006300:	2800      	cmp	r0, #0
 8006302:	d034      	beq.n	800636e <_printf_float+0x276>
 8006304:	4a37      	ldr	r2, [pc, #220]	; (80063e4 <_printf_float+0x2ec>)
 8006306:	2301      	movs	r3, #1
 8006308:	4631      	mov	r1, r6
 800630a:	4628      	mov	r0, r5
 800630c:	47b8      	blx	r7
 800630e:	3001      	adds	r0, #1
 8006310:	f43f af51 	beq.w	80061b6 <_printf_float+0xbe>
 8006314:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006318:	429a      	cmp	r2, r3
 800631a:	db02      	blt.n	8006322 <_printf_float+0x22a>
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	07d8      	lsls	r0, r3, #31
 8006320:	d510      	bpl.n	8006344 <_printf_float+0x24c>
 8006322:	ee18 3a10 	vmov	r3, s16
 8006326:	4652      	mov	r2, sl
 8006328:	4631      	mov	r1, r6
 800632a:	4628      	mov	r0, r5
 800632c:	47b8      	blx	r7
 800632e:	3001      	adds	r0, #1
 8006330:	f43f af41 	beq.w	80061b6 <_printf_float+0xbe>
 8006334:	f04f 0800 	mov.w	r8, #0
 8006338:	f104 091a 	add.w	r9, r4, #26
 800633c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800633e:	3b01      	subs	r3, #1
 8006340:	4543      	cmp	r3, r8
 8006342:	dc09      	bgt.n	8006358 <_printf_float+0x260>
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	079b      	lsls	r3, r3, #30
 8006348:	f100 8107 	bmi.w	800655a <_printf_float+0x462>
 800634c:	68e0      	ldr	r0, [r4, #12]
 800634e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006350:	4298      	cmp	r0, r3
 8006352:	bfb8      	it	lt
 8006354:	4618      	movlt	r0, r3
 8006356:	e730      	b.n	80061ba <_printf_float+0xc2>
 8006358:	2301      	movs	r3, #1
 800635a:	464a      	mov	r2, r9
 800635c:	4631      	mov	r1, r6
 800635e:	4628      	mov	r0, r5
 8006360:	47b8      	blx	r7
 8006362:	3001      	adds	r0, #1
 8006364:	f43f af27 	beq.w	80061b6 <_printf_float+0xbe>
 8006368:	f108 0801 	add.w	r8, r8, #1
 800636c:	e7e6      	b.n	800633c <_printf_float+0x244>
 800636e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006370:	2b00      	cmp	r3, #0
 8006372:	dc39      	bgt.n	80063e8 <_printf_float+0x2f0>
 8006374:	4a1b      	ldr	r2, [pc, #108]	; (80063e4 <_printf_float+0x2ec>)
 8006376:	2301      	movs	r3, #1
 8006378:	4631      	mov	r1, r6
 800637a:	4628      	mov	r0, r5
 800637c:	47b8      	blx	r7
 800637e:	3001      	adds	r0, #1
 8006380:	f43f af19 	beq.w	80061b6 <_printf_float+0xbe>
 8006384:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006388:	4313      	orrs	r3, r2
 800638a:	d102      	bne.n	8006392 <_printf_float+0x29a>
 800638c:	6823      	ldr	r3, [r4, #0]
 800638e:	07d9      	lsls	r1, r3, #31
 8006390:	d5d8      	bpl.n	8006344 <_printf_float+0x24c>
 8006392:	ee18 3a10 	vmov	r3, s16
 8006396:	4652      	mov	r2, sl
 8006398:	4631      	mov	r1, r6
 800639a:	4628      	mov	r0, r5
 800639c:	47b8      	blx	r7
 800639e:	3001      	adds	r0, #1
 80063a0:	f43f af09 	beq.w	80061b6 <_printf_float+0xbe>
 80063a4:	f04f 0900 	mov.w	r9, #0
 80063a8:	f104 0a1a 	add.w	sl, r4, #26
 80063ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ae:	425b      	negs	r3, r3
 80063b0:	454b      	cmp	r3, r9
 80063b2:	dc01      	bgt.n	80063b8 <_printf_float+0x2c0>
 80063b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063b6:	e792      	b.n	80062de <_printf_float+0x1e6>
 80063b8:	2301      	movs	r3, #1
 80063ba:	4652      	mov	r2, sl
 80063bc:	4631      	mov	r1, r6
 80063be:	4628      	mov	r0, r5
 80063c0:	47b8      	blx	r7
 80063c2:	3001      	adds	r0, #1
 80063c4:	f43f aef7 	beq.w	80061b6 <_printf_float+0xbe>
 80063c8:	f109 0901 	add.w	r9, r9, #1
 80063cc:	e7ee      	b.n	80063ac <_printf_float+0x2b4>
 80063ce:	bf00      	nop
 80063d0:	7fefffff 	.word	0x7fefffff
 80063d4:	08008b64 	.word	0x08008b64
 80063d8:	08008b68 	.word	0x08008b68
 80063dc:	08008b6c 	.word	0x08008b6c
 80063e0:	08008b70 	.word	0x08008b70
 80063e4:	08008b74 	.word	0x08008b74
 80063e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063ec:	429a      	cmp	r2, r3
 80063ee:	bfa8      	it	ge
 80063f0:	461a      	movge	r2, r3
 80063f2:	2a00      	cmp	r2, #0
 80063f4:	4691      	mov	r9, r2
 80063f6:	dc37      	bgt.n	8006468 <_printf_float+0x370>
 80063f8:	f04f 0b00 	mov.w	fp, #0
 80063fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006400:	f104 021a 	add.w	r2, r4, #26
 8006404:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006406:	9305      	str	r3, [sp, #20]
 8006408:	eba3 0309 	sub.w	r3, r3, r9
 800640c:	455b      	cmp	r3, fp
 800640e:	dc33      	bgt.n	8006478 <_printf_float+0x380>
 8006410:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006414:	429a      	cmp	r2, r3
 8006416:	db3b      	blt.n	8006490 <_printf_float+0x398>
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	07da      	lsls	r2, r3, #31
 800641c:	d438      	bmi.n	8006490 <_printf_float+0x398>
 800641e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006422:	eba2 0903 	sub.w	r9, r2, r3
 8006426:	9b05      	ldr	r3, [sp, #20]
 8006428:	1ad2      	subs	r2, r2, r3
 800642a:	4591      	cmp	r9, r2
 800642c:	bfa8      	it	ge
 800642e:	4691      	movge	r9, r2
 8006430:	f1b9 0f00 	cmp.w	r9, #0
 8006434:	dc35      	bgt.n	80064a2 <_printf_float+0x3aa>
 8006436:	f04f 0800 	mov.w	r8, #0
 800643a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800643e:	f104 0a1a 	add.w	sl, r4, #26
 8006442:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006446:	1a9b      	subs	r3, r3, r2
 8006448:	eba3 0309 	sub.w	r3, r3, r9
 800644c:	4543      	cmp	r3, r8
 800644e:	f77f af79 	ble.w	8006344 <_printf_float+0x24c>
 8006452:	2301      	movs	r3, #1
 8006454:	4652      	mov	r2, sl
 8006456:	4631      	mov	r1, r6
 8006458:	4628      	mov	r0, r5
 800645a:	47b8      	blx	r7
 800645c:	3001      	adds	r0, #1
 800645e:	f43f aeaa 	beq.w	80061b6 <_printf_float+0xbe>
 8006462:	f108 0801 	add.w	r8, r8, #1
 8006466:	e7ec      	b.n	8006442 <_printf_float+0x34a>
 8006468:	4613      	mov	r3, r2
 800646a:	4631      	mov	r1, r6
 800646c:	4642      	mov	r2, r8
 800646e:	4628      	mov	r0, r5
 8006470:	47b8      	blx	r7
 8006472:	3001      	adds	r0, #1
 8006474:	d1c0      	bne.n	80063f8 <_printf_float+0x300>
 8006476:	e69e      	b.n	80061b6 <_printf_float+0xbe>
 8006478:	2301      	movs	r3, #1
 800647a:	4631      	mov	r1, r6
 800647c:	4628      	mov	r0, r5
 800647e:	9205      	str	r2, [sp, #20]
 8006480:	47b8      	blx	r7
 8006482:	3001      	adds	r0, #1
 8006484:	f43f ae97 	beq.w	80061b6 <_printf_float+0xbe>
 8006488:	9a05      	ldr	r2, [sp, #20]
 800648a:	f10b 0b01 	add.w	fp, fp, #1
 800648e:	e7b9      	b.n	8006404 <_printf_float+0x30c>
 8006490:	ee18 3a10 	vmov	r3, s16
 8006494:	4652      	mov	r2, sl
 8006496:	4631      	mov	r1, r6
 8006498:	4628      	mov	r0, r5
 800649a:	47b8      	blx	r7
 800649c:	3001      	adds	r0, #1
 800649e:	d1be      	bne.n	800641e <_printf_float+0x326>
 80064a0:	e689      	b.n	80061b6 <_printf_float+0xbe>
 80064a2:	9a05      	ldr	r2, [sp, #20]
 80064a4:	464b      	mov	r3, r9
 80064a6:	4442      	add	r2, r8
 80064a8:	4631      	mov	r1, r6
 80064aa:	4628      	mov	r0, r5
 80064ac:	47b8      	blx	r7
 80064ae:	3001      	adds	r0, #1
 80064b0:	d1c1      	bne.n	8006436 <_printf_float+0x33e>
 80064b2:	e680      	b.n	80061b6 <_printf_float+0xbe>
 80064b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064b6:	2a01      	cmp	r2, #1
 80064b8:	dc01      	bgt.n	80064be <_printf_float+0x3c6>
 80064ba:	07db      	lsls	r3, r3, #31
 80064bc:	d53a      	bpl.n	8006534 <_printf_float+0x43c>
 80064be:	2301      	movs	r3, #1
 80064c0:	4642      	mov	r2, r8
 80064c2:	4631      	mov	r1, r6
 80064c4:	4628      	mov	r0, r5
 80064c6:	47b8      	blx	r7
 80064c8:	3001      	adds	r0, #1
 80064ca:	f43f ae74 	beq.w	80061b6 <_printf_float+0xbe>
 80064ce:	ee18 3a10 	vmov	r3, s16
 80064d2:	4652      	mov	r2, sl
 80064d4:	4631      	mov	r1, r6
 80064d6:	4628      	mov	r0, r5
 80064d8:	47b8      	blx	r7
 80064da:	3001      	adds	r0, #1
 80064dc:	f43f ae6b 	beq.w	80061b6 <_printf_float+0xbe>
 80064e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064e4:	2200      	movs	r2, #0
 80064e6:	2300      	movs	r3, #0
 80064e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80064ec:	f7fa fb14 	bl	8000b18 <__aeabi_dcmpeq>
 80064f0:	b9d8      	cbnz	r0, 800652a <_printf_float+0x432>
 80064f2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80064f6:	f108 0201 	add.w	r2, r8, #1
 80064fa:	4631      	mov	r1, r6
 80064fc:	4628      	mov	r0, r5
 80064fe:	47b8      	blx	r7
 8006500:	3001      	adds	r0, #1
 8006502:	d10e      	bne.n	8006522 <_printf_float+0x42a>
 8006504:	e657      	b.n	80061b6 <_printf_float+0xbe>
 8006506:	2301      	movs	r3, #1
 8006508:	4652      	mov	r2, sl
 800650a:	4631      	mov	r1, r6
 800650c:	4628      	mov	r0, r5
 800650e:	47b8      	blx	r7
 8006510:	3001      	adds	r0, #1
 8006512:	f43f ae50 	beq.w	80061b6 <_printf_float+0xbe>
 8006516:	f108 0801 	add.w	r8, r8, #1
 800651a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800651c:	3b01      	subs	r3, #1
 800651e:	4543      	cmp	r3, r8
 8006520:	dcf1      	bgt.n	8006506 <_printf_float+0x40e>
 8006522:	464b      	mov	r3, r9
 8006524:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006528:	e6da      	b.n	80062e0 <_printf_float+0x1e8>
 800652a:	f04f 0800 	mov.w	r8, #0
 800652e:	f104 0a1a 	add.w	sl, r4, #26
 8006532:	e7f2      	b.n	800651a <_printf_float+0x422>
 8006534:	2301      	movs	r3, #1
 8006536:	4642      	mov	r2, r8
 8006538:	e7df      	b.n	80064fa <_printf_float+0x402>
 800653a:	2301      	movs	r3, #1
 800653c:	464a      	mov	r2, r9
 800653e:	4631      	mov	r1, r6
 8006540:	4628      	mov	r0, r5
 8006542:	47b8      	blx	r7
 8006544:	3001      	adds	r0, #1
 8006546:	f43f ae36 	beq.w	80061b6 <_printf_float+0xbe>
 800654a:	f108 0801 	add.w	r8, r8, #1
 800654e:	68e3      	ldr	r3, [r4, #12]
 8006550:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006552:	1a5b      	subs	r3, r3, r1
 8006554:	4543      	cmp	r3, r8
 8006556:	dcf0      	bgt.n	800653a <_printf_float+0x442>
 8006558:	e6f8      	b.n	800634c <_printf_float+0x254>
 800655a:	f04f 0800 	mov.w	r8, #0
 800655e:	f104 0919 	add.w	r9, r4, #25
 8006562:	e7f4      	b.n	800654e <_printf_float+0x456>

08006564 <malloc>:
 8006564:	4b02      	ldr	r3, [pc, #8]	; (8006570 <malloc+0xc>)
 8006566:	4601      	mov	r1, r0
 8006568:	6818      	ldr	r0, [r3, #0]
 800656a:	f000 b823 	b.w	80065b4 <_malloc_r>
 800656e:	bf00      	nop
 8006570:	20000064 	.word	0x20000064

08006574 <sbrk_aligned>:
 8006574:	b570      	push	{r4, r5, r6, lr}
 8006576:	4e0e      	ldr	r6, [pc, #56]	; (80065b0 <sbrk_aligned+0x3c>)
 8006578:	460c      	mov	r4, r1
 800657a:	6831      	ldr	r1, [r6, #0]
 800657c:	4605      	mov	r5, r0
 800657e:	b911      	cbnz	r1, 8006586 <sbrk_aligned+0x12>
 8006580:	f000 fc4e 	bl	8006e20 <_sbrk_r>
 8006584:	6030      	str	r0, [r6, #0]
 8006586:	4621      	mov	r1, r4
 8006588:	4628      	mov	r0, r5
 800658a:	f000 fc49 	bl	8006e20 <_sbrk_r>
 800658e:	1c43      	adds	r3, r0, #1
 8006590:	d00a      	beq.n	80065a8 <sbrk_aligned+0x34>
 8006592:	1cc4      	adds	r4, r0, #3
 8006594:	f024 0403 	bic.w	r4, r4, #3
 8006598:	42a0      	cmp	r0, r4
 800659a:	d007      	beq.n	80065ac <sbrk_aligned+0x38>
 800659c:	1a21      	subs	r1, r4, r0
 800659e:	4628      	mov	r0, r5
 80065a0:	f000 fc3e 	bl	8006e20 <_sbrk_r>
 80065a4:	3001      	adds	r0, #1
 80065a6:	d101      	bne.n	80065ac <sbrk_aligned+0x38>
 80065a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80065ac:	4620      	mov	r0, r4
 80065ae:	bd70      	pop	{r4, r5, r6, pc}
 80065b0:	200004ec 	.word	0x200004ec

080065b4 <_malloc_r>:
 80065b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065b8:	1ccd      	adds	r5, r1, #3
 80065ba:	f025 0503 	bic.w	r5, r5, #3
 80065be:	3508      	adds	r5, #8
 80065c0:	2d0c      	cmp	r5, #12
 80065c2:	bf38      	it	cc
 80065c4:	250c      	movcc	r5, #12
 80065c6:	2d00      	cmp	r5, #0
 80065c8:	4607      	mov	r7, r0
 80065ca:	db01      	blt.n	80065d0 <_malloc_r+0x1c>
 80065cc:	42a9      	cmp	r1, r5
 80065ce:	d905      	bls.n	80065dc <_malloc_r+0x28>
 80065d0:	230c      	movs	r3, #12
 80065d2:	603b      	str	r3, [r7, #0]
 80065d4:	2600      	movs	r6, #0
 80065d6:	4630      	mov	r0, r6
 80065d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80066b0 <_malloc_r+0xfc>
 80065e0:	f000 faae 	bl	8006b40 <__malloc_lock>
 80065e4:	f8d8 3000 	ldr.w	r3, [r8]
 80065e8:	461c      	mov	r4, r3
 80065ea:	bb5c      	cbnz	r4, 8006644 <_malloc_r+0x90>
 80065ec:	4629      	mov	r1, r5
 80065ee:	4638      	mov	r0, r7
 80065f0:	f7ff ffc0 	bl	8006574 <sbrk_aligned>
 80065f4:	1c43      	adds	r3, r0, #1
 80065f6:	4604      	mov	r4, r0
 80065f8:	d155      	bne.n	80066a6 <_malloc_r+0xf2>
 80065fa:	f8d8 4000 	ldr.w	r4, [r8]
 80065fe:	4626      	mov	r6, r4
 8006600:	2e00      	cmp	r6, #0
 8006602:	d145      	bne.n	8006690 <_malloc_r+0xdc>
 8006604:	2c00      	cmp	r4, #0
 8006606:	d048      	beq.n	800669a <_malloc_r+0xe6>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	4631      	mov	r1, r6
 800660c:	4638      	mov	r0, r7
 800660e:	eb04 0903 	add.w	r9, r4, r3
 8006612:	f000 fc05 	bl	8006e20 <_sbrk_r>
 8006616:	4581      	cmp	r9, r0
 8006618:	d13f      	bne.n	800669a <_malloc_r+0xe6>
 800661a:	6821      	ldr	r1, [r4, #0]
 800661c:	1a6d      	subs	r5, r5, r1
 800661e:	4629      	mov	r1, r5
 8006620:	4638      	mov	r0, r7
 8006622:	f7ff ffa7 	bl	8006574 <sbrk_aligned>
 8006626:	3001      	adds	r0, #1
 8006628:	d037      	beq.n	800669a <_malloc_r+0xe6>
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	442b      	add	r3, r5
 800662e:	6023      	str	r3, [r4, #0]
 8006630:	f8d8 3000 	ldr.w	r3, [r8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d038      	beq.n	80066aa <_malloc_r+0xf6>
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	42a2      	cmp	r2, r4
 800663c:	d12b      	bne.n	8006696 <_malloc_r+0xe2>
 800663e:	2200      	movs	r2, #0
 8006640:	605a      	str	r2, [r3, #4]
 8006642:	e00f      	b.n	8006664 <_malloc_r+0xb0>
 8006644:	6822      	ldr	r2, [r4, #0]
 8006646:	1b52      	subs	r2, r2, r5
 8006648:	d41f      	bmi.n	800668a <_malloc_r+0xd6>
 800664a:	2a0b      	cmp	r2, #11
 800664c:	d917      	bls.n	800667e <_malloc_r+0xca>
 800664e:	1961      	adds	r1, r4, r5
 8006650:	42a3      	cmp	r3, r4
 8006652:	6025      	str	r5, [r4, #0]
 8006654:	bf18      	it	ne
 8006656:	6059      	strne	r1, [r3, #4]
 8006658:	6863      	ldr	r3, [r4, #4]
 800665a:	bf08      	it	eq
 800665c:	f8c8 1000 	streq.w	r1, [r8]
 8006660:	5162      	str	r2, [r4, r5]
 8006662:	604b      	str	r3, [r1, #4]
 8006664:	4638      	mov	r0, r7
 8006666:	f104 060b 	add.w	r6, r4, #11
 800666a:	f000 fa6f 	bl	8006b4c <__malloc_unlock>
 800666e:	f026 0607 	bic.w	r6, r6, #7
 8006672:	1d23      	adds	r3, r4, #4
 8006674:	1af2      	subs	r2, r6, r3
 8006676:	d0ae      	beq.n	80065d6 <_malloc_r+0x22>
 8006678:	1b9b      	subs	r3, r3, r6
 800667a:	50a3      	str	r3, [r4, r2]
 800667c:	e7ab      	b.n	80065d6 <_malloc_r+0x22>
 800667e:	42a3      	cmp	r3, r4
 8006680:	6862      	ldr	r2, [r4, #4]
 8006682:	d1dd      	bne.n	8006640 <_malloc_r+0x8c>
 8006684:	f8c8 2000 	str.w	r2, [r8]
 8006688:	e7ec      	b.n	8006664 <_malloc_r+0xb0>
 800668a:	4623      	mov	r3, r4
 800668c:	6864      	ldr	r4, [r4, #4]
 800668e:	e7ac      	b.n	80065ea <_malloc_r+0x36>
 8006690:	4634      	mov	r4, r6
 8006692:	6876      	ldr	r6, [r6, #4]
 8006694:	e7b4      	b.n	8006600 <_malloc_r+0x4c>
 8006696:	4613      	mov	r3, r2
 8006698:	e7cc      	b.n	8006634 <_malloc_r+0x80>
 800669a:	230c      	movs	r3, #12
 800669c:	603b      	str	r3, [r7, #0]
 800669e:	4638      	mov	r0, r7
 80066a0:	f000 fa54 	bl	8006b4c <__malloc_unlock>
 80066a4:	e797      	b.n	80065d6 <_malloc_r+0x22>
 80066a6:	6025      	str	r5, [r4, #0]
 80066a8:	e7dc      	b.n	8006664 <_malloc_r+0xb0>
 80066aa:	605b      	str	r3, [r3, #4]
 80066ac:	deff      	udf	#255	; 0xff
 80066ae:	bf00      	nop
 80066b0:	200004e8 	.word	0x200004e8

080066b4 <_printf_common>:
 80066b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066b8:	4616      	mov	r6, r2
 80066ba:	4699      	mov	r9, r3
 80066bc:	688a      	ldr	r2, [r1, #8]
 80066be:	690b      	ldr	r3, [r1, #16]
 80066c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066c4:	4293      	cmp	r3, r2
 80066c6:	bfb8      	it	lt
 80066c8:	4613      	movlt	r3, r2
 80066ca:	6033      	str	r3, [r6, #0]
 80066cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066d0:	4607      	mov	r7, r0
 80066d2:	460c      	mov	r4, r1
 80066d4:	b10a      	cbz	r2, 80066da <_printf_common+0x26>
 80066d6:	3301      	adds	r3, #1
 80066d8:	6033      	str	r3, [r6, #0]
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	0699      	lsls	r1, r3, #26
 80066de:	bf42      	ittt	mi
 80066e0:	6833      	ldrmi	r3, [r6, #0]
 80066e2:	3302      	addmi	r3, #2
 80066e4:	6033      	strmi	r3, [r6, #0]
 80066e6:	6825      	ldr	r5, [r4, #0]
 80066e8:	f015 0506 	ands.w	r5, r5, #6
 80066ec:	d106      	bne.n	80066fc <_printf_common+0x48>
 80066ee:	f104 0a19 	add.w	sl, r4, #25
 80066f2:	68e3      	ldr	r3, [r4, #12]
 80066f4:	6832      	ldr	r2, [r6, #0]
 80066f6:	1a9b      	subs	r3, r3, r2
 80066f8:	42ab      	cmp	r3, r5
 80066fa:	dc26      	bgt.n	800674a <_printf_common+0x96>
 80066fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006700:	1e13      	subs	r3, r2, #0
 8006702:	6822      	ldr	r2, [r4, #0]
 8006704:	bf18      	it	ne
 8006706:	2301      	movne	r3, #1
 8006708:	0692      	lsls	r2, r2, #26
 800670a:	d42b      	bmi.n	8006764 <_printf_common+0xb0>
 800670c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006710:	4649      	mov	r1, r9
 8006712:	4638      	mov	r0, r7
 8006714:	47c0      	blx	r8
 8006716:	3001      	adds	r0, #1
 8006718:	d01e      	beq.n	8006758 <_printf_common+0xa4>
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	6922      	ldr	r2, [r4, #16]
 800671e:	f003 0306 	and.w	r3, r3, #6
 8006722:	2b04      	cmp	r3, #4
 8006724:	bf02      	ittt	eq
 8006726:	68e5      	ldreq	r5, [r4, #12]
 8006728:	6833      	ldreq	r3, [r6, #0]
 800672a:	1aed      	subeq	r5, r5, r3
 800672c:	68a3      	ldr	r3, [r4, #8]
 800672e:	bf0c      	ite	eq
 8006730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006734:	2500      	movne	r5, #0
 8006736:	4293      	cmp	r3, r2
 8006738:	bfc4      	itt	gt
 800673a:	1a9b      	subgt	r3, r3, r2
 800673c:	18ed      	addgt	r5, r5, r3
 800673e:	2600      	movs	r6, #0
 8006740:	341a      	adds	r4, #26
 8006742:	42b5      	cmp	r5, r6
 8006744:	d11a      	bne.n	800677c <_printf_common+0xc8>
 8006746:	2000      	movs	r0, #0
 8006748:	e008      	b.n	800675c <_printf_common+0xa8>
 800674a:	2301      	movs	r3, #1
 800674c:	4652      	mov	r2, sl
 800674e:	4649      	mov	r1, r9
 8006750:	4638      	mov	r0, r7
 8006752:	47c0      	blx	r8
 8006754:	3001      	adds	r0, #1
 8006756:	d103      	bne.n	8006760 <_printf_common+0xac>
 8006758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800675c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006760:	3501      	adds	r5, #1
 8006762:	e7c6      	b.n	80066f2 <_printf_common+0x3e>
 8006764:	18e1      	adds	r1, r4, r3
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	2030      	movs	r0, #48	; 0x30
 800676a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800676e:	4422      	add	r2, r4
 8006770:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006774:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006778:	3302      	adds	r3, #2
 800677a:	e7c7      	b.n	800670c <_printf_common+0x58>
 800677c:	2301      	movs	r3, #1
 800677e:	4622      	mov	r2, r4
 8006780:	4649      	mov	r1, r9
 8006782:	4638      	mov	r0, r7
 8006784:	47c0      	blx	r8
 8006786:	3001      	adds	r0, #1
 8006788:	d0e6      	beq.n	8006758 <_printf_common+0xa4>
 800678a:	3601      	adds	r6, #1
 800678c:	e7d9      	b.n	8006742 <_printf_common+0x8e>
	...

08006790 <_printf_i>:
 8006790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006794:	7e0f      	ldrb	r7, [r1, #24]
 8006796:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006798:	2f78      	cmp	r7, #120	; 0x78
 800679a:	4691      	mov	r9, r2
 800679c:	4680      	mov	r8, r0
 800679e:	460c      	mov	r4, r1
 80067a0:	469a      	mov	sl, r3
 80067a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067a6:	d807      	bhi.n	80067b8 <_printf_i+0x28>
 80067a8:	2f62      	cmp	r7, #98	; 0x62
 80067aa:	d80a      	bhi.n	80067c2 <_printf_i+0x32>
 80067ac:	2f00      	cmp	r7, #0
 80067ae:	f000 80d4 	beq.w	800695a <_printf_i+0x1ca>
 80067b2:	2f58      	cmp	r7, #88	; 0x58
 80067b4:	f000 80c0 	beq.w	8006938 <_printf_i+0x1a8>
 80067b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067c0:	e03a      	b.n	8006838 <_printf_i+0xa8>
 80067c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067c6:	2b15      	cmp	r3, #21
 80067c8:	d8f6      	bhi.n	80067b8 <_printf_i+0x28>
 80067ca:	a101      	add	r1, pc, #4	; (adr r1, 80067d0 <_printf_i+0x40>)
 80067cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067d0:	08006829 	.word	0x08006829
 80067d4:	0800683d 	.word	0x0800683d
 80067d8:	080067b9 	.word	0x080067b9
 80067dc:	080067b9 	.word	0x080067b9
 80067e0:	080067b9 	.word	0x080067b9
 80067e4:	080067b9 	.word	0x080067b9
 80067e8:	0800683d 	.word	0x0800683d
 80067ec:	080067b9 	.word	0x080067b9
 80067f0:	080067b9 	.word	0x080067b9
 80067f4:	080067b9 	.word	0x080067b9
 80067f8:	080067b9 	.word	0x080067b9
 80067fc:	08006941 	.word	0x08006941
 8006800:	08006869 	.word	0x08006869
 8006804:	080068fb 	.word	0x080068fb
 8006808:	080067b9 	.word	0x080067b9
 800680c:	080067b9 	.word	0x080067b9
 8006810:	08006963 	.word	0x08006963
 8006814:	080067b9 	.word	0x080067b9
 8006818:	08006869 	.word	0x08006869
 800681c:	080067b9 	.word	0x080067b9
 8006820:	080067b9 	.word	0x080067b9
 8006824:	08006903 	.word	0x08006903
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	1d1a      	adds	r2, r3, #4
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	602a      	str	r2, [r5, #0]
 8006830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006834:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006838:	2301      	movs	r3, #1
 800683a:	e09f      	b.n	800697c <_printf_i+0x1ec>
 800683c:	6820      	ldr	r0, [r4, #0]
 800683e:	682b      	ldr	r3, [r5, #0]
 8006840:	0607      	lsls	r7, r0, #24
 8006842:	f103 0104 	add.w	r1, r3, #4
 8006846:	6029      	str	r1, [r5, #0]
 8006848:	d501      	bpl.n	800684e <_printf_i+0xbe>
 800684a:	681e      	ldr	r6, [r3, #0]
 800684c:	e003      	b.n	8006856 <_printf_i+0xc6>
 800684e:	0646      	lsls	r6, r0, #25
 8006850:	d5fb      	bpl.n	800684a <_printf_i+0xba>
 8006852:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006856:	2e00      	cmp	r6, #0
 8006858:	da03      	bge.n	8006862 <_printf_i+0xd2>
 800685a:	232d      	movs	r3, #45	; 0x2d
 800685c:	4276      	negs	r6, r6
 800685e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006862:	485a      	ldr	r0, [pc, #360]	; (80069cc <_printf_i+0x23c>)
 8006864:	230a      	movs	r3, #10
 8006866:	e012      	b.n	800688e <_printf_i+0xfe>
 8006868:	682b      	ldr	r3, [r5, #0]
 800686a:	6820      	ldr	r0, [r4, #0]
 800686c:	1d19      	adds	r1, r3, #4
 800686e:	6029      	str	r1, [r5, #0]
 8006870:	0605      	lsls	r5, r0, #24
 8006872:	d501      	bpl.n	8006878 <_printf_i+0xe8>
 8006874:	681e      	ldr	r6, [r3, #0]
 8006876:	e002      	b.n	800687e <_printf_i+0xee>
 8006878:	0641      	lsls	r1, r0, #25
 800687a:	d5fb      	bpl.n	8006874 <_printf_i+0xe4>
 800687c:	881e      	ldrh	r6, [r3, #0]
 800687e:	4853      	ldr	r0, [pc, #332]	; (80069cc <_printf_i+0x23c>)
 8006880:	2f6f      	cmp	r7, #111	; 0x6f
 8006882:	bf0c      	ite	eq
 8006884:	2308      	moveq	r3, #8
 8006886:	230a      	movne	r3, #10
 8006888:	2100      	movs	r1, #0
 800688a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800688e:	6865      	ldr	r5, [r4, #4]
 8006890:	60a5      	str	r5, [r4, #8]
 8006892:	2d00      	cmp	r5, #0
 8006894:	bfa2      	ittt	ge
 8006896:	6821      	ldrge	r1, [r4, #0]
 8006898:	f021 0104 	bicge.w	r1, r1, #4
 800689c:	6021      	strge	r1, [r4, #0]
 800689e:	b90e      	cbnz	r6, 80068a4 <_printf_i+0x114>
 80068a0:	2d00      	cmp	r5, #0
 80068a2:	d04b      	beq.n	800693c <_printf_i+0x1ac>
 80068a4:	4615      	mov	r5, r2
 80068a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80068aa:	fb03 6711 	mls	r7, r3, r1, r6
 80068ae:	5dc7      	ldrb	r7, [r0, r7]
 80068b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068b4:	4637      	mov	r7, r6
 80068b6:	42bb      	cmp	r3, r7
 80068b8:	460e      	mov	r6, r1
 80068ba:	d9f4      	bls.n	80068a6 <_printf_i+0x116>
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d10b      	bne.n	80068d8 <_printf_i+0x148>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	07de      	lsls	r6, r3, #31
 80068c4:	d508      	bpl.n	80068d8 <_printf_i+0x148>
 80068c6:	6923      	ldr	r3, [r4, #16]
 80068c8:	6861      	ldr	r1, [r4, #4]
 80068ca:	4299      	cmp	r1, r3
 80068cc:	bfde      	ittt	le
 80068ce:	2330      	movle	r3, #48	; 0x30
 80068d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068d4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80068d8:	1b52      	subs	r2, r2, r5
 80068da:	6122      	str	r2, [r4, #16]
 80068dc:	f8cd a000 	str.w	sl, [sp]
 80068e0:	464b      	mov	r3, r9
 80068e2:	aa03      	add	r2, sp, #12
 80068e4:	4621      	mov	r1, r4
 80068e6:	4640      	mov	r0, r8
 80068e8:	f7ff fee4 	bl	80066b4 <_printf_common>
 80068ec:	3001      	adds	r0, #1
 80068ee:	d14a      	bne.n	8006986 <_printf_i+0x1f6>
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068f4:	b004      	add	sp, #16
 80068f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	f043 0320 	orr.w	r3, r3, #32
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	4833      	ldr	r0, [pc, #204]	; (80069d0 <_printf_i+0x240>)
 8006904:	2778      	movs	r7, #120	; 0x78
 8006906:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	6829      	ldr	r1, [r5, #0]
 800690e:	061f      	lsls	r7, r3, #24
 8006910:	f851 6b04 	ldr.w	r6, [r1], #4
 8006914:	d402      	bmi.n	800691c <_printf_i+0x18c>
 8006916:	065f      	lsls	r7, r3, #25
 8006918:	bf48      	it	mi
 800691a:	b2b6      	uxthmi	r6, r6
 800691c:	07df      	lsls	r7, r3, #31
 800691e:	bf48      	it	mi
 8006920:	f043 0320 	orrmi.w	r3, r3, #32
 8006924:	6029      	str	r1, [r5, #0]
 8006926:	bf48      	it	mi
 8006928:	6023      	strmi	r3, [r4, #0]
 800692a:	b91e      	cbnz	r6, 8006934 <_printf_i+0x1a4>
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	f023 0320 	bic.w	r3, r3, #32
 8006932:	6023      	str	r3, [r4, #0]
 8006934:	2310      	movs	r3, #16
 8006936:	e7a7      	b.n	8006888 <_printf_i+0xf8>
 8006938:	4824      	ldr	r0, [pc, #144]	; (80069cc <_printf_i+0x23c>)
 800693a:	e7e4      	b.n	8006906 <_printf_i+0x176>
 800693c:	4615      	mov	r5, r2
 800693e:	e7bd      	b.n	80068bc <_printf_i+0x12c>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	6826      	ldr	r6, [r4, #0]
 8006944:	6961      	ldr	r1, [r4, #20]
 8006946:	1d18      	adds	r0, r3, #4
 8006948:	6028      	str	r0, [r5, #0]
 800694a:	0635      	lsls	r5, r6, #24
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	d501      	bpl.n	8006954 <_printf_i+0x1c4>
 8006950:	6019      	str	r1, [r3, #0]
 8006952:	e002      	b.n	800695a <_printf_i+0x1ca>
 8006954:	0670      	lsls	r0, r6, #25
 8006956:	d5fb      	bpl.n	8006950 <_printf_i+0x1c0>
 8006958:	8019      	strh	r1, [r3, #0]
 800695a:	2300      	movs	r3, #0
 800695c:	6123      	str	r3, [r4, #16]
 800695e:	4615      	mov	r5, r2
 8006960:	e7bc      	b.n	80068dc <_printf_i+0x14c>
 8006962:	682b      	ldr	r3, [r5, #0]
 8006964:	1d1a      	adds	r2, r3, #4
 8006966:	602a      	str	r2, [r5, #0]
 8006968:	681d      	ldr	r5, [r3, #0]
 800696a:	6862      	ldr	r2, [r4, #4]
 800696c:	2100      	movs	r1, #0
 800696e:	4628      	mov	r0, r5
 8006970:	f7f9 fc56 	bl	8000220 <memchr>
 8006974:	b108      	cbz	r0, 800697a <_printf_i+0x1ea>
 8006976:	1b40      	subs	r0, r0, r5
 8006978:	6060      	str	r0, [r4, #4]
 800697a:	6863      	ldr	r3, [r4, #4]
 800697c:	6123      	str	r3, [r4, #16]
 800697e:	2300      	movs	r3, #0
 8006980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006984:	e7aa      	b.n	80068dc <_printf_i+0x14c>
 8006986:	6923      	ldr	r3, [r4, #16]
 8006988:	462a      	mov	r2, r5
 800698a:	4649      	mov	r1, r9
 800698c:	4640      	mov	r0, r8
 800698e:	47d0      	blx	sl
 8006990:	3001      	adds	r0, #1
 8006992:	d0ad      	beq.n	80068f0 <_printf_i+0x160>
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	079b      	lsls	r3, r3, #30
 8006998:	d413      	bmi.n	80069c2 <_printf_i+0x232>
 800699a:	68e0      	ldr	r0, [r4, #12]
 800699c:	9b03      	ldr	r3, [sp, #12]
 800699e:	4298      	cmp	r0, r3
 80069a0:	bfb8      	it	lt
 80069a2:	4618      	movlt	r0, r3
 80069a4:	e7a6      	b.n	80068f4 <_printf_i+0x164>
 80069a6:	2301      	movs	r3, #1
 80069a8:	4632      	mov	r2, r6
 80069aa:	4649      	mov	r1, r9
 80069ac:	4640      	mov	r0, r8
 80069ae:	47d0      	blx	sl
 80069b0:	3001      	adds	r0, #1
 80069b2:	d09d      	beq.n	80068f0 <_printf_i+0x160>
 80069b4:	3501      	adds	r5, #1
 80069b6:	68e3      	ldr	r3, [r4, #12]
 80069b8:	9903      	ldr	r1, [sp, #12]
 80069ba:	1a5b      	subs	r3, r3, r1
 80069bc:	42ab      	cmp	r3, r5
 80069be:	dcf2      	bgt.n	80069a6 <_printf_i+0x216>
 80069c0:	e7eb      	b.n	800699a <_printf_i+0x20a>
 80069c2:	2500      	movs	r5, #0
 80069c4:	f104 0619 	add.w	r6, r4, #25
 80069c8:	e7f5      	b.n	80069b6 <_printf_i+0x226>
 80069ca:	bf00      	nop
 80069cc:	08008b76 	.word	0x08008b76
 80069d0:	08008b87 	.word	0x08008b87

080069d4 <setbuf>:
 80069d4:	fab1 f281 	clz	r2, r1
 80069d8:	0952      	lsrs	r2, r2, #5
 80069da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069de:	0052      	lsls	r2, r2, #1
 80069e0:	f000 b800 	b.w	80069e4 <setvbuf>

080069e4 <setvbuf>:
 80069e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069e8:	461d      	mov	r5, r3
 80069ea:	4b54      	ldr	r3, [pc, #336]	; (8006b3c <setvbuf+0x158>)
 80069ec:	681f      	ldr	r7, [r3, #0]
 80069ee:	4604      	mov	r4, r0
 80069f0:	460e      	mov	r6, r1
 80069f2:	4690      	mov	r8, r2
 80069f4:	b127      	cbz	r7, 8006a00 <setvbuf+0x1c>
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	b913      	cbnz	r3, 8006a00 <setvbuf+0x1c>
 80069fa:	4638      	mov	r0, r7
 80069fc:	f000 f938 	bl	8006c70 <__sinit>
 8006a00:	f1b8 0f02 	cmp.w	r8, #2
 8006a04:	d006      	beq.n	8006a14 <setvbuf+0x30>
 8006a06:	f1b8 0f01 	cmp.w	r8, #1
 8006a0a:	f200 8094 	bhi.w	8006b36 <setvbuf+0x152>
 8006a0e:	2d00      	cmp	r5, #0
 8006a10:	f2c0 8091 	blt.w	8006b36 <setvbuf+0x152>
 8006a14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a16:	07da      	lsls	r2, r3, #31
 8006a18:	d405      	bmi.n	8006a26 <setvbuf+0x42>
 8006a1a:	89a3      	ldrh	r3, [r4, #12]
 8006a1c:	059b      	lsls	r3, r3, #22
 8006a1e:	d402      	bmi.n	8006a26 <setvbuf+0x42>
 8006a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a22:	f000 fa38 	bl	8006e96 <__retarget_lock_acquire_recursive>
 8006a26:	4621      	mov	r1, r4
 8006a28:	4638      	mov	r0, r7
 8006a2a:	f001 fac9 	bl	8007fc0 <_fflush_r>
 8006a2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a30:	b141      	cbz	r1, 8006a44 <setvbuf+0x60>
 8006a32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a36:	4299      	cmp	r1, r3
 8006a38:	d002      	beq.n	8006a40 <setvbuf+0x5c>
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	f001 f8aa 	bl	8007b94 <_free_r>
 8006a40:	2300      	movs	r3, #0
 8006a42:	6363      	str	r3, [r4, #52]	; 0x34
 8006a44:	2300      	movs	r3, #0
 8006a46:	61a3      	str	r3, [r4, #24]
 8006a48:	6063      	str	r3, [r4, #4]
 8006a4a:	89a3      	ldrh	r3, [r4, #12]
 8006a4c:	0618      	lsls	r0, r3, #24
 8006a4e:	d503      	bpl.n	8006a58 <setvbuf+0x74>
 8006a50:	6921      	ldr	r1, [r4, #16]
 8006a52:	4638      	mov	r0, r7
 8006a54:	f001 f89e 	bl	8007b94 <_free_r>
 8006a58:	89a3      	ldrh	r3, [r4, #12]
 8006a5a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006a5e:	f023 0303 	bic.w	r3, r3, #3
 8006a62:	f1b8 0f02 	cmp.w	r8, #2
 8006a66:	81a3      	strh	r3, [r4, #12]
 8006a68:	d05f      	beq.n	8006b2a <setvbuf+0x146>
 8006a6a:	ab01      	add	r3, sp, #4
 8006a6c:	466a      	mov	r2, sp
 8006a6e:	4621      	mov	r1, r4
 8006a70:	4638      	mov	r0, r7
 8006a72:	f000 f933 	bl	8006cdc <__swhatbuf_r>
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	4318      	orrs	r0, r3
 8006a7a:	81a0      	strh	r0, [r4, #12]
 8006a7c:	bb2d      	cbnz	r5, 8006aca <setvbuf+0xe6>
 8006a7e:	9d00      	ldr	r5, [sp, #0]
 8006a80:	4628      	mov	r0, r5
 8006a82:	f7ff fd6f 	bl	8006564 <malloc>
 8006a86:	4606      	mov	r6, r0
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	d150      	bne.n	8006b2e <setvbuf+0x14a>
 8006a8c:	f8dd 9000 	ldr.w	r9, [sp]
 8006a90:	45a9      	cmp	r9, r5
 8006a92:	d13e      	bne.n	8006b12 <setvbuf+0x12e>
 8006a94:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006a98:	2200      	movs	r2, #0
 8006a9a:	60a2      	str	r2, [r4, #8]
 8006a9c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006aa0:	6022      	str	r2, [r4, #0]
 8006aa2:	6122      	str	r2, [r4, #16]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aaa:	6162      	str	r2, [r4, #20]
 8006aac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006aae:	f043 0302 	orr.w	r3, r3, #2
 8006ab2:	07d1      	lsls	r1, r2, #31
 8006ab4:	81a3      	strh	r3, [r4, #12]
 8006ab6:	d404      	bmi.n	8006ac2 <setvbuf+0xde>
 8006ab8:	059b      	lsls	r3, r3, #22
 8006aba:	d402      	bmi.n	8006ac2 <setvbuf+0xde>
 8006abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006abe:	f000 f9eb 	bl	8006e98 <__retarget_lock_release_recursive>
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	b003      	add	sp, #12
 8006ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006aca:	2e00      	cmp	r6, #0
 8006acc:	d0d8      	beq.n	8006a80 <setvbuf+0x9c>
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	b913      	cbnz	r3, 8006ad8 <setvbuf+0xf4>
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	f000 f8cc 	bl	8006c70 <__sinit>
 8006ad8:	f1b8 0f01 	cmp.w	r8, #1
 8006adc:	bf08      	it	eq
 8006ade:	89a3      	ldrheq	r3, [r4, #12]
 8006ae0:	6026      	str	r6, [r4, #0]
 8006ae2:	bf04      	itt	eq
 8006ae4:	f043 0301 	orreq.w	r3, r3, #1
 8006ae8:	81a3      	strheq	r3, [r4, #12]
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	f013 0208 	ands.w	r2, r3, #8
 8006af0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006af4:	d01d      	beq.n	8006b32 <setvbuf+0x14e>
 8006af6:	07da      	lsls	r2, r3, #31
 8006af8:	bf41      	itttt	mi
 8006afa:	2200      	movmi	r2, #0
 8006afc:	426d      	negmi	r5, r5
 8006afe:	60a2      	strmi	r2, [r4, #8]
 8006b00:	61a5      	strmi	r5, [r4, #24]
 8006b02:	bf58      	it	pl
 8006b04:	60a5      	strpl	r5, [r4, #8]
 8006b06:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006b08:	f015 0501 	ands.w	r5, r5, #1
 8006b0c:	d0d4      	beq.n	8006ab8 <setvbuf+0xd4>
 8006b0e:	2500      	movs	r5, #0
 8006b10:	e7d7      	b.n	8006ac2 <setvbuf+0xde>
 8006b12:	4648      	mov	r0, r9
 8006b14:	f7ff fd26 	bl	8006564 <malloc>
 8006b18:	4606      	mov	r6, r0
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d0ba      	beq.n	8006a94 <setvbuf+0xb0>
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b24:	81a3      	strh	r3, [r4, #12]
 8006b26:	464d      	mov	r5, r9
 8006b28:	e7d1      	b.n	8006ace <setvbuf+0xea>
 8006b2a:	2500      	movs	r5, #0
 8006b2c:	e7b4      	b.n	8006a98 <setvbuf+0xb4>
 8006b2e:	46a9      	mov	r9, r5
 8006b30:	e7f5      	b.n	8006b1e <setvbuf+0x13a>
 8006b32:	60a2      	str	r2, [r4, #8]
 8006b34:	e7e7      	b.n	8006b06 <setvbuf+0x122>
 8006b36:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006b3a:	e7c2      	b.n	8006ac2 <setvbuf+0xde>
 8006b3c:	20000064 	.word	0x20000064

08006b40 <__malloc_lock>:
 8006b40:	4801      	ldr	r0, [pc, #4]	; (8006b48 <__malloc_lock+0x8>)
 8006b42:	f000 b9a8 	b.w	8006e96 <__retarget_lock_acquire_recursive>
 8006b46:	bf00      	nop
 8006b48:	2000062c 	.word	0x2000062c

08006b4c <__malloc_unlock>:
 8006b4c:	4801      	ldr	r0, [pc, #4]	; (8006b54 <__malloc_unlock+0x8>)
 8006b4e:	f000 b9a3 	b.w	8006e98 <__retarget_lock_release_recursive>
 8006b52:	bf00      	nop
 8006b54:	2000062c 	.word	0x2000062c

08006b58 <std>:
 8006b58:	2300      	movs	r3, #0
 8006b5a:	b510      	push	{r4, lr}
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	e9c0 3300 	strd	r3, r3, [r0]
 8006b62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b66:	6083      	str	r3, [r0, #8]
 8006b68:	8181      	strh	r1, [r0, #12]
 8006b6a:	6643      	str	r3, [r0, #100]	; 0x64
 8006b6c:	81c2      	strh	r2, [r0, #14]
 8006b6e:	6183      	str	r3, [r0, #24]
 8006b70:	4619      	mov	r1, r3
 8006b72:	2208      	movs	r2, #8
 8006b74:	305c      	adds	r0, #92	; 0x5c
 8006b76:	f000 f925 	bl	8006dc4 <memset>
 8006b7a:	4b0d      	ldr	r3, [pc, #52]	; (8006bb0 <std+0x58>)
 8006b7c:	6263      	str	r3, [r4, #36]	; 0x24
 8006b7e:	4b0d      	ldr	r3, [pc, #52]	; (8006bb4 <std+0x5c>)
 8006b80:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b82:	4b0d      	ldr	r3, [pc, #52]	; (8006bb8 <std+0x60>)
 8006b84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b86:	4b0d      	ldr	r3, [pc, #52]	; (8006bbc <std+0x64>)
 8006b88:	6323      	str	r3, [r4, #48]	; 0x30
 8006b8a:	4b0d      	ldr	r3, [pc, #52]	; (8006bc0 <std+0x68>)
 8006b8c:	6224      	str	r4, [r4, #32]
 8006b8e:	429c      	cmp	r4, r3
 8006b90:	d006      	beq.n	8006ba0 <std+0x48>
 8006b92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006b96:	4294      	cmp	r4, r2
 8006b98:	d002      	beq.n	8006ba0 <std+0x48>
 8006b9a:	33d0      	adds	r3, #208	; 0xd0
 8006b9c:	429c      	cmp	r4, r3
 8006b9e:	d105      	bne.n	8006bac <std+0x54>
 8006ba0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ba8:	f000 b974 	b.w	8006e94 <__retarget_lock_init_recursive>
 8006bac:	bd10      	pop	{r4, pc}
 8006bae:	bf00      	nop
 8006bb0:	08008709 	.word	0x08008709
 8006bb4:	0800872b 	.word	0x0800872b
 8006bb8:	08008763 	.word	0x08008763
 8006bbc:	08008787 	.word	0x08008787
 8006bc0:	200004f0 	.word	0x200004f0

08006bc4 <stdio_exit_handler>:
 8006bc4:	4a02      	ldr	r2, [pc, #8]	; (8006bd0 <stdio_exit_handler+0xc>)
 8006bc6:	4903      	ldr	r1, [pc, #12]	; (8006bd4 <stdio_exit_handler+0x10>)
 8006bc8:	4803      	ldr	r0, [pc, #12]	; (8006bd8 <stdio_exit_handler+0x14>)
 8006bca:	f000 b869 	b.w	8006ca0 <_fwalk_sglue>
 8006bce:	bf00      	nop
 8006bd0:	2000000c 	.word	0x2000000c
 8006bd4:	08007fc1 	.word	0x08007fc1
 8006bd8:	20000018 	.word	0x20000018

08006bdc <cleanup_stdio>:
 8006bdc:	6841      	ldr	r1, [r0, #4]
 8006bde:	4b0c      	ldr	r3, [pc, #48]	; (8006c10 <cleanup_stdio+0x34>)
 8006be0:	4299      	cmp	r1, r3
 8006be2:	b510      	push	{r4, lr}
 8006be4:	4604      	mov	r4, r0
 8006be6:	d001      	beq.n	8006bec <cleanup_stdio+0x10>
 8006be8:	f001 f9ea 	bl	8007fc0 <_fflush_r>
 8006bec:	68a1      	ldr	r1, [r4, #8]
 8006bee:	4b09      	ldr	r3, [pc, #36]	; (8006c14 <cleanup_stdio+0x38>)
 8006bf0:	4299      	cmp	r1, r3
 8006bf2:	d002      	beq.n	8006bfa <cleanup_stdio+0x1e>
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	f001 f9e3 	bl	8007fc0 <_fflush_r>
 8006bfa:	68e1      	ldr	r1, [r4, #12]
 8006bfc:	4b06      	ldr	r3, [pc, #24]	; (8006c18 <cleanup_stdio+0x3c>)
 8006bfe:	4299      	cmp	r1, r3
 8006c00:	d004      	beq.n	8006c0c <cleanup_stdio+0x30>
 8006c02:	4620      	mov	r0, r4
 8006c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c08:	f001 b9da 	b.w	8007fc0 <_fflush_r>
 8006c0c:	bd10      	pop	{r4, pc}
 8006c0e:	bf00      	nop
 8006c10:	200004f0 	.word	0x200004f0
 8006c14:	20000558 	.word	0x20000558
 8006c18:	200005c0 	.word	0x200005c0

08006c1c <global_stdio_init.part.0>:
 8006c1c:	b510      	push	{r4, lr}
 8006c1e:	4b0b      	ldr	r3, [pc, #44]	; (8006c4c <global_stdio_init.part.0+0x30>)
 8006c20:	4c0b      	ldr	r4, [pc, #44]	; (8006c50 <global_stdio_init.part.0+0x34>)
 8006c22:	4a0c      	ldr	r2, [pc, #48]	; (8006c54 <global_stdio_init.part.0+0x38>)
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	4620      	mov	r0, r4
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2104      	movs	r1, #4
 8006c2c:	f7ff ff94 	bl	8006b58 <std>
 8006c30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006c34:	2201      	movs	r2, #1
 8006c36:	2109      	movs	r1, #9
 8006c38:	f7ff ff8e 	bl	8006b58 <std>
 8006c3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006c40:	2202      	movs	r2, #2
 8006c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c46:	2112      	movs	r1, #18
 8006c48:	f7ff bf86 	b.w	8006b58 <std>
 8006c4c:	20000628 	.word	0x20000628
 8006c50:	200004f0 	.word	0x200004f0
 8006c54:	08006bc5 	.word	0x08006bc5

08006c58 <__sfp_lock_acquire>:
 8006c58:	4801      	ldr	r0, [pc, #4]	; (8006c60 <__sfp_lock_acquire+0x8>)
 8006c5a:	f000 b91c 	b.w	8006e96 <__retarget_lock_acquire_recursive>
 8006c5e:	bf00      	nop
 8006c60:	2000062d 	.word	0x2000062d

08006c64 <__sfp_lock_release>:
 8006c64:	4801      	ldr	r0, [pc, #4]	; (8006c6c <__sfp_lock_release+0x8>)
 8006c66:	f000 b917 	b.w	8006e98 <__retarget_lock_release_recursive>
 8006c6a:	bf00      	nop
 8006c6c:	2000062d 	.word	0x2000062d

08006c70 <__sinit>:
 8006c70:	b510      	push	{r4, lr}
 8006c72:	4604      	mov	r4, r0
 8006c74:	f7ff fff0 	bl	8006c58 <__sfp_lock_acquire>
 8006c78:	6a23      	ldr	r3, [r4, #32]
 8006c7a:	b11b      	cbz	r3, 8006c84 <__sinit+0x14>
 8006c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c80:	f7ff bff0 	b.w	8006c64 <__sfp_lock_release>
 8006c84:	4b04      	ldr	r3, [pc, #16]	; (8006c98 <__sinit+0x28>)
 8006c86:	6223      	str	r3, [r4, #32]
 8006c88:	4b04      	ldr	r3, [pc, #16]	; (8006c9c <__sinit+0x2c>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1f5      	bne.n	8006c7c <__sinit+0xc>
 8006c90:	f7ff ffc4 	bl	8006c1c <global_stdio_init.part.0>
 8006c94:	e7f2      	b.n	8006c7c <__sinit+0xc>
 8006c96:	bf00      	nop
 8006c98:	08006bdd 	.word	0x08006bdd
 8006c9c:	20000628 	.word	0x20000628

08006ca0 <_fwalk_sglue>:
 8006ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca4:	4607      	mov	r7, r0
 8006ca6:	4688      	mov	r8, r1
 8006ca8:	4614      	mov	r4, r2
 8006caa:	2600      	movs	r6, #0
 8006cac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cb0:	f1b9 0901 	subs.w	r9, r9, #1
 8006cb4:	d505      	bpl.n	8006cc2 <_fwalk_sglue+0x22>
 8006cb6:	6824      	ldr	r4, [r4, #0]
 8006cb8:	2c00      	cmp	r4, #0
 8006cba:	d1f7      	bne.n	8006cac <_fwalk_sglue+0xc>
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cc2:	89ab      	ldrh	r3, [r5, #12]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d907      	bls.n	8006cd8 <_fwalk_sglue+0x38>
 8006cc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	d003      	beq.n	8006cd8 <_fwalk_sglue+0x38>
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	4638      	mov	r0, r7
 8006cd4:	47c0      	blx	r8
 8006cd6:	4306      	orrs	r6, r0
 8006cd8:	3568      	adds	r5, #104	; 0x68
 8006cda:	e7e9      	b.n	8006cb0 <_fwalk_sglue+0x10>

08006cdc <__swhatbuf_r>:
 8006cdc:	b570      	push	{r4, r5, r6, lr}
 8006cde:	460c      	mov	r4, r1
 8006ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce4:	2900      	cmp	r1, #0
 8006ce6:	b096      	sub	sp, #88	; 0x58
 8006ce8:	4615      	mov	r5, r2
 8006cea:	461e      	mov	r6, r3
 8006cec:	da0d      	bge.n	8006d0a <__swhatbuf_r+0x2e>
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006cf4:	f04f 0100 	mov.w	r1, #0
 8006cf8:	bf0c      	ite	eq
 8006cfa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006cfe:	2340      	movne	r3, #64	; 0x40
 8006d00:	2000      	movs	r0, #0
 8006d02:	6031      	str	r1, [r6, #0]
 8006d04:	602b      	str	r3, [r5, #0]
 8006d06:	b016      	add	sp, #88	; 0x58
 8006d08:	bd70      	pop	{r4, r5, r6, pc}
 8006d0a:	466a      	mov	r2, sp
 8006d0c:	f000 f866 	bl	8006ddc <_fstat_r>
 8006d10:	2800      	cmp	r0, #0
 8006d12:	dbec      	blt.n	8006cee <__swhatbuf_r+0x12>
 8006d14:	9901      	ldr	r1, [sp, #4]
 8006d16:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006d1a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006d1e:	4259      	negs	r1, r3
 8006d20:	4159      	adcs	r1, r3
 8006d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d26:	e7eb      	b.n	8006d00 <__swhatbuf_r+0x24>

08006d28 <__smakebuf_r>:
 8006d28:	898b      	ldrh	r3, [r1, #12]
 8006d2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d2c:	079d      	lsls	r5, r3, #30
 8006d2e:	4606      	mov	r6, r0
 8006d30:	460c      	mov	r4, r1
 8006d32:	d507      	bpl.n	8006d44 <__smakebuf_r+0x1c>
 8006d34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	6123      	str	r3, [r4, #16]
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	6163      	str	r3, [r4, #20]
 8006d40:	b002      	add	sp, #8
 8006d42:	bd70      	pop	{r4, r5, r6, pc}
 8006d44:	ab01      	add	r3, sp, #4
 8006d46:	466a      	mov	r2, sp
 8006d48:	f7ff ffc8 	bl	8006cdc <__swhatbuf_r>
 8006d4c:	9900      	ldr	r1, [sp, #0]
 8006d4e:	4605      	mov	r5, r0
 8006d50:	4630      	mov	r0, r6
 8006d52:	f7ff fc2f 	bl	80065b4 <_malloc_r>
 8006d56:	b948      	cbnz	r0, 8006d6c <__smakebuf_r+0x44>
 8006d58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d5c:	059a      	lsls	r2, r3, #22
 8006d5e:	d4ef      	bmi.n	8006d40 <__smakebuf_r+0x18>
 8006d60:	f023 0303 	bic.w	r3, r3, #3
 8006d64:	f043 0302 	orr.w	r3, r3, #2
 8006d68:	81a3      	strh	r3, [r4, #12]
 8006d6a:	e7e3      	b.n	8006d34 <__smakebuf_r+0xc>
 8006d6c:	89a3      	ldrh	r3, [r4, #12]
 8006d6e:	6020      	str	r0, [r4, #0]
 8006d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d74:	81a3      	strh	r3, [r4, #12]
 8006d76:	9b00      	ldr	r3, [sp, #0]
 8006d78:	6163      	str	r3, [r4, #20]
 8006d7a:	9b01      	ldr	r3, [sp, #4]
 8006d7c:	6120      	str	r0, [r4, #16]
 8006d7e:	b15b      	cbz	r3, 8006d98 <__smakebuf_r+0x70>
 8006d80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d84:	4630      	mov	r0, r6
 8006d86:	f000 f83b 	bl	8006e00 <_isatty_r>
 8006d8a:	b128      	cbz	r0, 8006d98 <__smakebuf_r+0x70>
 8006d8c:	89a3      	ldrh	r3, [r4, #12]
 8006d8e:	f023 0303 	bic.w	r3, r3, #3
 8006d92:	f043 0301 	orr.w	r3, r3, #1
 8006d96:	81a3      	strh	r3, [r4, #12]
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	431d      	orrs	r5, r3
 8006d9c:	81a5      	strh	r5, [r4, #12]
 8006d9e:	e7cf      	b.n	8006d40 <__smakebuf_r+0x18>

08006da0 <iprintf>:
 8006da0:	b40f      	push	{r0, r1, r2, r3}
 8006da2:	b507      	push	{r0, r1, r2, lr}
 8006da4:	4906      	ldr	r1, [pc, #24]	; (8006dc0 <iprintf+0x20>)
 8006da6:	ab04      	add	r3, sp, #16
 8006da8:	6808      	ldr	r0, [r1, #0]
 8006daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dae:	6881      	ldr	r1, [r0, #8]
 8006db0:	9301      	str	r3, [sp, #4]
 8006db2:	f000 ff65 	bl	8007c80 <_vfiprintf_r>
 8006db6:	b003      	add	sp, #12
 8006db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dbc:	b004      	add	sp, #16
 8006dbe:	4770      	bx	lr
 8006dc0:	20000064 	.word	0x20000064

08006dc4 <memset>:
 8006dc4:	4402      	add	r2, r0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d100      	bne.n	8006dce <memset+0xa>
 8006dcc:	4770      	bx	lr
 8006dce:	f803 1b01 	strb.w	r1, [r3], #1
 8006dd2:	e7f9      	b.n	8006dc8 <memset+0x4>

08006dd4 <_localeconv_r>:
 8006dd4:	4800      	ldr	r0, [pc, #0]	; (8006dd8 <_localeconv_r+0x4>)
 8006dd6:	4770      	bx	lr
 8006dd8:	20000158 	.word	0x20000158

08006ddc <_fstat_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4d07      	ldr	r5, [pc, #28]	; (8006dfc <_fstat_r+0x20>)
 8006de0:	2300      	movs	r3, #0
 8006de2:	4604      	mov	r4, r0
 8006de4:	4608      	mov	r0, r1
 8006de6:	4611      	mov	r1, r2
 8006de8:	602b      	str	r3, [r5, #0]
 8006dea:	f7fa ff24 	bl	8001c36 <_fstat>
 8006dee:	1c43      	adds	r3, r0, #1
 8006df0:	d102      	bne.n	8006df8 <_fstat_r+0x1c>
 8006df2:	682b      	ldr	r3, [r5, #0]
 8006df4:	b103      	cbz	r3, 8006df8 <_fstat_r+0x1c>
 8006df6:	6023      	str	r3, [r4, #0]
 8006df8:	bd38      	pop	{r3, r4, r5, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000630 	.word	0x20000630

08006e00 <_isatty_r>:
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	4d06      	ldr	r5, [pc, #24]	; (8006e1c <_isatty_r+0x1c>)
 8006e04:	2300      	movs	r3, #0
 8006e06:	4604      	mov	r4, r0
 8006e08:	4608      	mov	r0, r1
 8006e0a:	602b      	str	r3, [r5, #0]
 8006e0c:	f7fa ff23 	bl	8001c56 <_isatty>
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d102      	bne.n	8006e1a <_isatty_r+0x1a>
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	b103      	cbz	r3, 8006e1a <_isatty_r+0x1a>
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
 8006e1c:	20000630 	.word	0x20000630

08006e20 <_sbrk_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4d06      	ldr	r5, [pc, #24]	; (8006e3c <_sbrk_r+0x1c>)
 8006e24:	2300      	movs	r3, #0
 8006e26:	4604      	mov	r4, r0
 8006e28:	4608      	mov	r0, r1
 8006e2a:	602b      	str	r3, [r5, #0]
 8006e2c:	f7fa ff2c 	bl	8001c88 <_sbrk>
 8006e30:	1c43      	adds	r3, r0, #1
 8006e32:	d102      	bne.n	8006e3a <_sbrk_r+0x1a>
 8006e34:	682b      	ldr	r3, [r5, #0]
 8006e36:	b103      	cbz	r3, 8006e3a <_sbrk_r+0x1a>
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	bd38      	pop	{r3, r4, r5, pc}
 8006e3c:	20000630 	.word	0x20000630

08006e40 <__errno>:
 8006e40:	4b01      	ldr	r3, [pc, #4]	; (8006e48 <__errno+0x8>)
 8006e42:	6818      	ldr	r0, [r3, #0]
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	20000064 	.word	0x20000064

08006e4c <__libc_init_array>:
 8006e4c:	b570      	push	{r4, r5, r6, lr}
 8006e4e:	4d0d      	ldr	r5, [pc, #52]	; (8006e84 <__libc_init_array+0x38>)
 8006e50:	4c0d      	ldr	r4, [pc, #52]	; (8006e88 <__libc_init_array+0x3c>)
 8006e52:	1b64      	subs	r4, r4, r5
 8006e54:	10a4      	asrs	r4, r4, #2
 8006e56:	2600      	movs	r6, #0
 8006e58:	42a6      	cmp	r6, r4
 8006e5a:	d109      	bne.n	8006e70 <__libc_init_array+0x24>
 8006e5c:	4d0b      	ldr	r5, [pc, #44]	; (8006e8c <__libc_init_array+0x40>)
 8006e5e:	4c0c      	ldr	r4, [pc, #48]	; (8006e90 <__libc_init_array+0x44>)
 8006e60:	f001 fe2e 	bl	8008ac0 <_init>
 8006e64:	1b64      	subs	r4, r4, r5
 8006e66:	10a4      	asrs	r4, r4, #2
 8006e68:	2600      	movs	r6, #0
 8006e6a:	42a6      	cmp	r6, r4
 8006e6c:	d105      	bne.n	8006e7a <__libc_init_array+0x2e>
 8006e6e:	bd70      	pop	{r4, r5, r6, pc}
 8006e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e74:	4798      	blx	r3
 8006e76:	3601      	adds	r6, #1
 8006e78:	e7ee      	b.n	8006e58 <__libc_init_array+0xc>
 8006e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e7e:	4798      	blx	r3
 8006e80:	3601      	adds	r6, #1
 8006e82:	e7f2      	b.n	8006e6a <__libc_init_array+0x1e>
 8006e84:	08008edc 	.word	0x08008edc
 8006e88:	08008edc 	.word	0x08008edc
 8006e8c:	08008edc 	.word	0x08008edc
 8006e90:	08008ee0 	.word	0x08008ee0

08006e94 <__retarget_lock_init_recursive>:
 8006e94:	4770      	bx	lr

08006e96 <__retarget_lock_acquire_recursive>:
 8006e96:	4770      	bx	lr

08006e98 <__retarget_lock_release_recursive>:
 8006e98:	4770      	bx	lr

08006e9a <quorem>:
 8006e9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9e:	6903      	ldr	r3, [r0, #16]
 8006ea0:	690c      	ldr	r4, [r1, #16]
 8006ea2:	42a3      	cmp	r3, r4
 8006ea4:	4607      	mov	r7, r0
 8006ea6:	db7e      	blt.n	8006fa6 <quorem+0x10c>
 8006ea8:	3c01      	subs	r4, #1
 8006eaa:	f101 0814 	add.w	r8, r1, #20
 8006eae:	f100 0514 	add.w	r5, r0, #20
 8006eb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006eb6:	9301      	str	r3, [sp, #4]
 8006eb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ebc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ec8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ecc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ed0:	d331      	bcc.n	8006f36 <quorem+0x9c>
 8006ed2:	f04f 0e00 	mov.w	lr, #0
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	46ac      	mov	ip, r5
 8006eda:	46f2      	mov	sl, lr
 8006edc:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ee0:	b293      	uxth	r3, r2
 8006ee2:	fb06 e303 	mla	r3, r6, r3, lr
 8006ee6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006eea:	0c1a      	lsrs	r2, r3, #16
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	ebaa 0303 	sub.w	r3, sl, r3
 8006ef2:	f8dc a000 	ldr.w	sl, [ip]
 8006ef6:	fa13 f38a 	uxtah	r3, r3, sl
 8006efa:	fb06 220e 	mla	r2, r6, lr, r2
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	9b00      	ldr	r3, [sp, #0]
 8006f02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f06:	b292      	uxth	r2, r2
 8006f08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f10:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f14:	4581      	cmp	r9, r0
 8006f16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f1a:	f84c 3b04 	str.w	r3, [ip], #4
 8006f1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f22:	d2db      	bcs.n	8006edc <quorem+0x42>
 8006f24:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f28:	b92b      	cbnz	r3, 8006f36 <quorem+0x9c>
 8006f2a:	9b01      	ldr	r3, [sp, #4]
 8006f2c:	3b04      	subs	r3, #4
 8006f2e:	429d      	cmp	r5, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	d32c      	bcc.n	8006f8e <quorem+0xf4>
 8006f34:	613c      	str	r4, [r7, #16]
 8006f36:	4638      	mov	r0, r7
 8006f38:	f001 fae6 	bl	8008508 <__mcmp>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	db22      	blt.n	8006f86 <quorem+0xec>
 8006f40:	3601      	adds	r6, #1
 8006f42:	4629      	mov	r1, r5
 8006f44:	2000      	movs	r0, #0
 8006f46:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f4a:	f8d1 c000 	ldr.w	ip, [r1]
 8006f4e:	b293      	uxth	r3, r2
 8006f50:	1ac3      	subs	r3, r0, r3
 8006f52:	0c12      	lsrs	r2, r2, #16
 8006f54:	fa13 f38c 	uxtah	r3, r3, ip
 8006f58:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006f5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f66:	45c1      	cmp	r9, r8
 8006f68:	f841 3b04 	str.w	r3, [r1], #4
 8006f6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006f70:	d2e9      	bcs.n	8006f46 <quorem+0xac>
 8006f72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f7a:	b922      	cbnz	r2, 8006f86 <quorem+0xec>
 8006f7c:	3b04      	subs	r3, #4
 8006f7e:	429d      	cmp	r5, r3
 8006f80:	461a      	mov	r2, r3
 8006f82:	d30a      	bcc.n	8006f9a <quorem+0x100>
 8006f84:	613c      	str	r4, [r7, #16]
 8006f86:	4630      	mov	r0, r6
 8006f88:	b003      	add	sp, #12
 8006f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f8e:	6812      	ldr	r2, [r2, #0]
 8006f90:	3b04      	subs	r3, #4
 8006f92:	2a00      	cmp	r2, #0
 8006f94:	d1ce      	bne.n	8006f34 <quorem+0x9a>
 8006f96:	3c01      	subs	r4, #1
 8006f98:	e7c9      	b.n	8006f2e <quorem+0x94>
 8006f9a:	6812      	ldr	r2, [r2, #0]
 8006f9c:	3b04      	subs	r3, #4
 8006f9e:	2a00      	cmp	r2, #0
 8006fa0:	d1f0      	bne.n	8006f84 <quorem+0xea>
 8006fa2:	3c01      	subs	r4, #1
 8006fa4:	e7eb      	b.n	8006f7e <quorem+0xe4>
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	e7ee      	b.n	8006f88 <quorem+0xee>
 8006faa:	0000      	movs	r0, r0
 8006fac:	0000      	movs	r0, r0
	...

08006fb0 <_dtoa_r>:
 8006fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb4:	ed2d 8b04 	vpush	{d8-d9}
 8006fb8:	69c5      	ldr	r5, [r0, #28]
 8006fba:	b093      	sub	sp, #76	; 0x4c
 8006fbc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006fc0:	ec57 6b10 	vmov	r6, r7, d0
 8006fc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006fc8:	9107      	str	r1, [sp, #28]
 8006fca:	4604      	mov	r4, r0
 8006fcc:	920a      	str	r2, [sp, #40]	; 0x28
 8006fce:	930d      	str	r3, [sp, #52]	; 0x34
 8006fd0:	b975      	cbnz	r5, 8006ff0 <_dtoa_r+0x40>
 8006fd2:	2010      	movs	r0, #16
 8006fd4:	f7ff fac6 	bl	8006564 <malloc>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	61e0      	str	r0, [r4, #28]
 8006fdc:	b920      	cbnz	r0, 8006fe8 <_dtoa_r+0x38>
 8006fde:	4bae      	ldr	r3, [pc, #696]	; (8007298 <_dtoa_r+0x2e8>)
 8006fe0:	21ef      	movs	r1, #239	; 0xef
 8006fe2:	48ae      	ldr	r0, [pc, #696]	; (800729c <_dtoa_r+0x2ec>)
 8006fe4:	f001 fcbc 	bl	8008960 <__assert_func>
 8006fe8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fec:	6005      	str	r5, [r0, #0]
 8006fee:	60c5      	str	r5, [r0, #12]
 8006ff0:	69e3      	ldr	r3, [r4, #28]
 8006ff2:	6819      	ldr	r1, [r3, #0]
 8006ff4:	b151      	cbz	r1, 800700c <_dtoa_r+0x5c>
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	604a      	str	r2, [r1, #4]
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	4093      	lsls	r3, r2
 8006ffe:	608b      	str	r3, [r1, #8]
 8007000:	4620      	mov	r0, r4
 8007002:	f001 f845 	bl	8008090 <_Bfree>
 8007006:	69e3      	ldr	r3, [r4, #28]
 8007008:	2200      	movs	r2, #0
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	1e3b      	subs	r3, r7, #0
 800700e:	bfbb      	ittet	lt
 8007010:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007014:	9303      	strlt	r3, [sp, #12]
 8007016:	2300      	movge	r3, #0
 8007018:	2201      	movlt	r2, #1
 800701a:	bfac      	ite	ge
 800701c:	f8c8 3000 	strge.w	r3, [r8]
 8007020:	f8c8 2000 	strlt.w	r2, [r8]
 8007024:	4b9e      	ldr	r3, [pc, #632]	; (80072a0 <_dtoa_r+0x2f0>)
 8007026:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800702a:	ea33 0308 	bics.w	r3, r3, r8
 800702e:	d11b      	bne.n	8007068 <_dtoa_r+0xb8>
 8007030:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007032:	f242 730f 	movw	r3, #9999	; 0x270f
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800703c:	4333      	orrs	r3, r6
 800703e:	f000 8593 	beq.w	8007b68 <_dtoa_r+0xbb8>
 8007042:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007044:	b963      	cbnz	r3, 8007060 <_dtoa_r+0xb0>
 8007046:	4b97      	ldr	r3, [pc, #604]	; (80072a4 <_dtoa_r+0x2f4>)
 8007048:	e027      	b.n	800709a <_dtoa_r+0xea>
 800704a:	4b97      	ldr	r3, [pc, #604]	; (80072a8 <_dtoa_r+0x2f8>)
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	3308      	adds	r3, #8
 8007050:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007052:	6013      	str	r3, [r2, #0]
 8007054:	9800      	ldr	r0, [sp, #0]
 8007056:	b013      	add	sp, #76	; 0x4c
 8007058:	ecbd 8b04 	vpop	{d8-d9}
 800705c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007060:	4b90      	ldr	r3, [pc, #576]	; (80072a4 <_dtoa_r+0x2f4>)
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	3303      	adds	r3, #3
 8007066:	e7f3      	b.n	8007050 <_dtoa_r+0xa0>
 8007068:	ed9d 7b02 	vldr	d7, [sp, #8]
 800706c:	2200      	movs	r2, #0
 800706e:	ec51 0b17 	vmov	r0, r1, d7
 8007072:	eeb0 8a47 	vmov.f32	s16, s14
 8007076:	eef0 8a67 	vmov.f32	s17, s15
 800707a:	2300      	movs	r3, #0
 800707c:	f7f9 fd4c 	bl	8000b18 <__aeabi_dcmpeq>
 8007080:	4681      	mov	r9, r0
 8007082:	b160      	cbz	r0, 800709e <_dtoa_r+0xee>
 8007084:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007086:	2301      	movs	r3, #1
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 8568 	beq.w	8007b62 <_dtoa_r+0xbb2>
 8007092:	4b86      	ldr	r3, [pc, #536]	; (80072ac <_dtoa_r+0x2fc>)
 8007094:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007096:	6013      	str	r3, [r2, #0]
 8007098:	3b01      	subs	r3, #1
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	e7da      	b.n	8007054 <_dtoa_r+0xa4>
 800709e:	aa10      	add	r2, sp, #64	; 0x40
 80070a0:	a911      	add	r1, sp, #68	; 0x44
 80070a2:	4620      	mov	r0, r4
 80070a4:	eeb0 0a48 	vmov.f32	s0, s16
 80070a8:	eef0 0a68 	vmov.f32	s1, s17
 80070ac:	f001 fad2 	bl	8008654 <__d2b>
 80070b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80070b4:	4682      	mov	sl, r0
 80070b6:	2d00      	cmp	r5, #0
 80070b8:	d07f      	beq.n	80071ba <_dtoa_r+0x20a>
 80070ba:	ee18 3a90 	vmov	r3, s17
 80070be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80070c6:	ec51 0b18 	vmov	r0, r1, d8
 80070ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80070ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80070d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80070d6:	4619      	mov	r1, r3
 80070d8:	2200      	movs	r2, #0
 80070da:	4b75      	ldr	r3, [pc, #468]	; (80072b0 <_dtoa_r+0x300>)
 80070dc:	f7f9 f8fc 	bl	80002d8 <__aeabi_dsub>
 80070e0:	a367      	add	r3, pc, #412	; (adr r3, 8007280 <_dtoa_r+0x2d0>)
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	f7f9 faaf 	bl	8000648 <__aeabi_dmul>
 80070ea:	a367      	add	r3, pc, #412	; (adr r3, 8007288 <_dtoa_r+0x2d8>)
 80070ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f0:	f7f9 f8f4 	bl	80002dc <__adddf3>
 80070f4:	4606      	mov	r6, r0
 80070f6:	4628      	mov	r0, r5
 80070f8:	460f      	mov	r7, r1
 80070fa:	f7f9 fa3b 	bl	8000574 <__aeabi_i2d>
 80070fe:	a364      	add	r3, pc, #400	; (adr r3, 8007290 <_dtoa_r+0x2e0>)
 8007100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007104:	f7f9 faa0 	bl	8000648 <__aeabi_dmul>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	4630      	mov	r0, r6
 800710e:	4639      	mov	r1, r7
 8007110:	f7f9 f8e4 	bl	80002dc <__adddf3>
 8007114:	4606      	mov	r6, r0
 8007116:	460f      	mov	r7, r1
 8007118:	f7f9 fd46 	bl	8000ba8 <__aeabi_d2iz>
 800711c:	2200      	movs	r2, #0
 800711e:	4683      	mov	fp, r0
 8007120:	2300      	movs	r3, #0
 8007122:	4630      	mov	r0, r6
 8007124:	4639      	mov	r1, r7
 8007126:	f7f9 fd01 	bl	8000b2c <__aeabi_dcmplt>
 800712a:	b148      	cbz	r0, 8007140 <_dtoa_r+0x190>
 800712c:	4658      	mov	r0, fp
 800712e:	f7f9 fa21 	bl	8000574 <__aeabi_i2d>
 8007132:	4632      	mov	r2, r6
 8007134:	463b      	mov	r3, r7
 8007136:	f7f9 fcef 	bl	8000b18 <__aeabi_dcmpeq>
 800713a:	b908      	cbnz	r0, 8007140 <_dtoa_r+0x190>
 800713c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007140:	f1bb 0f16 	cmp.w	fp, #22
 8007144:	d857      	bhi.n	80071f6 <_dtoa_r+0x246>
 8007146:	4b5b      	ldr	r3, [pc, #364]	; (80072b4 <_dtoa_r+0x304>)
 8007148:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007150:	ec51 0b18 	vmov	r0, r1, d8
 8007154:	f7f9 fcea 	bl	8000b2c <__aeabi_dcmplt>
 8007158:	2800      	cmp	r0, #0
 800715a:	d04e      	beq.n	80071fa <_dtoa_r+0x24a>
 800715c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007160:	2300      	movs	r3, #0
 8007162:	930c      	str	r3, [sp, #48]	; 0x30
 8007164:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007166:	1b5b      	subs	r3, r3, r5
 8007168:	1e5a      	subs	r2, r3, #1
 800716a:	bf45      	ittet	mi
 800716c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007170:	9305      	strmi	r3, [sp, #20]
 8007172:	2300      	movpl	r3, #0
 8007174:	2300      	movmi	r3, #0
 8007176:	9206      	str	r2, [sp, #24]
 8007178:	bf54      	ite	pl
 800717a:	9305      	strpl	r3, [sp, #20]
 800717c:	9306      	strmi	r3, [sp, #24]
 800717e:	f1bb 0f00 	cmp.w	fp, #0
 8007182:	db3c      	blt.n	80071fe <_dtoa_r+0x24e>
 8007184:	9b06      	ldr	r3, [sp, #24]
 8007186:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800718a:	445b      	add	r3, fp
 800718c:	9306      	str	r3, [sp, #24]
 800718e:	2300      	movs	r3, #0
 8007190:	9308      	str	r3, [sp, #32]
 8007192:	9b07      	ldr	r3, [sp, #28]
 8007194:	2b09      	cmp	r3, #9
 8007196:	d868      	bhi.n	800726a <_dtoa_r+0x2ba>
 8007198:	2b05      	cmp	r3, #5
 800719a:	bfc4      	itt	gt
 800719c:	3b04      	subgt	r3, #4
 800719e:	9307      	strgt	r3, [sp, #28]
 80071a0:	9b07      	ldr	r3, [sp, #28]
 80071a2:	f1a3 0302 	sub.w	r3, r3, #2
 80071a6:	bfcc      	ite	gt
 80071a8:	2500      	movgt	r5, #0
 80071aa:	2501      	movle	r5, #1
 80071ac:	2b03      	cmp	r3, #3
 80071ae:	f200 8085 	bhi.w	80072bc <_dtoa_r+0x30c>
 80071b2:	e8df f003 	tbb	[pc, r3]
 80071b6:	3b2e      	.short	0x3b2e
 80071b8:	5839      	.short	0x5839
 80071ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80071be:	441d      	add	r5, r3
 80071c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80071c4:	2b20      	cmp	r3, #32
 80071c6:	bfc1      	itttt	gt
 80071c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80071cc:	fa08 f803 	lslgt.w	r8, r8, r3
 80071d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80071d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80071d8:	bfd6      	itet	le
 80071da:	f1c3 0320 	rsble	r3, r3, #32
 80071de:	ea48 0003 	orrgt.w	r0, r8, r3
 80071e2:	fa06 f003 	lslle.w	r0, r6, r3
 80071e6:	f7f9 f9b5 	bl	8000554 <__aeabi_ui2d>
 80071ea:	2201      	movs	r2, #1
 80071ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80071f0:	3d01      	subs	r5, #1
 80071f2:	920e      	str	r2, [sp, #56]	; 0x38
 80071f4:	e76f      	b.n	80070d6 <_dtoa_r+0x126>
 80071f6:	2301      	movs	r3, #1
 80071f8:	e7b3      	b.n	8007162 <_dtoa_r+0x1b2>
 80071fa:	900c      	str	r0, [sp, #48]	; 0x30
 80071fc:	e7b2      	b.n	8007164 <_dtoa_r+0x1b4>
 80071fe:	9b05      	ldr	r3, [sp, #20]
 8007200:	eba3 030b 	sub.w	r3, r3, fp
 8007204:	9305      	str	r3, [sp, #20]
 8007206:	f1cb 0300 	rsb	r3, fp, #0
 800720a:	9308      	str	r3, [sp, #32]
 800720c:	2300      	movs	r3, #0
 800720e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007210:	e7bf      	b.n	8007192 <_dtoa_r+0x1e2>
 8007212:	2300      	movs	r3, #0
 8007214:	9309      	str	r3, [sp, #36]	; 0x24
 8007216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007218:	2b00      	cmp	r3, #0
 800721a:	dc52      	bgt.n	80072c2 <_dtoa_r+0x312>
 800721c:	2301      	movs	r3, #1
 800721e:	9301      	str	r3, [sp, #4]
 8007220:	9304      	str	r3, [sp, #16]
 8007222:	461a      	mov	r2, r3
 8007224:	920a      	str	r2, [sp, #40]	; 0x28
 8007226:	e00b      	b.n	8007240 <_dtoa_r+0x290>
 8007228:	2301      	movs	r3, #1
 800722a:	e7f3      	b.n	8007214 <_dtoa_r+0x264>
 800722c:	2300      	movs	r3, #0
 800722e:	9309      	str	r3, [sp, #36]	; 0x24
 8007230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007232:	445b      	add	r3, fp
 8007234:	9301      	str	r3, [sp, #4]
 8007236:	3301      	adds	r3, #1
 8007238:	2b01      	cmp	r3, #1
 800723a:	9304      	str	r3, [sp, #16]
 800723c:	bfb8      	it	lt
 800723e:	2301      	movlt	r3, #1
 8007240:	69e0      	ldr	r0, [r4, #28]
 8007242:	2100      	movs	r1, #0
 8007244:	2204      	movs	r2, #4
 8007246:	f102 0614 	add.w	r6, r2, #20
 800724a:	429e      	cmp	r6, r3
 800724c:	d93d      	bls.n	80072ca <_dtoa_r+0x31a>
 800724e:	6041      	str	r1, [r0, #4]
 8007250:	4620      	mov	r0, r4
 8007252:	f000 fedd 	bl	8008010 <_Balloc>
 8007256:	9000      	str	r0, [sp, #0]
 8007258:	2800      	cmp	r0, #0
 800725a:	d139      	bne.n	80072d0 <_dtoa_r+0x320>
 800725c:	4b16      	ldr	r3, [pc, #88]	; (80072b8 <_dtoa_r+0x308>)
 800725e:	4602      	mov	r2, r0
 8007260:	f240 11af 	movw	r1, #431	; 0x1af
 8007264:	e6bd      	b.n	8006fe2 <_dtoa_r+0x32>
 8007266:	2301      	movs	r3, #1
 8007268:	e7e1      	b.n	800722e <_dtoa_r+0x27e>
 800726a:	2501      	movs	r5, #1
 800726c:	2300      	movs	r3, #0
 800726e:	9307      	str	r3, [sp, #28]
 8007270:	9509      	str	r5, [sp, #36]	; 0x24
 8007272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007276:	9301      	str	r3, [sp, #4]
 8007278:	9304      	str	r3, [sp, #16]
 800727a:	2200      	movs	r2, #0
 800727c:	2312      	movs	r3, #18
 800727e:	e7d1      	b.n	8007224 <_dtoa_r+0x274>
 8007280:	636f4361 	.word	0x636f4361
 8007284:	3fd287a7 	.word	0x3fd287a7
 8007288:	8b60c8b3 	.word	0x8b60c8b3
 800728c:	3fc68a28 	.word	0x3fc68a28
 8007290:	509f79fb 	.word	0x509f79fb
 8007294:	3fd34413 	.word	0x3fd34413
 8007298:	08008ba5 	.word	0x08008ba5
 800729c:	08008bbc 	.word	0x08008bbc
 80072a0:	7ff00000 	.word	0x7ff00000
 80072a4:	08008ba1 	.word	0x08008ba1
 80072a8:	08008b98 	.word	0x08008b98
 80072ac:	08008b75 	.word	0x08008b75
 80072b0:	3ff80000 	.word	0x3ff80000
 80072b4:	08008cb8 	.word	0x08008cb8
 80072b8:	08008c14 	.word	0x08008c14
 80072bc:	2301      	movs	r3, #1
 80072be:	9309      	str	r3, [sp, #36]	; 0x24
 80072c0:	e7d7      	b.n	8007272 <_dtoa_r+0x2c2>
 80072c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072c4:	9301      	str	r3, [sp, #4]
 80072c6:	9304      	str	r3, [sp, #16]
 80072c8:	e7ba      	b.n	8007240 <_dtoa_r+0x290>
 80072ca:	3101      	adds	r1, #1
 80072cc:	0052      	lsls	r2, r2, #1
 80072ce:	e7ba      	b.n	8007246 <_dtoa_r+0x296>
 80072d0:	69e3      	ldr	r3, [r4, #28]
 80072d2:	9a00      	ldr	r2, [sp, #0]
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	9b04      	ldr	r3, [sp, #16]
 80072d8:	2b0e      	cmp	r3, #14
 80072da:	f200 80a8 	bhi.w	800742e <_dtoa_r+0x47e>
 80072de:	2d00      	cmp	r5, #0
 80072e0:	f000 80a5 	beq.w	800742e <_dtoa_r+0x47e>
 80072e4:	f1bb 0f00 	cmp.w	fp, #0
 80072e8:	dd38      	ble.n	800735c <_dtoa_r+0x3ac>
 80072ea:	4bc0      	ldr	r3, [pc, #768]	; (80075ec <_dtoa_r+0x63c>)
 80072ec:	f00b 020f 	and.w	r2, fp, #15
 80072f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80072f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80072fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007300:	d019      	beq.n	8007336 <_dtoa_r+0x386>
 8007302:	4bbb      	ldr	r3, [pc, #748]	; (80075f0 <_dtoa_r+0x640>)
 8007304:	ec51 0b18 	vmov	r0, r1, d8
 8007308:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800730c:	f7f9 fac6 	bl	800089c <__aeabi_ddiv>
 8007310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007314:	f008 080f 	and.w	r8, r8, #15
 8007318:	2503      	movs	r5, #3
 800731a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80075f0 <_dtoa_r+0x640>
 800731e:	f1b8 0f00 	cmp.w	r8, #0
 8007322:	d10a      	bne.n	800733a <_dtoa_r+0x38a>
 8007324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007328:	4632      	mov	r2, r6
 800732a:	463b      	mov	r3, r7
 800732c:	f7f9 fab6 	bl	800089c <__aeabi_ddiv>
 8007330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007334:	e02b      	b.n	800738e <_dtoa_r+0x3de>
 8007336:	2502      	movs	r5, #2
 8007338:	e7ef      	b.n	800731a <_dtoa_r+0x36a>
 800733a:	f018 0f01 	tst.w	r8, #1
 800733e:	d008      	beq.n	8007352 <_dtoa_r+0x3a2>
 8007340:	4630      	mov	r0, r6
 8007342:	4639      	mov	r1, r7
 8007344:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007348:	f7f9 f97e 	bl	8000648 <__aeabi_dmul>
 800734c:	3501      	adds	r5, #1
 800734e:	4606      	mov	r6, r0
 8007350:	460f      	mov	r7, r1
 8007352:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007356:	f109 0908 	add.w	r9, r9, #8
 800735a:	e7e0      	b.n	800731e <_dtoa_r+0x36e>
 800735c:	f000 809f 	beq.w	800749e <_dtoa_r+0x4ee>
 8007360:	f1cb 0600 	rsb	r6, fp, #0
 8007364:	4ba1      	ldr	r3, [pc, #644]	; (80075ec <_dtoa_r+0x63c>)
 8007366:	4fa2      	ldr	r7, [pc, #648]	; (80075f0 <_dtoa_r+0x640>)
 8007368:	f006 020f 	and.w	r2, r6, #15
 800736c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007374:	ec51 0b18 	vmov	r0, r1, d8
 8007378:	f7f9 f966 	bl	8000648 <__aeabi_dmul>
 800737c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007380:	1136      	asrs	r6, r6, #4
 8007382:	2300      	movs	r3, #0
 8007384:	2502      	movs	r5, #2
 8007386:	2e00      	cmp	r6, #0
 8007388:	d17e      	bne.n	8007488 <_dtoa_r+0x4d8>
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1d0      	bne.n	8007330 <_dtoa_r+0x380>
 800738e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007390:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 8084 	beq.w	80074a2 <_dtoa_r+0x4f2>
 800739a:	4b96      	ldr	r3, [pc, #600]	; (80075f4 <_dtoa_r+0x644>)
 800739c:	2200      	movs	r2, #0
 800739e:	4640      	mov	r0, r8
 80073a0:	4649      	mov	r1, r9
 80073a2:	f7f9 fbc3 	bl	8000b2c <__aeabi_dcmplt>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d07b      	beq.n	80074a2 <_dtoa_r+0x4f2>
 80073aa:	9b04      	ldr	r3, [sp, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d078      	beq.n	80074a2 <_dtoa_r+0x4f2>
 80073b0:	9b01      	ldr	r3, [sp, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	dd39      	ble.n	800742a <_dtoa_r+0x47a>
 80073b6:	4b90      	ldr	r3, [pc, #576]	; (80075f8 <_dtoa_r+0x648>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	4640      	mov	r0, r8
 80073bc:	4649      	mov	r1, r9
 80073be:	f7f9 f943 	bl	8000648 <__aeabi_dmul>
 80073c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073c6:	9e01      	ldr	r6, [sp, #4]
 80073c8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80073cc:	3501      	adds	r5, #1
 80073ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80073d2:	4628      	mov	r0, r5
 80073d4:	f7f9 f8ce 	bl	8000574 <__aeabi_i2d>
 80073d8:	4642      	mov	r2, r8
 80073da:	464b      	mov	r3, r9
 80073dc:	f7f9 f934 	bl	8000648 <__aeabi_dmul>
 80073e0:	4b86      	ldr	r3, [pc, #536]	; (80075fc <_dtoa_r+0x64c>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	f7f8 ff7a 	bl	80002dc <__adddf3>
 80073e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80073ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073f0:	9303      	str	r3, [sp, #12]
 80073f2:	2e00      	cmp	r6, #0
 80073f4:	d158      	bne.n	80074a8 <_dtoa_r+0x4f8>
 80073f6:	4b82      	ldr	r3, [pc, #520]	; (8007600 <_dtoa_r+0x650>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	4640      	mov	r0, r8
 80073fc:	4649      	mov	r1, r9
 80073fe:	f7f8 ff6b 	bl	80002d8 <__aeabi_dsub>
 8007402:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007406:	4680      	mov	r8, r0
 8007408:	4689      	mov	r9, r1
 800740a:	f7f9 fbad 	bl	8000b68 <__aeabi_dcmpgt>
 800740e:	2800      	cmp	r0, #0
 8007410:	f040 8296 	bne.w	8007940 <_dtoa_r+0x990>
 8007414:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007418:	4640      	mov	r0, r8
 800741a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800741e:	4649      	mov	r1, r9
 8007420:	f7f9 fb84 	bl	8000b2c <__aeabi_dcmplt>
 8007424:	2800      	cmp	r0, #0
 8007426:	f040 8289 	bne.w	800793c <_dtoa_r+0x98c>
 800742a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800742e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007430:	2b00      	cmp	r3, #0
 8007432:	f2c0 814e 	blt.w	80076d2 <_dtoa_r+0x722>
 8007436:	f1bb 0f0e 	cmp.w	fp, #14
 800743a:	f300 814a 	bgt.w	80076d2 <_dtoa_r+0x722>
 800743e:	4b6b      	ldr	r3, [pc, #428]	; (80075ec <_dtoa_r+0x63c>)
 8007440:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007444:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800744a:	2b00      	cmp	r3, #0
 800744c:	f280 80dc 	bge.w	8007608 <_dtoa_r+0x658>
 8007450:	9b04      	ldr	r3, [sp, #16]
 8007452:	2b00      	cmp	r3, #0
 8007454:	f300 80d8 	bgt.w	8007608 <_dtoa_r+0x658>
 8007458:	f040 826f 	bne.w	800793a <_dtoa_r+0x98a>
 800745c:	4b68      	ldr	r3, [pc, #416]	; (8007600 <_dtoa_r+0x650>)
 800745e:	2200      	movs	r2, #0
 8007460:	4640      	mov	r0, r8
 8007462:	4649      	mov	r1, r9
 8007464:	f7f9 f8f0 	bl	8000648 <__aeabi_dmul>
 8007468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800746c:	f7f9 fb72 	bl	8000b54 <__aeabi_dcmpge>
 8007470:	9e04      	ldr	r6, [sp, #16]
 8007472:	4637      	mov	r7, r6
 8007474:	2800      	cmp	r0, #0
 8007476:	f040 8245 	bne.w	8007904 <_dtoa_r+0x954>
 800747a:	9d00      	ldr	r5, [sp, #0]
 800747c:	2331      	movs	r3, #49	; 0x31
 800747e:	f805 3b01 	strb.w	r3, [r5], #1
 8007482:	f10b 0b01 	add.w	fp, fp, #1
 8007486:	e241      	b.n	800790c <_dtoa_r+0x95c>
 8007488:	07f2      	lsls	r2, r6, #31
 800748a:	d505      	bpl.n	8007498 <_dtoa_r+0x4e8>
 800748c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007490:	f7f9 f8da 	bl	8000648 <__aeabi_dmul>
 8007494:	3501      	adds	r5, #1
 8007496:	2301      	movs	r3, #1
 8007498:	1076      	asrs	r6, r6, #1
 800749a:	3708      	adds	r7, #8
 800749c:	e773      	b.n	8007386 <_dtoa_r+0x3d6>
 800749e:	2502      	movs	r5, #2
 80074a0:	e775      	b.n	800738e <_dtoa_r+0x3de>
 80074a2:	9e04      	ldr	r6, [sp, #16]
 80074a4:	465f      	mov	r7, fp
 80074a6:	e792      	b.n	80073ce <_dtoa_r+0x41e>
 80074a8:	9900      	ldr	r1, [sp, #0]
 80074aa:	4b50      	ldr	r3, [pc, #320]	; (80075ec <_dtoa_r+0x63c>)
 80074ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074b0:	4431      	add	r1, r6
 80074b2:	9102      	str	r1, [sp, #8]
 80074b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074b6:	eeb0 9a47 	vmov.f32	s18, s14
 80074ba:	eef0 9a67 	vmov.f32	s19, s15
 80074be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80074c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074c6:	2900      	cmp	r1, #0
 80074c8:	d044      	beq.n	8007554 <_dtoa_r+0x5a4>
 80074ca:	494e      	ldr	r1, [pc, #312]	; (8007604 <_dtoa_r+0x654>)
 80074cc:	2000      	movs	r0, #0
 80074ce:	f7f9 f9e5 	bl	800089c <__aeabi_ddiv>
 80074d2:	ec53 2b19 	vmov	r2, r3, d9
 80074d6:	f7f8 feff 	bl	80002d8 <__aeabi_dsub>
 80074da:	9d00      	ldr	r5, [sp, #0]
 80074dc:	ec41 0b19 	vmov	d9, r0, r1
 80074e0:	4649      	mov	r1, r9
 80074e2:	4640      	mov	r0, r8
 80074e4:	f7f9 fb60 	bl	8000ba8 <__aeabi_d2iz>
 80074e8:	4606      	mov	r6, r0
 80074ea:	f7f9 f843 	bl	8000574 <__aeabi_i2d>
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	4640      	mov	r0, r8
 80074f4:	4649      	mov	r1, r9
 80074f6:	f7f8 feef 	bl	80002d8 <__aeabi_dsub>
 80074fa:	3630      	adds	r6, #48	; 0x30
 80074fc:	f805 6b01 	strb.w	r6, [r5], #1
 8007500:	ec53 2b19 	vmov	r2, r3, d9
 8007504:	4680      	mov	r8, r0
 8007506:	4689      	mov	r9, r1
 8007508:	f7f9 fb10 	bl	8000b2c <__aeabi_dcmplt>
 800750c:	2800      	cmp	r0, #0
 800750e:	d164      	bne.n	80075da <_dtoa_r+0x62a>
 8007510:	4642      	mov	r2, r8
 8007512:	464b      	mov	r3, r9
 8007514:	4937      	ldr	r1, [pc, #220]	; (80075f4 <_dtoa_r+0x644>)
 8007516:	2000      	movs	r0, #0
 8007518:	f7f8 fede 	bl	80002d8 <__aeabi_dsub>
 800751c:	ec53 2b19 	vmov	r2, r3, d9
 8007520:	f7f9 fb04 	bl	8000b2c <__aeabi_dcmplt>
 8007524:	2800      	cmp	r0, #0
 8007526:	f040 80b6 	bne.w	8007696 <_dtoa_r+0x6e6>
 800752a:	9b02      	ldr	r3, [sp, #8]
 800752c:	429d      	cmp	r5, r3
 800752e:	f43f af7c 	beq.w	800742a <_dtoa_r+0x47a>
 8007532:	4b31      	ldr	r3, [pc, #196]	; (80075f8 <_dtoa_r+0x648>)
 8007534:	ec51 0b19 	vmov	r0, r1, d9
 8007538:	2200      	movs	r2, #0
 800753a:	f7f9 f885 	bl	8000648 <__aeabi_dmul>
 800753e:	4b2e      	ldr	r3, [pc, #184]	; (80075f8 <_dtoa_r+0x648>)
 8007540:	ec41 0b19 	vmov	d9, r0, r1
 8007544:	2200      	movs	r2, #0
 8007546:	4640      	mov	r0, r8
 8007548:	4649      	mov	r1, r9
 800754a:	f7f9 f87d 	bl	8000648 <__aeabi_dmul>
 800754e:	4680      	mov	r8, r0
 8007550:	4689      	mov	r9, r1
 8007552:	e7c5      	b.n	80074e0 <_dtoa_r+0x530>
 8007554:	ec51 0b17 	vmov	r0, r1, d7
 8007558:	f7f9 f876 	bl	8000648 <__aeabi_dmul>
 800755c:	9b02      	ldr	r3, [sp, #8]
 800755e:	9d00      	ldr	r5, [sp, #0]
 8007560:	930f      	str	r3, [sp, #60]	; 0x3c
 8007562:	ec41 0b19 	vmov	d9, r0, r1
 8007566:	4649      	mov	r1, r9
 8007568:	4640      	mov	r0, r8
 800756a:	f7f9 fb1d 	bl	8000ba8 <__aeabi_d2iz>
 800756e:	4606      	mov	r6, r0
 8007570:	f7f9 f800 	bl	8000574 <__aeabi_i2d>
 8007574:	3630      	adds	r6, #48	; 0x30
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	4640      	mov	r0, r8
 800757c:	4649      	mov	r1, r9
 800757e:	f7f8 feab 	bl	80002d8 <__aeabi_dsub>
 8007582:	f805 6b01 	strb.w	r6, [r5], #1
 8007586:	9b02      	ldr	r3, [sp, #8]
 8007588:	429d      	cmp	r5, r3
 800758a:	4680      	mov	r8, r0
 800758c:	4689      	mov	r9, r1
 800758e:	f04f 0200 	mov.w	r2, #0
 8007592:	d124      	bne.n	80075de <_dtoa_r+0x62e>
 8007594:	4b1b      	ldr	r3, [pc, #108]	; (8007604 <_dtoa_r+0x654>)
 8007596:	ec51 0b19 	vmov	r0, r1, d9
 800759a:	f7f8 fe9f 	bl	80002dc <__adddf3>
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	4640      	mov	r0, r8
 80075a4:	4649      	mov	r1, r9
 80075a6:	f7f9 fadf 	bl	8000b68 <__aeabi_dcmpgt>
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d173      	bne.n	8007696 <_dtoa_r+0x6e6>
 80075ae:	ec53 2b19 	vmov	r2, r3, d9
 80075b2:	4914      	ldr	r1, [pc, #80]	; (8007604 <_dtoa_r+0x654>)
 80075b4:	2000      	movs	r0, #0
 80075b6:	f7f8 fe8f 	bl	80002d8 <__aeabi_dsub>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	4640      	mov	r0, r8
 80075c0:	4649      	mov	r1, r9
 80075c2:	f7f9 fab3 	bl	8000b2c <__aeabi_dcmplt>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f43f af2f 	beq.w	800742a <_dtoa_r+0x47a>
 80075cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80075ce:	1e6b      	subs	r3, r5, #1
 80075d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80075d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075d6:	2b30      	cmp	r3, #48	; 0x30
 80075d8:	d0f8      	beq.n	80075cc <_dtoa_r+0x61c>
 80075da:	46bb      	mov	fp, r7
 80075dc:	e04a      	b.n	8007674 <_dtoa_r+0x6c4>
 80075de:	4b06      	ldr	r3, [pc, #24]	; (80075f8 <_dtoa_r+0x648>)
 80075e0:	f7f9 f832 	bl	8000648 <__aeabi_dmul>
 80075e4:	4680      	mov	r8, r0
 80075e6:	4689      	mov	r9, r1
 80075e8:	e7bd      	b.n	8007566 <_dtoa_r+0x5b6>
 80075ea:	bf00      	nop
 80075ec:	08008cb8 	.word	0x08008cb8
 80075f0:	08008c90 	.word	0x08008c90
 80075f4:	3ff00000 	.word	0x3ff00000
 80075f8:	40240000 	.word	0x40240000
 80075fc:	401c0000 	.word	0x401c0000
 8007600:	40140000 	.word	0x40140000
 8007604:	3fe00000 	.word	0x3fe00000
 8007608:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800760c:	9d00      	ldr	r5, [sp, #0]
 800760e:	4642      	mov	r2, r8
 8007610:	464b      	mov	r3, r9
 8007612:	4630      	mov	r0, r6
 8007614:	4639      	mov	r1, r7
 8007616:	f7f9 f941 	bl	800089c <__aeabi_ddiv>
 800761a:	f7f9 fac5 	bl	8000ba8 <__aeabi_d2iz>
 800761e:	9001      	str	r0, [sp, #4]
 8007620:	f7f8 ffa8 	bl	8000574 <__aeabi_i2d>
 8007624:	4642      	mov	r2, r8
 8007626:	464b      	mov	r3, r9
 8007628:	f7f9 f80e 	bl	8000648 <__aeabi_dmul>
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	4630      	mov	r0, r6
 8007632:	4639      	mov	r1, r7
 8007634:	f7f8 fe50 	bl	80002d8 <__aeabi_dsub>
 8007638:	9e01      	ldr	r6, [sp, #4]
 800763a:	9f04      	ldr	r7, [sp, #16]
 800763c:	3630      	adds	r6, #48	; 0x30
 800763e:	f805 6b01 	strb.w	r6, [r5], #1
 8007642:	9e00      	ldr	r6, [sp, #0]
 8007644:	1bae      	subs	r6, r5, r6
 8007646:	42b7      	cmp	r7, r6
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	d134      	bne.n	80076b8 <_dtoa_r+0x708>
 800764e:	f7f8 fe45 	bl	80002dc <__adddf3>
 8007652:	4642      	mov	r2, r8
 8007654:	464b      	mov	r3, r9
 8007656:	4606      	mov	r6, r0
 8007658:	460f      	mov	r7, r1
 800765a:	f7f9 fa85 	bl	8000b68 <__aeabi_dcmpgt>
 800765e:	b9c8      	cbnz	r0, 8007694 <_dtoa_r+0x6e4>
 8007660:	4642      	mov	r2, r8
 8007662:	464b      	mov	r3, r9
 8007664:	4630      	mov	r0, r6
 8007666:	4639      	mov	r1, r7
 8007668:	f7f9 fa56 	bl	8000b18 <__aeabi_dcmpeq>
 800766c:	b110      	cbz	r0, 8007674 <_dtoa_r+0x6c4>
 800766e:	9b01      	ldr	r3, [sp, #4]
 8007670:	07db      	lsls	r3, r3, #31
 8007672:	d40f      	bmi.n	8007694 <_dtoa_r+0x6e4>
 8007674:	4651      	mov	r1, sl
 8007676:	4620      	mov	r0, r4
 8007678:	f000 fd0a 	bl	8008090 <_Bfree>
 800767c:	2300      	movs	r3, #0
 800767e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007680:	702b      	strb	r3, [r5, #0]
 8007682:	f10b 0301 	add.w	r3, fp, #1
 8007686:	6013      	str	r3, [r2, #0]
 8007688:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800768a:	2b00      	cmp	r3, #0
 800768c:	f43f ace2 	beq.w	8007054 <_dtoa_r+0xa4>
 8007690:	601d      	str	r5, [r3, #0]
 8007692:	e4df      	b.n	8007054 <_dtoa_r+0xa4>
 8007694:	465f      	mov	r7, fp
 8007696:	462b      	mov	r3, r5
 8007698:	461d      	mov	r5, r3
 800769a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800769e:	2a39      	cmp	r2, #57	; 0x39
 80076a0:	d106      	bne.n	80076b0 <_dtoa_r+0x700>
 80076a2:	9a00      	ldr	r2, [sp, #0]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d1f7      	bne.n	8007698 <_dtoa_r+0x6e8>
 80076a8:	9900      	ldr	r1, [sp, #0]
 80076aa:	2230      	movs	r2, #48	; 0x30
 80076ac:	3701      	adds	r7, #1
 80076ae:	700a      	strb	r2, [r1, #0]
 80076b0:	781a      	ldrb	r2, [r3, #0]
 80076b2:	3201      	adds	r2, #1
 80076b4:	701a      	strb	r2, [r3, #0]
 80076b6:	e790      	b.n	80075da <_dtoa_r+0x62a>
 80076b8:	4ba3      	ldr	r3, [pc, #652]	; (8007948 <_dtoa_r+0x998>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	f7f8 ffc4 	bl	8000648 <__aeabi_dmul>
 80076c0:	2200      	movs	r2, #0
 80076c2:	2300      	movs	r3, #0
 80076c4:	4606      	mov	r6, r0
 80076c6:	460f      	mov	r7, r1
 80076c8:	f7f9 fa26 	bl	8000b18 <__aeabi_dcmpeq>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	d09e      	beq.n	800760e <_dtoa_r+0x65e>
 80076d0:	e7d0      	b.n	8007674 <_dtoa_r+0x6c4>
 80076d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076d4:	2a00      	cmp	r2, #0
 80076d6:	f000 80ca 	beq.w	800786e <_dtoa_r+0x8be>
 80076da:	9a07      	ldr	r2, [sp, #28]
 80076dc:	2a01      	cmp	r2, #1
 80076de:	f300 80ad 	bgt.w	800783c <_dtoa_r+0x88c>
 80076e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076e4:	2a00      	cmp	r2, #0
 80076e6:	f000 80a5 	beq.w	8007834 <_dtoa_r+0x884>
 80076ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80076ee:	9e08      	ldr	r6, [sp, #32]
 80076f0:	9d05      	ldr	r5, [sp, #20]
 80076f2:	9a05      	ldr	r2, [sp, #20]
 80076f4:	441a      	add	r2, r3
 80076f6:	9205      	str	r2, [sp, #20]
 80076f8:	9a06      	ldr	r2, [sp, #24]
 80076fa:	2101      	movs	r1, #1
 80076fc:	441a      	add	r2, r3
 80076fe:	4620      	mov	r0, r4
 8007700:	9206      	str	r2, [sp, #24]
 8007702:	f000 fd7b 	bl	80081fc <__i2b>
 8007706:	4607      	mov	r7, r0
 8007708:	b165      	cbz	r5, 8007724 <_dtoa_r+0x774>
 800770a:	9b06      	ldr	r3, [sp, #24]
 800770c:	2b00      	cmp	r3, #0
 800770e:	dd09      	ble.n	8007724 <_dtoa_r+0x774>
 8007710:	42ab      	cmp	r3, r5
 8007712:	9a05      	ldr	r2, [sp, #20]
 8007714:	bfa8      	it	ge
 8007716:	462b      	movge	r3, r5
 8007718:	1ad2      	subs	r2, r2, r3
 800771a:	9205      	str	r2, [sp, #20]
 800771c:	9a06      	ldr	r2, [sp, #24]
 800771e:	1aed      	subs	r5, r5, r3
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	9306      	str	r3, [sp, #24]
 8007724:	9b08      	ldr	r3, [sp, #32]
 8007726:	b1f3      	cbz	r3, 8007766 <_dtoa_r+0x7b6>
 8007728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800772a:	2b00      	cmp	r3, #0
 800772c:	f000 80a3 	beq.w	8007876 <_dtoa_r+0x8c6>
 8007730:	2e00      	cmp	r6, #0
 8007732:	dd10      	ble.n	8007756 <_dtoa_r+0x7a6>
 8007734:	4639      	mov	r1, r7
 8007736:	4632      	mov	r2, r6
 8007738:	4620      	mov	r0, r4
 800773a:	f000 fe1f 	bl	800837c <__pow5mult>
 800773e:	4652      	mov	r2, sl
 8007740:	4601      	mov	r1, r0
 8007742:	4607      	mov	r7, r0
 8007744:	4620      	mov	r0, r4
 8007746:	f000 fd6f 	bl	8008228 <__multiply>
 800774a:	4651      	mov	r1, sl
 800774c:	4680      	mov	r8, r0
 800774e:	4620      	mov	r0, r4
 8007750:	f000 fc9e 	bl	8008090 <_Bfree>
 8007754:	46c2      	mov	sl, r8
 8007756:	9b08      	ldr	r3, [sp, #32]
 8007758:	1b9a      	subs	r2, r3, r6
 800775a:	d004      	beq.n	8007766 <_dtoa_r+0x7b6>
 800775c:	4651      	mov	r1, sl
 800775e:	4620      	mov	r0, r4
 8007760:	f000 fe0c 	bl	800837c <__pow5mult>
 8007764:	4682      	mov	sl, r0
 8007766:	2101      	movs	r1, #1
 8007768:	4620      	mov	r0, r4
 800776a:	f000 fd47 	bl	80081fc <__i2b>
 800776e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007770:	2b00      	cmp	r3, #0
 8007772:	4606      	mov	r6, r0
 8007774:	f340 8081 	ble.w	800787a <_dtoa_r+0x8ca>
 8007778:	461a      	mov	r2, r3
 800777a:	4601      	mov	r1, r0
 800777c:	4620      	mov	r0, r4
 800777e:	f000 fdfd 	bl	800837c <__pow5mult>
 8007782:	9b07      	ldr	r3, [sp, #28]
 8007784:	2b01      	cmp	r3, #1
 8007786:	4606      	mov	r6, r0
 8007788:	dd7a      	ble.n	8007880 <_dtoa_r+0x8d0>
 800778a:	f04f 0800 	mov.w	r8, #0
 800778e:	6933      	ldr	r3, [r6, #16]
 8007790:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007794:	6918      	ldr	r0, [r3, #16]
 8007796:	f000 fce3 	bl	8008160 <__hi0bits>
 800779a:	f1c0 0020 	rsb	r0, r0, #32
 800779e:	9b06      	ldr	r3, [sp, #24]
 80077a0:	4418      	add	r0, r3
 80077a2:	f010 001f 	ands.w	r0, r0, #31
 80077a6:	f000 8094 	beq.w	80078d2 <_dtoa_r+0x922>
 80077aa:	f1c0 0320 	rsb	r3, r0, #32
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	f340 8085 	ble.w	80078be <_dtoa_r+0x90e>
 80077b4:	9b05      	ldr	r3, [sp, #20]
 80077b6:	f1c0 001c 	rsb	r0, r0, #28
 80077ba:	4403      	add	r3, r0
 80077bc:	9305      	str	r3, [sp, #20]
 80077be:	9b06      	ldr	r3, [sp, #24]
 80077c0:	4403      	add	r3, r0
 80077c2:	4405      	add	r5, r0
 80077c4:	9306      	str	r3, [sp, #24]
 80077c6:	9b05      	ldr	r3, [sp, #20]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	dd05      	ble.n	80077d8 <_dtoa_r+0x828>
 80077cc:	4651      	mov	r1, sl
 80077ce:	461a      	mov	r2, r3
 80077d0:	4620      	mov	r0, r4
 80077d2:	f000 fe2d 	bl	8008430 <__lshift>
 80077d6:	4682      	mov	sl, r0
 80077d8:	9b06      	ldr	r3, [sp, #24]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	dd05      	ble.n	80077ea <_dtoa_r+0x83a>
 80077de:	4631      	mov	r1, r6
 80077e0:	461a      	mov	r2, r3
 80077e2:	4620      	mov	r0, r4
 80077e4:	f000 fe24 	bl	8008430 <__lshift>
 80077e8:	4606      	mov	r6, r0
 80077ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d072      	beq.n	80078d6 <_dtoa_r+0x926>
 80077f0:	4631      	mov	r1, r6
 80077f2:	4650      	mov	r0, sl
 80077f4:	f000 fe88 	bl	8008508 <__mcmp>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	da6c      	bge.n	80078d6 <_dtoa_r+0x926>
 80077fc:	2300      	movs	r3, #0
 80077fe:	4651      	mov	r1, sl
 8007800:	220a      	movs	r2, #10
 8007802:	4620      	mov	r0, r4
 8007804:	f000 fc66 	bl	80080d4 <__multadd>
 8007808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800780a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800780e:	4682      	mov	sl, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 81b0 	beq.w	8007b76 <_dtoa_r+0xbc6>
 8007816:	2300      	movs	r3, #0
 8007818:	4639      	mov	r1, r7
 800781a:	220a      	movs	r2, #10
 800781c:	4620      	mov	r0, r4
 800781e:	f000 fc59 	bl	80080d4 <__multadd>
 8007822:	9b01      	ldr	r3, [sp, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	4607      	mov	r7, r0
 8007828:	f300 8096 	bgt.w	8007958 <_dtoa_r+0x9a8>
 800782c:	9b07      	ldr	r3, [sp, #28]
 800782e:	2b02      	cmp	r3, #2
 8007830:	dc59      	bgt.n	80078e6 <_dtoa_r+0x936>
 8007832:	e091      	b.n	8007958 <_dtoa_r+0x9a8>
 8007834:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007836:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800783a:	e758      	b.n	80076ee <_dtoa_r+0x73e>
 800783c:	9b04      	ldr	r3, [sp, #16]
 800783e:	1e5e      	subs	r6, r3, #1
 8007840:	9b08      	ldr	r3, [sp, #32]
 8007842:	42b3      	cmp	r3, r6
 8007844:	bfbf      	itttt	lt
 8007846:	9b08      	ldrlt	r3, [sp, #32]
 8007848:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800784a:	9608      	strlt	r6, [sp, #32]
 800784c:	1af3      	sublt	r3, r6, r3
 800784e:	bfb4      	ite	lt
 8007850:	18d2      	addlt	r2, r2, r3
 8007852:	1b9e      	subge	r6, r3, r6
 8007854:	9b04      	ldr	r3, [sp, #16]
 8007856:	bfbc      	itt	lt
 8007858:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800785a:	2600      	movlt	r6, #0
 800785c:	2b00      	cmp	r3, #0
 800785e:	bfb7      	itett	lt
 8007860:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007864:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007868:	1a9d      	sublt	r5, r3, r2
 800786a:	2300      	movlt	r3, #0
 800786c:	e741      	b.n	80076f2 <_dtoa_r+0x742>
 800786e:	9e08      	ldr	r6, [sp, #32]
 8007870:	9d05      	ldr	r5, [sp, #20]
 8007872:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007874:	e748      	b.n	8007708 <_dtoa_r+0x758>
 8007876:	9a08      	ldr	r2, [sp, #32]
 8007878:	e770      	b.n	800775c <_dtoa_r+0x7ac>
 800787a:	9b07      	ldr	r3, [sp, #28]
 800787c:	2b01      	cmp	r3, #1
 800787e:	dc19      	bgt.n	80078b4 <_dtoa_r+0x904>
 8007880:	9b02      	ldr	r3, [sp, #8]
 8007882:	b9bb      	cbnz	r3, 80078b4 <_dtoa_r+0x904>
 8007884:	9b03      	ldr	r3, [sp, #12]
 8007886:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800788a:	b99b      	cbnz	r3, 80078b4 <_dtoa_r+0x904>
 800788c:	9b03      	ldr	r3, [sp, #12]
 800788e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007892:	0d1b      	lsrs	r3, r3, #20
 8007894:	051b      	lsls	r3, r3, #20
 8007896:	b183      	cbz	r3, 80078ba <_dtoa_r+0x90a>
 8007898:	9b05      	ldr	r3, [sp, #20]
 800789a:	3301      	adds	r3, #1
 800789c:	9305      	str	r3, [sp, #20]
 800789e:	9b06      	ldr	r3, [sp, #24]
 80078a0:	3301      	adds	r3, #1
 80078a2:	9306      	str	r3, [sp, #24]
 80078a4:	f04f 0801 	mov.w	r8, #1
 80078a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f47f af6f 	bne.w	800778e <_dtoa_r+0x7de>
 80078b0:	2001      	movs	r0, #1
 80078b2:	e774      	b.n	800779e <_dtoa_r+0x7ee>
 80078b4:	f04f 0800 	mov.w	r8, #0
 80078b8:	e7f6      	b.n	80078a8 <_dtoa_r+0x8f8>
 80078ba:	4698      	mov	r8, r3
 80078bc:	e7f4      	b.n	80078a8 <_dtoa_r+0x8f8>
 80078be:	d082      	beq.n	80077c6 <_dtoa_r+0x816>
 80078c0:	9a05      	ldr	r2, [sp, #20]
 80078c2:	331c      	adds	r3, #28
 80078c4:	441a      	add	r2, r3
 80078c6:	9205      	str	r2, [sp, #20]
 80078c8:	9a06      	ldr	r2, [sp, #24]
 80078ca:	441a      	add	r2, r3
 80078cc:	441d      	add	r5, r3
 80078ce:	9206      	str	r2, [sp, #24]
 80078d0:	e779      	b.n	80077c6 <_dtoa_r+0x816>
 80078d2:	4603      	mov	r3, r0
 80078d4:	e7f4      	b.n	80078c0 <_dtoa_r+0x910>
 80078d6:	9b04      	ldr	r3, [sp, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	dc37      	bgt.n	800794c <_dtoa_r+0x99c>
 80078dc:	9b07      	ldr	r3, [sp, #28]
 80078de:	2b02      	cmp	r3, #2
 80078e0:	dd34      	ble.n	800794c <_dtoa_r+0x99c>
 80078e2:	9b04      	ldr	r3, [sp, #16]
 80078e4:	9301      	str	r3, [sp, #4]
 80078e6:	9b01      	ldr	r3, [sp, #4]
 80078e8:	b963      	cbnz	r3, 8007904 <_dtoa_r+0x954>
 80078ea:	4631      	mov	r1, r6
 80078ec:	2205      	movs	r2, #5
 80078ee:	4620      	mov	r0, r4
 80078f0:	f000 fbf0 	bl	80080d4 <__multadd>
 80078f4:	4601      	mov	r1, r0
 80078f6:	4606      	mov	r6, r0
 80078f8:	4650      	mov	r0, sl
 80078fa:	f000 fe05 	bl	8008508 <__mcmp>
 80078fe:	2800      	cmp	r0, #0
 8007900:	f73f adbb 	bgt.w	800747a <_dtoa_r+0x4ca>
 8007904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007906:	9d00      	ldr	r5, [sp, #0]
 8007908:	ea6f 0b03 	mvn.w	fp, r3
 800790c:	f04f 0800 	mov.w	r8, #0
 8007910:	4631      	mov	r1, r6
 8007912:	4620      	mov	r0, r4
 8007914:	f000 fbbc 	bl	8008090 <_Bfree>
 8007918:	2f00      	cmp	r7, #0
 800791a:	f43f aeab 	beq.w	8007674 <_dtoa_r+0x6c4>
 800791e:	f1b8 0f00 	cmp.w	r8, #0
 8007922:	d005      	beq.n	8007930 <_dtoa_r+0x980>
 8007924:	45b8      	cmp	r8, r7
 8007926:	d003      	beq.n	8007930 <_dtoa_r+0x980>
 8007928:	4641      	mov	r1, r8
 800792a:	4620      	mov	r0, r4
 800792c:	f000 fbb0 	bl	8008090 <_Bfree>
 8007930:	4639      	mov	r1, r7
 8007932:	4620      	mov	r0, r4
 8007934:	f000 fbac 	bl	8008090 <_Bfree>
 8007938:	e69c      	b.n	8007674 <_dtoa_r+0x6c4>
 800793a:	2600      	movs	r6, #0
 800793c:	4637      	mov	r7, r6
 800793e:	e7e1      	b.n	8007904 <_dtoa_r+0x954>
 8007940:	46bb      	mov	fp, r7
 8007942:	4637      	mov	r7, r6
 8007944:	e599      	b.n	800747a <_dtoa_r+0x4ca>
 8007946:	bf00      	nop
 8007948:	40240000 	.word	0x40240000
 800794c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800794e:	2b00      	cmp	r3, #0
 8007950:	f000 80c8 	beq.w	8007ae4 <_dtoa_r+0xb34>
 8007954:	9b04      	ldr	r3, [sp, #16]
 8007956:	9301      	str	r3, [sp, #4]
 8007958:	2d00      	cmp	r5, #0
 800795a:	dd05      	ble.n	8007968 <_dtoa_r+0x9b8>
 800795c:	4639      	mov	r1, r7
 800795e:	462a      	mov	r2, r5
 8007960:	4620      	mov	r0, r4
 8007962:	f000 fd65 	bl	8008430 <__lshift>
 8007966:	4607      	mov	r7, r0
 8007968:	f1b8 0f00 	cmp.w	r8, #0
 800796c:	d05b      	beq.n	8007a26 <_dtoa_r+0xa76>
 800796e:	6879      	ldr	r1, [r7, #4]
 8007970:	4620      	mov	r0, r4
 8007972:	f000 fb4d 	bl	8008010 <_Balloc>
 8007976:	4605      	mov	r5, r0
 8007978:	b928      	cbnz	r0, 8007986 <_dtoa_r+0x9d6>
 800797a:	4b83      	ldr	r3, [pc, #524]	; (8007b88 <_dtoa_r+0xbd8>)
 800797c:	4602      	mov	r2, r0
 800797e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007982:	f7ff bb2e 	b.w	8006fe2 <_dtoa_r+0x32>
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	3202      	adds	r2, #2
 800798a:	0092      	lsls	r2, r2, #2
 800798c:	f107 010c 	add.w	r1, r7, #12
 8007990:	300c      	adds	r0, #12
 8007992:	f000 ffd7 	bl	8008944 <memcpy>
 8007996:	2201      	movs	r2, #1
 8007998:	4629      	mov	r1, r5
 800799a:	4620      	mov	r0, r4
 800799c:	f000 fd48 	bl	8008430 <__lshift>
 80079a0:	9b00      	ldr	r3, [sp, #0]
 80079a2:	3301      	adds	r3, #1
 80079a4:	9304      	str	r3, [sp, #16]
 80079a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079aa:	4413      	add	r3, r2
 80079ac:	9308      	str	r3, [sp, #32]
 80079ae:	9b02      	ldr	r3, [sp, #8]
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	46b8      	mov	r8, r7
 80079b6:	9306      	str	r3, [sp, #24]
 80079b8:	4607      	mov	r7, r0
 80079ba:	9b04      	ldr	r3, [sp, #16]
 80079bc:	4631      	mov	r1, r6
 80079be:	3b01      	subs	r3, #1
 80079c0:	4650      	mov	r0, sl
 80079c2:	9301      	str	r3, [sp, #4]
 80079c4:	f7ff fa69 	bl	8006e9a <quorem>
 80079c8:	4641      	mov	r1, r8
 80079ca:	9002      	str	r0, [sp, #8]
 80079cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80079d0:	4650      	mov	r0, sl
 80079d2:	f000 fd99 	bl	8008508 <__mcmp>
 80079d6:	463a      	mov	r2, r7
 80079d8:	9005      	str	r0, [sp, #20]
 80079da:	4631      	mov	r1, r6
 80079dc:	4620      	mov	r0, r4
 80079de:	f000 fdaf 	bl	8008540 <__mdiff>
 80079e2:	68c2      	ldr	r2, [r0, #12]
 80079e4:	4605      	mov	r5, r0
 80079e6:	bb02      	cbnz	r2, 8007a2a <_dtoa_r+0xa7a>
 80079e8:	4601      	mov	r1, r0
 80079ea:	4650      	mov	r0, sl
 80079ec:	f000 fd8c 	bl	8008508 <__mcmp>
 80079f0:	4602      	mov	r2, r0
 80079f2:	4629      	mov	r1, r5
 80079f4:	4620      	mov	r0, r4
 80079f6:	9209      	str	r2, [sp, #36]	; 0x24
 80079f8:	f000 fb4a 	bl	8008090 <_Bfree>
 80079fc:	9b07      	ldr	r3, [sp, #28]
 80079fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a00:	9d04      	ldr	r5, [sp, #16]
 8007a02:	ea43 0102 	orr.w	r1, r3, r2
 8007a06:	9b06      	ldr	r3, [sp, #24]
 8007a08:	4319      	orrs	r1, r3
 8007a0a:	d110      	bne.n	8007a2e <_dtoa_r+0xa7e>
 8007a0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007a10:	d029      	beq.n	8007a66 <_dtoa_r+0xab6>
 8007a12:	9b05      	ldr	r3, [sp, #20]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	dd02      	ble.n	8007a1e <_dtoa_r+0xa6e>
 8007a18:	9b02      	ldr	r3, [sp, #8]
 8007a1a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007a1e:	9b01      	ldr	r3, [sp, #4]
 8007a20:	f883 9000 	strb.w	r9, [r3]
 8007a24:	e774      	b.n	8007910 <_dtoa_r+0x960>
 8007a26:	4638      	mov	r0, r7
 8007a28:	e7ba      	b.n	80079a0 <_dtoa_r+0x9f0>
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	e7e1      	b.n	80079f2 <_dtoa_r+0xa42>
 8007a2e:	9b05      	ldr	r3, [sp, #20]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	db04      	blt.n	8007a3e <_dtoa_r+0xa8e>
 8007a34:	9907      	ldr	r1, [sp, #28]
 8007a36:	430b      	orrs	r3, r1
 8007a38:	9906      	ldr	r1, [sp, #24]
 8007a3a:	430b      	orrs	r3, r1
 8007a3c:	d120      	bne.n	8007a80 <_dtoa_r+0xad0>
 8007a3e:	2a00      	cmp	r2, #0
 8007a40:	dded      	ble.n	8007a1e <_dtoa_r+0xa6e>
 8007a42:	4651      	mov	r1, sl
 8007a44:	2201      	movs	r2, #1
 8007a46:	4620      	mov	r0, r4
 8007a48:	f000 fcf2 	bl	8008430 <__lshift>
 8007a4c:	4631      	mov	r1, r6
 8007a4e:	4682      	mov	sl, r0
 8007a50:	f000 fd5a 	bl	8008508 <__mcmp>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	dc03      	bgt.n	8007a60 <_dtoa_r+0xab0>
 8007a58:	d1e1      	bne.n	8007a1e <_dtoa_r+0xa6e>
 8007a5a:	f019 0f01 	tst.w	r9, #1
 8007a5e:	d0de      	beq.n	8007a1e <_dtoa_r+0xa6e>
 8007a60:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007a64:	d1d8      	bne.n	8007a18 <_dtoa_r+0xa68>
 8007a66:	9a01      	ldr	r2, [sp, #4]
 8007a68:	2339      	movs	r3, #57	; 0x39
 8007a6a:	7013      	strb	r3, [r2, #0]
 8007a6c:	462b      	mov	r3, r5
 8007a6e:	461d      	mov	r5, r3
 8007a70:	3b01      	subs	r3, #1
 8007a72:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a76:	2a39      	cmp	r2, #57	; 0x39
 8007a78:	d06c      	beq.n	8007b54 <_dtoa_r+0xba4>
 8007a7a:	3201      	adds	r2, #1
 8007a7c:	701a      	strb	r2, [r3, #0]
 8007a7e:	e747      	b.n	8007910 <_dtoa_r+0x960>
 8007a80:	2a00      	cmp	r2, #0
 8007a82:	dd07      	ble.n	8007a94 <_dtoa_r+0xae4>
 8007a84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007a88:	d0ed      	beq.n	8007a66 <_dtoa_r+0xab6>
 8007a8a:	9a01      	ldr	r2, [sp, #4]
 8007a8c:	f109 0301 	add.w	r3, r9, #1
 8007a90:	7013      	strb	r3, [r2, #0]
 8007a92:	e73d      	b.n	8007910 <_dtoa_r+0x960>
 8007a94:	9b04      	ldr	r3, [sp, #16]
 8007a96:	9a08      	ldr	r2, [sp, #32]
 8007a98:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d043      	beq.n	8007b28 <_dtoa_r+0xb78>
 8007aa0:	4651      	mov	r1, sl
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	220a      	movs	r2, #10
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f000 fb14 	bl	80080d4 <__multadd>
 8007aac:	45b8      	cmp	r8, r7
 8007aae:	4682      	mov	sl, r0
 8007ab0:	f04f 0300 	mov.w	r3, #0
 8007ab4:	f04f 020a 	mov.w	r2, #10
 8007ab8:	4641      	mov	r1, r8
 8007aba:	4620      	mov	r0, r4
 8007abc:	d107      	bne.n	8007ace <_dtoa_r+0xb1e>
 8007abe:	f000 fb09 	bl	80080d4 <__multadd>
 8007ac2:	4680      	mov	r8, r0
 8007ac4:	4607      	mov	r7, r0
 8007ac6:	9b04      	ldr	r3, [sp, #16]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	9304      	str	r3, [sp, #16]
 8007acc:	e775      	b.n	80079ba <_dtoa_r+0xa0a>
 8007ace:	f000 fb01 	bl	80080d4 <__multadd>
 8007ad2:	4639      	mov	r1, r7
 8007ad4:	4680      	mov	r8, r0
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	220a      	movs	r2, #10
 8007ada:	4620      	mov	r0, r4
 8007adc:	f000 fafa 	bl	80080d4 <__multadd>
 8007ae0:	4607      	mov	r7, r0
 8007ae2:	e7f0      	b.n	8007ac6 <_dtoa_r+0xb16>
 8007ae4:	9b04      	ldr	r3, [sp, #16]
 8007ae6:	9301      	str	r3, [sp, #4]
 8007ae8:	9d00      	ldr	r5, [sp, #0]
 8007aea:	4631      	mov	r1, r6
 8007aec:	4650      	mov	r0, sl
 8007aee:	f7ff f9d4 	bl	8006e9a <quorem>
 8007af2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007af6:	9b00      	ldr	r3, [sp, #0]
 8007af8:	f805 9b01 	strb.w	r9, [r5], #1
 8007afc:	1aea      	subs	r2, r5, r3
 8007afe:	9b01      	ldr	r3, [sp, #4]
 8007b00:	4293      	cmp	r3, r2
 8007b02:	dd07      	ble.n	8007b14 <_dtoa_r+0xb64>
 8007b04:	4651      	mov	r1, sl
 8007b06:	2300      	movs	r3, #0
 8007b08:	220a      	movs	r2, #10
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f000 fae2 	bl	80080d4 <__multadd>
 8007b10:	4682      	mov	sl, r0
 8007b12:	e7ea      	b.n	8007aea <_dtoa_r+0xb3a>
 8007b14:	9b01      	ldr	r3, [sp, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	bfc8      	it	gt
 8007b1a:	461d      	movgt	r5, r3
 8007b1c:	9b00      	ldr	r3, [sp, #0]
 8007b1e:	bfd8      	it	le
 8007b20:	2501      	movle	r5, #1
 8007b22:	441d      	add	r5, r3
 8007b24:	f04f 0800 	mov.w	r8, #0
 8007b28:	4651      	mov	r1, sl
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f000 fc7f 	bl	8008430 <__lshift>
 8007b32:	4631      	mov	r1, r6
 8007b34:	4682      	mov	sl, r0
 8007b36:	f000 fce7 	bl	8008508 <__mcmp>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	dc96      	bgt.n	8007a6c <_dtoa_r+0xabc>
 8007b3e:	d102      	bne.n	8007b46 <_dtoa_r+0xb96>
 8007b40:	f019 0f01 	tst.w	r9, #1
 8007b44:	d192      	bne.n	8007a6c <_dtoa_r+0xabc>
 8007b46:	462b      	mov	r3, r5
 8007b48:	461d      	mov	r5, r3
 8007b4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b4e:	2a30      	cmp	r2, #48	; 0x30
 8007b50:	d0fa      	beq.n	8007b48 <_dtoa_r+0xb98>
 8007b52:	e6dd      	b.n	8007910 <_dtoa_r+0x960>
 8007b54:	9a00      	ldr	r2, [sp, #0]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d189      	bne.n	8007a6e <_dtoa_r+0xabe>
 8007b5a:	f10b 0b01 	add.w	fp, fp, #1
 8007b5e:	2331      	movs	r3, #49	; 0x31
 8007b60:	e796      	b.n	8007a90 <_dtoa_r+0xae0>
 8007b62:	4b0a      	ldr	r3, [pc, #40]	; (8007b8c <_dtoa_r+0xbdc>)
 8007b64:	f7ff ba99 	b.w	800709a <_dtoa_r+0xea>
 8007b68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f47f aa6d 	bne.w	800704a <_dtoa_r+0x9a>
 8007b70:	4b07      	ldr	r3, [pc, #28]	; (8007b90 <_dtoa_r+0xbe0>)
 8007b72:	f7ff ba92 	b.w	800709a <_dtoa_r+0xea>
 8007b76:	9b01      	ldr	r3, [sp, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	dcb5      	bgt.n	8007ae8 <_dtoa_r+0xb38>
 8007b7c:	9b07      	ldr	r3, [sp, #28]
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	f73f aeb1 	bgt.w	80078e6 <_dtoa_r+0x936>
 8007b84:	e7b0      	b.n	8007ae8 <_dtoa_r+0xb38>
 8007b86:	bf00      	nop
 8007b88:	08008c14 	.word	0x08008c14
 8007b8c:	08008b74 	.word	0x08008b74
 8007b90:	08008b98 	.word	0x08008b98

08007b94 <_free_r>:
 8007b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b96:	2900      	cmp	r1, #0
 8007b98:	d044      	beq.n	8007c24 <_free_r+0x90>
 8007b9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b9e:	9001      	str	r0, [sp, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f1a1 0404 	sub.w	r4, r1, #4
 8007ba6:	bfb8      	it	lt
 8007ba8:	18e4      	addlt	r4, r4, r3
 8007baa:	f7fe ffc9 	bl	8006b40 <__malloc_lock>
 8007bae:	4a1e      	ldr	r2, [pc, #120]	; (8007c28 <_free_r+0x94>)
 8007bb0:	9801      	ldr	r0, [sp, #4]
 8007bb2:	6813      	ldr	r3, [r2, #0]
 8007bb4:	b933      	cbnz	r3, 8007bc4 <_free_r+0x30>
 8007bb6:	6063      	str	r3, [r4, #4]
 8007bb8:	6014      	str	r4, [r2, #0]
 8007bba:	b003      	add	sp, #12
 8007bbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bc0:	f7fe bfc4 	b.w	8006b4c <__malloc_unlock>
 8007bc4:	42a3      	cmp	r3, r4
 8007bc6:	d908      	bls.n	8007bda <_free_r+0x46>
 8007bc8:	6825      	ldr	r5, [r4, #0]
 8007bca:	1961      	adds	r1, r4, r5
 8007bcc:	428b      	cmp	r3, r1
 8007bce:	bf01      	itttt	eq
 8007bd0:	6819      	ldreq	r1, [r3, #0]
 8007bd2:	685b      	ldreq	r3, [r3, #4]
 8007bd4:	1949      	addeq	r1, r1, r5
 8007bd6:	6021      	streq	r1, [r4, #0]
 8007bd8:	e7ed      	b.n	8007bb6 <_free_r+0x22>
 8007bda:	461a      	mov	r2, r3
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	b10b      	cbz	r3, 8007be4 <_free_r+0x50>
 8007be0:	42a3      	cmp	r3, r4
 8007be2:	d9fa      	bls.n	8007bda <_free_r+0x46>
 8007be4:	6811      	ldr	r1, [r2, #0]
 8007be6:	1855      	adds	r5, r2, r1
 8007be8:	42a5      	cmp	r5, r4
 8007bea:	d10b      	bne.n	8007c04 <_free_r+0x70>
 8007bec:	6824      	ldr	r4, [r4, #0]
 8007bee:	4421      	add	r1, r4
 8007bf0:	1854      	adds	r4, r2, r1
 8007bf2:	42a3      	cmp	r3, r4
 8007bf4:	6011      	str	r1, [r2, #0]
 8007bf6:	d1e0      	bne.n	8007bba <_free_r+0x26>
 8007bf8:	681c      	ldr	r4, [r3, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	6053      	str	r3, [r2, #4]
 8007bfe:	440c      	add	r4, r1
 8007c00:	6014      	str	r4, [r2, #0]
 8007c02:	e7da      	b.n	8007bba <_free_r+0x26>
 8007c04:	d902      	bls.n	8007c0c <_free_r+0x78>
 8007c06:	230c      	movs	r3, #12
 8007c08:	6003      	str	r3, [r0, #0]
 8007c0a:	e7d6      	b.n	8007bba <_free_r+0x26>
 8007c0c:	6825      	ldr	r5, [r4, #0]
 8007c0e:	1961      	adds	r1, r4, r5
 8007c10:	428b      	cmp	r3, r1
 8007c12:	bf04      	itt	eq
 8007c14:	6819      	ldreq	r1, [r3, #0]
 8007c16:	685b      	ldreq	r3, [r3, #4]
 8007c18:	6063      	str	r3, [r4, #4]
 8007c1a:	bf04      	itt	eq
 8007c1c:	1949      	addeq	r1, r1, r5
 8007c1e:	6021      	streq	r1, [r4, #0]
 8007c20:	6054      	str	r4, [r2, #4]
 8007c22:	e7ca      	b.n	8007bba <_free_r+0x26>
 8007c24:	b003      	add	sp, #12
 8007c26:	bd30      	pop	{r4, r5, pc}
 8007c28:	200004e8 	.word	0x200004e8

08007c2c <__sfputc_r>:
 8007c2c:	6893      	ldr	r3, [r2, #8]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	b410      	push	{r4}
 8007c34:	6093      	str	r3, [r2, #8]
 8007c36:	da08      	bge.n	8007c4a <__sfputc_r+0x1e>
 8007c38:	6994      	ldr	r4, [r2, #24]
 8007c3a:	42a3      	cmp	r3, r4
 8007c3c:	db01      	blt.n	8007c42 <__sfputc_r+0x16>
 8007c3e:	290a      	cmp	r1, #10
 8007c40:	d103      	bne.n	8007c4a <__sfputc_r+0x1e>
 8007c42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c46:	f000 bda2 	b.w	800878e <__swbuf_r>
 8007c4a:	6813      	ldr	r3, [r2, #0]
 8007c4c:	1c58      	adds	r0, r3, #1
 8007c4e:	6010      	str	r0, [r2, #0]
 8007c50:	7019      	strb	r1, [r3, #0]
 8007c52:	4608      	mov	r0, r1
 8007c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <__sfputs_r>:
 8007c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5c:	4606      	mov	r6, r0
 8007c5e:	460f      	mov	r7, r1
 8007c60:	4614      	mov	r4, r2
 8007c62:	18d5      	adds	r5, r2, r3
 8007c64:	42ac      	cmp	r4, r5
 8007c66:	d101      	bne.n	8007c6c <__sfputs_r+0x12>
 8007c68:	2000      	movs	r0, #0
 8007c6a:	e007      	b.n	8007c7c <__sfputs_r+0x22>
 8007c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c70:	463a      	mov	r2, r7
 8007c72:	4630      	mov	r0, r6
 8007c74:	f7ff ffda 	bl	8007c2c <__sfputc_r>
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	d1f3      	bne.n	8007c64 <__sfputs_r+0xa>
 8007c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c80 <_vfiprintf_r>:
 8007c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	460d      	mov	r5, r1
 8007c86:	b09d      	sub	sp, #116	; 0x74
 8007c88:	4614      	mov	r4, r2
 8007c8a:	4698      	mov	r8, r3
 8007c8c:	4606      	mov	r6, r0
 8007c8e:	b118      	cbz	r0, 8007c98 <_vfiprintf_r+0x18>
 8007c90:	6a03      	ldr	r3, [r0, #32]
 8007c92:	b90b      	cbnz	r3, 8007c98 <_vfiprintf_r+0x18>
 8007c94:	f7fe ffec 	bl	8006c70 <__sinit>
 8007c98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c9a:	07d9      	lsls	r1, r3, #31
 8007c9c:	d405      	bmi.n	8007caa <_vfiprintf_r+0x2a>
 8007c9e:	89ab      	ldrh	r3, [r5, #12]
 8007ca0:	059a      	lsls	r2, r3, #22
 8007ca2:	d402      	bmi.n	8007caa <_vfiprintf_r+0x2a>
 8007ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ca6:	f7ff f8f6 	bl	8006e96 <__retarget_lock_acquire_recursive>
 8007caa:	89ab      	ldrh	r3, [r5, #12]
 8007cac:	071b      	lsls	r3, r3, #28
 8007cae:	d501      	bpl.n	8007cb4 <_vfiprintf_r+0x34>
 8007cb0:	692b      	ldr	r3, [r5, #16]
 8007cb2:	b99b      	cbnz	r3, 8007cdc <_vfiprintf_r+0x5c>
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	f000 fda6 	bl	8008808 <__swsetup_r>
 8007cbc:	b170      	cbz	r0, 8007cdc <_vfiprintf_r+0x5c>
 8007cbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cc0:	07dc      	lsls	r4, r3, #31
 8007cc2:	d504      	bpl.n	8007cce <_vfiprintf_r+0x4e>
 8007cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cc8:	b01d      	add	sp, #116	; 0x74
 8007cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cce:	89ab      	ldrh	r3, [r5, #12]
 8007cd0:	0598      	lsls	r0, r3, #22
 8007cd2:	d4f7      	bmi.n	8007cc4 <_vfiprintf_r+0x44>
 8007cd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cd6:	f7ff f8df 	bl	8006e98 <__retarget_lock_release_recursive>
 8007cda:	e7f3      	b.n	8007cc4 <_vfiprintf_r+0x44>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce0:	2320      	movs	r3, #32
 8007ce2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ce6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cea:	2330      	movs	r3, #48	; 0x30
 8007cec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007ea0 <_vfiprintf_r+0x220>
 8007cf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cf4:	f04f 0901 	mov.w	r9, #1
 8007cf8:	4623      	mov	r3, r4
 8007cfa:	469a      	mov	sl, r3
 8007cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d00:	b10a      	cbz	r2, 8007d06 <_vfiprintf_r+0x86>
 8007d02:	2a25      	cmp	r2, #37	; 0x25
 8007d04:	d1f9      	bne.n	8007cfa <_vfiprintf_r+0x7a>
 8007d06:	ebba 0b04 	subs.w	fp, sl, r4
 8007d0a:	d00b      	beq.n	8007d24 <_vfiprintf_r+0xa4>
 8007d0c:	465b      	mov	r3, fp
 8007d0e:	4622      	mov	r2, r4
 8007d10:	4629      	mov	r1, r5
 8007d12:	4630      	mov	r0, r6
 8007d14:	f7ff ffa1 	bl	8007c5a <__sfputs_r>
 8007d18:	3001      	adds	r0, #1
 8007d1a:	f000 80a9 	beq.w	8007e70 <_vfiprintf_r+0x1f0>
 8007d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d20:	445a      	add	r2, fp
 8007d22:	9209      	str	r2, [sp, #36]	; 0x24
 8007d24:	f89a 3000 	ldrb.w	r3, [sl]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 80a1 	beq.w	8007e70 <_vfiprintf_r+0x1f0>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d38:	f10a 0a01 	add.w	sl, sl, #1
 8007d3c:	9304      	str	r3, [sp, #16]
 8007d3e:	9307      	str	r3, [sp, #28]
 8007d40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d44:	931a      	str	r3, [sp, #104]	; 0x68
 8007d46:	4654      	mov	r4, sl
 8007d48:	2205      	movs	r2, #5
 8007d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d4e:	4854      	ldr	r0, [pc, #336]	; (8007ea0 <_vfiprintf_r+0x220>)
 8007d50:	f7f8 fa66 	bl	8000220 <memchr>
 8007d54:	9a04      	ldr	r2, [sp, #16]
 8007d56:	b9d8      	cbnz	r0, 8007d90 <_vfiprintf_r+0x110>
 8007d58:	06d1      	lsls	r1, r2, #27
 8007d5a:	bf44      	itt	mi
 8007d5c:	2320      	movmi	r3, #32
 8007d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d62:	0713      	lsls	r3, r2, #28
 8007d64:	bf44      	itt	mi
 8007d66:	232b      	movmi	r3, #43	; 0x2b
 8007d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d70:	2b2a      	cmp	r3, #42	; 0x2a
 8007d72:	d015      	beq.n	8007da0 <_vfiprintf_r+0x120>
 8007d74:	9a07      	ldr	r2, [sp, #28]
 8007d76:	4654      	mov	r4, sl
 8007d78:	2000      	movs	r0, #0
 8007d7a:	f04f 0c0a 	mov.w	ip, #10
 8007d7e:	4621      	mov	r1, r4
 8007d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d84:	3b30      	subs	r3, #48	; 0x30
 8007d86:	2b09      	cmp	r3, #9
 8007d88:	d94d      	bls.n	8007e26 <_vfiprintf_r+0x1a6>
 8007d8a:	b1b0      	cbz	r0, 8007dba <_vfiprintf_r+0x13a>
 8007d8c:	9207      	str	r2, [sp, #28]
 8007d8e:	e014      	b.n	8007dba <_vfiprintf_r+0x13a>
 8007d90:	eba0 0308 	sub.w	r3, r0, r8
 8007d94:	fa09 f303 	lsl.w	r3, r9, r3
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	9304      	str	r3, [sp, #16]
 8007d9c:	46a2      	mov	sl, r4
 8007d9e:	e7d2      	b.n	8007d46 <_vfiprintf_r+0xc6>
 8007da0:	9b03      	ldr	r3, [sp, #12]
 8007da2:	1d19      	adds	r1, r3, #4
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	9103      	str	r1, [sp, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	bfbb      	ittet	lt
 8007dac:	425b      	neglt	r3, r3
 8007dae:	f042 0202 	orrlt.w	r2, r2, #2
 8007db2:	9307      	strge	r3, [sp, #28]
 8007db4:	9307      	strlt	r3, [sp, #28]
 8007db6:	bfb8      	it	lt
 8007db8:	9204      	strlt	r2, [sp, #16]
 8007dba:	7823      	ldrb	r3, [r4, #0]
 8007dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8007dbe:	d10c      	bne.n	8007dda <_vfiprintf_r+0x15a>
 8007dc0:	7863      	ldrb	r3, [r4, #1]
 8007dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8007dc4:	d134      	bne.n	8007e30 <_vfiprintf_r+0x1b0>
 8007dc6:	9b03      	ldr	r3, [sp, #12]
 8007dc8:	1d1a      	adds	r2, r3, #4
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	9203      	str	r2, [sp, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	bfb8      	it	lt
 8007dd2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007dd6:	3402      	adds	r4, #2
 8007dd8:	9305      	str	r3, [sp, #20]
 8007dda:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007eb0 <_vfiprintf_r+0x230>
 8007dde:	7821      	ldrb	r1, [r4, #0]
 8007de0:	2203      	movs	r2, #3
 8007de2:	4650      	mov	r0, sl
 8007de4:	f7f8 fa1c 	bl	8000220 <memchr>
 8007de8:	b138      	cbz	r0, 8007dfa <_vfiprintf_r+0x17a>
 8007dea:	9b04      	ldr	r3, [sp, #16]
 8007dec:	eba0 000a 	sub.w	r0, r0, sl
 8007df0:	2240      	movs	r2, #64	; 0x40
 8007df2:	4082      	lsls	r2, r0
 8007df4:	4313      	orrs	r3, r2
 8007df6:	3401      	adds	r4, #1
 8007df8:	9304      	str	r3, [sp, #16]
 8007dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dfe:	4829      	ldr	r0, [pc, #164]	; (8007ea4 <_vfiprintf_r+0x224>)
 8007e00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e04:	2206      	movs	r2, #6
 8007e06:	f7f8 fa0b 	bl	8000220 <memchr>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d03f      	beq.n	8007e8e <_vfiprintf_r+0x20e>
 8007e0e:	4b26      	ldr	r3, [pc, #152]	; (8007ea8 <_vfiprintf_r+0x228>)
 8007e10:	bb1b      	cbnz	r3, 8007e5a <_vfiprintf_r+0x1da>
 8007e12:	9b03      	ldr	r3, [sp, #12]
 8007e14:	3307      	adds	r3, #7
 8007e16:	f023 0307 	bic.w	r3, r3, #7
 8007e1a:	3308      	adds	r3, #8
 8007e1c:	9303      	str	r3, [sp, #12]
 8007e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e20:	443b      	add	r3, r7
 8007e22:	9309      	str	r3, [sp, #36]	; 0x24
 8007e24:	e768      	b.n	8007cf8 <_vfiprintf_r+0x78>
 8007e26:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e2a:	460c      	mov	r4, r1
 8007e2c:	2001      	movs	r0, #1
 8007e2e:	e7a6      	b.n	8007d7e <_vfiprintf_r+0xfe>
 8007e30:	2300      	movs	r3, #0
 8007e32:	3401      	adds	r4, #1
 8007e34:	9305      	str	r3, [sp, #20]
 8007e36:	4619      	mov	r1, r3
 8007e38:	f04f 0c0a 	mov.w	ip, #10
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e42:	3a30      	subs	r2, #48	; 0x30
 8007e44:	2a09      	cmp	r2, #9
 8007e46:	d903      	bls.n	8007e50 <_vfiprintf_r+0x1d0>
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0c6      	beq.n	8007dda <_vfiprintf_r+0x15a>
 8007e4c:	9105      	str	r1, [sp, #20]
 8007e4e:	e7c4      	b.n	8007dda <_vfiprintf_r+0x15a>
 8007e50:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e54:	4604      	mov	r4, r0
 8007e56:	2301      	movs	r3, #1
 8007e58:	e7f0      	b.n	8007e3c <_vfiprintf_r+0x1bc>
 8007e5a:	ab03      	add	r3, sp, #12
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	462a      	mov	r2, r5
 8007e60:	4b12      	ldr	r3, [pc, #72]	; (8007eac <_vfiprintf_r+0x22c>)
 8007e62:	a904      	add	r1, sp, #16
 8007e64:	4630      	mov	r0, r6
 8007e66:	f7fe f947 	bl	80060f8 <_printf_float>
 8007e6a:	4607      	mov	r7, r0
 8007e6c:	1c78      	adds	r0, r7, #1
 8007e6e:	d1d6      	bne.n	8007e1e <_vfiprintf_r+0x19e>
 8007e70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e72:	07d9      	lsls	r1, r3, #31
 8007e74:	d405      	bmi.n	8007e82 <_vfiprintf_r+0x202>
 8007e76:	89ab      	ldrh	r3, [r5, #12]
 8007e78:	059a      	lsls	r2, r3, #22
 8007e7a:	d402      	bmi.n	8007e82 <_vfiprintf_r+0x202>
 8007e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e7e:	f7ff f80b 	bl	8006e98 <__retarget_lock_release_recursive>
 8007e82:	89ab      	ldrh	r3, [r5, #12]
 8007e84:	065b      	lsls	r3, r3, #25
 8007e86:	f53f af1d 	bmi.w	8007cc4 <_vfiprintf_r+0x44>
 8007e8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e8c:	e71c      	b.n	8007cc8 <_vfiprintf_r+0x48>
 8007e8e:	ab03      	add	r3, sp, #12
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	462a      	mov	r2, r5
 8007e94:	4b05      	ldr	r3, [pc, #20]	; (8007eac <_vfiprintf_r+0x22c>)
 8007e96:	a904      	add	r1, sp, #16
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f7fe fc79 	bl	8006790 <_printf_i>
 8007e9e:	e7e4      	b.n	8007e6a <_vfiprintf_r+0x1ea>
 8007ea0:	08008c25 	.word	0x08008c25
 8007ea4:	08008c2f 	.word	0x08008c2f
 8007ea8:	080060f9 	.word	0x080060f9
 8007eac:	08007c5b 	.word	0x08007c5b
 8007eb0:	08008c2b 	.word	0x08008c2b

08007eb4 <__sflush_r>:
 8007eb4:	898a      	ldrh	r2, [r1, #12]
 8007eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eba:	4605      	mov	r5, r0
 8007ebc:	0710      	lsls	r0, r2, #28
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	d458      	bmi.n	8007f74 <__sflush_r+0xc0>
 8007ec2:	684b      	ldr	r3, [r1, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	dc05      	bgt.n	8007ed4 <__sflush_r+0x20>
 8007ec8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	dc02      	bgt.n	8007ed4 <__sflush_r+0x20>
 8007ece:	2000      	movs	r0, #0
 8007ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ed6:	2e00      	cmp	r6, #0
 8007ed8:	d0f9      	beq.n	8007ece <__sflush_r+0x1a>
 8007eda:	2300      	movs	r3, #0
 8007edc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ee0:	682f      	ldr	r7, [r5, #0]
 8007ee2:	6a21      	ldr	r1, [r4, #32]
 8007ee4:	602b      	str	r3, [r5, #0]
 8007ee6:	d032      	beq.n	8007f4e <__sflush_r+0x9a>
 8007ee8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007eea:	89a3      	ldrh	r3, [r4, #12]
 8007eec:	075a      	lsls	r2, r3, #29
 8007eee:	d505      	bpl.n	8007efc <__sflush_r+0x48>
 8007ef0:	6863      	ldr	r3, [r4, #4]
 8007ef2:	1ac0      	subs	r0, r0, r3
 8007ef4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ef6:	b10b      	cbz	r3, 8007efc <__sflush_r+0x48>
 8007ef8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007efa:	1ac0      	subs	r0, r0, r3
 8007efc:	2300      	movs	r3, #0
 8007efe:	4602      	mov	r2, r0
 8007f00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f02:	6a21      	ldr	r1, [r4, #32]
 8007f04:	4628      	mov	r0, r5
 8007f06:	47b0      	blx	r6
 8007f08:	1c43      	adds	r3, r0, #1
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	d106      	bne.n	8007f1c <__sflush_r+0x68>
 8007f0e:	6829      	ldr	r1, [r5, #0]
 8007f10:	291d      	cmp	r1, #29
 8007f12:	d82b      	bhi.n	8007f6c <__sflush_r+0xb8>
 8007f14:	4a29      	ldr	r2, [pc, #164]	; (8007fbc <__sflush_r+0x108>)
 8007f16:	410a      	asrs	r2, r1
 8007f18:	07d6      	lsls	r6, r2, #31
 8007f1a:	d427      	bmi.n	8007f6c <__sflush_r+0xb8>
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	6062      	str	r2, [r4, #4]
 8007f20:	04d9      	lsls	r1, r3, #19
 8007f22:	6922      	ldr	r2, [r4, #16]
 8007f24:	6022      	str	r2, [r4, #0]
 8007f26:	d504      	bpl.n	8007f32 <__sflush_r+0x7e>
 8007f28:	1c42      	adds	r2, r0, #1
 8007f2a:	d101      	bne.n	8007f30 <__sflush_r+0x7c>
 8007f2c:	682b      	ldr	r3, [r5, #0]
 8007f2e:	b903      	cbnz	r3, 8007f32 <__sflush_r+0x7e>
 8007f30:	6560      	str	r0, [r4, #84]	; 0x54
 8007f32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f34:	602f      	str	r7, [r5, #0]
 8007f36:	2900      	cmp	r1, #0
 8007f38:	d0c9      	beq.n	8007ece <__sflush_r+0x1a>
 8007f3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f3e:	4299      	cmp	r1, r3
 8007f40:	d002      	beq.n	8007f48 <__sflush_r+0x94>
 8007f42:	4628      	mov	r0, r5
 8007f44:	f7ff fe26 	bl	8007b94 <_free_r>
 8007f48:	2000      	movs	r0, #0
 8007f4a:	6360      	str	r0, [r4, #52]	; 0x34
 8007f4c:	e7c0      	b.n	8007ed0 <__sflush_r+0x1c>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	4628      	mov	r0, r5
 8007f52:	47b0      	blx	r6
 8007f54:	1c41      	adds	r1, r0, #1
 8007f56:	d1c8      	bne.n	8007eea <__sflush_r+0x36>
 8007f58:	682b      	ldr	r3, [r5, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d0c5      	beq.n	8007eea <__sflush_r+0x36>
 8007f5e:	2b1d      	cmp	r3, #29
 8007f60:	d001      	beq.n	8007f66 <__sflush_r+0xb2>
 8007f62:	2b16      	cmp	r3, #22
 8007f64:	d101      	bne.n	8007f6a <__sflush_r+0xb6>
 8007f66:	602f      	str	r7, [r5, #0]
 8007f68:	e7b1      	b.n	8007ece <__sflush_r+0x1a>
 8007f6a:	89a3      	ldrh	r3, [r4, #12]
 8007f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f70:	81a3      	strh	r3, [r4, #12]
 8007f72:	e7ad      	b.n	8007ed0 <__sflush_r+0x1c>
 8007f74:	690f      	ldr	r7, [r1, #16]
 8007f76:	2f00      	cmp	r7, #0
 8007f78:	d0a9      	beq.n	8007ece <__sflush_r+0x1a>
 8007f7a:	0793      	lsls	r3, r2, #30
 8007f7c:	680e      	ldr	r6, [r1, #0]
 8007f7e:	bf08      	it	eq
 8007f80:	694b      	ldreq	r3, [r1, #20]
 8007f82:	600f      	str	r7, [r1, #0]
 8007f84:	bf18      	it	ne
 8007f86:	2300      	movne	r3, #0
 8007f88:	eba6 0807 	sub.w	r8, r6, r7
 8007f8c:	608b      	str	r3, [r1, #8]
 8007f8e:	f1b8 0f00 	cmp.w	r8, #0
 8007f92:	dd9c      	ble.n	8007ece <__sflush_r+0x1a>
 8007f94:	6a21      	ldr	r1, [r4, #32]
 8007f96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f98:	4643      	mov	r3, r8
 8007f9a:	463a      	mov	r2, r7
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	47b0      	blx	r6
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	dc06      	bgt.n	8007fb2 <__sflush_r+0xfe>
 8007fa4:	89a3      	ldrh	r3, [r4, #12]
 8007fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007faa:	81a3      	strh	r3, [r4, #12]
 8007fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fb0:	e78e      	b.n	8007ed0 <__sflush_r+0x1c>
 8007fb2:	4407      	add	r7, r0
 8007fb4:	eba8 0800 	sub.w	r8, r8, r0
 8007fb8:	e7e9      	b.n	8007f8e <__sflush_r+0xda>
 8007fba:	bf00      	nop
 8007fbc:	dfbffffe 	.word	0xdfbffffe

08007fc0 <_fflush_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	690b      	ldr	r3, [r1, #16]
 8007fc4:	4605      	mov	r5, r0
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	b913      	cbnz	r3, 8007fd0 <_fflush_r+0x10>
 8007fca:	2500      	movs	r5, #0
 8007fcc:	4628      	mov	r0, r5
 8007fce:	bd38      	pop	{r3, r4, r5, pc}
 8007fd0:	b118      	cbz	r0, 8007fda <_fflush_r+0x1a>
 8007fd2:	6a03      	ldr	r3, [r0, #32]
 8007fd4:	b90b      	cbnz	r3, 8007fda <_fflush_r+0x1a>
 8007fd6:	f7fe fe4b 	bl	8006c70 <__sinit>
 8007fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0f3      	beq.n	8007fca <_fflush_r+0xa>
 8007fe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fe4:	07d0      	lsls	r0, r2, #31
 8007fe6:	d404      	bmi.n	8007ff2 <_fflush_r+0x32>
 8007fe8:	0599      	lsls	r1, r3, #22
 8007fea:	d402      	bmi.n	8007ff2 <_fflush_r+0x32>
 8007fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fee:	f7fe ff52 	bl	8006e96 <__retarget_lock_acquire_recursive>
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	4621      	mov	r1, r4
 8007ff6:	f7ff ff5d 	bl	8007eb4 <__sflush_r>
 8007ffa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ffc:	07da      	lsls	r2, r3, #31
 8007ffe:	4605      	mov	r5, r0
 8008000:	d4e4      	bmi.n	8007fcc <_fflush_r+0xc>
 8008002:	89a3      	ldrh	r3, [r4, #12]
 8008004:	059b      	lsls	r3, r3, #22
 8008006:	d4e1      	bmi.n	8007fcc <_fflush_r+0xc>
 8008008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800800a:	f7fe ff45 	bl	8006e98 <__retarget_lock_release_recursive>
 800800e:	e7dd      	b.n	8007fcc <_fflush_r+0xc>

08008010 <_Balloc>:
 8008010:	b570      	push	{r4, r5, r6, lr}
 8008012:	69c6      	ldr	r6, [r0, #28]
 8008014:	4604      	mov	r4, r0
 8008016:	460d      	mov	r5, r1
 8008018:	b976      	cbnz	r6, 8008038 <_Balloc+0x28>
 800801a:	2010      	movs	r0, #16
 800801c:	f7fe faa2 	bl	8006564 <malloc>
 8008020:	4602      	mov	r2, r0
 8008022:	61e0      	str	r0, [r4, #28]
 8008024:	b920      	cbnz	r0, 8008030 <_Balloc+0x20>
 8008026:	4b18      	ldr	r3, [pc, #96]	; (8008088 <_Balloc+0x78>)
 8008028:	4818      	ldr	r0, [pc, #96]	; (800808c <_Balloc+0x7c>)
 800802a:	216b      	movs	r1, #107	; 0x6b
 800802c:	f000 fc98 	bl	8008960 <__assert_func>
 8008030:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008034:	6006      	str	r6, [r0, #0]
 8008036:	60c6      	str	r6, [r0, #12]
 8008038:	69e6      	ldr	r6, [r4, #28]
 800803a:	68f3      	ldr	r3, [r6, #12]
 800803c:	b183      	cbz	r3, 8008060 <_Balloc+0x50>
 800803e:	69e3      	ldr	r3, [r4, #28]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008046:	b9b8      	cbnz	r0, 8008078 <_Balloc+0x68>
 8008048:	2101      	movs	r1, #1
 800804a:	fa01 f605 	lsl.w	r6, r1, r5
 800804e:	1d72      	adds	r2, r6, #5
 8008050:	0092      	lsls	r2, r2, #2
 8008052:	4620      	mov	r0, r4
 8008054:	f000 fca2 	bl	800899c <_calloc_r>
 8008058:	b160      	cbz	r0, 8008074 <_Balloc+0x64>
 800805a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800805e:	e00e      	b.n	800807e <_Balloc+0x6e>
 8008060:	2221      	movs	r2, #33	; 0x21
 8008062:	2104      	movs	r1, #4
 8008064:	4620      	mov	r0, r4
 8008066:	f000 fc99 	bl	800899c <_calloc_r>
 800806a:	69e3      	ldr	r3, [r4, #28]
 800806c:	60f0      	str	r0, [r6, #12]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e4      	bne.n	800803e <_Balloc+0x2e>
 8008074:	2000      	movs	r0, #0
 8008076:	bd70      	pop	{r4, r5, r6, pc}
 8008078:	6802      	ldr	r2, [r0, #0]
 800807a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800807e:	2300      	movs	r3, #0
 8008080:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008084:	e7f7      	b.n	8008076 <_Balloc+0x66>
 8008086:	bf00      	nop
 8008088:	08008ba5 	.word	0x08008ba5
 800808c:	08008c36 	.word	0x08008c36

08008090 <_Bfree>:
 8008090:	b570      	push	{r4, r5, r6, lr}
 8008092:	69c6      	ldr	r6, [r0, #28]
 8008094:	4605      	mov	r5, r0
 8008096:	460c      	mov	r4, r1
 8008098:	b976      	cbnz	r6, 80080b8 <_Bfree+0x28>
 800809a:	2010      	movs	r0, #16
 800809c:	f7fe fa62 	bl	8006564 <malloc>
 80080a0:	4602      	mov	r2, r0
 80080a2:	61e8      	str	r0, [r5, #28]
 80080a4:	b920      	cbnz	r0, 80080b0 <_Bfree+0x20>
 80080a6:	4b09      	ldr	r3, [pc, #36]	; (80080cc <_Bfree+0x3c>)
 80080a8:	4809      	ldr	r0, [pc, #36]	; (80080d0 <_Bfree+0x40>)
 80080aa:	218f      	movs	r1, #143	; 0x8f
 80080ac:	f000 fc58 	bl	8008960 <__assert_func>
 80080b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080b4:	6006      	str	r6, [r0, #0]
 80080b6:	60c6      	str	r6, [r0, #12]
 80080b8:	b13c      	cbz	r4, 80080ca <_Bfree+0x3a>
 80080ba:	69eb      	ldr	r3, [r5, #28]
 80080bc:	6862      	ldr	r2, [r4, #4]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080c4:	6021      	str	r1, [r4, #0]
 80080c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080ca:	bd70      	pop	{r4, r5, r6, pc}
 80080cc:	08008ba5 	.word	0x08008ba5
 80080d0:	08008c36 	.word	0x08008c36

080080d4 <__multadd>:
 80080d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080d8:	690d      	ldr	r5, [r1, #16]
 80080da:	4607      	mov	r7, r0
 80080dc:	460c      	mov	r4, r1
 80080de:	461e      	mov	r6, r3
 80080e0:	f101 0c14 	add.w	ip, r1, #20
 80080e4:	2000      	movs	r0, #0
 80080e6:	f8dc 3000 	ldr.w	r3, [ip]
 80080ea:	b299      	uxth	r1, r3
 80080ec:	fb02 6101 	mla	r1, r2, r1, r6
 80080f0:	0c1e      	lsrs	r6, r3, #16
 80080f2:	0c0b      	lsrs	r3, r1, #16
 80080f4:	fb02 3306 	mla	r3, r2, r6, r3
 80080f8:	b289      	uxth	r1, r1
 80080fa:	3001      	adds	r0, #1
 80080fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008100:	4285      	cmp	r5, r0
 8008102:	f84c 1b04 	str.w	r1, [ip], #4
 8008106:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800810a:	dcec      	bgt.n	80080e6 <__multadd+0x12>
 800810c:	b30e      	cbz	r6, 8008152 <__multadd+0x7e>
 800810e:	68a3      	ldr	r3, [r4, #8]
 8008110:	42ab      	cmp	r3, r5
 8008112:	dc19      	bgt.n	8008148 <__multadd+0x74>
 8008114:	6861      	ldr	r1, [r4, #4]
 8008116:	4638      	mov	r0, r7
 8008118:	3101      	adds	r1, #1
 800811a:	f7ff ff79 	bl	8008010 <_Balloc>
 800811e:	4680      	mov	r8, r0
 8008120:	b928      	cbnz	r0, 800812e <__multadd+0x5a>
 8008122:	4602      	mov	r2, r0
 8008124:	4b0c      	ldr	r3, [pc, #48]	; (8008158 <__multadd+0x84>)
 8008126:	480d      	ldr	r0, [pc, #52]	; (800815c <__multadd+0x88>)
 8008128:	21ba      	movs	r1, #186	; 0xba
 800812a:	f000 fc19 	bl	8008960 <__assert_func>
 800812e:	6922      	ldr	r2, [r4, #16]
 8008130:	3202      	adds	r2, #2
 8008132:	f104 010c 	add.w	r1, r4, #12
 8008136:	0092      	lsls	r2, r2, #2
 8008138:	300c      	adds	r0, #12
 800813a:	f000 fc03 	bl	8008944 <memcpy>
 800813e:	4621      	mov	r1, r4
 8008140:	4638      	mov	r0, r7
 8008142:	f7ff ffa5 	bl	8008090 <_Bfree>
 8008146:	4644      	mov	r4, r8
 8008148:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800814c:	3501      	adds	r5, #1
 800814e:	615e      	str	r6, [r3, #20]
 8008150:	6125      	str	r5, [r4, #16]
 8008152:	4620      	mov	r0, r4
 8008154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008158:	08008c14 	.word	0x08008c14
 800815c:	08008c36 	.word	0x08008c36

08008160 <__hi0bits>:
 8008160:	0c03      	lsrs	r3, r0, #16
 8008162:	041b      	lsls	r3, r3, #16
 8008164:	b9d3      	cbnz	r3, 800819c <__hi0bits+0x3c>
 8008166:	0400      	lsls	r0, r0, #16
 8008168:	2310      	movs	r3, #16
 800816a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800816e:	bf04      	itt	eq
 8008170:	0200      	lsleq	r0, r0, #8
 8008172:	3308      	addeq	r3, #8
 8008174:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008178:	bf04      	itt	eq
 800817a:	0100      	lsleq	r0, r0, #4
 800817c:	3304      	addeq	r3, #4
 800817e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008182:	bf04      	itt	eq
 8008184:	0080      	lsleq	r0, r0, #2
 8008186:	3302      	addeq	r3, #2
 8008188:	2800      	cmp	r0, #0
 800818a:	db05      	blt.n	8008198 <__hi0bits+0x38>
 800818c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008190:	f103 0301 	add.w	r3, r3, #1
 8008194:	bf08      	it	eq
 8008196:	2320      	moveq	r3, #32
 8008198:	4618      	mov	r0, r3
 800819a:	4770      	bx	lr
 800819c:	2300      	movs	r3, #0
 800819e:	e7e4      	b.n	800816a <__hi0bits+0xa>

080081a0 <__lo0bits>:
 80081a0:	6803      	ldr	r3, [r0, #0]
 80081a2:	f013 0207 	ands.w	r2, r3, #7
 80081a6:	d00c      	beq.n	80081c2 <__lo0bits+0x22>
 80081a8:	07d9      	lsls	r1, r3, #31
 80081aa:	d422      	bmi.n	80081f2 <__lo0bits+0x52>
 80081ac:	079a      	lsls	r2, r3, #30
 80081ae:	bf49      	itett	mi
 80081b0:	085b      	lsrmi	r3, r3, #1
 80081b2:	089b      	lsrpl	r3, r3, #2
 80081b4:	6003      	strmi	r3, [r0, #0]
 80081b6:	2201      	movmi	r2, #1
 80081b8:	bf5c      	itt	pl
 80081ba:	6003      	strpl	r3, [r0, #0]
 80081bc:	2202      	movpl	r2, #2
 80081be:	4610      	mov	r0, r2
 80081c0:	4770      	bx	lr
 80081c2:	b299      	uxth	r1, r3
 80081c4:	b909      	cbnz	r1, 80081ca <__lo0bits+0x2a>
 80081c6:	0c1b      	lsrs	r3, r3, #16
 80081c8:	2210      	movs	r2, #16
 80081ca:	b2d9      	uxtb	r1, r3
 80081cc:	b909      	cbnz	r1, 80081d2 <__lo0bits+0x32>
 80081ce:	3208      	adds	r2, #8
 80081d0:	0a1b      	lsrs	r3, r3, #8
 80081d2:	0719      	lsls	r1, r3, #28
 80081d4:	bf04      	itt	eq
 80081d6:	091b      	lsreq	r3, r3, #4
 80081d8:	3204      	addeq	r2, #4
 80081da:	0799      	lsls	r1, r3, #30
 80081dc:	bf04      	itt	eq
 80081de:	089b      	lsreq	r3, r3, #2
 80081e0:	3202      	addeq	r2, #2
 80081e2:	07d9      	lsls	r1, r3, #31
 80081e4:	d403      	bmi.n	80081ee <__lo0bits+0x4e>
 80081e6:	085b      	lsrs	r3, r3, #1
 80081e8:	f102 0201 	add.w	r2, r2, #1
 80081ec:	d003      	beq.n	80081f6 <__lo0bits+0x56>
 80081ee:	6003      	str	r3, [r0, #0]
 80081f0:	e7e5      	b.n	80081be <__lo0bits+0x1e>
 80081f2:	2200      	movs	r2, #0
 80081f4:	e7e3      	b.n	80081be <__lo0bits+0x1e>
 80081f6:	2220      	movs	r2, #32
 80081f8:	e7e1      	b.n	80081be <__lo0bits+0x1e>
	...

080081fc <__i2b>:
 80081fc:	b510      	push	{r4, lr}
 80081fe:	460c      	mov	r4, r1
 8008200:	2101      	movs	r1, #1
 8008202:	f7ff ff05 	bl	8008010 <_Balloc>
 8008206:	4602      	mov	r2, r0
 8008208:	b928      	cbnz	r0, 8008216 <__i2b+0x1a>
 800820a:	4b05      	ldr	r3, [pc, #20]	; (8008220 <__i2b+0x24>)
 800820c:	4805      	ldr	r0, [pc, #20]	; (8008224 <__i2b+0x28>)
 800820e:	f240 1145 	movw	r1, #325	; 0x145
 8008212:	f000 fba5 	bl	8008960 <__assert_func>
 8008216:	2301      	movs	r3, #1
 8008218:	6144      	str	r4, [r0, #20]
 800821a:	6103      	str	r3, [r0, #16]
 800821c:	bd10      	pop	{r4, pc}
 800821e:	bf00      	nop
 8008220:	08008c14 	.word	0x08008c14
 8008224:	08008c36 	.word	0x08008c36

08008228 <__multiply>:
 8008228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822c:	4691      	mov	r9, r2
 800822e:	690a      	ldr	r2, [r1, #16]
 8008230:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008234:	429a      	cmp	r2, r3
 8008236:	bfb8      	it	lt
 8008238:	460b      	movlt	r3, r1
 800823a:	460c      	mov	r4, r1
 800823c:	bfbc      	itt	lt
 800823e:	464c      	movlt	r4, r9
 8008240:	4699      	movlt	r9, r3
 8008242:	6927      	ldr	r7, [r4, #16]
 8008244:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008248:	68a3      	ldr	r3, [r4, #8]
 800824a:	6861      	ldr	r1, [r4, #4]
 800824c:	eb07 060a 	add.w	r6, r7, sl
 8008250:	42b3      	cmp	r3, r6
 8008252:	b085      	sub	sp, #20
 8008254:	bfb8      	it	lt
 8008256:	3101      	addlt	r1, #1
 8008258:	f7ff feda 	bl	8008010 <_Balloc>
 800825c:	b930      	cbnz	r0, 800826c <__multiply+0x44>
 800825e:	4602      	mov	r2, r0
 8008260:	4b44      	ldr	r3, [pc, #272]	; (8008374 <__multiply+0x14c>)
 8008262:	4845      	ldr	r0, [pc, #276]	; (8008378 <__multiply+0x150>)
 8008264:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008268:	f000 fb7a 	bl	8008960 <__assert_func>
 800826c:	f100 0514 	add.w	r5, r0, #20
 8008270:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008274:	462b      	mov	r3, r5
 8008276:	2200      	movs	r2, #0
 8008278:	4543      	cmp	r3, r8
 800827a:	d321      	bcc.n	80082c0 <__multiply+0x98>
 800827c:	f104 0314 	add.w	r3, r4, #20
 8008280:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008284:	f109 0314 	add.w	r3, r9, #20
 8008288:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800828c:	9202      	str	r2, [sp, #8]
 800828e:	1b3a      	subs	r2, r7, r4
 8008290:	3a15      	subs	r2, #21
 8008292:	f022 0203 	bic.w	r2, r2, #3
 8008296:	3204      	adds	r2, #4
 8008298:	f104 0115 	add.w	r1, r4, #21
 800829c:	428f      	cmp	r7, r1
 800829e:	bf38      	it	cc
 80082a0:	2204      	movcc	r2, #4
 80082a2:	9201      	str	r2, [sp, #4]
 80082a4:	9a02      	ldr	r2, [sp, #8]
 80082a6:	9303      	str	r3, [sp, #12]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d80c      	bhi.n	80082c6 <__multiply+0x9e>
 80082ac:	2e00      	cmp	r6, #0
 80082ae:	dd03      	ble.n	80082b8 <__multiply+0x90>
 80082b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d05b      	beq.n	8008370 <__multiply+0x148>
 80082b8:	6106      	str	r6, [r0, #16]
 80082ba:	b005      	add	sp, #20
 80082bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c0:	f843 2b04 	str.w	r2, [r3], #4
 80082c4:	e7d8      	b.n	8008278 <__multiply+0x50>
 80082c6:	f8b3 a000 	ldrh.w	sl, [r3]
 80082ca:	f1ba 0f00 	cmp.w	sl, #0
 80082ce:	d024      	beq.n	800831a <__multiply+0xf2>
 80082d0:	f104 0e14 	add.w	lr, r4, #20
 80082d4:	46a9      	mov	r9, r5
 80082d6:	f04f 0c00 	mov.w	ip, #0
 80082da:	f85e 2b04 	ldr.w	r2, [lr], #4
 80082de:	f8d9 1000 	ldr.w	r1, [r9]
 80082e2:	fa1f fb82 	uxth.w	fp, r2
 80082e6:	b289      	uxth	r1, r1
 80082e8:	fb0a 110b 	mla	r1, sl, fp, r1
 80082ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80082f0:	f8d9 2000 	ldr.w	r2, [r9]
 80082f4:	4461      	add	r1, ip
 80082f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082fa:	fb0a c20b 	mla	r2, sl, fp, ip
 80082fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008302:	b289      	uxth	r1, r1
 8008304:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008308:	4577      	cmp	r7, lr
 800830a:	f849 1b04 	str.w	r1, [r9], #4
 800830e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008312:	d8e2      	bhi.n	80082da <__multiply+0xb2>
 8008314:	9a01      	ldr	r2, [sp, #4]
 8008316:	f845 c002 	str.w	ip, [r5, r2]
 800831a:	9a03      	ldr	r2, [sp, #12]
 800831c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008320:	3304      	adds	r3, #4
 8008322:	f1b9 0f00 	cmp.w	r9, #0
 8008326:	d021      	beq.n	800836c <__multiply+0x144>
 8008328:	6829      	ldr	r1, [r5, #0]
 800832a:	f104 0c14 	add.w	ip, r4, #20
 800832e:	46ae      	mov	lr, r5
 8008330:	f04f 0a00 	mov.w	sl, #0
 8008334:	f8bc b000 	ldrh.w	fp, [ip]
 8008338:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800833c:	fb09 220b 	mla	r2, r9, fp, r2
 8008340:	4452      	add	r2, sl
 8008342:	b289      	uxth	r1, r1
 8008344:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008348:	f84e 1b04 	str.w	r1, [lr], #4
 800834c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008350:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008354:	f8be 1000 	ldrh.w	r1, [lr]
 8008358:	fb09 110a 	mla	r1, r9, sl, r1
 800835c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008360:	4567      	cmp	r7, ip
 8008362:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008366:	d8e5      	bhi.n	8008334 <__multiply+0x10c>
 8008368:	9a01      	ldr	r2, [sp, #4]
 800836a:	50a9      	str	r1, [r5, r2]
 800836c:	3504      	adds	r5, #4
 800836e:	e799      	b.n	80082a4 <__multiply+0x7c>
 8008370:	3e01      	subs	r6, #1
 8008372:	e79b      	b.n	80082ac <__multiply+0x84>
 8008374:	08008c14 	.word	0x08008c14
 8008378:	08008c36 	.word	0x08008c36

0800837c <__pow5mult>:
 800837c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008380:	4615      	mov	r5, r2
 8008382:	f012 0203 	ands.w	r2, r2, #3
 8008386:	4606      	mov	r6, r0
 8008388:	460f      	mov	r7, r1
 800838a:	d007      	beq.n	800839c <__pow5mult+0x20>
 800838c:	4c25      	ldr	r4, [pc, #148]	; (8008424 <__pow5mult+0xa8>)
 800838e:	3a01      	subs	r2, #1
 8008390:	2300      	movs	r3, #0
 8008392:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008396:	f7ff fe9d 	bl	80080d4 <__multadd>
 800839a:	4607      	mov	r7, r0
 800839c:	10ad      	asrs	r5, r5, #2
 800839e:	d03d      	beq.n	800841c <__pow5mult+0xa0>
 80083a0:	69f4      	ldr	r4, [r6, #28]
 80083a2:	b97c      	cbnz	r4, 80083c4 <__pow5mult+0x48>
 80083a4:	2010      	movs	r0, #16
 80083a6:	f7fe f8dd 	bl	8006564 <malloc>
 80083aa:	4602      	mov	r2, r0
 80083ac:	61f0      	str	r0, [r6, #28]
 80083ae:	b928      	cbnz	r0, 80083bc <__pow5mult+0x40>
 80083b0:	4b1d      	ldr	r3, [pc, #116]	; (8008428 <__pow5mult+0xac>)
 80083b2:	481e      	ldr	r0, [pc, #120]	; (800842c <__pow5mult+0xb0>)
 80083b4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80083b8:	f000 fad2 	bl	8008960 <__assert_func>
 80083bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083c0:	6004      	str	r4, [r0, #0]
 80083c2:	60c4      	str	r4, [r0, #12]
 80083c4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80083c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083cc:	b94c      	cbnz	r4, 80083e2 <__pow5mult+0x66>
 80083ce:	f240 2171 	movw	r1, #625	; 0x271
 80083d2:	4630      	mov	r0, r6
 80083d4:	f7ff ff12 	bl	80081fc <__i2b>
 80083d8:	2300      	movs	r3, #0
 80083da:	f8c8 0008 	str.w	r0, [r8, #8]
 80083de:	4604      	mov	r4, r0
 80083e0:	6003      	str	r3, [r0, #0]
 80083e2:	f04f 0900 	mov.w	r9, #0
 80083e6:	07eb      	lsls	r3, r5, #31
 80083e8:	d50a      	bpl.n	8008400 <__pow5mult+0x84>
 80083ea:	4639      	mov	r1, r7
 80083ec:	4622      	mov	r2, r4
 80083ee:	4630      	mov	r0, r6
 80083f0:	f7ff ff1a 	bl	8008228 <__multiply>
 80083f4:	4639      	mov	r1, r7
 80083f6:	4680      	mov	r8, r0
 80083f8:	4630      	mov	r0, r6
 80083fa:	f7ff fe49 	bl	8008090 <_Bfree>
 80083fe:	4647      	mov	r7, r8
 8008400:	106d      	asrs	r5, r5, #1
 8008402:	d00b      	beq.n	800841c <__pow5mult+0xa0>
 8008404:	6820      	ldr	r0, [r4, #0]
 8008406:	b938      	cbnz	r0, 8008418 <__pow5mult+0x9c>
 8008408:	4622      	mov	r2, r4
 800840a:	4621      	mov	r1, r4
 800840c:	4630      	mov	r0, r6
 800840e:	f7ff ff0b 	bl	8008228 <__multiply>
 8008412:	6020      	str	r0, [r4, #0]
 8008414:	f8c0 9000 	str.w	r9, [r0]
 8008418:	4604      	mov	r4, r0
 800841a:	e7e4      	b.n	80083e6 <__pow5mult+0x6a>
 800841c:	4638      	mov	r0, r7
 800841e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008422:	bf00      	nop
 8008424:	08008d80 	.word	0x08008d80
 8008428:	08008ba5 	.word	0x08008ba5
 800842c:	08008c36 	.word	0x08008c36

08008430 <__lshift>:
 8008430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008434:	460c      	mov	r4, r1
 8008436:	6849      	ldr	r1, [r1, #4]
 8008438:	6923      	ldr	r3, [r4, #16]
 800843a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800843e:	68a3      	ldr	r3, [r4, #8]
 8008440:	4607      	mov	r7, r0
 8008442:	4691      	mov	r9, r2
 8008444:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008448:	f108 0601 	add.w	r6, r8, #1
 800844c:	42b3      	cmp	r3, r6
 800844e:	db0b      	blt.n	8008468 <__lshift+0x38>
 8008450:	4638      	mov	r0, r7
 8008452:	f7ff fddd 	bl	8008010 <_Balloc>
 8008456:	4605      	mov	r5, r0
 8008458:	b948      	cbnz	r0, 800846e <__lshift+0x3e>
 800845a:	4602      	mov	r2, r0
 800845c:	4b28      	ldr	r3, [pc, #160]	; (8008500 <__lshift+0xd0>)
 800845e:	4829      	ldr	r0, [pc, #164]	; (8008504 <__lshift+0xd4>)
 8008460:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008464:	f000 fa7c 	bl	8008960 <__assert_func>
 8008468:	3101      	adds	r1, #1
 800846a:	005b      	lsls	r3, r3, #1
 800846c:	e7ee      	b.n	800844c <__lshift+0x1c>
 800846e:	2300      	movs	r3, #0
 8008470:	f100 0114 	add.w	r1, r0, #20
 8008474:	f100 0210 	add.w	r2, r0, #16
 8008478:	4618      	mov	r0, r3
 800847a:	4553      	cmp	r3, sl
 800847c:	db33      	blt.n	80084e6 <__lshift+0xb6>
 800847e:	6920      	ldr	r0, [r4, #16]
 8008480:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008484:	f104 0314 	add.w	r3, r4, #20
 8008488:	f019 091f 	ands.w	r9, r9, #31
 800848c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008490:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008494:	d02b      	beq.n	80084ee <__lshift+0xbe>
 8008496:	f1c9 0e20 	rsb	lr, r9, #32
 800849a:	468a      	mov	sl, r1
 800849c:	2200      	movs	r2, #0
 800849e:	6818      	ldr	r0, [r3, #0]
 80084a0:	fa00 f009 	lsl.w	r0, r0, r9
 80084a4:	4310      	orrs	r0, r2
 80084a6:	f84a 0b04 	str.w	r0, [sl], #4
 80084aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ae:	459c      	cmp	ip, r3
 80084b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80084b4:	d8f3      	bhi.n	800849e <__lshift+0x6e>
 80084b6:	ebac 0304 	sub.w	r3, ip, r4
 80084ba:	3b15      	subs	r3, #21
 80084bc:	f023 0303 	bic.w	r3, r3, #3
 80084c0:	3304      	adds	r3, #4
 80084c2:	f104 0015 	add.w	r0, r4, #21
 80084c6:	4584      	cmp	ip, r0
 80084c8:	bf38      	it	cc
 80084ca:	2304      	movcc	r3, #4
 80084cc:	50ca      	str	r2, [r1, r3]
 80084ce:	b10a      	cbz	r2, 80084d4 <__lshift+0xa4>
 80084d0:	f108 0602 	add.w	r6, r8, #2
 80084d4:	3e01      	subs	r6, #1
 80084d6:	4638      	mov	r0, r7
 80084d8:	612e      	str	r6, [r5, #16]
 80084da:	4621      	mov	r1, r4
 80084dc:	f7ff fdd8 	bl	8008090 <_Bfree>
 80084e0:	4628      	mov	r0, r5
 80084e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80084ea:	3301      	adds	r3, #1
 80084ec:	e7c5      	b.n	800847a <__lshift+0x4a>
 80084ee:	3904      	subs	r1, #4
 80084f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80084f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80084f8:	459c      	cmp	ip, r3
 80084fa:	d8f9      	bhi.n	80084f0 <__lshift+0xc0>
 80084fc:	e7ea      	b.n	80084d4 <__lshift+0xa4>
 80084fe:	bf00      	nop
 8008500:	08008c14 	.word	0x08008c14
 8008504:	08008c36 	.word	0x08008c36

08008508 <__mcmp>:
 8008508:	b530      	push	{r4, r5, lr}
 800850a:	6902      	ldr	r2, [r0, #16]
 800850c:	690c      	ldr	r4, [r1, #16]
 800850e:	1b12      	subs	r2, r2, r4
 8008510:	d10e      	bne.n	8008530 <__mcmp+0x28>
 8008512:	f100 0314 	add.w	r3, r0, #20
 8008516:	3114      	adds	r1, #20
 8008518:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800851c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008520:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008524:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008528:	42a5      	cmp	r5, r4
 800852a:	d003      	beq.n	8008534 <__mcmp+0x2c>
 800852c:	d305      	bcc.n	800853a <__mcmp+0x32>
 800852e:	2201      	movs	r2, #1
 8008530:	4610      	mov	r0, r2
 8008532:	bd30      	pop	{r4, r5, pc}
 8008534:	4283      	cmp	r3, r0
 8008536:	d3f3      	bcc.n	8008520 <__mcmp+0x18>
 8008538:	e7fa      	b.n	8008530 <__mcmp+0x28>
 800853a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800853e:	e7f7      	b.n	8008530 <__mcmp+0x28>

08008540 <__mdiff>:
 8008540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008544:	460c      	mov	r4, r1
 8008546:	4606      	mov	r6, r0
 8008548:	4611      	mov	r1, r2
 800854a:	4620      	mov	r0, r4
 800854c:	4690      	mov	r8, r2
 800854e:	f7ff ffdb 	bl	8008508 <__mcmp>
 8008552:	1e05      	subs	r5, r0, #0
 8008554:	d110      	bne.n	8008578 <__mdiff+0x38>
 8008556:	4629      	mov	r1, r5
 8008558:	4630      	mov	r0, r6
 800855a:	f7ff fd59 	bl	8008010 <_Balloc>
 800855e:	b930      	cbnz	r0, 800856e <__mdiff+0x2e>
 8008560:	4b3a      	ldr	r3, [pc, #232]	; (800864c <__mdiff+0x10c>)
 8008562:	4602      	mov	r2, r0
 8008564:	f240 2137 	movw	r1, #567	; 0x237
 8008568:	4839      	ldr	r0, [pc, #228]	; (8008650 <__mdiff+0x110>)
 800856a:	f000 f9f9 	bl	8008960 <__assert_func>
 800856e:	2301      	movs	r3, #1
 8008570:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008574:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008578:	bfa4      	itt	ge
 800857a:	4643      	movge	r3, r8
 800857c:	46a0      	movge	r8, r4
 800857e:	4630      	mov	r0, r6
 8008580:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008584:	bfa6      	itte	ge
 8008586:	461c      	movge	r4, r3
 8008588:	2500      	movge	r5, #0
 800858a:	2501      	movlt	r5, #1
 800858c:	f7ff fd40 	bl	8008010 <_Balloc>
 8008590:	b920      	cbnz	r0, 800859c <__mdiff+0x5c>
 8008592:	4b2e      	ldr	r3, [pc, #184]	; (800864c <__mdiff+0x10c>)
 8008594:	4602      	mov	r2, r0
 8008596:	f240 2145 	movw	r1, #581	; 0x245
 800859a:	e7e5      	b.n	8008568 <__mdiff+0x28>
 800859c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80085a0:	6926      	ldr	r6, [r4, #16]
 80085a2:	60c5      	str	r5, [r0, #12]
 80085a4:	f104 0914 	add.w	r9, r4, #20
 80085a8:	f108 0514 	add.w	r5, r8, #20
 80085ac:	f100 0e14 	add.w	lr, r0, #20
 80085b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80085b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80085b8:	f108 0210 	add.w	r2, r8, #16
 80085bc:	46f2      	mov	sl, lr
 80085be:	2100      	movs	r1, #0
 80085c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80085c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80085c8:	fa11 f88b 	uxtah	r8, r1, fp
 80085cc:	b299      	uxth	r1, r3
 80085ce:	0c1b      	lsrs	r3, r3, #16
 80085d0:	eba8 0801 	sub.w	r8, r8, r1
 80085d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80085d8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80085dc:	fa1f f888 	uxth.w	r8, r8
 80085e0:	1419      	asrs	r1, r3, #16
 80085e2:	454e      	cmp	r6, r9
 80085e4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80085e8:	f84a 3b04 	str.w	r3, [sl], #4
 80085ec:	d8e8      	bhi.n	80085c0 <__mdiff+0x80>
 80085ee:	1b33      	subs	r3, r6, r4
 80085f0:	3b15      	subs	r3, #21
 80085f2:	f023 0303 	bic.w	r3, r3, #3
 80085f6:	3304      	adds	r3, #4
 80085f8:	3415      	adds	r4, #21
 80085fa:	42a6      	cmp	r6, r4
 80085fc:	bf38      	it	cc
 80085fe:	2304      	movcc	r3, #4
 8008600:	441d      	add	r5, r3
 8008602:	4473      	add	r3, lr
 8008604:	469e      	mov	lr, r3
 8008606:	462e      	mov	r6, r5
 8008608:	4566      	cmp	r6, ip
 800860a:	d30e      	bcc.n	800862a <__mdiff+0xea>
 800860c:	f10c 0203 	add.w	r2, ip, #3
 8008610:	1b52      	subs	r2, r2, r5
 8008612:	f022 0203 	bic.w	r2, r2, #3
 8008616:	3d03      	subs	r5, #3
 8008618:	45ac      	cmp	ip, r5
 800861a:	bf38      	it	cc
 800861c:	2200      	movcc	r2, #0
 800861e:	4413      	add	r3, r2
 8008620:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008624:	b17a      	cbz	r2, 8008646 <__mdiff+0x106>
 8008626:	6107      	str	r7, [r0, #16]
 8008628:	e7a4      	b.n	8008574 <__mdiff+0x34>
 800862a:	f856 8b04 	ldr.w	r8, [r6], #4
 800862e:	fa11 f288 	uxtah	r2, r1, r8
 8008632:	1414      	asrs	r4, r2, #16
 8008634:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008638:	b292      	uxth	r2, r2
 800863a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800863e:	f84e 2b04 	str.w	r2, [lr], #4
 8008642:	1421      	asrs	r1, r4, #16
 8008644:	e7e0      	b.n	8008608 <__mdiff+0xc8>
 8008646:	3f01      	subs	r7, #1
 8008648:	e7ea      	b.n	8008620 <__mdiff+0xe0>
 800864a:	bf00      	nop
 800864c:	08008c14 	.word	0x08008c14
 8008650:	08008c36 	.word	0x08008c36

08008654 <__d2b>:
 8008654:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008658:	460f      	mov	r7, r1
 800865a:	2101      	movs	r1, #1
 800865c:	ec59 8b10 	vmov	r8, r9, d0
 8008660:	4616      	mov	r6, r2
 8008662:	f7ff fcd5 	bl	8008010 <_Balloc>
 8008666:	4604      	mov	r4, r0
 8008668:	b930      	cbnz	r0, 8008678 <__d2b+0x24>
 800866a:	4602      	mov	r2, r0
 800866c:	4b24      	ldr	r3, [pc, #144]	; (8008700 <__d2b+0xac>)
 800866e:	4825      	ldr	r0, [pc, #148]	; (8008704 <__d2b+0xb0>)
 8008670:	f240 310f 	movw	r1, #783	; 0x30f
 8008674:	f000 f974 	bl	8008960 <__assert_func>
 8008678:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800867c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008680:	bb2d      	cbnz	r5, 80086ce <__d2b+0x7a>
 8008682:	9301      	str	r3, [sp, #4]
 8008684:	f1b8 0300 	subs.w	r3, r8, #0
 8008688:	d026      	beq.n	80086d8 <__d2b+0x84>
 800868a:	4668      	mov	r0, sp
 800868c:	9300      	str	r3, [sp, #0]
 800868e:	f7ff fd87 	bl	80081a0 <__lo0bits>
 8008692:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008696:	b1e8      	cbz	r0, 80086d4 <__d2b+0x80>
 8008698:	f1c0 0320 	rsb	r3, r0, #32
 800869c:	fa02 f303 	lsl.w	r3, r2, r3
 80086a0:	430b      	orrs	r3, r1
 80086a2:	40c2      	lsrs	r2, r0
 80086a4:	6163      	str	r3, [r4, #20]
 80086a6:	9201      	str	r2, [sp, #4]
 80086a8:	9b01      	ldr	r3, [sp, #4]
 80086aa:	61a3      	str	r3, [r4, #24]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	bf14      	ite	ne
 80086b0:	2202      	movne	r2, #2
 80086b2:	2201      	moveq	r2, #1
 80086b4:	6122      	str	r2, [r4, #16]
 80086b6:	b1bd      	cbz	r5, 80086e8 <__d2b+0x94>
 80086b8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80086bc:	4405      	add	r5, r0
 80086be:	603d      	str	r5, [r7, #0]
 80086c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80086c4:	6030      	str	r0, [r6, #0]
 80086c6:	4620      	mov	r0, r4
 80086c8:	b003      	add	sp, #12
 80086ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086d2:	e7d6      	b.n	8008682 <__d2b+0x2e>
 80086d4:	6161      	str	r1, [r4, #20]
 80086d6:	e7e7      	b.n	80086a8 <__d2b+0x54>
 80086d8:	a801      	add	r0, sp, #4
 80086da:	f7ff fd61 	bl	80081a0 <__lo0bits>
 80086de:	9b01      	ldr	r3, [sp, #4]
 80086e0:	6163      	str	r3, [r4, #20]
 80086e2:	3020      	adds	r0, #32
 80086e4:	2201      	movs	r2, #1
 80086e6:	e7e5      	b.n	80086b4 <__d2b+0x60>
 80086e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80086f0:	6038      	str	r0, [r7, #0]
 80086f2:	6918      	ldr	r0, [r3, #16]
 80086f4:	f7ff fd34 	bl	8008160 <__hi0bits>
 80086f8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086fc:	e7e2      	b.n	80086c4 <__d2b+0x70>
 80086fe:	bf00      	nop
 8008700:	08008c14 	.word	0x08008c14
 8008704:	08008c36 	.word	0x08008c36

08008708 <__sread>:
 8008708:	b510      	push	{r4, lr}
 800870a:	460c      	mov	r4, r1
 800870c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008710:	f000 f8f4 	bl	80088fc <_read_r>
 8008714:	2800      	cmp	r0, #0
 8008716:	bfab      	itete	ge
 8008718:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800871a:	89a3      	ldrhlt	r3, [r4, #12]
 800871c:	181b      	addge	r3, r3, r0
 800871e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008722:	bfac      	ite	ge
 8008724:	6563      	strge	r3, [r4, #84]	; 0x54
 8008726:	81a3      	strhlt	r3, [r4, #12]
 8008728:	bd10      	pop	{r4, pc}

0800872a <__swrite>:
 800872a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800872e:	461f      	mov	r7, r3
 8008730:	898b      	ldrh	r3, [r1, #12]
 8008732:	05db      	lsls	r3, r3, #23
 8008734:	4605      	mov	r5, r0
 8008736:	460c      	mov	r4, r1
 8008738:	4616      	mov	r6, r2
 800873a:	d505      	bpl.n	8008748 <__swrite+0x1e>
 800873c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008740:	2302      	movs	r3, #2
 8008742:	2200      	movs	r2, #0
 8008744:	f000 f8c8 	bl	80088d8 <_lseek_r>
 8008748:	89a3      	ldrh	r3, [r4, #12]
 800874a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800874e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008752:	81a3      	strh	r3, [r4, #12]
 8008754:	4632      	mov	r2, r6
 8008756:	463b      	mov	r3, r7
 8008758:	4628      	mov	r0, r5
 800875a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800875e:	f000 b8df 	b.w	8008920 <_write_r>

08008762 <__sseek>:
 8008762:	b510      	push	{r4, lr}
 8008764:	460c      	mov	r4, r1
 8008766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876a:	f000 f8b5 	bl	80088d8 <_lseek_r>
 800876e:	1c43      	adds	r3, r0, #1
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	bf15      	itete	ne
 8008774:	6560      	strne	r0, [r4, #84]	; 0x54
 8008776:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800877a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800877e:	81a3      	strheq	r3, [r4, #12]
 8008780:	bf18      	it	ne
 8008782:	81a3      	strhne	r3, [r4, #12]
 8008784:	bd10      	pop	{r4, pc}

08008786 <__sclose>:
 8008786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878a:	f000 b895 	b.w	80088b8 <_close_r>

0800878e <__swbuf_r>:
 800878e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008790:	460e      	mov	r6, r1
 8008792:	4614      	mov	r4, r2
 8008794:	4605      	mov	r5, r0
 8008796:	b118      	cbz	r0, 80087a0 <__swbuf_r+0x12>
 8008798:	6a03      	ldr	r3, [r0, #32]
 800879a:	b90b      	cbnz	r3, 80087a0 <__swbuf_r+0x12>
 800879c:	f7fe fa68 	bl	8006c70 <__sinit>
 80087a0:	69a3      	ldr	r3, [r4, #24]
 80087a2:	60a3      	str	r3, [r4, #8]
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	071a      	lsls	r2, r3, #28
 80087a8:	d525      	bpl.n	80087f6 <__swbuf_r+0x68>
 80087aa:	6923      	ldr	r3, [r4, #16]
 80087ac:	b31b      	cbz	r3, 80087f6 <__swbuf_r+0x68>
 80087ae:	6823      	ldr	r3, [r4, #0]
 80087b0:	6922      	ldr	r2, [r4, #16]
 80087b2:	1a98      	subs	r0, r3, r2
 80087b4:	6963      	ldr	r3, [r4, #20]
 80087b6:	b2f6      	uxtb	r6, r6
 80087b8:	4283      	cmp	r3, r0
 80087ba:	4637      	mov	r7, r6
 80087bc:	dc04      	bgt.n	80087c8 <__swbuf_r+0x3a>
 80087be:	4621      	mov	r1, r4
 80087c0:	4628      	mov	r0, r5
 80087c2:	f7ff fbfd 	bl	8007fc0 <_fflush_r>
 80087c6:	b9e0      	cbnz	r0, 8008802 <__swbuf_r+0x74>
 80087c8:	68a3      	ldr	r3, [r4, #8]
 80087ca:	3b01      	subs	r3, #1
 80087cc:	60a3      	str	r3, [r4, #8]
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	6022      	str	r2, [r4, #0]
 80087d4:	701e      	strb	r6, [r3, #0]
 80087d6:	6962      	ldr	r2, [r4, #20]
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	429a      	cmp	r2, r3
 80087dc:	d004      	beq.n	80087e8 <__swbuf_r+0x5a>
 80087de:	89a3      	ldrh	r3, [r4, #12]
 80087e0:	07db      	lsls	r3, r3, #31
 80087e2:	d506      	bpl.n	80087f2 <__swbuf_r+0x64>
 80087e4:	2e0a      	cmp	r6, #10
 80087e6:	d104      	bne.n	80087f2 <__swbuf_r+0x64>
 80087e8:	4621      	mov	r1, r4
 80087ea:	4628      	mov	r0, r5
 80087ec:	f7ff fbe8 	bl	8007fc0 <_fflush_r>
 80087f0:	b938      	cbnz	r0, 8008802 <__swbuf_r+0x74>
 80087f2:	4638      	mov	r0, r7
 80087f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087f6:	4621      	mov	r1, r4
 80087f8:	4628      	mov	r0, r5
 80087fa:	f000 f805 	bl	8008808 <__swsetup_r>
 80087fe:	2800      	cmp	r0, #0
 8008800:	d0d5      	beq.n	80087ae <__swbuf_r+0x20>
 8008802:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008806:	e7f4      	b.n	80087f2 <__swbuf_r+0x64>

08008808 <__swsetup_r>:
 8008808:	b538      	push	{r3, r4, r5, lr}
 800880a:	4b2a      	ldr	r3, [pc, #168]	; (80088b4 <__swsetup_r+0xac>)
 800880c:	4605      	mov	r5, r0
 800880e:	6818      	ldr	r0, [r3, #0]
 8008810:	460c      	mov	r4, r1
 8008812:	b118      	cbz	r0, 800881c <__swsetup_r+0x14>
 8008814:	6a03      	ldr	r3, [r0, #32]
 8008816:	b90b      	cbnz	r3, 800881c <__swsetup_r+0x14>
 8008818:	f7fe fa2a 	bl	8006c70 <__sinit>
 800881c:	89a3      	ldrh	r3, [r4, #12]
 800881e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008822:	0718      	lsls	r0, r3, #28
 8008824:	d422      	bmi.n	800886c <__swsetup_r+0x64>
 8008826:	06d9      	lsls	r1, r3, #27
 8008828:	d407      	bmi.n	800883a <__swsetup_r+0x32>
 800882a:	2309      	movs	r3, #9
 800882c:	602b      	str	r3, [r5, #0]
 800882e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008832:	81a3      	strh	r3, [r4, #12]
 8008834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008838:	e034      	b.n	80088a4 <__swsetup_r+0x9c>
 800883a:	0758      	lsls	r0, r3, #29
 800883c:	d512      	bpl.n	8008864 <__swsetup_r+0x5c>
 800883e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008840:	b141      	cbz	r1, 8008854 <__swsetup_r+0x4c>
 8008842:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008846:	4299      	cmp	r1, r3
 8008848:	d002      	beq.n	8008850 <__swsetup_r+0x48>
 800884a:	4628      	mov	r0, r5
 800884c:	f7ff f9a2 	bl	8007b94 <_free_r>
 8008850:	2300      	movs	r3, #0
 8008852:	6363      	str	r3, [r4, #52]	; 0x34
 8008854:	89a3      	ldrh	r3, [r4, #12]
 8008856:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800885a:	81a3      	strh	r3, [r4, #12]
 800885c:	2300      	movs	r3, #0
 800885e:	6063      	str	r3, [r4, #4]
 8008860:	6923      	ldr	r3, [r4, #16]
 8008862:	6023      	str	r3, [r4, #0]
 8008864:	89a3      	ldrh	r3, [r4, #12]
 8008866:	f043 0308 	orr.w	r3, r3, #8
 800886a:	81a3      	strh	r3, [r4, #12]
 800886c:	6923      	ldr	r3, [r4, #16]
 800886e:	b94b      	cbnz	r3, 8008884 <__swsetup_r+0x7c>
 8008870:	89a3      	ldrh	r3, [r4, #12]
 8008872:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800887a:	d003      	beq.n	8008884 <__swsetup_r+0x7c>
 800887c:	4621      	mov	r1, r4
 800887e:	4628      	mov	r0, r5
 8008880:	f7fe fa52 	bl	8006d28 <__smakebuf_r>
 8008884:	89a0      	ldrh	r0, [r4, #12]
 8008886:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800888a:	f010 0301 	ands.w	r3, r0, #1
 800888e:	d00a      	beq.n	80088a6 <__swsetup_r+0x9e>
 8008890:	2300      	movs	r3, #0
 8008892:	60a3      	str	r3, [r4, #8]
 8008894:	6963      	ldr	r3, [r4, #20]
 8008896:	425b      	negs	r3, r3
 8008898:	61a3      	str	r3, [r4, #24]
 800889a:	6923      	ldr	r3, [r4, #16]
 800889c:	b943      	cbnz	r3, 80088b0 <__swsetup_r+0xa8>
 800889e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088a2:	d1c4      	bne.n	800882e <__swsetup_r+0x26>
 80088a4:	bd38      	pop	{r3, r4, r5, pc}
 80088a6:	0781      	lsls	r1, r0, #30
 80088a8:	bf58      	it	pl
 80088aa:	6963      	ldrpl	r3, [r4, #20]
 80088ac:	60a3      	str	r3, [r4, #8]
 80088ae:	e7f4      	b.n	800889a <__swsetup_r+0x92>
 80088b0:	2000      	movs	r0, #0
 80088b2:	e7f7      	b.n	80088a4 <__swsetup_r+0x9c>
 80088b4:	20000064 	.word	0x20000064

080088b8 <_close_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4d06      	ldr	r5, [pc, #24]	; (80088d4 <_close_r+0x1c>)
 80088bc:	2300      	movs	r3, #0
 80088be:	4604      	mov	r4, r0
 80088c0:	4608      	mov	r0, r1
 80088c2:	602b      	str	r3, [r5, #0]
 80088c4:	f7f9 f9ab 	bl	8001c1e <_close>
 80088c8:	1c43      	adds	r3, r0, #1
 80088ca:	d102      	bne.n	80088d2 <_close_r+0x1a>
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	b103      	cbz	r3, 80088d2 <_close_r+0x1a>
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	20000630 	.word	0x20000630

080088d8 <_lseek_r>:
 80088d8:	b538      	push	{r3, r4, r5, lr}
 80088da:	4d07      	ldr	r5, [pc, #28]	; (80088f8 <_lseek_r+0x20>)
 80088dc:	4604      	mov	r4, r0
 80088de:	4608      	mov	r0, r1
 80088e0:	4611      	mov	r1, r2
 80088e2:	2200      	movs	r2, #0
 80088e4:	602a      	str	r2, [r5, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	f7f9 f9c0 	bl	8001c6c <_lseek>
 80088ec:	1c43      	adds	r3, r0, #1
 80088ee:	d102      	bne.n	80088f6 <_lseek_r+0x1e>
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	b103      	cbz	r3, 80088f6 <_lseek_r+0x1e>
 80088f4:	6023      	str	r3, [r4, #0]
 80088f6:	bd38      	pop	{r3, r4, r5, pc}
 80088f8:	20000630 	.word	0x20000630

080088fc <_read_r>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	4d07      	ldr	r5, [pc, #28]	; (800891c <_read_r+0x20>)
 8008900:	4604      	mov	r4, r0
 8008902:	4608      	mov	r0, r1
 8008904:	4611      	mov	r1, r2
 8008906:	2200      	movs	r2, #0
 8008908:	602a      	str	r2, [r5, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	f7f9 f96a 	bl	8001be4 <_read>
 8008910:	1c43      	adds	r3, r0, #1
 8008912:	d102      	bne.n	800891a <_read_r+0x1e>
 8008914:	682b      	ldr	r3, [r5, #0]
 8008916:	b103      	cbz	r3, 800891a <_read_r+0x1e>
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	bd38      	pop	{r3, r4, r5, pc}
 800891c:	20000630 	.word	0x20000630

08008920 <_write_r>:
 8008920:	b538      	push	{r3, r4, r5, lr}
 8008922:	4d07      	ldr	r5, [pc, #28]	; (8008940 <_write_r+0x20>)
 8008924:	4604      	mov	r4, r0
 8008926:	4608      	mov	r0, r1
 8008928:	4611      	mov	r1, r2
 800892a:	2200      	movs	r2, #0
 800892c:	602a      	str	r2, [r5, #0]
 800892e:	461a      	mov	r2, r3
 8008930:	f7f8 fc2c 	bl	800118c <_write>
 8008934:	1c43      	adds	r3, r0, #1
 8008936:	d102      	bne.n	800893e <_write_r+0x1e>
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	b103      	cbz	r3, 800893e <_write_r+0x1e>
 800893c:	6023      	str	r3, [r4, #0]
 800893e:	bd38      	pop	{r3, r4, r5, pc}
 8008940:	20000630 	.word	0x20000630

08008944 <memcpy>:
 8008944:	440a      	add	r2, r1
 8008946:	4291      	cmp	r1, r2
 8008948:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800894c:	d100      	bne.n	8008950 <memcpy+0xc>
 800894e:	4770      	bx	lr
 8008950:	b510      	push	{r4, lr}
 8008952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800895a:	4291      	cmp	r1, r2
 800895c:	d1f9      	bne.n	8008952 <memcpy+0xe>
 800895e:	bd10      	pop	{r4, pc}

08008960 <__assert_func>:
 8008960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008962:	4614      	mov	r4, r2
 8008964:	461a      	mov	r2, r3
 8008966:	4b09      	ldr	r3, [pc, #36]	; (800898c <__assert_func+0x2c>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4605      	mov	r5, r0
 800896c:	68d8      	ldr	r0, [r3, #12]
 800896e:	b14c      	cbz	r4, 8008984 <__assert_func+0x24>
 8008970:	4b07      	ldr	r3, [pc, #28]	; (8008990 <__assert_func+0x30>)
 8008972:	9100      	str	r1, [sp, #0]
 8008974:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008978:	4906      	ldr	r1, [pc, #24]	; (8008994 <__assert_func+0x34>)
 800897a:	462b      	mov	r3, r5
 800897c:	f000 f836 	bl	80089ec <fiprintf>
 8008980:	f000 f853 	bl	8008a2a <abort>
 8008984:	4b04      	ldr	r3, [pc, #16]	; (8008998 <__assert_func+0x38>)
 8008986:	461c      	mov	r4, r3
 8008988:	e7f3      	b.n	8008972 <__assert_func+0x12>
 800898a:	bf00      	nop
 800898c:	20000064 	.word	0x20000064
 8008990:	08008e97 	.word	0x08008e97
 8008994:	08008ea4 	.word	0x08008ea4
 8008998:	08008ed2 	.word	0x08008ed2

0800899c <_calloc_r>:
 800899c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800899e:	fba1 2402 	umull	r2, r4, r1, r2
 80089a2:	b94c      	cbnz	r4, 80089b8 <_calloc_r+0x1c>
 80089a4:	4611      	mov	r1, r2
 80089a6:	9201      	str	r2, [sp, #4]
 80089a8:	f7fd fe04 	bl	80065b4 <_malloc_r>
 80089ac:	9a01      	ldr	r2, [sp, #4]
 80089ae:	4605      	mov	r5, r0
 80089b0:	b930      	cbnz	r0, 80089c0 <_calloc_r+0x24>
 80089b2:	4628      	mov	r0, r5
 80089b4:	b003      	add	sp, #12
 80089b6:	bd30      	pop	{r4, r5, pc}
 80089b8:	220c      	movs	r2, #12
 80089ba:	6002      	str	r2, [r0, #0]
 80089bc:	2500      	movs	r5, #0
 80089be:	e7f8      	b.n	80089b2 <_calloc_r+0x16>
 80089c0:	4621      	mov	r1, r4
 80089c2:	f7fe f9ff 	bl	8006dc4 <memset>
 80089c6:	e7f4      	b.n	80089b2 <_calloc_r+0x16>

080089c8 <__ascii_mbtowc>:
 80089c8:	b082      	sub	sp, #8
 80089ca:	b901      	cbnz	r1, 80089ce <__ascii_mbtowc+0x6>
 80089cc:	a901      	add	r1, sp, #4
 80089ce:	b142      	cbz	r2, 80089e2 <__ascii_mbtowc+0x1a>
 80089d0:	b14b      	cbz	r3, 80089e6 <__ascii_mbtowc+0x1e>
 80089d2:	7813      	ldrb	r3, [r2, #0]
 80089d4:	600b      	str	r3, [r1, #0]
 80089d6:	7812      	ldrb	r2, [r2, #0]
 80089d8:	1e10      	subs	r0, r2, #0
 80089da:	bf18      	it	ne
 80089dc:	2001      	movne	r0, #1
 80089de:	b002      	add	sp, #8
 80089e0:	4770      	bx	lr
 80089e2:	4610      	mov	r0, r2
 80089e4:	e7fb      	b.n	80089de <__ascii_mbtowc+0x16>
 80089e6:	f06f 0001 	mvn.w	r0, #1
 80089ea:	e7f8      	b.n	80089de <__ascii_mbtowc+0x16>

080089ec <fiprintf>:
 80089ec:	b40e      	push	{r1, r2, r3}
 80089ee:	b503      	push	{r0, r1, lr}
 80089f0:	4601      	mov	r1, r0
 80089f2:	ab03      	add	r3, sp, #12
 80089f4:	4805      	ldr	r0, [pc, #20]	; (8008a0c <fiprintf+0x20>)
 80089f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80089fa:	6800      	ldr	r0, [r0, #0]
 80089fc:	9301      	str	r3, [sp, #4]
 80089fe:	f7ff f93f 	bl	8007c80 <_vfiprintf_r>
 8008a02:	b002      	add	sp, #8
 8008a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a08:	b003      	add	sp, #12
 8008a0a:	4770      	bx	lr
 8008a0c:	20000064 	.word	0x20000064

08008a10 <__ascii_wctomb>:
 8008a10:	b149      	cbz	r1, 8008a26 <__ascii_wctomb+0x16>
 8008a12:	2aff      	cmp	r2, #255	; 0xff
 8008a14:	bf85      	ittet	hi
 8008a16:	238a      	movhi	r3, #138	; 0x8a
 8008a18:	6003      	strhi	r3, [r0, #0]
 8008a1a:	700a      	strbls	r2, [r1, #0]
 8008a1c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008a20:	bf98      	it	ls
 8008a22:	2001      	movls	r0, #1
 8008a24:	4770      	bx	lr
 8008a26:	4608      	mov	r0, r1
 8008a28:	4770      	bx	lr

08008a2a <abort>:
 8008a2a:	b508      	push	{r3, lr}
 8008a2c:	2006      	movs	r0, #6
 8008a2e:	f000 f82b 	bl	8008a88 <raise>
 8008a32:	2001      	movs	r0, #1
 8008a34:	f7f9 f8cc 	bl	8001bd0 <_exit>

08008a38 <_raise_r>:
 8008a38:	291f      	cmp	r1, #31
 8008a3a:	b538      	push	{r3, r4, r5, lr}
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	460d      	mov	r5, r1
 8008a40:	d904      	bls.n	8008a4c <_raise_r+0x14>
 8008a42:	2316      	movs	r3, #22
 8008a44:	6003      	str	r3, [r0, #0]
 8008a46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}
 8008a4c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008a4e:	b112      	cbz	r2, 8008a56 <_raise_r+0x1e>
 8008a50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a54:	b94b      	cbnz	r3, 8008a6a <_raise_r+0x32>
 8008a56:	4620      	mov	r0, r4
 8008a58:	f000 f830 	bl	8008abc <_getpid_r>
 8008a5c:	462a      	mov	r2, r5
 8008a5e:	4601      	mov	r1, r0
 8008a60:	4620      	mov	r0, r4
 8008a62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a66:	f000 b817 	b.w	8008a98 <_kill_r>
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d00a      	beq.n	8008a84 <_raise_r+0x4c>
 8008a6e:	1c59      	adds	r1, r3, #1
 8008a70:	d103      	bne.n	8008a7a <_raise_r+0x42>
 8008a72:	2316      	movs	r3, #22
 8008a74:	6003      	str	r3, [r0, #0]
 8008a76:	2001      	movs	r0, #1
 8008a78:	e7e7      	b.n	8008a4a <_raise_r+0x12>
 8008a7a:	2400      	movs	r4, #0
 8008a7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a80:	4628      	mov	r0, r5
 8008a82:	4798      	blx	r3
 8008a84:	2000      	movs	r0, #0
 8008a86:	e7e0      	b.n	8008a4a <_raise_r+0x12>

08008a88 <raise>:
 8008a88:	4b02      	ldr	r3, [pc, #8]	; (8008a94 <raise+0xc>)
 8008a8a:	4601      	mov	r1, r0
 8008a8c:	6818      	ldr	r0, [r3, #0]
 8008a8e:	f7ff bfd3 	b.w	8008a38 <_raise_r>
 8008a92:	bf00      	nop
 8008a94:	20000064 	.word	0x20000064

08008a98 <_kill_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4d07      	ldr	r5, [pc, #28]	; (8008ab8 <_kill_r+0x20>)
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	4608      	mov	r0, r1
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	602b      	str	r3, [r5, #0]
 8008aa6:	f7f9 f883 	bl	8001bb0 <_kill>
 8008aaa:	1c43      	adds	r3, r0, #1
 8008aac:	d102      	bne.n	8008ab4 <_kill_r+0x1c>
 8008aae:	682b      	ldr	r3, [r5, #0]
 8008ab0:	b103      	cbz	r3, 8008ab4 <_kill_r+0x1c>
 8008ab2:	6023      	str	r3, [r4, #0]
 8008ab4:	bd38      	pop	{r3, r4, r5, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20000630 	.word	0x20000630

08008abc <_getpid_r>:
 8008abc:	f7f9 b870 	b.w	8001ba0 <_getpid>

08008ac0 <_init>:
 8008ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac2:	bf00      	nop
 8008ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ac6:	bc08      	pop	{r3}
 8008ac8:	469e      	mov	lr, r3
 8008aca:	4770      	bx	lr

08008acc <_fini>:
 8008acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ace:	bf00      	nop
 8008ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ad2:	bc08      	pop	{r3}
 8008ad4:	469e      	mov	lr, r3
 8008ad6:	4770      	bx	lr
