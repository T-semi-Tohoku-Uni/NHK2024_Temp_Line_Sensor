
NHK2024_Temp_Line_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009300  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080094e0  080094e0  000194e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098fc  080098fc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080098fc  080098fc  000198fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009904  08009904  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009904  08009904  00019904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009908  08009908  00019908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800990c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  200001d4  08009ae0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  08009ae0  00020640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a3cf  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030b4  00000000  00000000  0003a616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017e0  00000000  00000000  0003d6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001286  00000000  00000000  0003eeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022048  00000000  00000000  00040136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019c0c  00000000  00000000  0006217e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2ac1  00000000  00000000  0007bd8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007848  00000000  00000000  0015e84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00166094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080094c8 	.word	0x080094c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	080094c8 	.word	0x080094c8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <clip_zero_one>:
    } else {
        return val;
    }
}

double clip_zero_one(double val, double min, double max) {
 8000ef4:	b5b0      	push	{r4, r5, r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	ed87 0b04 	vstr	d0, [r7, #16]
 8000efe:	ed87 1b02 	vstr	d1, [r7, #8]
 8000f02:	ed87 2b00 	vstr	d2, [r7]
    if (val < min) {
 8000f06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f0e:	f7ff fe0d 	bl	8000b2c <__aeabi_dcmplt>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d004      	beq.n	8000f22 <clip_zero_one+0x2e>
        return 0.0;
 8000f18:	f04f 0200 	mov.w	r2, #0
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	e024      	b.n	8000f6c <clip_zero_one+0x78>
    } else if (val > max) {
 8000f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f26:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f2a:	f7ff fe1d 	bl	8000b68 <__aeabi_dcmpgt>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <clip_zero_one+0x48>
        return 1.0;
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <clip_zero_one+0x8c>)
 8000f3a:	e017      	b.n	8000f6c <clip_zero_one+0x78>
    } else {
        return (val - min) / (max - min);
 8000f3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f44:	f7ff f9c8 	bl	80002d8 <__aeabi_dsub>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4614      	mov	r4, r2
 8000f4e:	461d      	mov	r5, r3
 8000f50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f58:	f7ff f9be 	bl	80002d8 <__aeabi_dsub>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4620      	mov	r0, r4
 8000f62:	4629      	mov	r1, r5
 8000f64:	f7ff fc9a 	bl	800089c <__aeabi_ddiv>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
    }
    
 8000f6c:	ec43 2b17 	vmov	d7, r2, r3
 8000f70:	eeb0 0a47 	vmov.f32	s0, s14
 8000f74:	eef0 0a67 	vmov.f32	s1, s15
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	3ff00000 	.word	0x3ff00000

08000f84 <low_pass_filter_update>:
}

double low_pass_filter_update(
    NHK2024_Low_Pass_Filter_Settings* settings,
    double input_val
) {
 8000f84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f88:	b08a      	sub	sp, #40	; 0x28
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	60f8      	str	r0, [r7, #12]
 8000f8e:	ed87 0b00 	vstr	d0, [r7]
    double T = settings->control_cycle;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f98:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double tau = settings->cutoff_freq;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa2:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // Update
    double output_val = (T / (T + 2 * tau)) * (input_val + settings->last_input_val) - (T - 2 * tau) / (T + 2 * tau) * settings->last_output_val;
 8000fa6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	f7ff f995 	bl	80002dc <__adddf3>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fbe:	f7ff f98d 	bl	80002dc <__adddf3>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000fca:	f7ff fc67 	bl	800089c <__aeabi_ddiv>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4614      	mov	r4, r2
 8000fd4:	461d      	mov	r5, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fe0:	f7ff f97c 	bl	80002dc <__adddf3>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4620      	mov	r0, r4
 8000fea:	4629      	mov	r1, r5
 8000fec:	f7ff fb2c 	bl	8000648 <__aeabi_dmul>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4614      	mov	r4, r2
 8000ff6:	461d      	mov	r5, r3
 8000ff8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	f7ff f96c 	bl	80002dc <__adddf3>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800100c:	f7ff f964 	bl	80002d8 <__aeabi_dsub>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4690      	mov	r8, r2
 8001016:	4699      	mov	r9, r3
 8001018:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	f7ff f95c 	bl	80002dc <__adddf3>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4610      	mov	r0, r2
 800102a:	4619      	mov	r1, r3
 800102c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001030:	f7ff f954 	bl	80002dc <__adddf3>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4640      	mov	r0, r8
 800103a:	4649      	mov	r1, r9
 800103c:	f7ff fc2e 	bl	800089c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800104e:	f7ff fafb 	bl	8000648 <__aeabi_dmul>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4620      	mov	r0, r4
 8001058:	4629      	mov	r1, r5
 800105a:	f7ff f93d 	bl	80002d8 <__aeabi_dsub>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    // Set new Parameter
    settings->last_input_val = input_val;
 8001066:	68f9      	ldr	r1, [r7, #12]
 8001068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800106c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    settings->last_output_val = output_val;
 8001070:	68f9      	ldr	r1, [r7, #12]
 8001072:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001076:	e9c1 2306 	strd	r2, r3, [r1, #24]

    return output_val;
 800107a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800107e:	ec43 2b17 	vmov	d7, r2, r3
 8001082:	eeb0 0a47 	vmov.f32	s0, s14
 8001086:	eef0 0a67 	vmov.f32	s1, s15
 800108a:	3728      	adds	r7, #40	; 0x28
 800108c:	46bd      	mov	sp, r7
 800108e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001094 <Sensor_Settings_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Initialize Sensor Settings (Min and Max value of sensor) */
void Sensor_Settings_Init(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
	line_sensor_settings = (struct LineSensor*)malloc(8 * sizeof(struct LineSensor));
 800109a:	2040      	movs	r0, #64	; 0x40
 800109c:	f005 ff68 	bl	8006f70 <malloc>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <Sensor_Settings_Init+0x50>)
 80010a6:	601a      	str	r2, [r3, #0]
	// To do: implement initialize algorithm
	for (int i = 0; i < 8; i++ ) {
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	e011      	b.n	80010d2 <Sensor_Settings_Init+0x3e>
		line_sensor_settings[i].max = 3000;
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <Sensor_Settings_Init+0x50>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	4413      	add	r3, r2
 80010b8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010bc:	601a      	str	r2, [r3, #0]
		line_sensor_settings[i].min = 200;
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <Sensor_Settings_Init+0x50>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	4413      	add	r3, r2
 80010c8:	22c8      	movs	r2, #200	; 0xc8
 80010ca:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 8; i++ ) {
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3301      	adds	r3, #1
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b07      	cmp	r3, #7
 80010d6:	ddea      	ble.n	80010ae <Sensor_Settings_Init+0x1a>
	}
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200001f0 	.word	0x200001f0

080010e8 <Filter_Init>:

// Initialize Low pass filter settings
void Filter_Init(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
	low_pass_filter_settings = (NHK2024_Low_Pass_Filter_Settings *)malloc(8 * sizeof(NHK2024_Low_Pass_Filter_Settings));
 80010ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80010f2:	f005 ff3d 	bl	8006f70 <malloc>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <Filter_Init+0x98>)
 80010fc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 8; i++ ) {
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	e02c      	b.n	800115e <Filter_Init+0x76>
		low_pass_filter_settings[i].control_cycle = 1e-6; // sampling time (1 / 1MHz)
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <Filter_Init+0x98>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	015b      	lsls	r3, r3, #5
 800110c:	18d1      	adds	r1, r2, r3
 800110e:	a318      	add	r3, pc, #96	; (adr r3, 8001170 <Filter_Init+0x88>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	e9c1 2302 	strd	r2, r3, [r1, #8]
		low_pass_filter_settings[i].cutoff_freq = 1e-5;   // cutoff time (10% of sampling time (from ChatGPT))
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <Filter_Init+0x98>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	015b      	lsls	r3, r3, #5
 8001120:	18d1      	adds	r1, r2, r3
 8001122:	a315      	add	r3, pc, #84	; (adr r3, 8001178 <Filter_Init+0x90>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	e9c1 2300 	strd	r2, r3, [r1]
		low_pass_filter_settings[i].last_input_val = 0;
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <Filter_Init+0x98>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	015b      	lsls	r3, r3, #5
 8001134:	18d1      	adds	r1, r2, r3
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	e9c1 2304 	strd	r2, r3, [r1, #16]
		low_pass_filter_settings[i].last_output_val = 0;
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <Filter_Init+0x98>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	015b      	lsls	r3, r3, #5
 800114a:	18d1      	adds	r1, r2, r3
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	e9c1 2306 	strd	r2, r3, [r1, #24]
	for (int i = 0; i < 8; i++ ) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3301      	adds	r3, #1
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b07      	cmp	r3, #7
 8001162:	ddcf      	ble.n	8001104 <Filter_Init+0x1c>
	}
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	a0b5ed8d 	.word	0xa0b5ed8d
 8001174:	3eb0c6f7 	.word	0x3eb0c6f7
 8001178:	88e368f1 	.word	0x88e368f1
 800117c:	3ee4f8b5 	.word	0x3ee4f8b5
 8001180:	200001f4 	.word	0x200001f4

08001184 <ADC_Init>:

void ADC_Init(void) {
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	// ADC1 initialize and start
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001188:	217f      	movs	r1, #127	; 0x7f
 800118a:	4809      	ldr	r0, [pc, #36]	; (80011b0 <ADC_Init+0x2c>)
 800118c:	f002 fa1c 	bl	80035c8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ADC1_buffer, 1);
 8001190:	2201      	movs	r2, #1
 8001192:	4908      	ldr	r1, [pc, #32]	; (80011b4 <ADC_Init+0x30>)
 8001194:	4806      	ldr	r0, [pc, #24]	; (80011b0 <ADC_Init+0x2c>)
 8001196:	f001 fb89 	bl	80028ac <HAL_ADC_Start_DMA>

	// ADC2 initialize and start
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800119a:	217f      	movs	r1, #127	; 0x7f
 800119c:	4806      	ldr	r0, [pc, #24]	; (80011b8 <ADC_Init+0x34>)
 800119e:	f002 fa13 	bl	80035c8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)&ADC2_buffer, 7);
 80011a2:	2207      	movs	r2, #7
 80011a4:	4905      	ldr	r1, [pc, #20]	; (80011bc <ADC_Init+0x38>)
 80011a6:	4804      	ldr	r0, [pc, #16]	; (80011b8 <ADC_Init+0x34>)
 80011a8:	f001 fb80 	bl	80028ac <HAL_ADC_Start_DMA>
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000020c 	.word	0x2000020c
 80011b4:	200001f8 	.word	0x200001f8
 80011b8:	20000278 	.word	0x20000278
 80011bc:	200001fc 	.word	0x200001fc

080011c0 <update_sensor_value>:
/*
 * Sensor Value 0 =>
 * Sensor Value 1 =>
 */

void update_sensor_value(void) {
 80011c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011c4:	b0a6      	sub	sp, #152	; 0x98
 80011c6:	af0e      	add	r7, sp, #56	; 0x38

	// variable definition
	// Normalize sensor value range 0 to 1
	double line_sensor_value[8];

	if (low_pass_filter_settings == NULL) {
 80011c8:	4b5d      	ldr	r3, [pc, #372]	; (8001340 <update_sensor_value+0x180>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d104      	bne.n	80011da <update_sensor_value+0x1a>
		printf("Error: Initialize Low Pass Filter");
 80011d0:	485c      	ldr	r0, [pc, #368]	; (8001344 <update_sensor_value+0x184>)
 80011d2:	f006 faeb 	bl	80077ac <iprintf>
		Error_Handler();
 80011d6:	f000 fbe3 	bl	80019a0 <Error_Handler>
	}
	if (line_sensor_settings == NULL) {
 80011da:	4b5b      	ldr	r3, [pc, #364]	; (8001348 <update_sensor_value+0x188>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d104      	bne.n	80011ec <update_sensor_value+0x2c>
		printf("Error: Initialize Line Sensor Settings");
 80011e2:	485a      	ldr	r0, [pc, #360]	; (800134c <update_sensor_value+0x18c>)
 80011e4:	f006 fae2 	bl	80077ac <iprintf>
		Error_Handler();
 80011e8:	f000 fbda 	bl	80019a0 <Error_Handler>
	* temp_sensor_value[5] -> ADC2_buffer[4] -> PF10 -> Sensor6
	* temp_sensor_value[6] -> ADC2_buffer[5] -> PA5  -> Sensor7
	* temp_sensor_value[7] -> ADC2_buffer[6] -> PA4  -> Sensor8
	*/
	uint16_t temp_sensor_value[8] = {
			ADC1_buffer[0],
 80011ec:	4b58      	ldr	r3, [pc, #352]	; (8001350 <update_sensor_value+0x190>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
	uint16_t temp_sensor_value[8] = {
 80011f0:	813b      	strh	r3, [r7, #8]
			ADC2_buffer[0],
 80011f2:	4b58      	ldr	r3, [pc, #352]	; (8001354 <update_sensor_value+0x194>)
 80011f4:	881b      	ldrh	r3, [r3, #0]
	uint16_t temp_sensor_value[8] = {
 80011f6:	817b      	strh	r3, [r7, #10]
			ADC2_buffer[1],
 80011f8:	4b56      	ldr	r3, [pc, #344]	; (8001354 <update_sensor_value+0x194>)
 80011fa:	885b      	ldrh	r3, [r3, #2]
	uint16_t temp_sensor_value[8] = {
 80011fc:	81bb      	strh	r3, [r7, #12]
			ADC2_buffer[2],
 80011fe:	4b55      	ldr	r3, [pc, #340]	; (8001354 <update_sensor_value+0x194>)
 8001200:	889b      	ldrh	r3, [r3, #4]
	uint16_t temp_sensor_value[8] = {
 8001202:	81fb      	strh	r3, [r7, #14]
			ADC2_buffer[3],
 8001204:	4b53      	ldr	r3, [pc, #332]	; (8001354 <update_sensor_value+0x194>)
 8001206:	88db      	ldrh	r3, [r3, #6]
	uint16_t temp_sensor_value[8] = {
 8001208:	823b      	strh	r3, [r7, #16]
			ADC2_buffer[4],
 800120a:	4b52      	ldr	r3, [pc, #328]	; (8001354 <update_sensor_value+0x194>)
 800120c:	891b      	ldrh	r3, [r3, #8]
	uint16_t temp_sensor_value[8] = {
 800120e:	827b      	strh	r3, [r7, #18]
			ADC2_buffer[5],
 8001210:	4b50      	ldr	r3, [pc, #320]	; (8001354 <update_sensor_value+0x194>)
 8001212:	895b      	ldrh	r3, [r3, #10]
	uint16_t temp_sensor_value[8] = {
 8001214:	82bb      	strh	r3, [r7, #20]
			ADC2_buffer[6],
 8001216:	4b4f      	ldr	r3, [pc, #316]	; (8001354 <update_sensor_value+0x194>)
 8001218:	899b      	ldrh	r3, [r3, #12]
	uint16_t temp_sensor_value[8] = {
 800121a:	82fb      	strh	r3, [r7, #22]
//			temp_sensor_value[6],
//			temp_sensor_value[7]
//	);
//#endif

	for (int i = 0; i < 8; i++ ) {
 800121c:	2300      	movs	r3, #0
 800121e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001220:	e05c      	b.n	80012dc <update_sensor_value+0x11c>
		// normalize 0 to 1
		line_sensor_value[i] = clip_zero_one(
				(double)temp_sensor_value[i],
 8001222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	3358      	adds	r3, #88	; 0x58
 8001228:	f107 0208 	add.w	r2, r7, #8
 800122c:	4413      	add	r3, r2
 800122e:	f833 3c58 	ldrh.w	r3, [r3, #-88]
		line_sensor_value[i] = clip_zero_one(
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f98e 	bl	8000554 <__aeabi_ui2d>
 8001238:	4604      	mov	r4, r0
 800123a:	460d      	mov	r5, r1
				(double)line_sensor_settings[i].min, // min value
 800123c:	4b42      	ldr	r3, [pc, #264]	; (8001348 <update_sensor_value+0x188>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	4413      	add	r3, r2
 8001246:	685b      	ldr	r3, [r3, #4]
		line_sensor_value[i] = clip_zero_one(
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f993 	bl	8000574 <__aeabi_i2d>
 800124e:	4680      	mov	r8, r0
 8001250:	4689      	mov	r9, r1
				(double)line_sensor_settings[i].max  // max value
 8001252:	4b3d      	ldr	r3, [pc, #244]	; (8001348 <update_sensor_value+0x188>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4413      	add	r3, r2
 800125c:	681b      	ldr	r3, [r3, #0]
		line_sensor_value[i] = clip_zero_one(
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f988 	bl	8000574 <__aeabi_i2d>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	ec43 2b12 	vmov	d2, r2, r3
 800126c:	ec49 8b11 	vmov	d1, r8, r9
 8001270:	ec45 4b10 	vmov	d0, r4, r5
 8001274:	f7ff fe3e 	bl	8000ef4 <clip_zero_one>
 8001278:	eeb0 7a40 	vmov.f32	s14, s0
 800127c:	eef0 7a60 	vmov.f32	s15, s1
 8001280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	3358      	adds	r3, #88	; 0x58
 8001286:	f107 0208 	add.w	r2, r7, #8
 800128a:	4413      	add	r3, r2
 800128c:	3b48      	subs	r3, #72	; 0x48
 800128e:	ed83 7b00 	vstr	d7, [r3]
		);

		// apply low pass filter
		line_sensor_value[i] = low_pass_filter_update(
 8001292:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <update_sensor_value+0x180>)
 8001294:	681a      	ldr	r2, [r3, #0]
				&low_pass_filter_settings[i],
 8001296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001298:	015b      	lsls	r3, r3, #5
 800129a:	441a      	add	r2, r3
		line_sensor_value[i] = low_pass_filter_update(
 800129c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	3358      	adds	r3, #88	; 0x58
 80012a2:	f107 0108 	add.w	r1, r7, #8
 80012a6:	440b      	add	r3, r1
 80012a8:	3b48      	subs	r3, #72	; 0x48
 80012aa:	ed93 7b00 	vldr	d7, [r3]
 80012ae:	eeb0 0a47 	vmov.f32	s0, s14
 80012b2:	eef0 0a67 	vmov.f32	s1, s15
 80012b6:	4610      	mov	r0, r2
 80012b8:	f7ff fe64 	bl	8000f84 <low_pass_filter_update>
 80012bc:	eeb0 7a40 	vmov.f32	s14, s0
 80012c0:	eef0 7a60 	vmov.f32	s15, s1
 80012c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	3358      	adds	r3, #88	; 0x58
 80012ca:	f107 0208 	add.w	r2, r7, #8
 80012ce:	4413      	add	r3, r2
 80012d0:	3b48      	subs	r3, #72	; 0x48
 80012d2:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < 8; i++ ) {
 80012d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012d8:	3301      	adds	r3, #1
 80012da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012de:	2b07      	cmp	r3, #7
 80012e0:	dd9f      	ble.n	8001222 <update_sensor_value+0x62>
				line_sensor_value[i]
		);
	}

#ifdef DEBUG
	printf(
 80012e2:	ed97 7b06 	vldr	d7, [r7, #24]
 80012e6:	ed87 7b00 	vstr	d7, [r7]
 80012ea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012ee:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80012f2:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 80012f6:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80012fa:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80012fe:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8001302:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001306:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800130a:	ed8d 6b0a 	vstr	d6, [sp, #40]	; 0x28
 800130e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001312:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001316:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800131a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800131e:	e9cd 0100 	strd	r0, r1, [sp]
 8001322:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001326:	480c      	ldr	r0, [pc, #48]	; (8001358 <update_sensor_value+0x198>)
 8001328:	f006 fa40 	bl	80077ac <iprintf>
			line_sensor_value[4],
			line_sensor_value[5], // this value may be a little small output (1.0 (max) <=> 0.5(min))
			line_sensor_value[6],
			line_sensor_value[7]
		);
	printf("%f\n", line_sensor_value[0]);
 800132c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001330:	480a      	ldr	r0, [pc, #40]	; (800135c <update_sensor_value+0x19c>)
 8001332:	f006 fa3b 	bl	80077ac <iprintf>
#endif

	//Calculate lateral deviation from sensor values
	//double deviation =
}
 8001336:	bf00      	nop
 8001338:	3760      	adds	r7, #96	; 0x60
 800133a:	46bd      	mov	sp, r7
 800133c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001340:	200001f4 	.word	0x200001f4
 8001344:	080094e0 	.word	0x080094e0
 8001348:	200001f0 	.word	0x200001f0
 800134c:	08009504 	.word	0x08009504
 8001350:	200001f8 	.word	0x200001f8
 8001354:	200001fc 	.word	0x200001fc
 8001358:	0800952c 	.word	0x0800952c
 800135c:	08009548 	.word	0x08009548

08001360 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
    if (htim == &htim6){
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d101      	bne.n	8001374 <HAL_TIM_PeriodElapsedCallback+0x14>
    	update_sensor_value();
 8001370:	f7ff ff26 	bl	80011c0 <update_sensor_value>
    }
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000408 	.word	0x20000408

08001380 <_write>:

int _write(int file, char *ptr, int len)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	b29a      	uxth	r2, r3
 8001390:	230a      	movs	r3, #10
 8001392:	68b9      	ldr	r1, [r7, #8]
 8001394:	4803      	ldr	r0, [pc, #12]	; (80013a4 <_write+0x24>)
 8001396:	f004 fc99 	bl	8005ccc <HAL_UART_Transmit>
	return len;
 800139a:	687b      	ldr	r3, [r7, #4]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000454 	.word	0x20000454

080013a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  setbuf(stdout, NULL);
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <main+0x4c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f006 f813 	bl	80073e0 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ba:	f000 fe3e 	bl	800203a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013be:	f000 f81d 	bl	80013fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c2:	f000 faa1 	bl	8001908 <MX_GPIO_Init>
  MX_DMA_Init();
 80013c6:	f000 fa6d 	bl	80018a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013ca:	f000 fa1f 	bl	800180c <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 80013ce:	f000 f9a1 	bl	8001714 <MX_FDCAN1_Init>
  MX_ADC1_Init();
 80013d2:	f000 f85f 	bl	8001494 <MX_ADC1_Init>
  MX_ADC2_Init();
 80013d6:	f000 f8d5 	bl	8001584 <MX_ADC2_Init>
  MX_TIM6_Init();
 80013da:	f000 f9e1 	bl	80017a0 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ADC_Init();
 80013de:	f7ff fed1 	bl	8001184 <ADC_Init>
  Sensor_Settings_Init();
 80013e2:	f7ff fe57 	bl	8001094 <Sensor_Settings_Init>
  Filter_Init();
 80013e6:	f7ff fe7f 	bl	80010e8 <Filter_Init>
  HAL_TIM_Base_Start_IT(&htim6); // Start Timer
 80013ea:	4803      	ldr	r0, [pc, #12]	; (80013f8 <main+0x50>)
 80013ec:	f004 f8d8 	bl	80055a0 <HAL_TIM_Base_Start_IT>
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <main+0x48>
 80013f2:	bf00      	nop
 80013f4:	20000064 	.word	0x20000064
 80013f8:	20000408 	.word	0x20000408

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b094      	sub	sp, #80	; 0x50
 8001400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001402:	f107 0318 	add.w	r3, r7, #24
 8001406:	2238      	movs	r2, #56	; 0x38
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f006 f9e0 	bl	80077d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800141e:	2000      	movs	r0, #0
 8001420:	f003 f8a4 	bl	800456c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001424:	2302      	movs	r3, #2
 8001426:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800142e:	2340      	movs	r3, #64	; 0x40
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001432:	2302      	movs	r3, #2
 8001434:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001436:	2302      	movs	r3, #2
 8001438:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800143a:	2304      	movs	r3, #4
 800143c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800143e:	2355      	movs	r3, #85	; 0x55
 8001440:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001442:	2302      	movs	r3, #2
 8001444:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001446:	2302      	movs	r3, #2
 8001448:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800144a:	2302      	movs	r3, #2
 800144c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144e:	f107 0318 	add.w	r3, r7, #24
 8001452:	4618      	mov	r0, r3
 8001454:	f003 f92e 	bl	80046b4 <HAL_RCC_OscConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800145e:	f000 fa9f 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001462:	230f      	movs	r3, #15
 8001464:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001466:	2303      	movs	r3, #3
 8001468:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2104      	movs	r1, #4
 800147a:	4618      	mov	r0, r3
 800147c:	f003 fc2c 	bl	8004cd8 <HAL_RCC_ClockConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001486:	f000 fa8b 	bl	80019a0 <Error_Handler>
  }
}
 800148a:	bf00      	nop
 800148c:	3750      	adds	r7, #80	; 0x50
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08c      	sub	sp, #48	; 0x30
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2220      	movs	r2, #32
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f006 f98f 	bl	80077d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014b2:	4b32      	ldr	r3, [pc, #200]	; (800157c <MX_ADC1_Init+0xe8>)
 80014b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014ba:	4b30      	ldr	r3, [pc, #192]	; (800157c <MX_ADC1_Init+0xe8>)
 80014bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014c2:	4b2e      	ldr	r3, [pc, #184]	; (800157c <MX_ADC1_Init+0xe8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014c8:	4b2c      	ldr	r3, [pc, #176]	; (800157c <MX_ADC1_Init+0xe8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80014ce:	4b2b      	ldr	r3, [pc, #172]	; (800157c <MX_ADC1_Init+0xe8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014d4:	4b29      	ldr	r3, [pc, #164]	; (800157c <MX_ADC1_Init+0xe8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014da:	4b28      	ldr	r3, [pc, #160]	; (800157c <MX_ADC1_Init+0xe8>)
 80014dc:	2204      	movs	r2, #4
 80014de:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <MX_ADC1_Init+0xe8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014e6:	4b25      	ldr	r3, [pc, #148]	; (800157c <MX_ADC1_Init+0xe8>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80014ec:	4b23      	ldr	r3, [pc, #140]	; (800157c <MX_ADC1_Init+0xe8>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014f2:	4b22      	ldr	r3, [pc, #136]	; (800157c <MX_ADC1_Init+0xe8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <MX_ADC1_Init+0xe8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <MX_ADC1_Init+0xe8>)
 8001502:	2200      	movs	r2, #0
 8001504:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <MX_ADC1_Init+0xe8>)
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_ADC1_Init+0xe8>)
 8001510:	2200      	movs	r2, #0
 8001512:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <MX_ADC1_Init+0xe8>)
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800151c:	4817      	ldr	r0, [pc, #92]	; (800157c <MX_ADC1_Init+0xe8>)
 800151e:	f001 f841 	bl	80025a4 <HAL_ADC_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001528:	f000 fa3a 	bl	80019a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001534:	4619      	mov	r1, r3
 8001536:	4811      	ldr	r0, [pc, #68]	; (800157c <MX_ADC1_Init+0xe8>)
 8001538:	f002 f8a8 	bl	800368c <HAL_ADCEx_MultiModeConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001542:	f000 fa2d 	bl	80019a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_ADC1_Init+0xec>)
 8001548:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800154a:	2306      	movs	r3, #6
 800154c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800154e:	2307      	movs	r3, #7
 8001550:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001552:	237f      	movs	r3, #127	; 0x7f
 8001554:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001556:	2304      	movs	r3, #4
 8001558:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	; (800157c <MX_ADC1_Init+0xe8>)
 8001564:	f001 fa74 	bl	8002a50 <HAL_ADC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800156e:	f000 fa17 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	3730      	adds	r7, #48	; 0x30
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000020c 	.word	0x2000020c
 8001580:	3ef08000 	.word	0x3ef08000

08001584 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800158a:	463b      	mov	r3, r7
 800158c:	2220      	movs	r2, #32
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f006 f91d 	bl	80077d0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001596:	4b56      	ldr	r3, [pc, #344]	; (80016f0 <MX_ADC2_Init+0x16c>)
 8001598:	4a56      	ldr	r2, [pc, #344]	; (80016f4 <MX_ADC2_Init+0x170>)
 800159a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800159c:	4b54      	ldr	r3, [pc, #336]	; (80016f0 <MX_ADC2_Init+0x16c>)
 800159e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80015a2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80015a4:	4b52      	ldr	r3, [pc, #328]	; (80016f0 <MX_ADC2_Init+0x16c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015aa:	4b51      	ldr	r3, [pc, #324]	; (80016f0 <MX_ADC2_Init+0x16c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80015b0:	4b4f      	ldr	r3, [pc, #316]	; (80016f0 <MX_ADC2_Init+0x16c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015b6:	4b4e      	ldr	r3, [pc, #312]	; (80016f0 <MX_ADC2_Init+0x16c>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015bc:	4b4c      	ldr	r3, [pc, #304]	; (80016f0 <MX_ADC2_Init+0x16c>)
 80015be:	2204      	movs	r2, #4
 80015c0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80015c2:	4b4b      	ldr	r3, [pc, #300]	; (80016f0 <MX_ADC2_Init+0x16c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80015c8:	4b49      	ldr	r3, [pc, #292]	; (80016f0 <MX_ADC2_Init+0x16c>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 7;
 80015ce:	4b48      	ldr	r3, [pc, #288]	; (80016f0 <MX_ADC2_Init+0x16c>)
 80015d0:	2207      	movs	r2, #7
 80015d2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015d4:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <MX_ADC2_Init+0x16c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015dc:	4b44      	ldr	r3, [pc, #272]	; (80016f0 <MX_ADC2_Init+0x16c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015e2:	4b43      	ldr	r3, [pc, #268]	; (80016f0 <MX_ADC2_Init+0x16c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80015e8:	4b41      	ldr	r3, [pc, #260]	; (80016f0 <MX_ADC2_Init+0x16c>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015f0:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <MX_ADC2_Init+0x16c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80015f6:	4b3e      	ldr	r3, [pc, #248]	; (80016f0 <MX_ADC2_Init+0x16c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015fe:	483c      	ldr	r0, [pc, #240]	; (80016f0 <MX_ADC2_Init+0x16c>)
 8001600:	f000 ffd0 	bl	80025a4 <HAL_ADC_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800160a:	f000 f9c9 	bl	80019a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800160e:	4b3a      	ldr	r3, [pc, #232]	; (80016f8 <MX_ADC2_Init+0x174>)
 8001610:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001612:	2306      	movs	r3, #6
 8001614:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001616:	2307      	movs	r3, #7
 8001618:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800161a:	237f      	movs	r3, #127	; 0x7f
 800161c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800161e:	2304      	movs	r3, #4
 8001620:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001626:	463b      	mov	r3, r7
 8001628:	4619      	mov	r1, r3
 800162a:	4831      	ldr	r0, [pc, #196]	; (80016f0 <MX_ADC2_Init+0x16c>)
 800162c:	f001 fa10 	bl	8002a50 <HAL_ADC_ConfigChannel>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001636:	f000 f9b3 	bl	80019a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800163a:	4b30      	ldr	r3, [pc, #192]	; (80016fc <MX_ADC2_Init+0x178>)
 800163c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800163e:	230c      	movs	r3, #12
 8001640:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001642:	463b      	mov	r3, r7
 8001644:	4619      	mov	r1, r3
 8001646:	482a      	ldr	r0, [pc, #168]	; (80016f0 <MX_ADC2_Init+0x16c>)
 8001648:	f001 fa02 	bl	8002a50 <HAL_ADC_ConfigChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8001652:	f000 f9a5 	bl	80019a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001656:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <MX_ADC2_Init+0x17c>)
 8001658:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800165a:	2312      	movs	r3, #18
 800165c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800165e:	463b      	mov	r3, r7
 8001660:	4619      	mov	r1, r3
 8001662:	4823      	ldr	r0, [pc, #140]	; (80016f0 <MX_ADC2_Init+0x16c>)
 8001664:	f001 f9f4 	bl	8002a50 <HAL_ADC_ConfigChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 800166e:	f000 f997 	bl	80019a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001672:	4b24      	ldr	r3, [pc, #144]	; (8001704 <MX_ADC2_Init+0x180>)
 8001674:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001676:	2318      	movs	r3, #24
 8001678:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800167a:	463b      	mov	r3, r7
 800167c:	4619      	mov	r1, r3
 800167e:	481c      	ldr	r0, [pc, #112]	; (80016f0 <MX_ADC2_Init+0x16c>)
 8001680:	f001 f9e6 	bl	8002a50 <HAL_ADC_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 800168a:	f000 f989 	bl	80019a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800168e:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <MX_ADC2_Init+0x184>)
 8001690:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001696:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001698:	463b      	mov	r3, r7
 800169a:	4619      	mov	r1, r3
 800169c:	4814      	ldr	r0, [pc, #80]	; (80016f0 <MX_ADC2_Init+0x16c>)
 800169e:	f001 f9d7 	bl	8002a50 <HAL_ADC_ConfigChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 80016a8:	f000 f97a 	bl	80019a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80016ac:	4b17      	ldr	r3, [pc, #92]	; (800170c <MX_ADC2_Init+0x188>)
 80016ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80016b0:	f44f 7383 	mov.w	r3, #262	; 0x106
 80016b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016b6:	463b      	mov	r3, r7
 80016b8:	4619      	mov	r1, r3
 80016ba:	480d      	ldr	r0, [pc, #52]	; (80016f0 <MX_ADC2_Init+0x16c>)
 80016bc:	f001 f9c8 	bl	8002a50 <HAL_ADC_ConfigChannel>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_ADC2_Init+0x146>
  {
    Error_Handler();
 80016c6:	f000 f96b 	bl	80019a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_ADC2_Init+0x18c>)
 80016cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80016ce:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80016d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016d4:	463b      	mov	r3, r7
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_ADC2_Init+0x16c>)
 80016da:	f001 f9b9 	bl	8002a50 <HAL_ADC_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_ADC2_Init+0x164>
  {
    Error_Handler();
 80016e4:	f000 f95c 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000278 	.word	0x20000278
 80016f4:	50000100 	.word	0x50000100
 80016f8:	04300002 	.word	0x04300002
 80016fc:	08600004 	.word	0x08600004
 8001700:	10c00010 	.word	0x10c00010
 8001704:	0c900008 	.word	0x0c900008
 8001708:	2a000400 	.word	0x2a000400
 800170c:	36902000 	.word	0x36902000
 8001710:	47520000 	.word	0x47520000

08001714 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001718:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <MX_FDCAN1_Init+0x84>)
 800171a:	4a20      	ldr	r2, [pc, #128]	; (800179c <MX_FDCAN1_Init+0x88>)
 800171c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <MX_FDCAN1_Init+0x84>)
 8001720:	2200      	movs	r2, #0
 8001722:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001724:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <MX_FDCAN1_Init+0x84>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800172a:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <MX_FDCAN1_Init+0x84>)
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <MX_FDCAN1_Init+0x84>)
 8001732:	2200      	movs	r2, #0
 8001734:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001736:	4b18      	ldr	r3, [pc, #96]	; (8001798 <MX_FDCAN1_Init+0x84>)
 8001738:	2200      	movs	r2, #0
 800173a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <MX_FDCAN1_Init+0x84>)
 800173e:	2200      	movs	r2, #0
 8001740:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <MX_FDCAN1_Init+0x84>)
 8001744:	2210      	movs	r2, #16
 8001746:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <MX_FDCAN1_Init+0x84>)
 800174a:	2201      	movs	r2, #1
 800174c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <MX_FDCAN1_Init+0x84>)
 8001750:	2202      	movs	r2, #2
 8001752:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001754:	4b10      	ldr	r3, [pc, #64]	; (8001798 <MX_FDCAN1_Init+0x84>)
 8001756:	2202      	movs	r2, #2
 8001758:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <MX_FDCAN1_Init+0x84>)
 800175c:	2201      	movs	r2, #1
 800175e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <MX_FDCAN1_Init+0x84>)
 8001762:	2201      	movs	r2, #1
 8001764:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001766:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <MX_FDCAN1_Init+0x84>)
 8001768:	2201      	movs	r2, #1
 800176a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <MX_FDCAN1_Init+0x84>)
 800176e:	2201      	movs	r2, #1
 8001770:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MX_FDCAN1_Init+0x84>)
 8001774:	2200      	movs	r2, #0
 8001776:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <MX_FDCAN1_Init+0x84>)
 800177a:	2200      	movs	r2, #0
 800177c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MX_FDCAN1_Init+0x84>)
 8001780:	2200      	movs	r2, #0
 8001782:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001784:	4804      	ldr	r0, [pc, #16]	; (8001798 <MX_FDCAN1_Init+0x84>)
 8001786:	f002 fba7 	bl	8003ed8 <HAL_FDCAN_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001790:	f000 f906 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200003a4 	.word	0x200003a4
 800179c:	40006400 	.word	0x40006400

080017a0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <MX_TIM6_Init+0x64>)
 80017b2:	4a15      	ldr	r2, [pc, #84]	; (8001808 <MX_TIM6_Init+0x68>)
 80017b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17;
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <MX_TIM6_Init+0x64>)
 80017b8:	2211      	movs	r2, #17
 80017ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_TIM6_Init+0x64>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <MX_TIM6_Init+0x64>)
 80017c4:	220a      	movs	r2, #10
 80017c6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c8:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <MX_TIM6_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017ce:	480d      	ldr	r0, [pc, #52]	; (8001804 <MX_TIM6_Init+0x64>)
 80017d0:	f003 fe8e 	bl	80054f0 <HAL_TIM_Base_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80017da:	f000 f8e1 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	4619      	mov	r1, r3
 80017ea:	4806      	ldr	r0, [pc, #24]	; (8001804 <MX_TIM6_Init+0x64>)
 80017ec:	f004 f956 	bl	8005a9c <HAL_TIMEx_MasterConfigSynchronization>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80017f6:	f000 f8d3 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000408 	.word	0x20000408
 8001808:	40001000 	.word	0x40001000

0800180c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001810:	4b22      	ldr	r3, [pc, #136]	; (800189c <MX_USART2_UART_Init+0x90>)
 8001812:	4a23      	ldr	r2, [pc, #140]	; (80018a0 <MX_USART2_UART_Init+0x94>)
 8001814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001816:	4b21      	ldr	r3, [pc, #132]	; (800189c <MX_USART2_UART_Init+0x90>)
 8001818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800181c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800181e:	4b1f      	ldr	r3, [pc, #124]	; (800189c <MX_USART2_UART_Init+0x90>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <MX_USART2_UART_Init+0x90>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <MX_USART2_UART_Init+0x90>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <MX_USART2_UART_Init+0x90>)
 8001832:	220c      	movs	r2, #12
 8001834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <MX_USART2_UART_Init+0x90>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <MX_USART2_UART_Init+0x90>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <MX_USART2_UART_Init+0x90>)
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <MX_USART2_UART_Init+0x90>)
 800184a:	2200      	movs	r2, #0
 800184c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800184e:	4b13      	ldr	r3, [pc, #76]	; (800189c <MX_USART2_UART_Init+0x90>)
 8001850:	2200      	movs	r2, #0
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001854:	4811      	ldr	r0, [pc, #68]	; (800189c <MX_USART2_UART_Init+0x90>)
 8001856:	f004 f9e9 	bl	8005c2c <HAL_UART_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001860:	f000 f89e 	bl	80019a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001864:	2100      	movs	r1, #0
 8001866:	480d      	ldr	r0, [pc, #52]	; (800189c <MX_USART2_UART_Init+0x90>)
 8001868:	f004 ffe2 	bl	8006830 <HAL_UARTEx_SetTxFifoThreshold>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001872:	f000 f895 	bl	80019a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001876:	2100      	movs	r1, #0
 8001878:	4808      	ldr	r0, [pc, #32]	; (800189c <MX_USART2_UART_Init+0x90>)
 800187a:	f005 f817 	bl	80068ac <HAL_UARTEx_SetRxFifoThreshold>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001884:	f000 f88c 	bl	80019a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001888:	4804      	ldr	r0, [pc, #16]	; (800189c <MX_USART2_UART_Init+0x90>)
 800188a:	f004 ff98 	bl	80067be <HAL_UARTEx_DisableFifoMode>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001894:	f000 f884 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000454 	.word	0x20000454
 80018a0:	40004400 	.word	0x40004400

080018a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <MX_DMA_Init+0x60>)
 80018ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ae:	4a15      	ldr	r2, [pc, #84]	; (8001904 <MX_DMA_Init+0x60>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	6493      	str	r3, [r2, #72]	; 0x48
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <MX_DMA_Init+0x60>)
 80018b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <MX_DMA_Init+0x60>)
 80018c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c6:	4a0f      	ldr	r2, [pc, #60]	; (8001904 <MX_DMA_Init+0x60>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6493      	str	r3, [r2, #72]	; 0x48
 80018ce:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <MX_DMA_Init+0x60>)
 80018d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	200b      	movs	r0, #11
 80018e0:	f002 f853 	bl	800398a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018e4:	200b      	movs	r0, #11
 80018e6:	f002 f86a 	bl	80039be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	200c      	movs	r0, #12
 80018f0:	f002 f84b 	bl	800398a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80018f4:	200c      	movs	r0, #12
 80018f6:	f002 f862 	bl	80039be <HAL_NVIC_EnableIRQ>

}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000

08001908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <MX_GPIO_Init+0x90>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <MX_GPIO_Init+0x90>)
 8001924:	f043 0320 	orr.w	r3, r3, #32
 8001928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <MX_GPIO_Init+0x90>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	f003 0320 	and.w	r3, r3, #32
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <MX_GPIO_Init+0x90>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	4a17      	ldr	r2, [pc, #92]	; (8001998 <MX_GPIO_Init+0x90>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <MX_GPIO_Init+0x90>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <MX_GPIO_Init+0x90>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	4a11      	ldr	r2, [pc, #68]	; (8001998 <MX_GPIO_Init+0x90>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_GPIO_Init+0x90>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	f44f 7180 	mov.w	r1, #256	; 0x100
 800196c:	480b      	ldr	r0, [pc, #44]	; (800199c <MX_GPIO_Init+0x94>)
 800196e:	f002 fde5 	bl	800453c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001976:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	2301      	movs	r3, #1
 800197a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	4619      	mov	r1, r3
 800198a:	4804      	ldr	r0, [pc, #16]	; (800199c <MX_GPIO_Init+0x94>)
 800198c:	f002 fc54 	bl	8004238 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001990:	bf00      	nop
 8001992:	3720      	adds	r7, #32
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40021000 	.word	0x40021000
 800199c:	48000400 	.word	0x48000400

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <Error_Handler+0x8>
	...

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <HAL_MspInit+0x44>)
 80019b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b6:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <HAL_MspInit+0x44>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6613      	str	r3, [r2, #96]	; 0x60
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <HAL_MspInit+0x44>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_MspInit+0x44>)
 80019cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ce:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_MspInit+0x44>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	6593      	str	r3, [r2, #88]	; 0x58
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_MspInit+0x44>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000

080019f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b09e      	sub	sp, #120	; 0x78
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a0c:	f107 0320 	add.w	r3, r7, #32
 8001a10:	2244      	movs	r2, #68	; 0x44
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f005 fedb 	bl	80077d0 <memset>
  if(hadc->Instance==ADC1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a22:	d168      	bne.n	8001af6 <HAL_ADC_MspInit+0x102>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001a24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a28:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001a2a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a30:	f107 0320 	add.w	r3, r7, #32
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 fb6b 	bl	8005110 <HAL_RCCEx_PeriphCLKConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001a40:	f7ff ffae 	bl	80019a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a44:	4b71      	ldr	r3, [pc, #452]	; (8001c0c <HAL_ADC_MspInit+0x218>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	4a70      	ldr	r2, [pc, #448]	; (8001c0c <HAL_ADC_MspInit+0x218>)
 8001a4c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a4e:	4b6f      	ldr	r3, [pc, #444]	; (8001c0c <HAL_ADC_MspInit+0x218>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d10b      	bne.n	8001a6e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a56:	4b6e      	ldr	r3, [pc, #440]	; (8001c10 <HAL_ADC_MspInit+0x21c>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	4a6d      	ldr	r2, [pc, #436]	; (8001c10 <HAL_ADC_MspInit+0x21c>)
 8001a5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a62:	4b6b      	ldr	r3, [pc, #428]	; (8001c10 <HAL_ADC_MspInit+0x21c>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a6a:	61fb      	str	r3, [r7, #28]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6e:	4b68      	ldr	r3, [pc, #416]	; (8001c10 <HAL_ADC_MspInit+0x21c>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	4a67      	ldr	r2, [pc, #412]	; (8001c10 <HAL_ADC_MspInit+0x21c>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7a:	4b65      	ldr	r3, [pc, #404]	; (8001c10 <HAL_ADC_MspInit+0x21c>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a86:	2301      	movs	r3, #1
 8001a88:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a96:	4619      	mov	r1, r3
 8001a98:	485e      	ldr	r0, [pc, #376]	; (8001c14 <HAL_ADC_MspInit+0x220>)
 8001a9a:	f002 fbcd 	bl	8004238 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a9e:	4b5e      	ldr	r3, [pc, #376]	; (8001c18 <HAL_ADC_MspInit+0x224>)
 8001aa0:	4a5e      	ldr	r2, [pc, #376]	; (8001c1c <HAL_ADC_MspInit+0x228>)
 8001aa2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001aa4:	4b5c      	ldr	r3, [pc, #368]	; (8001c18 <HAL_ADC_MspInit+0x224>)
 8001aa6:	2205      	movs	r2, #5
 8001aa8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aaa:	4b5b      	ldr	r3, [pc, #364]	; (8001c18 <HAL_ADC_MspInit+0x224>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ab0:	4b59      	ldr	r3, [pc, #356]	; (8001c18 <HAL_ADC_MspInit+0x224>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ab6:	4b58      	ldr	r3, [pc, #352]	; (8001c18 <HAL_ADC_MspInit+0x224>)
 8001ab8:	2280      	movs	r2, #128	; 0x80
 8001aba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001abc:	4b56      	ldr	r3, [pc, #344]	; (8001c18 <HAL_ADC_MspInit+0x224>)
 8001abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ac4:	4b54      	ldr	r3, [pc, #336]	; (8001c18 <HAL_ADC_MspInit+0x224>)
 8001ac6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aca:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001acc:	4b52      	ldr	r3, [pc, #328]	; (8001c18 <HAL_ADC_MspInit+0x224>)
 8001ace:	2220      	movs	r2, #32
 8001ad0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ad2:	4b51      	ldr	r3, [pc, #324]	; (8001c18 <HAL_ADC_MspInit+0x224>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ad8:	484f      	ldr	r0, [pc, #316]	; (8001c18 <HAL_ADC_MspInit+0x224>)
 8001ada:	f001 ff8b 	bl	80039f4 <HAL_DMA_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <HAL_ADC_MspInit+0xf4>
    {
      Error_Handler();
 8001ae4:	f7ff ff5c 	bl	80019a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a4b      	ldr	r2, [pc, #300]	; (8001c18 <HAL_ADC_MspInit+0x224>)
 8001aec:	655a      	str	r2, [r3, #84]	; 0x54
 8001aee:	4a4a      	ldr	r2, [pc, #296]	; (8001c18 <HAL_ADC_MspInit+0x224>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001af4:	e086      	b.n	8001c04 <HAL_ADC_MspInit+0x210>
  else if(hadc->Instance==ADC2)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a49      	ldr	r2, [pc, #292]	; (8001c20 <HAL_ADC_MspInit+0x22c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	f040 8081 	bne.w	8001c04 <HAL_ADC_MspInit+0x210>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b06:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001b08:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b0e:	f107 0320 	add.w	r3, r7, #32
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 fafc 	bl	8005110 <HAL_RCCEx_PeriphCLKConfig>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8001b1e:	f7ff ff3f 	bl	80019a0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b22:	4b3a      	ldr	r3, [pc, #232]	; (8001c0c <HAL_ADC_MspInit+0x218>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	4a38      	ldr	r2, [pc, #224]	; (8001c0c <HAL_ADC_MspInit+0x218>)
 8001b2a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b2c:	4b37      	ldr	r3, [pc, #220]	; (8001c0c <HAL_ADC_MspInit+0x218>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d10b      	bne.n	8001b4c <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b34:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <HAL_ADC_MspInit+0x21c>)
 8001b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b38:	4a35      	ldr	r2, [pc, #212]	; (8001c10 <HAL_ADC_MspInit+0x21c>)
 8001b3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b40:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <HAL_ADC_MspInit+0x21c>)
 8001b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b4c:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <HAL_ADC_MspInit+0x21c>)
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b50:	4a2f      	ldr	r2, [pc, #188]	; (8001c10 <HAL_ADC_MspInit+0x21c>)
 8001b52:	f043 0320 	orr.w	r3, r3, #32
 8001b56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b58:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <HAL_ADC_MspInit+0x21c>)
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b64:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <HAL_ADC_MspInit+0x21c>)
 8001b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b68:	4a29      	ldr	r2, [pc, #164]	; (8001c10 <HAL_ADC_MspInit+0x21c>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b70:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <HAL_ADC_MspInit+0x21c>)
 8001b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b80:	2303      	movs	r3, #3
 8001b82:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b88:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4825      	ldr	r0, [pc, #148]	; (8001c24 <HAL_ADC_MspInit+0x230>)
 8001b90:	f002 fb52 	bl	8004238 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001b94:	23f3      	movs	r3, #243	; 0xf3
 8001b96:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001baa:	f002 fb45 	bl	8004238 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001bae:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <HAL_ADC_MspInit+0x234>)
 8001bb0:	4a1e      	ldr	r2, [pc, #120]	; (8001c2c <HAL_ADC_MspInit+0x238>)
 8001bb2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <HAL_ADC_MspInit+0x234>)
 8001bb6:	2224      	movs	r2, #36	; 0x24
 8001bb8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bba:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <HAL_ADC_MspInit+0x234>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <HAL_ADC_MspInit+0x234>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <HAL_ADC_MspInit+0x234>)
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <HAL_ADC_MspInit+0x234>)
 8001bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bd2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <HAL_ADC_MspInit+0x234>)
 8001bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bda:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_ADC_MspInit+0x234>)
 8001bde:	2220      	movs	r2, #32
 8001be0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_ADC_MspInit+0x234>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001be8:	480f      	ldr	r0, [pc, #60]	; (8001c28 <HAL_ADC_MspInit+0x234>)
 8001bea:	f001 ff03 	bl	80039f4 <HAL_DMA_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_ADC_MspInit+0x204>
      Error_Handler();
 8001bf4:	f7ff fed4 	bl	80019a0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <HAL_ADC_MspInit+0x234>)
 8001bfc:	655a      	str	r2, [r3, #84]	; 0x54
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <HAL_ADC_MspInit+0x234>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001c04:	bf00      	nop
 8001c06:	3778      	adds	r7, #120	; 0x78
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	200004e8 	.word	0x200004e8
 8001c10:	40021000 	.word	0x40021000
 8001c14:	48000400 	.word	0x48000400
 8001c18:	200002e4 	.word	0x200002e4
 8001c1c:	40020008 	.word	0x40020008
 8001c20:	50000100 	.word	0x50000100
 8001c24:	48001400 	.word	0x48001400
 8001c28:	20000344 	.word	0x20000344
 8001c2c:	4002001c 	.word	0x4002001c

08001c30 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b09a      	sub	sp, #104	; 0x68
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c48:	f107 0310 	add.w	r3, r7, #16
 8001c4c:	2244      	movs	r2, #68	; 0x44
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f005 fdbd 	bl	80077d0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a20      	ldr	r2, [pc, #128]	; (8001cdc <HAL_FDCAN_MspInit+0xac>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d139      	bne.n	8001cd4 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c64:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c6c:	f107 0310 	add.w	r3, r7, #16
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 fa4d 	bl	8005110 <HAL_RCCEx_PeriphCLKConfig>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001c7c:	f7ff fe90 	bl	80019a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c80:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <HAL_FDCAN_MspInit+0xb0>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	4a16      	ldr	r2, [pc, #88]	; (8001ce0 <HAL_FDCAN_MspInit+0xb0>)
 8001c86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c8c:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <HAL_FDCAN_MspInit+0xb0>)
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <HAL_FDCAN_MspInit+0xb0>)
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9c:	4a10      	ldr	r2, [pc, #64]	; (8001ce0 <HAL_FDCAN_MspInit+0xb0>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <HAL_FDCAN_MspInit+0xb0>)
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cb0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cb4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001cc2:	2309      	movs	r3, #9
 8001cc4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd0:	f002 fab2 	bl	8004238 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001cd4:	bf00      	nop
 8001cd6:	3768      	adds	r7, #104	; 0x68
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40006400 	.word	0x40006400
 8001ce0:	40021000 	.word	0x40021000

08001ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <HAL_TIM_Base_MspInit+0x44>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d113      	bne.n	8001d1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <HAL_TIM_Base_MspInit+0x48>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfa:	4a0c      	ldr	r2, [pc, #48]	; (8001d2c <HAL_TIM_Base_MspInit+0x48>)
 8001cfc:	f043 0310 	orr.w	r3, r3, #16
 8001d00:	6593      	str	r3, [r2, #88]	; 0x58
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_TIM_Base_MspInit+0x48>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	2036      	movs	r0, #54	; 0x36
 8001d14:	f001 fe39 	bl	800398a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d18:	2036      	movs	r0, #54	; 0x36
 8001d1a:	f001 fe50 	bl	80039be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40001000 	.word	0x40001000
 8001d2c:	40021000 	.word	0x40021000

08001d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b09a      	sub	sp, #104	; 0x68
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d48:	f107 0310 	add.w	r3, r7, #16
 8001d4c:	2244      	movs	r2, #68	; 0x44
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f005 fd3d 	bl	80077d0 <memset>
  if(huart->Instance==USART2)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a1f      	ldr	r2, [pc, #124]	; (8001dd8 <HAL_UART_MspInit+0xa8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d136      	bne.n	8001dce <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d60:	2302      	movs	r3, #2
 8001d62:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d68:	f107 0310 	add.w	r3, r7, #16
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 f9cf 	bl	8005110 <HAL_RCCEx_PeriphCLKConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d78:	f7ff fe12 	bl	80019a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d7c:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <HAL_UART_MspInit+0xac>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	4a16      	ldr	r2, [pc, #88]	; (8001ddc <HAL_UART_MspInit+0xac>)
 8001d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d86:	6593      	str	r3, [r2, #88]	; 0x58
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_UART_MspInit+0xac>)
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_UART_MspInit+0xac>)
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	4a10      	ldr	r2, [pc, #64]	; (8001ddc <HAL_UART_MspInit+0xac>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da0:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <HAL_UART_MspInit+0xac>)
 8001da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001dac:	230c      	movs	r3, #12
 8001dae:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dbc:	2307      	movs	r3, #7
 8001dbe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dca:	f002 fa35 	bl	8004238 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dce:	bf00      	nop
 8001dd0:	3768      	adds	r7, #104	; 0x68
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40004400 	.word	0x40004400
 8001ddc:	40021000 	.word	0x40021000

08001de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <NMI_Handler+0x4>

08001de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dea:	e7fe      	b.n	8001dea <HardFault_Handler+0x4>

08001dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <MemManage_Handler+0x4>

08001df2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df6:	e7fe      	b.n	8001df6 <BusFault_Handler+0x4>

08001df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <UsageFault_Handler+0x4>

08001dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2c:	f000 f958 	bl	80020e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <DMA1_Channel1_IRQHandler+0x10>)
 8001e3a:	f001 fefe 	bl	8003c3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200002e4 	.word	0x200002e4

08001e48 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <DMA1_Channel2_IRQHandler+0x10>)
 8001e4e:	f001 fef4 	bl	8003c3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000344 	.word	0x20000344

08001e5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <TIM6_DAC_IRQHandler+0x10>)
 8001e62:	f003 fc07 	bl	8005674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000408 	.word	0x20000408

08001e70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return 1;
 8001e74:	2301      	movs	r3, #1
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_kill>:

int _kill(int pid, int sig)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e8a:	f005 fcdf 	bl	800784c <__errno>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2216      	movs	r2, #22
 8001e92:	601a      	str	r2, [r3, #0]
  return -1;
 8001e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_exit>:

void _exit (int status)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ffe7 	bl	8001e80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eb2:	e7fe      	b.n	8001eb2 <_exit+0x12>

08001eb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	e00a      	b.n	8001edc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ec6:	f3af 8000 	nop.w
 8001eca:	4601      	mov	r1, r0
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	60ba      	str	r2, [r7, #8]
 8001ed2:	b2ca      	uxtb	r2, r1
 8001ed4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	dbf0      	blt.n	8001ec6 <_read+0x12>
  }

  return len;
 8001ee4:	687b      	ldr	r3, [r7, #4]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <_close>:
  }
  return len;
}

int _close(int file)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f16:	605a      	str	r2, [r3, #4]
  return 0;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <_isatty>:

int _isatty(int file)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f2e:	2301      	movs	r3, #1
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d207      	bcs.n	8001f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f88:	f005 fc60 	bl	800784c <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	220c      	movs	r2, #12
 8001f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f96:	e009      	b.n	8001fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <_sbrk+0x64>)
 8001fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20008000 	.word	0x20008000
 8001fb8:	00000400 	.word	0x00000400
 8001fbc:	200004ec 	.word	0x200004ec
 8001fc0:	20000640 	.word	0x20000640

08001fc4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <SystemInit+0x20>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <SystemInit+0x20>)
 8001fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fe8:	480d      	ldr	r0, [pc, #52]	; (8002020 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fea:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fec:	f7ff ffea 	bl	8001fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ff2:	490d      	ldr	r1, [pc, #52]	; (8002028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <LoopForever+0xe>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ff8:	e002      	b.n	8002000 <LoopCopyDataInit>

08001ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffe:	3304      	adds	r3, #4

08002000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002004:	d3f9      	bcc.n	8001ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002008:	4c0a      	ldr	r4, [pc, #40]	; (8002034 <LoopForever+0x16>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800200c:	e001      	b.n	8002012 <LoopFillZerobss>

0800200e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002010:	3204      	adds	r2, #4

08002012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002014:	d3fb      	bcc.n	800200e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002016:	f005 fc1f 	bl	8007858 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800201a:	f7ff f9c5 	bl	80013a8 <main>

0800201e <LoopForever>:

LoopForever:
    b LoopForever
 800201e:	e7fe      	b.n	800201e <LoopForever>
  ldr   r0, =_estack
 8002020:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002028:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800202c:	0800990c 	.word	0x0800990c
  ldr r2, =_sbss
 8002030:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002034:	20000640 	.word	0x20000640

08002038 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002038:	e7fe      	b.n	8002038 <ADC1_2_IRQHandler>

0800203a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002044:	2003      	movs	r0, #3
 8002046:	f001 fc95 	bl	8003974 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800204a:	2000      	movs	r0, #0
 800204c:	f000 f80e 	bl	800206c <HAL_InitTick>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	71fb      	strb	r3, [r7, #7]
 800205a:	e001      	b.n	8002060 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800205c:	f7ff fca6 	bl	80019ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002060:	79fb      	ldrb	r3, [r7, #7]

}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002078:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <HAL_InitTick+0x68>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d022      	beq.n	80020c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002080:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_InitTick+0x6c>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <HAL_InitTick+0x68>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800208c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002090:	fbb2 f3f3 	udiv	r3, r2, r3
 8002094:	4618      	mov	r0, r3
 8002096:	f001 fca0 	bl	80039da <HAL_SYSTICK_Config>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10f      	bne.n	80020c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b0f      	cmp	r3, #15
 80020a4:	d809      	bhi.n	80020ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a6:	2200      	movs	r2, #0
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020ae:	f001 fc6c 	bl	800398a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020b2:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <HAL_InitTick+0x70>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	e007      	b.n	80020ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	e004      	b.n	80020ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
 80020c4:	e001      	b.n	80020ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000008 	.word	0x20000008
 80020d8:	20000000 	.word	0x20000000
 80020dc:	20000004 	.word	0x20000004

080020e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_IncTick+0x1c>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_IncTick+0x20>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4413      	add	r3, r2
 80020ee:	4a03      	ldr	r2, [pc, #12]	; (80020fc <HAL_IncTick+0x1c>)
 80020f0:	6013      	str	r3, [r2, #0]
}
 80020f2:	bf00      	nop
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	200004f0 	.word	0x200004f0
 8002100:	20000008 	.word	0x20000008

08002104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return uwTick;
 8002108:	4b03      	ldr	r3, [pc, #12]	; (8002118 <HAL_GetTick+0x14>)
 800210a:	681b      	ldr	r3, [r3, #0]
}
 800210c:	4618      	mov	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	200004f0 	.word	0x200004f0

0800211c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	609a      	str	r2, [r3, #8]
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	609a      	str	r2, [r3, #8]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002184:	b480      	push	{r7}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3360      	adds	r3, #96	; 0x60
 8002196:	461a      	mov	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <LL_ADC_SetOffset+0x44>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021bc:	bf00      	nop
 80021be:	371c      	adds	r7, #28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	03fff000 	.word	0x03fff000

080021cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3360      	adds	r3, #96	; 0x60
 80021da:	461a      	mov	r2, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3360      	adds	r3, #96	; 0x60
 8002208:	461a      	mov	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	431a      	orrs	r2, r3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002222:	bf00      	nop
 8002224:	371c      	adds	r7, #28
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800222e:	b480      	push	{r7}
 8002230:	b087      	sub	sp, #28
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	3360      	adds	r3, #96	; 0x60
 800223e:	461a      	mov	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	431a      	orrs	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002258:	bf00      	nop
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002264:	b480      	push	{r7}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3360      	adds	r3, #96	; 0x60
 8002274:	461a      	mov	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	431a      	orrs	r2, r3
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800228e:	bf00      	nop
 8002290:	371c      	adds	r7, #28
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	615a      	str	r2, [r3, #20]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b087      	sub	sp, #28
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3330      	adds	r3, #48	; 0x30
 80022f6:	461a      	mov	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	4413      	add	r3, r2
 8002304:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	211f      	movs	r1, #31
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	401a      	ands	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	0e9b      	lsrs	r3, r3, #26
 800231e:	f003 011f 	and.w	r1, r3, #31
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	431a      	orrs	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002332:	bf00      	nop
 8002334:	371c      	adds	r7, #28
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800233e:	b480      	push	{r7}
 8002340:	b087      	sub	sp, #28
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3314      	adds	r3, #20
 800234e:	461a      	mov	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	0e5b      	lsrs	r3, r3, #25
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	4413      	add	r3, r2
 800235c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	0d1b      	lsrs	r3, r3, #20
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	2107      	movs	r1, #7
 800236c:	fa01 f303 	lsl.w	r3, r1, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	401a      	ands	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	0d1b      	lsrs	r3, r3, #20
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	431a      	orrs	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002388:	bf00      	nop
 800238a:	371c      	adds	r7, #28
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ac:	43db      	mvns	r3, r3
 80023ae:	401a      	ands	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0318 	and.w	r3, r3, #24
 80023b6:	4908      	ldr	r1, [pc, #32]	; (80023d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023b8:	40d9      	lsrs	r1, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	400b      	ands	r3, r1
 80023be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c2:	431a      	orrs	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	0007ffff 	.word	0x0007ffff

080023dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 031f 	and.w	r3, r3, #31
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002408:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6093      	str	r3, [r2, #8]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800242c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002430:	d101      	bne.n	8002436 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002454:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002458:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002480:	d101      	bne.n	8002486 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024a8:	f043 0201 	orr.w	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024d0:	f043 0202 	orr.w	r2, r3, #2
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <LL_ADC_IsEnabled+0x18>
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <LL_ADC_IsEnabled+0x1a>
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b02      	cmp	r3, #2
 800251c:	d101      	bne.n	8002522 <LL_ADC_IsDisableOngoing+0x18>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <LL_ADC_IsDisableOngoing+0x1a>
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002540:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002544:	f043 0204 	orr.w	r2, r3, #4
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b04      	cmp	r3, #4
 800256a:	d101      	bne.n	8002570 <LL_ADC_REG_IsConversionOngoing+0x18>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b08      	cmp	r3, #8
 8002590:	d101      	bne.n	8002596 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b089      	sub	sp, #36	; 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e167      	b.n	800288e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d109      	bne.n	80025e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff fa11 	bl	80019f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff19 	bl	800241c <LL_ADC_IsDeepPowerDownEnabled>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d004      	beq.n	80025fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff feff 	bl	80023f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff ff34 	bl	800246c <LL_ADC_IsInternalRegulatorEnabled>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d115      	bne.n	8002636 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ff18 	bl	8002444 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002614:	4ba0      	ldr	r3, [pc, #640]	; (8002898 <HAL_ADC_Init+0x2f4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	099b      	lsrs	r3, r3, #6
 800261a:	4aa0      	ldr	r2, [pc, #640]	; (800289c <HAL_ADC_Init+0x2f8>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	3301      	adds	r3, #1
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002628:	e002      	b.n	8002630 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	3b01      	subs	r3, #1
 800262e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f9      	bne.n	800262a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ff16 	bl	800246c <LL_ADC_IsInternalRegulatorEnabled>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10d      	bne.n	8002662 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264a:	f043 0210 	orr.w	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002656:	f043 0201 	orr.w	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff ff76 	bl	8002558 <LL_ADC_REG_IsConversionOngoing>
 800266c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 8100 	bne.w	800287c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 80fc 	bne.w	800287c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002688:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800268c:	f043 0202 	orr.w	r2, r3, #2
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff23 	bl	80024e4 <LL_ADC_IsEnabled>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d111      	bne.n	80026c8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80026a8:	f7ff ff1c 	bl	80024e4 <LL_ADC_IsEnabled>
 80026ac:	4604      	mov	r4, r0
 80026ae:	487c      	ldr	r0, [pc, #496]	; (80028a0 <HAL_ADC_Init+0x2fc>)
 80026b0:	f7ff ff18 	bl	80024e4 <LL_ADC_IsEnabled>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4323      	orrs	r3, r4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d105      	bne.n	80026c8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4619      	mov	r1, r3
 80026c2:	4878      	ldr	r0, [pc, #480]	; (80028a4 <HAL_ADC_Init+0x300>)
 80026c4:	f7ff fd2a 	bl	800211c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7f5b      	ldrb	r3, [r3, #29]
 80026cc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026d2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80026d8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026de:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026e6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d106      	bne.n	8002704 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	3b01      	subs	r3, #1
 80026fc:	045b      	lsls	r3, r3, #17
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	2b00      	cmp	r3, #0
 800270a:	d009      	beq.n	8002720 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	4b60      	ldr	r3, [pc, #384]	; (80028a8 <HAL_ADC_Init+0x304>)
 8002728:	4013      	ands	r3, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	69b9      	ldr	r1, [r7, #24]
 8002730:	430b      	orrs	r3, r1
 8002732:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff ff15 	bl	800257e <LL_ADC_INJ_IsConversionOngoing>
 8002754:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d16d      	bne.n	8002838 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d16a      	bne.n	8002838 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002766:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800276e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800277e:	f023 0302 	bic.w	r3, r3, #2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	69b9      	ldr	r1, [r7, #24]
 8002788:	430b      	orrs	r3, r1
 800278a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d017      	beq.n	80027c4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027ac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6911      	ldr	r1, [r2, #16]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	430b      	orrs	r3, r1
 80027be:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80027c2:	e013      	b.n	80027ec <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027e8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d118      	bne.n	8002828 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800280c:	4311      	orrs	r1, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002812:	4311      	orrs	r1, r2
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002818:	430a      	orrs	r2, r1
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0201 	orr.w	r2, r2, #1
 8002824:	611a      	str	r2, [r3, #16]
 8002826:	e007      	b.n	8002838 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0201 	bic.w	r2, r2, #1
 8002836:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d10c      	bne.n	800285a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f023 010f 	bic.w	r1, r3, #15
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	1e5a      	subs	r2, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
 8002858:	e007      	b.n	800286a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 020f 	bic.w	r2, r2, #15
 8002868:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286e:	f023 0303 	bic.w	r3, r3, #3
 8002872:	f043 0201 	orr.w	r2, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	65da      	str	r2, [r3, #92]	; 0x5c
 800287a:	e007      	b.n	800288c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	f043 0210 	orr.w	r2, r3, #16
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800288c:	7ffb      	ldrb	r3, [r7, #31]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3724      	adds	r7, #36	; 0x24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd90      	pop	{r4, r7, pc}
 8002896:	bf00      	nop
 8002898:	20000000 	.word	0x20000000
 800289c:	053e2d63 	.word	0x053e2d63
 80028a0:	50000100 	.word	0x50000100
 80028a4:	50000300 	.word	0x50000300
 80028a8:	fff04007 	.word	0xfff04007

080028ac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028b8:	4851      	ldr	r0, [pc, #324]	; (8002a00 <HAL_ADC_Start_DMA+0x154>)
 80028ba:	f7ff fd8f 	bl	80023dc <LL_ADC_GetMultimode>
 80028be:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fe47 	bl	8002558 <LL_ADC_REG_IsConversionOngoing>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f040 808f 	bne.w	80029f0 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_ADC_Start_DMA+0x34>
 80028dc:	2302      	movs	r3, #2
 80028de:	e08a      	b.n	80029f6 <HAL_ADC_Start_DMA+0x14a>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d002      	beq.n	80028fa <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	2b09      	cmp	r3, #9
 80028f8:	d173      	bne.n	80029e2 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 fc98 	bl	8003230 <ADC_Enable>
 8002900:	4603      	mov	r3, r0
 8002902:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002904:	7dfb      	ldrb	r3, [r7, #23]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d166      	bne.n	80029d8 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002912:	f023 0301 	bic.w	r3, r3, #1
 8002916:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a38      	ldr	r2, [pc, #224]	; (8002a04 <HAL_ADC_Start_DMA+0x158>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d002      	beq.n	800292e <HAL_ADC_Start_DMA+0x82>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	e001      	b.n	8002932 <HAL_ADC_Start_DMA+0x86>
 800292e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	4293      	cmp	r3, r2
 8002938:	d002      	beq.n	8002940 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d105      	bne.n	800294c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002944:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002950:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d006      	beq.n	8002966 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295c:	f023 0206 	bic.w	r2, r3, #6
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	661a      	str	r2, [r3, #96]	; 0x60
 8002964:	e002      	b.n	800296c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	4a25      	ldr	r2, [pc, #148]	; (8002a08 <HAL_ADC_Start_DMA+0x15c>)
 8002972:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	4a24      	ldr	r2, [pc, #144]	; (8002a0c <HAL_ADC_Start_DMA+0x160>)
 800297a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002980:	4a23      	ldr	r2, [pc, #140]	; (8002a10 <HAL_ADC_Start_DMA+0x164>)
 8002982:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	221c      	movs	r2, #28
 800298a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0210 	orr.w	r2, r2, #16
 80029a2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	3340      	adds	r3, #64	; 0x40
 80029be:	4619      	mov	r1, r3
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f001 f8be 	bl	8003b44 <HAL_DMA_Start_IT>
 80029c8:	4603      	mov	r3, r0
 80029ca:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fdad 	bl	8002530 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80029d6:	e00d      	b.n	80029f4 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80029e0:	e008      	b.n	80029f4 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80029ee:	e001      	b.n	80029f4 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029f0:	2302      	movs	r3, #2
 80029f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	50000300 	.word	0x50000300
 8002a04:	50000100 	.word	0x50000100
 8002a08:	080033fb 	.word	0x080033fb
 8002a0c:	080034d3 	.word	0x080034d3
 8002a10:	080034ef 	.word	0x080034ef

08002a14 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b0b6      	sub	sp, #216	; 0xd8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x22>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e3c8      	b.n	8003204 <HAL_ADC_ConfigChannel+0x7b4>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fd6a 	bl	8002558 <LL_ADC_REG_IsConversionOngoing>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f040 83ad 	bne.w	80031e6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f7ff fc24 	bl	80022e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fd58 	bl	8002558 <LL_ADC_REG_IsConversionOngoing>
 8002aa8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fd64 	bl	800257e <LL_ADC_INJ_IsConversionOngoing>
 8002ab6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f040 81d9 	bne.w	8002e76 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ac4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f040 81d4 	bne.w	8002e76 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ad6:	d10f      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f7ff fc2b 	bl	800233e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fbd2 	bl	800229a <LL_ADC_SetSamplingTimeCommonConfig>
 8002af6:	e00e      	b.n	8002b16 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	6819      	ldr	r1, [r3, #0]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	461a      	mov	r2, r3
 8002b06:	f7ff fc1a 	bl	800233e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff fbc2 	bl	800229a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	08db      	lsrs	r3, r3, #3
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d022      	beq.n	8002b7e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6919      	ldr	r1, [r3, #16]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b48:	f7ff fb1c 	bl	8002184 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	6919      	ldr	r1, [r3, #16]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f7ff fb68 	bl	800222e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d102      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x124>
 8002b6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b72:	e000      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x126>
 8002b74:	2300      	movs	r3, #0
 8002b76:	461a      	mov	r2, r3
 8002b78:	f7ff fb74 	bl	8002264 <LL_ADC_SetOffsetSaturation>
 8002b7c:	e17b      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2100      	movs	r1, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fb21 	bl	80021cc <LL_ADC_GetOffsetChannel>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x15a>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fb16 	bl	80021cc <LL_ADC_GetOffsetChannel>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	0e9b      	lsrs	r3, r3, #26
 8002ba4:	f003 021f 	and.w	r2, r3, #31
 8002ba8:	e01e      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x198>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff fb0b 	bl	80021cc <LL_ADC_GetOffsetChannel>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002bd8:	2320      	movs	r3, #32
 8002bda:	e004      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002bdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002be0:	fab3 f383 	clz	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d105      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x1b0>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	0e9b      	lsrs	r3, r3, #26
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	e018      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x1e2>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002c24:	2320      	movs	r3, #32
 8002c26:	e004      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002c28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c2c:	fab3 f383 	clz	r3, r3
 8002c30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d106      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fada 	bl	80021f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2101      	movs	r1, #1
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fabe 	bl	80021cc <LL_ADC_GetOffsetChannel>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10a      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x220>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2101      	movs	r1, #1
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fab3 	bl	80021cc <LL_ADC_GetOffsetChannel>
 8002c66:	4603      	mov	r3, r0
 8002c68:	0e9b      	lsrs	r3, r3, #26
 8002c6a:	f003 021f 	and.w	r2, r3, #31
 8002c6e:	e01e      	b.n	8002cae <HAL_ADC_ConfigChannel+0x25e>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2101      	movs	r1, #1
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff faa8 	bl	80021cc <LL_ADC_GetOffsetChannel>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002c9e:	2320      	movs	r3, #32
 8002ca0:	e004      	b.n	8002cac <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002ca2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d105      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x276>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	0e9b      	lsrs	r3, r3, #26
 8002cc0:	f003 031f 	and.w	r3, r3, #31
 8002cc4:	e018      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x2a8>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002cda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002ce2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002cea:	2320      	movs	r3, #32
 8002cec:	e004      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002cee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cf2:	fab3 f383 	clz	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d106      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2200      	movs	r2, #0
 8002d02:	2101      	movs	r1, #1
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fa77 	bl	80021f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2102      	movs	r1, #2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fa5b 	bl	80021cc <LL_ADC_GetOffsetChannel>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10a      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x2e6>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2102      	movs	r1, #2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff fa50 	bl	80021cc <LL_ADC_GetOffsetChannel>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	0e9b      	lsrs	r3, r3, #26
 8002d30:	f003 021f 	and.w	r2, r3, #31
 8002d34:	e01e      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x324>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fa45 	bl	80021cc <LL_ADC_GetOffsetChannel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002d64:	2320      	movs	r3, #32
 8002d66:	e004      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002d68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d6c:	fab3 f383 	clz	r3, r3
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d105      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x33c>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0e9b      	lsrs	r3, r3, #26
 8002d86:	f003 031f 	and.w	r3, r3, #31
 8002d8a:	e016      	b.n	8002dba <HAL_ADC_ConfigChannel+0x36a>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002da4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002dac:	2320      	movs	r3, #32
 8002dae:	e004      	b.n	8002dba <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d106      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fa16 	bl	80021f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2103      	movs	r1, #3
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff f9fa 	bl	80021cc <LL_ADC_GetOffsetChannel>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x3a8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2103      	movs	r1, #3
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff f9ef 	bl	80021cc <LL_ADC_GetOffsetChannel>
 8002dee:	4603      	mov	r3, r0
 8002df0:	0e9b      	lsrs	r3, r3, #26
 8002df2:	f003 021f 	and.w	r2, r3, #31
 8002df6:	e017      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x3d8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2103      	movs	r1, #3
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff f9e4 	bl	80021cc <LL_ADC_GetOffsetChannel>
 8002e04:	4603      	mov	r3, r0
 8002e06:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e12:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002e1a:	2320      	movs	r3, #32
 8002e1c:	e003      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002e1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e20:	fab3 f383 	clz	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d105      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x3f0>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	0e9b      	lsrs	r3, r3, #26
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	e011      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x414>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e48:	fa93 f3a3 	rbit	r3, r3
 8002e4c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e50:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002e58:	2320      	movs	r3, #32
 8002e5a:	e003      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d106      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2103      	movs	r1, #3
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff f9c1 	bl	80021f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fb32 	bl	80024e4 <LL_ADC_IsEnabled>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 8140 	bne.w	8003108 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	6819      	ldr	r1, [r3, #0]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	461a      	mov	r2, r3
 8002e96:	f7ff fa7d 	bl	8002394 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	4a8f      	ldr	r2, [pc, #572]	; (80030dc <HAL_ADC_ConfigChannel+0x68c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	f040 8131 	bne.w	8003108 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10b      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x47e>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	0e9b      	lsrs	r3, r3, #26
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	2b09      	cmp	r3, #9
 8002ec4:	bf94      	ite	ls
 8002ec6:	2301      	movls	r3, #1
 8002ec8:	2300      	movhi	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	e019      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x4b2>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed6:	fa93 f3a3 	rbit	r3, r3
 8002eda:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002edc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ede:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ee0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002ee6:	2320      	movs	r3, #32
 8002ee8:	e003      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eec:	fab3 f383 	clz	r3, r3
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	2b09      	cmp	r3, #9
 8002efa:	bf94      	ite	ls
 8002efc:	2301      	movls	r3, #1
 8002efe:	2300      	movhi	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d079      	beq.n	8002ffa <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d107      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x4d2>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	0e9b      	lsrs	r3, r3, #26
 8002f18:	3301      	adds	r3, #1
 8002f1a:	069b      	lsls	r3, r3, #26
 8002f1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f20:	e015      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x4fe>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f2a:	fa93 f3a3 	rbit	r3, r3
 8002f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f32:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002f3a:	2320      	movs	r3, #32
 8002f3c:	e003      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	069b      	lsls	r3, r3, #26
 8002f4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x51e>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	0e9b      	lsrs	r3, r3, #26
 8002f60:	3301      	adds	r3, #1
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	2101      	movs	r1, #1
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	e017      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x54e>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f7e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002f86:	2320      	movs	r3, #32
 8002f88:	e003      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f8c:	fab3 f383 	clz	r3, r3
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	3301      	adds	r3, #1
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	2101      	movs	r1, #1
 8002f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9e:	ea42 0103 	orr.w	r1, r2, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10a      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x574>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	0e9b      	lsrs	r3, r3, #26
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	f003 021f 	and.w	r2, r3, #31
 8002fba:	4613      	mov	r3, r2
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	4413      	add	r3, r2
 8002fc0:	051b      	lsls	r3, r3, #20
 8002fc2:	e018      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x5a6>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002fdc:	2320      	movs	r3, #32
 8002fde:	e003      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	3301      	adds	r3, #1
 8002fea:	f003 021f 	and.w	r2, r3, #31
 8002fee:	4613      	mov	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4413      	add	r3, r2
 8002ff4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	e081      	b.n	80030fe <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003002:	2b00      	cmp	r3, #0
 8003004:	d107      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x5c6>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	0e9b      	lsrs	r3, r3, #26
 800300c:	3301      	adds	r3, #1
 800300e:	069b      	lsls	r3, r3, #26
 8003010:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003014:	e015      	b.n	8003042 <HAL_ADC_ConfigChannel+0x5f2>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003026:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800302e:	2320      	movs	r3, #32
 8003030:	e003      	b.n	800303a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	3301      	adds	r3, #1
 800303c:	069b      	lsls	r3, r3, #26
 800303e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x612>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	0e9b      	lsrs	r3, r3, #26
 8003054:	3301      	adds	r3, #1
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	2101      	movs	r1, #1
 800305c:	fa01 f303 	lsl.w	r3, r1, r3
 8003060:	e017      	b.n	8003092 <HAL_ADC_ConfigChannel+0x642>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	fa93 f3a3 	rbit	r3, r3
 800306e:	61fb      	str	r3, [r7, #28]
  return result;
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800307a:	2320      	movs	r3, #32
 800307c:	e003      	b.n	8003086 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	fab3 f383 	clz	r3, r3
 8003084:	b2db      	uxtb	r3, r3
 8003086:	3301      	adds	r3, #1
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	2101      	movs	r1, #1
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	ea42 0103 	orr.w	r1, r2, r3
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10d      	bne.n	80030be <HAL_ADC_ConfigChannel+0x66e>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	0e9b      	lsrs	r3, r3, #26
 80030a8:	3301      	adds	r3, #1
 80030aa:	f003 021f 	and.w	r2, r3, #31
 80030ae:	4613      	mov	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	4413      	add	r3, r2
 80030b4:	3b1e      	subs	r3, #30
 80030b6:	051b      	lsls	r3, r3, #20
 80030b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030bc:	e01e      	b.n	80030fc <HAL_ADC_ConfigChannel+0x6ac>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	613b      	str	r3, [r7, #16]
  return result;
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d104      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80030d6:	2320      	movs	r3, #32
 80030d8:	e006      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x698>
 80030da:	bf00      	nop
 80030dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	fab3 f383 	clz	r3, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	3301      	adds	r3, #1
 80030ea:	f003 021f 	and.w	r2, r3, #31
 80030ee:	4613      	mov	r3, r2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4413      	add	r3, r2
 80030f4:	3b1e      	subs	r3, #30
 80030f6:	051b      	lsls	r3, r3, #20
 80030f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030fc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003102:	4619      	mov	r1, r3
 8003104:	f7ff f91b 	bl	800233e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b3f      	ldr	r3, [pc, #252]	; (800320c <HAL_ADC_ConfigChannel+0x7bc>)
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d071      	beq.n	80031f8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003114:	483e      	ldr	r0, [pc, #248]	; (8003210 <HAL_ADC_ConfigChannel+0x7c0>)
 8003116:	f7ff f827 	bl	8002168 <LL_ADC_GetCommonPathInternalCh>
 800311a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a3c      	ldr	r2, [pc, #240]	; (8003214 <HAL_ADC_ConfigChannel+0x7c4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d004      	beq.n	8003132 <HAL_ADC_ConfigChannel+0x6e2>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a3a      	ldr	r2, [pc, #232]	; (8003218 <HAL_ADC_ConfigChannel+0x7c8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d127      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003132:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003136:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d121      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003146:	d157      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003148:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800314c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003150:	4619      	mov	r1, r3
 8003152:	482f      	ldr	r0, [pc, #188]	; (8003210 <HAL_ADC_ConfigChannel+0x7c0>)
 8003154:	f7fe fff5 	bl	8002142 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003158:	4b30      	ldr	r3, [pc, #192]	; (800321c <HAL_ADC_ConfigChannel+0x7cc>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	099b      	lsrs	r3, r3, #6
 800315e:	4a30      	ldr	r2, [pc, #192]	; (8003220 <HAL_ADC_ConfigChannel+0x7d0>)
 8003160:	fba2 2303 	umull	r2, r3, r2, r3
 8003164:	099b      	lsrs	r3, r3, #6
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	4613      	mov	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003172:	e002      	b.n	800317a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	3b01      	subs	r3, #1
 8003178:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f9      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003180:	e03a      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a27      	ldr	r2, [pc, #156]	; (8003224 <HAL_ADC_ConfigChannel+0x7d4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d113      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800318c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10d      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a22      	ldr	r2, [pc, #136]	; (8003228 <HAL_ADC_ConfigChannel+0x7d8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d02a      	beq.n	80031f8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031aa:	4619      	mov	r1, r3
 80031ac:	4818      	ldr	r0, [pc, #96]	; (8003210 <HAL_ADC_ConfigChannel+0x7c0>)
 80031ae:	f7fe ffc8 	bl	8002142 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031b2:	e021      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1c      	ldr	r2, [pc, #112]	; (800322c <HAL_ADC_ConfigChannel+0x7dc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d11c      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d116      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a16      	ldr	r2, [pc, #88]	; (8003228 <HAL_ADC_ConfigChannel+0x7d8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d011      	beq.n	80031f8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031dc:	4619      	mov	r1, r3
 80031de:	480c      	ldr	r0, [pc, #48]	; (8003210 <HAL_ADC_ConfigChannel+0x7c0>)
 80031e0:	f7fe ffaf 	bl	8002142 <LL_ADC_SetCommonPathInternalCh>
 80031e4:	e008      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ea:	f043 0220 	orr.w	r2, r3, #32
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003200:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003204:	4618      	mov	r0, r3
 8003206:	37d8      	adds	r7, #216	; 0xd8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	80080000 	.word	0x80080000
 8003210:	50000300 	.word	0x50000300
 8003214:	c3210000 	.word	0xc3210000
 8003218:	90c00010 	.word	0x90c00010
 800321c:	20000000 	.word	0x20000000
 8003220:	053e2d63 	.word	0x053e2d63
 8003224:	c7520000 	.word	0xc7520000
 8003228:	50000100 	.word	0x50000100
 800322c:	cb840000 	.word	0xcb840000

08003230 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003238:	2300      	movs	r3, #0
 800323a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff f94f 	bl	80024e4 <LL_ADC_IsEnabled>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d169      	bne.n	8003320 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	4b36      	ldr	r3, [pc, #216]	; (800332c <ADC_Enable+0xfc>)
 8003254:	4013      	ands	r3, r2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00d      	beq.n	8003276 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325e:	f043 0210 	orr.w	r2, r3, #16
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326a:	f043 0201 	orr.w	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e055      	b.n	8003322 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff f90a 	bl	8002494 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003280:	482b      	ldr	r0, [pc, #172]	; (8003330 <ADC_Enable+0x100>)
 8003282:	f7fe ff71 	bl	8002168 <LL_ADC_GetCommonPathInternalCh>
 8003286:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800328c:	2b00      	cmp	r3, #0
 800328e:	d013      	beq.n	80032b8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003290:	4b28      	ldr	r3, [pc, #160]	; (8003334 <ADC_Enable+0x104>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	099b      	lsrs	r3, r3, #6
 8003296:	4a28      	ldr	r2, [pc, #160]	; (8003338 <ADC_Enable+0x108>)
 8003298:	fba2 2303 	umull	r2, r3, r2, r3
 800329c:	099b      	lsrs	r3, r3, #6
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	4613      	mov	r3, r2
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032aa:	e002      	b.n	80032b2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1f9      	bne.n	80032ac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032b8:	f7fe ff24 	bl	8002104 <HAL_GetTick>
 80032bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032be:	e028      	b.n	8003312 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff f90d 	bl	80024e4 <LL_ADC_IsEnabled>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d104      	bne.n	80032da <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff f8dd 	bl	8002494 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032da:	f7fe ff13 	bl	8002104 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d914      	bls.n	8003312 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d00d      	beq.n	8003312 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fa:	f043 0210 	orr.w	r2, r3, #16
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003306:	f043 0201 	orr.w	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e007      	b.n	8003322 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b01      	cmp	r3, #1
 800331e:	d1cf      	bne.n	80032c0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	8000003f 	.word	0x8000003f
 8003330:	50000300 	.word	0x50000300
 8003334:	20000000 	.word	0x20000000
 8003338:	053e2d63 	.word	0x053e2d63

0800333c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff f8de 	bl	800250a <LL_ADC_IsDisableOngoing>
 800334e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff f8c5 	bl	80024e4 <LL_ADC_IsEnabled>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d047      	beq.n	80033f0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d144      	bne.n	80033f0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 030d 	and.w	r3, r3, #13
 8003370:	2b01      	cmp	r3, #1
 8003372:	d10c      	bne.n	800338e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff f89f 	bl	80024bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2203      	movs	r2, #3
 8003384:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003386:	f7fe febd 	bl	8002104 <HAL_GetTick>
 800338a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800338c:	e029      	b.n	80033e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	f043 0210 	orr.w	r2, r3, #16
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800339e:	f043 0201 	orr.w	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e023      	b.n	80033f2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033aa:	f7fe feab 	bl	8002104 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d914      	bls.n	80033e2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00d      	beq.n	80033e2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ca:	f043 0210 	orr.w	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d6:	f043 0201 	orr.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e007      	b.n	80033f2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1dc      	bne.n	80033aa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003410:	2b00      	cmp	r3, #0
 8003412:	d14b      	bne.n	80034ac <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003418:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d021      	beq.n	8003472 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe ff44 	bl	80022c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d032      	beq.n	80034a4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d12b      	bne.n	80034a4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d11f      	bne.n	80034a4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003468:	f043 0201 	orr.w	r2, r3, #1
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003470:	e018      	b.n	80034a4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d111      	bne.n	80034a4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d105      	bne.n	80034a4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	f043 0201 	orr.w	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f7ff fab5 	bl	8002a14 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034aa:	e00e      	b.n	80034ca <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f7ff fabf 	bl	8002a3c <HAL_ADC_ErrorCallback>
}
 80034be:	e004      	b.n	80034ca <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	4798      	blx	r3
}
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7ff faa1 	bl	8002a28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003500:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350c:	f043 0204 	orr.w	r2, r3, #4
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f7ff fa91 	bl	8002a3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800351a:	bf00      	nop
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <LL_ADC_IsEnabled>:
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <LL_ADC_IsEnabled+0x18>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <LL_ADC_IsEnabled+0x1a>
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_ADC_StartCalibration>:
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800355a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003564:	4313      	orrs	r3, r2
 8003566:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	609a      	str	r2, [r3, #8]
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <LL_ADC_IsCalibrationOnGoing>:
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800358a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800358e:	d101      	bne.n	8003594 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d101      	bne.n	80035ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_ADCEx_Calibration_Start+0x1c>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e04d      	b.n	8003680 <HAL_ADCEx_Calibration_Start+0xb8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff fea5 	bl	800333c <ADC_Disable>
 80035f2:	4603      	mov	r3, r0
 80035f4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d136      	bne.n	800366a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003604:	f023 0302 	bic.w	r3, r3, #2
 8003608:	f043 0202 	orr.w	r2, r3, #2
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6839      	ldr	r1, [r7, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff ff96 	bl	8003548 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800361c:	e014      	b.n	8003648 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	3301      	adds	r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4a18      	ldr	r2, [pc, #96]	; (8003688 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d90d      	bls.n	8003648 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003630:	f023 0312 	bic.w	r3, r3, #18
 8003634:	f043 0210 	orr.w	r2, r3, #16
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e01b      	b.n	8003680 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff ff94 	bl	800357a <LL_ADC_IsCalibrationOnGoing>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e2      	bne.n	800361e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365c:	f023 0303 	bic.w	r3, r3, #3
 8003660:	f043 0201 	orr.w	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	65da      	str	r2, [r3, #92]	; 0x5c
 8003668:	e005      	b.n	8003676 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366e:	f043 0210 	orr.w	r2, r3, #16
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800367e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	0004de01 	.word	0x0004de01

0800368c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b0a1      	sub	sp, #132	; 0x84
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e08b      	b.n	80037c2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80036b2:	2300      	movs	r3, #0
 80036b4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80036b6:	2300      	movs	r3, #0
 80036b8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036c2:	d102      	bne.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80036c4:	4b41      	ldr	r3, [pc, #260]	; (80037cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	e001      	b.n	80036ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10b      	bne.n	80036ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d8:	f043 0220 	orr.w	r2, r3, #32
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e06a      	b.n	80037c2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff ff57 	bl	80035a2 <LL_ADC_REG_IsConversionOngoing>
 80036f4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff ff51 	bl	80035a2 <LL_ADC_REG_IsConversionOngoing>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d14c      	bne.n	80037a0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003706:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003708:	2b00      	cmp	r3, #0
 800370a:	d149      	bne.n	80037a0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800370c:	4b30      	ldr	r3, [pc, #192]	; (80037d0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800370e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d028      	beq.n	800376a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003718:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	6859      	ldr	r1, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800372a:	035b      	lsls	r3, r3, #13
 800372c:	430b      	orrs	r3, r1
 800372e:	431a      	orrs	r2, r3
 8003730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003732:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003734:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003738:	f7ff fef3 	bl	8003522 <LL_ADC_IsEnabled>
 800373c:	4604      	mov	r4, r0
 800373e:	4823      	ldr	r0, [pc, #140]	; (80037cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003740:	f7ff feef 	bl	8003522 <LL_ADC_IsEnabled>
 8003744:	4603      	mov	r3, r0
 8003746:	4323      	orrs	r3, r4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d133      	bne.n	80037b4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800374c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003754:	f023 030f 	bic.w	r3, r3, #15
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	6811      	ldr	r1, [r2, #0]
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	6892      	ldr	r2, [r2, #8]
 8003760:	430a      	orrs	r2, r1
 8003762:	431a      	orrs	r2, r3
 8003764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003766:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003768:	e024      	b.n	80037b4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800376a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003774:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003776:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800377a:	f7ff fed2 	bl	8003522 <LL_ADC_IsEnabled>
 800377e:	4604      	mov	r4, r0
 8003780:	4812      	ldr	r0, [pc, #72]	; (80037cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003782:	f7ff fece 	bl	8003522 <LL_ADC_IsEnabled>
 8003786:	4603      	mov	r3, r0
 8003788:	4323      	orrs	r3, r4
 800378a:	2b00      	cmp	r3, #0
 800378c:	d112      	bne.n	80037b4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800378e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003796:	f023 030f 	bic.w	r3, r3, #15
 800379a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800379c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800379e:	e009      	b.n	80037b4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a4:	f043 0220 	orr.w	r2, r3, #32
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80037b2:	e000      	b.n	80037b6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80037be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3784      	adds	r7, #132	; 0x84
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd90      	pop	{r4, r7, pc}
 80037ca:	bf00      	nop
 80037cc:	50000100 	.word	0x50000100
 80037d0:	50000300 	.word	0x50000300

080037d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <__NVIC_SetPriorityGrouping+0x44>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037f0:	4013      	ands	r3, r2
 80037f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003806:	4a04      	ldr	r2, [pc, #16]	; (8003818 <__NVIC_SetPriorityGrouping+0x44>)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	60d3      	str	r3, [r2, #12]
}
 800380c:	bf00      	nop
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003820:	4b04      	ldr	r3, [pc, #16]	; (8003834 <__NVIC_GetPriorityGrouping+0x18>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	0a1b      	lsrs	r3, r3, #8
 8003826:	f003 0307 	and.w	r3, r3, #7
}
 800382a:	4618      	mov	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003846:	2b00      	cmp	r3, #0
 8003848:	db0b      	blt.n	8003862 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	f003 021f 	and.w	r2, r3, #31
 8003850:	4907      	ldr	r1, [pc, #28]	; (8003870 <__NVIC_EnableIRQ+0x38>)
 8003852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	2001      	movs	r0, #1
 800385a:	fa00 f202 	lsl.w	r2, r0, r2
 800385e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	e000e100 	.word	0xe000e100

08003874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	6039      	str	r1, [r7, #0]
 800387e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003884:	2b00      	cmp	r3, #0
 8003886:	db0a      	blt.n	800389e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	b2da      	uxtb	r2, r3
 800388c:	490c      	ldr	r1, [pc, #48]	; (80038c0 <__NVIC_SetPriority+0x4c>)
 800388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003892:	0112      	lsls	r2, r2, #4
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	440b      	add	r3, r1
 8003898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800389c:	e00a      	b.n	80038b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	4908      	ldr	r1, [pc, #32]	; (80038c4 <__NVIC_SetPriority+0x50>)
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	3b04      	subs	r3, #4
 80038ac:	0112      	lsls	r2, r2, #4
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	440b      	add	r3, r1
 80038b2:	761a      	strb	r2, [r3, #24]
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000e100 	.word	0xe000e100
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b089      	sub	sp, #36	; 0x24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f1c3 0307 	rsb	r3, r3, #7
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	bf28      	it	cs
 80038e6:	2304      	movcs	r3, #4
 80038e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3304      	adds	r3, #4
 80038ee:	2b06      	cmp	r3, #6
 80038f0:	d902      	bls.n	80038f8 <NVIC_EncodePriority+0x30>
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3b03      	subs	r3, #3
 80038f6:	e000      	b.n	80038fa <NVIC_EncodePriority+0x32>
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43da      	mvns	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	401a      	ands	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003910:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	fa01 f303 	lsl.w	r3, r1, r3
 800391a:	43d9      	mvns	r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003920:	4313      	orrs	r3, r2
         );
}
 8003922:	4618      	mov	r0, r3
 8003924:	3724      	adds	r7, #36	; 0x24
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
	...

08003930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3b01      	subs	r3, #1
 800393c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003940:	d301      	bcc.n	8003946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003942:	2301      	movs	r3, #1
 8003944:	e00f      	b.n	8003966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003946:	4a0a      	ldr	r2, [pc, #40]	; (8003970 <SysTick_Config+0x40>)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3b01      	subs	r3, #1
 800394c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800394e:	210f      	movs	r1, #15
 8003950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003954:	f7ff ff8e 	bl	8003874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <SysTick_Config+0x40>)
 800395a:	2200      	movs	r2, #0
 800395c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800395e:	4b04      	ldr	r3, [pc, #16]	; (8003970 <SysTick_Config+0x40>)
 8003960:	2207      	movs	r2, #7
 8003962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	e000e010 	.word	0xe000e010

08003974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff ff29 	bl	80037d4 <__NVIC_SetPriorityGrouping>
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b086      	sub	sp, #24
 800398e:	af00      	add	r7, sp, #0
 8003990:	4603      	mov	r3, r0
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	607a      	str	r2, [r7, #4]
 8003996:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003998:	f7ff ff40 	bl	800381c <__NVIC_GetPriorityGrouping>
 800399c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	6978      	ldr	r0, [r7, #20]
 80039a4:	f7ff ff90 	bl	80038c8 <NVIC_EncodePriority>
 80039a8:	4602      	mov	r2, r0
 80039aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff5f 	bl	8003874 <__NVIC_SetPriority>
}
 80039b6:	bf00      	nop
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	4603      	mov	r3, r0
 80039c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff ff33 	bl	8003838 <__NVIC_EnableIRQ>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff ffa4 	bl	8003930 <SysTick_Config>
 80039e8:	4603      	mov	r3, r0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e08d      	b.n	8003b22 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4b47      	ldr	r3, [pc, #284]	; (8003b2c <HAL_DMA_Init+0x138>)
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d80f      	bhi.n	8003a32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	4b45      	ldr	r3, [pc, #276]	; (8003b30 <HAL_DMA_Init+0x13c>)
 8003a1a:	4413      	add	r3, r2
 8003a1c:	4a45      	ldr	r2, [pc, #276]	; (8003b34 <HAL_DMA_Init+0x140>)
 8003a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a22:	091b      	lsrs	r3, r3, #4
 8003a24:	009a      	lsls	r2, r3, #2
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a42      	ldr	r2, [pc, #264]	; (8003b38 <HAL_DMA_Init+0x144>)
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40
 8003a30:	e00e      	b.n	8003a50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	4b40      	ldr	r3, [pc, #256]	; (8003b3c <HAL_DMA_Init+0x148>)
 8003a3a:	4413      	add	r3, r2
 8003a3c:	4a3d      	ldr	r2, [pc, #244]	; (8003b34 <HAL_DMA_Init+0x140>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	009a      	lsls	r2, r3, #2
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a3c      	ldr	r2, [pc, #240]	; (8003b40 <HAL_DMA_Init+0x14c>)
 8003a4e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f9b6 	bl	8003e14 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab0:	d102      	bne.n	8003ab8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003acc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d010      	beq.n	8003af8 <HAL_DMA_Init+0x104>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d80c      	bhi.n	8003af8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f9d6 	bl	8003e90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	e008      	b.n	8003b0a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40020407 	.word	0x40020407
 8003b30:	bffdfff8 	.word	0xbffdfff8
 8003b34:	cccccccd 	.word	0xcccccccd
 8003b38:	40020000 	.word	0x40020000
 8003b3c:	bffdfbf8 	.word	0xbffdfbf8
 8003b40:	40020400 	.word	0x40020400

08003b44 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_DMA_Start_IT+0x20>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e066      	b.n	8003c32 <HAL_DMA_Start_IT+0xee>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d155      	bne.n	8003c24 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0201 	bic.w	r2, r2, #1
 8003b94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f8fb 	bl	8003d98 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 020e 	orr.w	r2, r2, #14
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e00f      	b.n	8003bdc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0204 	bic.w	r2, r2, #4
 8003bca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 020a 	orr.w	r2, r2, #10
 8003bda:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d007      	beq.n	8003bfa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d007      	beq.n	8003c12 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c10:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0201 	orr.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	e005      	b.n	8003c30 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	2204      	movs	r2, #4
 8003c5c:	409a      	lsls	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d026      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x7a>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d021      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d107      	bne.n	8003c8e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0204 	bic.w	r2, r2, #4
 8003c8c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	f003 021f 	and.w	r2, r3, #31
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	2104      	movs	r1, #4
 8003c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d071      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003cb2:	e06c      	b.n	8003d8e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	f003 031f 	and.w	r3, r3, #31
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d02e      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d029      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10b      	bne.n	8003cf8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 020a 	bic.w	r2, r2, #10
 8003cee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfc:	f003 021f 	and.w	r2, r3, #31
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	2102      	movs	r1, #2
 8003d06:	fa01 f202 	lsl.w	r2, r1, r2
 8003d0a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d038      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d24:	e033      	b.n	8003d8e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	2208      	movs	r2, #8
 8003d30:	409a      	lsls	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d02a      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d025      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 020e 	bic.w	r2, r2, #14
 8003d52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d58:	f003 021f 	and.w	r2, r3, #31
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	2101      	movs	r1, #1
 8003d62:	fa01 f202 	lsl.w	r2, r1, r2
 8003d66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d004      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d8e:	bf00      	nop
 8003d90:	bf00      	nop
}
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003dae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d004      	beq.n	8003dc2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003dc0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	f003 021f 	and.w	r2, r3, #31
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	2101      	movs	r1, #1
 8003dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b10      	cmp	r3, #16
 8003de4:	d108      	bne.n	8003df8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003df6:	e007      	b.n	8003e08 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	60da      	str	r2, [r3, #12]
}
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d802      	bhi.n	8003e2e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003e28:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	e001      	b.n	8003e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003e2e:	4b15      	ldr	r3, [pc, #84]	; (8003e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003e30:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	3b08      	subs	r3, #8
 8003e3e:	4a12      	ldr	r2, [pc, #72]	; (8003e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003e40:	fba2 2303 	umull	r2, r3, r2, r3
 8003e44:	091b      	lsrs	r3, r3, #4
 8003e46:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4c:	089b      	lsrs	r3, r3, #2
 8003e4e:	009a      	lsls	r2, r3, #2
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4413      	add	r3, r2
 8003e54:	461a      	mov	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a0b      	ldr	r2, [pc, #44]	; (8003e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003e5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 031f 	and.w	r3, r3, #31
 8003e66:	2201      	movs	r2, #1
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e6e:	bf00      	nop
 8003e70:	371c      	adds	r7, #28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40020407 	.word	0x40020407
 8003e80:	40020800 	.word	0x40020800
 8003e84:	40020820 	.word	0x40020820
 8003e88:	cccccccd 	.word	0xcccccccd
 8003e8c:	40020880 	.word	0x40020880

08003e90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a08      	ldr	r2, [pc, #32]	; (8003ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003eb2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	f003 031f 	and.w	r3, r3, #31
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	409a      	lsls	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	1000823f 	.word	0x1000823f
 8003ed4:	40020940 	.word	0x40020940

08003ed8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e147      	b.n	800417a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fd fe96 	bl	8001c30 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699a      	ldr	r2, [r3, #24]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0210 	bic.w	r2, r2, #16
 8003f12:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f14:	f7fe f8f6 	bl	8002104 <HAL_GetTick>
 8003f18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003f1a:	e012      	b.n	8003f42 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003f1c:	f7fe f8f2 	bl	8002104 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b0a      	cmp	r3, #10
 8003f28:	d90b      	bls.n	8003f42 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2e:	f043 0201 	orr.w	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2203      	movs	r2, #3
 8003f3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e11b      	b.n	800417a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d0e5      	beq.n	8003f1c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699a      	ldr	r2, [r3, #24]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f60:	f7fe f8d0 	bl	8002104 <HAL_GetTick>
 8003f64:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003f66:	e012      	b.n	8003f8e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003f68:	f7fe f8cc 	bl	8002104 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b0a      	cmp	r3, #10
 8003f74:	d90b      	bls.n	8003f8e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7a:	f043 0201 	orr.w	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2203      	movs	r2, #3
 8003f86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e0f5      	b.n	800417a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0e5      	beq.n	8003f68 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0202 	orr.w	r2, r2, #2
 8003faa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a74      	ldr	r2, [pc, #464]	; (8004184 <HAL_FDCAN_Init+0x2ac>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d103      	bne.n	8003fbe <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003fb6:	4a74      	ldr	r2, [pc, #464]	; (8004188 <HAL_FDCAN_Init+0x2b0>)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	7c1b      	ldrb	r3, [r3, #16]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d108      	bne.n	8003fd8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699a      	ldr	r2, [r3, #24]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd4:	619a      	str	r2, [r3, #24]
 8003fd6:	e007      	b.n	8003fe8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699a      	ldr	r2, [r3, #24]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fe6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	7c5b      	ldrb	r3, [r3, #17]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d108      	bne.n	8004002 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ffe:	619a      	str	r2, [r3, #24]
 8004000:	e007      	b.n	8004012 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699a      	ldr	r2, [r3, #24]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004010:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	7c9b      	ldrb	r3, [r3, #18]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d108      	bne.n	800402c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699a      	ldr	r2, [r3, #24]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004028:	619a      	str	r2, [r3, #24]
 800402a:	e007      	b.n	800403c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800403a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699a      	ldr	r2, [r3, #24]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004060:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0210 	bic.w	r2, r2, #16
 8004070:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d108      	bne.n	800408c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699a      	ldr	r2, [r3, #24]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0204 	orr.w	r2, r2, #4
 8004088:	619a      	str	r2, [r3, #24]
 800408a:	e02c      	b.n	80040e6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d028      	beq.n	80040e6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d01c      	beq.n	80040d6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040aa:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0210 	orr.w	r2, r2, #16
 80040ba:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d110      	bne.n	80040e6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0220 	orr.w	r2, r2, #32
 80040d2:	619a      	str	r2, [r3, #24]
 80040d4:	e007      	b.n	80040e6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699a      	ldr	r2, [r3, #24]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0220 	orr.w	r2, r2, #32
 80040e4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040f6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80040fe:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	3b01      	subs	r3, #1
 8004108:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800410e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004110:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800411a:	d115      	bne.n	8004148 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004120:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	3b01      	subs	r3, #1
 8004128:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800412a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	3b01      	subs	r3, #1
 8004132:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004134:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	3b01      	subs	r3, #1
 800413e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004144:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004146:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f814 	bl	800418c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40006400 	.word	0x40006400
 8004188:	40006500 	.word	0x40006500

0800418c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004194:	4b27      	ldr	r3, [pc, #156]	; (8004234 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8004196:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041a6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ae:	041a      	lsls	r2, r3, #16
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041cc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d4:	061a      	lsls	r2, r3, #24
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	e005      	b.n	800421a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3304      	adds	r3, #4
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	429a      	cmp	r2, r3
 8004224:	d3f3      	bcc.n	800420e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8004226:	bf00      	nop
 8004228:	bf00      	nop
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	4000a400 	.word	0x4000a400

08004238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004246:	e15a      	b.n	80044fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	2101      	movs	r1, #1
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	fa01 f303 	lsl.w	r3, r1, r3
 8004254:	4013      	ands	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 814c 	beq.w	80044f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	2b01      	cmp	r3, #1
 800426a:	d005      	beq.n	8004278 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004274:	2b02      	cmp	r3, #2
 8004276:	d130      	bne.n	80042da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	2203      	movs	r2, #3
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	43db      	mvns	r3, r3
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4013      	ands	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042ae:	2201      	movs	r2, #1
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	43db      	mvns	r3, r3
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4013      	ands	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	091b      	lsrs	r3, r3, #4
 80042c4:	f003 0201 	and.w	r2, r3, #1
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d017      	beq.n	8004316 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	2203      	movs	r2, #3
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4013      	ands	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d123      	bne.n	800436a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	08da      	lsrs	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3208      	adds	r2, #8
 800432a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800432e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	220f      	movs	r2, #15
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4013      	ands	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	691a      	ldr	r2, [r3, #16]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	08da      	lsrs	r2, r3, #3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3208      	adds	r2, #8
 8004364:	6939      	ldr	r1, [r7, #16]
 8004366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	2203      	movs	r2, #3
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4013      	ands	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f003 0203 	and.w	r2, r3, #3
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 80a6 	beq.w	80044f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ac:	4b5b      	ldr	r3, [pc, #364]	; (800451c <HAL_GPIO_Init+0x2e4>)
 80043ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b0:	4a5a      	ldr	r2, [pc, #360]	; (800451c <HAL_GPIO_Init+0x2e4>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6613      	str	r3, [r2, #96]	; 0x60
 80043b8:	4b58      	ldr	r3, [pc, #352]	; (800451c <HAL_GPIO_Init+0x2e4>)
 80043ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043c4:	4a56      	ldr	r2, [pc, #344]	; (8004520 <HAL_GPIO_Init+0x2e8>)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	089b      	lsrs	r3, r3, #2
 80043ca:	3302      	adds	r3, #2
 80043cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	220f      	movs	r2, #15
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4013      	ands	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80043ee:	d01f      	beq.n	8004430 <HAL_GPIO_Init+0x1f8>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a4c      	ldr	r2, [pc, #304]	; (8004524 <HAL_GPIO_Init+0x2ec>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d019      	beq.n	800442c <HAL_GPIO_Init+0x1f4>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a4b      	ldr	r2, [pc, #300]	; (8004528 <HAL_GPIO_Init+0x2f0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d013      	beq.n	8004428 <HAL_GPIO_Init+0x1f0>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a4a      	ldr	r2, [pc, #296]	; (800452c <HAL_GPIO_Init+0x2f4>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00d      	beq.n	8004424 <HAL_GPIO_Init+0x1ec>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a49      	ldr	r2, [pc, #292]	; (8004530 <HAL_GPIO_Init+0x2f8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d007      	beq.n	8004420 <HAL_GPIO_Init+0x1e8>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a48      	ldr	r2, [pc, #288]	; (8004534 <HAL_GPIO_Init+0x2fc>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d101      	bne.n	800441c <HAL_GPIO_Init+0x1e4>
 8004418:	2305      	movs	r3, #5
 800441a:	e00a      	b.n	8004432 <HAL_GPIO_Init+0x1fa>
 800441c:	2306      	movs	r3, #6
 800441e:	e008      	b.n	8004432 <HAL_GPIO_Init+0x1fa>
 8004420:	2304      	movs	r3, #4
 8004422:	e006      	b.n	8004432 <HAL_GPIO_Init+0x1fa>
 8004424:	2303      	movs	r3, #3
 8004426:	e004      	b.n	8004432 <HAL_GPIO_Init+0x1fa>
 8004428:	2302      	movs	r3, #2
 800442a:	e002      	b.n	8004432 <HAL_GPIO_Init+0x1fa>
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <HAL_GPIO_Init+0x1fa>
 8004430:	2300      	movs	r3, #0
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	f002 0203 	and.w	r2, r2, #3
 8004438:	0092      	lsls	r2, r2, #2
 800443a:	4093      	lsls	r3, r2
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004442:	4937      	ldr	r1, [pc, #220]	; (8004520 <HAL_GPIO_Init+0x2e8>)
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	089b      	lsrs	r3, r3, #2
 8004448:	3302      	adds	r3, #2
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004450:	4b39      	ldr	r3, [pc, #228]	; (8004538 <HAL_GPIO_Init+0x300>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	43db      	mvns	r3, r3
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4013      	ands	r3, r2
 800445e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004474:	4a30      	ldr	r2, [pc, #192]	; (8004538 <HAL_GPIO_Init+0x300>)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800447a:	4b2f      	ldr	r3, [pc, #188]	; (8004538 <HAL_GPIO_Init+0x300>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	43db      	mvns	r3, r3
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4013      	ands	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800449e:	4a26      	ldr	r2, [pc, #152]	; (8004538 <HAL_GPIO_Init+0x300>)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80044a4:	4b24      	ldr	r3, [pc, #144]	; (8004538 <HAL_GPIO_Init+0x300>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	43db      	mvns	r3, r3
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4013      	ands	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80044c8:	4a1b      	ldr	r2, [pc, #108]	; (8004538 <HAL_GPIO_Init+0x300>)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80044ce:	4b1a      	ldr	r3, [pc, #104]	; (8004538 <HAL_GPIO_Init+0x300>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	43db      	mvns	r3, r3
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4013      	ands	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044f2:	4a11      	ldr	r2, [pc, #68]	; (8004538 <HAL_GPIO_Init+0x300>)
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	3301      	adds	r3, #1
 80044fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	fa22 f303 	lsr.w	r3, r2, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	f47f ae9d 	bne.w	8004248 <HAL_GPIO_Init+0x10>
  }
}
 800450e:	bf00      	nop
 8004510:	bf00      	nop
 8004512:	371c      	adds	r7, #28
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	40021000 	.word	0x40021000
 8004520:	40010000 	.word	0x40010000
 8004524:	48000400 	.word	0x48000400
 8004528:	48000800 	.word	0x48000800
 800452c:	48000c00 	.word	0x48000c00
 8004530:	48001000 	.word	0x48001000
 8004534:	48001400 	.word	0x48001400
 8004538:	40010400 	.word	0x40010400

0800453c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	807b      	strh	r3, [r7, #2]
 8004548:	4613      	mov	r3, r2
 800454a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800454c:	787b      	ldrb	r3, [r7, #1]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004552:	887a      	ldrh	r2, [r7, #2]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004558:	e002      	b.n	8004560 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800455a:	887a      	ldrh	r2, [r7, #2]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d141      	bne.n	80045fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800457a:	4b4b      	ldr	r3, [pc, #300]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004586:	d131      	bne.n	80045ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004588:	4b47      	ldr	r3, [pc, #284]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800458a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800458e:	4a46      	ldr	r2, [pc, #280]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004594:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004598:	4b43      	ldr	r3, [pc, #268]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045a0:	4a41      	ldr	r2, [pc, #260]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045a8:	4b40      	ldr	r3, [pc, #256]	; (80046ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2232      	movs	r2, #50	; 0x32
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	4a3f      	ldr	r2, [pc, #252]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80045b4:	fba2 2303 	umull	r2, r3, r2, r3
 80045b8:	0c9b      	lsrs	r3, r3, #18
 80045ba:	3301      	adds	r3, #1
 80045bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045be:	e002      	b.n	80045c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045c6:	4b38      	ldr	r3, [pc, #224]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d2:	d102      	bne.n	80045da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f2      	bne.n	80045c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045da:	4b33      	ldr	r3, [pc, #204]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e6:	d158      	bne.n	800469a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e057      	b.n	800469c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045ec:	4b2e      	ldr	r3, [pc, #184]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045f2:	4a2d      	ldr	r2, [pc, #180]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80045fc:	e04d      	b.n	800469a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004604:	d141      	bne.n	800468a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004606:	4b28      	ldr	r3, [pc, #160]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800460e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004612:	d131      	bne.n	8004678 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004614:	4b24      	ldr	r3, [pc, #144]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800461a:	4a23      	ldr	r2, [pc, #140]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800461c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004620:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004624:	4b20      	ldr	r3, [pc, #128]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800462c:	4a1e      	ldr	r2, [pc, #120]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800462e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004632:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004634:	4b1d      	ldr	r3, [pc, #116]	; (80046ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2232      	movs	r2, #50	; 0x32
 800463a:	fb02 f303 	mul.w	r3, r2, r3
 800463e:	4a1c      	ldr	r2, [pc, #112]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004640:	fba2 2303 	umull	r2, r3, r2, r3
 8004644:	0c9b      	lsrs	r3, r3, #18
 8004646:	3301      	adds	r3, #1
 8004648:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800464a:	e002      	b.n	8004652 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	3b01      	subs	r3, #1
 8004650:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004652:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465e:	d102      	bne.n	8004666 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f2      	bne.n	800464c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004666:	4b10      	ldr	r3, [pc, #64]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004672:	d112      	bne.n	800469a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e011      	b.n	800469c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004678:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800467a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800467e:	4a0a      	ldr	r2, [pc, #40]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004684:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004688:	e007      	b.n	800469a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800468a:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004692:	4a05      	ldr	r2, [pc, #20]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004694:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004698:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	40007000 	.word	0x40007000
 80046ac:	20000000 	.word	0x20000000
 80046b0:	431bde83 	.word	0x431bde83

080046b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e2fe      	b.n	8004cc4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d075      	beq.n	80047be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046d2:	4b97      	ldr	r3, [pc, #604]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046dc:	4b94      	ldr	r3, [pc, #592]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	2b0c      	cmp	r3, #12
 80046ea:	d102      	bne.n	80046f2 <HAL_RCC_OscConfig+0x3e>
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d002      	beq.n	80046f8 <HAL_RCC_OscConfig+0x44>
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d10b      	bne.n	8004710 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f8:	4b8d      	ldr	r3, [pc, #564]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d05b      	beq.n	80047bc <HAL_RCC_OscConfig+0x108>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d157      	bne.n	80047bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e2d9      	b.n	8004cc4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004718:	d106      	bne.n	8004728 <HAL_RCC_OscConfig+0x74>
 800471a:	4b85      	ldr	r3, [pc, #532]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a84      	ldr	r2, [pc, #528]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 8004720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	e01d      	b.n	8004764 <HAL_RCC_OscConfig+0xb0>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004730:	d10c      	bne.n	800474c <HAL_RCC_OscConfig+0x98>
 8004732:	4b7f      	ldr	r3, [pc, #508]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a7e      	ldr	r2, [pc, #504]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 8004738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	4b7c      	ldr	r3, [pc, #496]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a7b      	ldr	r2, [pc, #492]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 8004744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e00b      	b.n	8004764 <HAL_RCC_OscConfig+0xb0>
 800474c:	4b78      	ldr	r3, [pc, #480]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a77      	ldr	r2, [pc, #476]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 8004752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	4b75      	ldr	r3, [pc, #468]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a74      	ldr	r2, [pc, #464]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 800475e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d013      	beq.n	8004794 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476c:	f7fd fcca 	bl	8002104 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004774:	f7fd fcc6 	bl	8002104 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b64      	cmp	r3, #100	; 0x64
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e29e      	b.n	8004cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004786:	4b6a      	ldr	r3, [pc, #424]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0xc0>
 8004792:	e014      	b.n	80047be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fd fcb6 	bl	8002104 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800479c:	f7fd fcb2 	bl	8002104 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	; 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e28a      	b.n	8004cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ae:	4b60      	ldr	r3, [pc, #384]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0xe8>
 80047ba:	e000      	b.n	80047be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d075      	beq.n	80048b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ca:	4b59      	ldr	r3, [pc, #356]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047d4:	4b56      	ldr	r3, [pc, #344]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b0c      	cmp	r3, #12
 80047e2:	d102      	bne.n	80047ea <HAL_RCC_OscConfig+0x136>
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d002      	beq.n	80047f0 <HAL_RCC_OscConfig+0x13c>
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d11f      	bne.n	8004830 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047f0:	4b4f      	ldr	r3, [pc, #316]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <HAL_RCC_OscConfig+0x154>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e25d      	b.n	8004cc4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004808:	4b49      	ldr	r3, [pc, #292]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	061b      	lsls	r3, r3, #24
 8004816:	4946      	ldr	r1, [pc, #280]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 8004818:	4313      	orrs	r3, r2
 800481a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800481c:	4b45      	ldr	r3, [pc, #276]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f7fd fc23 	bl	800206c <HAL_InitTick>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d043      	beq.n	80048b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e249      	b.n	8004cc4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d023      	beq.n	8004880 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004838:	4b3d      	ldr	r3, [pc, #244]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a3c      	ldr	r2, [pc, #240]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 800483e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004844:	f7fd fc5e 	bl	8002104 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800484c:	f7fd fc5a 	bl	8002104 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e232      	b.n	8004cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800485e:	4b34      	ldr	r3, [pc, #208]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486a:	4b31      	ldr	r3, [pc, #196]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	061b      	lsls	r3, r3, #24
 8004878:	492d      	ldr	r1, [pc, #180]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 800487a:	4313      	orrs	r3, r2
 800487c:	604b      	str	r3, [r1, #4]
 800487e:	e01a      	b.n	80048b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004880:	4b2b      	ldr	r3, [pc, #172]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a2a      	ldr	r2, [pc, #168]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 8004886:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800488a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488c:	f7fd fc3a 	bl	8002104 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004894:	f7fd fc36 	bl	8002104 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e20e      	b.n	8004cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048a6:	4b22      	ldr	r3, [pc, #136]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f0      	bne.n	8004894 <HAL_RCC_OscConfig+0x1e0>
 80048b2:	e000      	b.n	80048b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d041      	beq.n	8004946 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d01c      	beq.n	8004904 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ca:	4b19      	ldr	r3, [pc, #100]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 80048cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d0:	4a17      	ldr	r2, [pc, #92]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048da:	f7fd fc13 	bl	8002104 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048e2:	f7fd fc0f 	bl	8002104 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e1e7      	b.n	8004cc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048f4:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 80048f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0ef      	beq.n	80048e2 <HAL_RCC_OscConfig+0x22e>
 8004902:	e020      	b.n	8004946 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004904:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 8004906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800490a:	4a09      	ldr	r2, [pc, #36]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 800490c:	f023 0301 	bic.w	r3, r3, #1
 8004910:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004914:	f7fd fbf6 	bl	8002104 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800491a:	e00d      	b.n	8004938 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800491c:	f7fd fbf2 	bl	8002104 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d906      	bls.n	8004938 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e1ca      	b.n	8004cc4 <HAL_RCC_OscConfig+0x610>
 800492e:	bf00      	nop
 8004930:	40021000 	.word	0x40021000
 8004934:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004938:	4b8c      	ldr	r3, [pc, #560]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 800493a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1ea      	bne.n	800491c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0304 	and.w	r3, r3, #4
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 80a6 	beq.w	8004aa0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004954:	2300      	movs	r3, #0
 8004956:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004958:	4b84      	ldr	r3, [pc, #528]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 800495a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_RCC_OscConfig+0x2b4>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <HAL_RCC_OscConfig+0x2b6>
 8004968:	2300      	movs	r3, #0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00d      	beq.n	800498a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800496e:	4b7f      	ldr	r3, [pc, #508]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 8004970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004972:	4a7e      	ldr	r2, [pc, #504]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 8004974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004978:	6593      	str	r3, [r2, #88]	; 0x58
 800497a:	4b7c      	ldr	r3, [pc, #496]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 800497c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004986:	2301      	movs	r3, #1
 8004988:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800498a:	4b79      	ldr	r3, [pc, #484]	; (8004b70 <HAL_RCC_OscConfig+0x4bc>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d118      	bne.n	80049c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004996:	4b76      	ldr	r3, [pc, #472]	; (8004b70 <HAL_RCC_OscConfig+0x4bc>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a75      	ldr	r2, [pc, #468]	; (8004b70 <HAL_RCC_OscConfig+0x4bc>)
 800499c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a2:	f7fd fbaf 	bl	8002104 <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049aa:	f7fd fbab 	bl	8002104 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e183      	b.n	8004cc4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049bc:	4b6c      	ldr	r3, [pc, #432]	; (8004b70 <HAL_RCC_OscConfig+0x4bc>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f0      	beq.n	80049aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d108      	bne.n	80049e2 <HAL_RCC_OscConfig+0x32e>
 80049d0:	4b66      	ldr	r3, [pc, #408]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d6:	4a65      	ldr	r2, [pc, #404]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 80049d8:	f043 0301 	orr.w	r3, r3, #1
 80049dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049e0:	e024      	b.n	8004a2c <HAL_RCC_OscConfig+0x378>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	2b05      	cmp	r3, #5
 80049e8:	d110      	bne.n	8004a0c <HAL_RCC_OscConfig+0x358>
 80049ea:	4b60      	ldr	r3, [pc, #384]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 80049ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f0:	4a5e      	ldr	r2, [pc, #376]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 80049f2:	f043 0304 	orr.w	r3, r3, #4
 80049f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049fa:	4b5c      	ldr	r3, [pc, #368]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 80049fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a00:	4a5a      	ldr	r2, [pc, #360]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 8004a02:	f043 0301 	orr.w	r3, r3, #1
 8004a06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a0a:	e00f      	b.n	8004a2c <HAL_RCC_OscConfig+0x378>
 8004a0c:	4b57      	ldr	r3, [pc, #348]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a12:	4a56      	ldr	r2, [pc, #344]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a1c:	4b53      	ldr	r3, [pc, #332]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 8004a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a22:	4a52      	ldr	r2, [pc, #328]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 8004a24:	f023 0304 	bic.w	r3, r3, #4
 8004a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d016      	beq.n	8004a62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a34:	f7fd fb66 	bl	8002104 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a3a:	e00a      	b.n	8004a52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3c:	f7fd fb62 	bl	8002104 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e138      	b.n	8004cc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a52:	4b46      	ldr	r3, [pc, #280]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 8004a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0ed      	beq.n	8004a3c <HAL_RCC_OscConfig+0x388>
 8004a60:	e015      	b.n	8004a8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a62:	f7fd fb4f 	bl	8002104 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a68:	e00a      	b.n	8004a80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a6a:	f7fd fb4b 	bl	8002104 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e121      	b.n	8004cc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a80:	4b3a      	ldr	r3, [pc, #232]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 8004a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1ed      	bne.n	8004a6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a8e:	7ffb      	ldrb	r3, [r7, #31]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d105      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a94:	4b35      	ldr	r3, [pc, #212]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 8004a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a98:	4a34      	ldr	r2, [pc, #208]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 8004a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0320 	and.w	r3, r3, #32
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d03c      	beq.n	8004b26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01c      	beq.n	8004aee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ab4:	4b2d      	ldr	r3, [pc, #180]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 8004ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aba:	4a2c      	ldr	r2, [pc, #176]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 8004abc:	f043 0301 	orr.w	r3, r3, #1
 8004ac0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac4:	f7fd fb1e 	bl	8002104 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004acc:	f7fd fb1a 	bl	8002104 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e0f2      	b.n	8004cc4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ade:	4b23      	ldr	r3, [pc, #140]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 8004ae0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0ef      	beq.n	8004acc <HAL_RCC_OscConfig+0x418>
 8004aec:	e01b      	b.n	8004b26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004aee:	4b1f      	ldr	r3, [pc, #124]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 8004af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004af4:	4a1d      	ldr	r2, [pc, #116]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 8004af6:	f023 0301 	bic.w	r3, r3, #1
 8004afa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afe:	f7fd fb01 	bl	8002104 <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b06:	f7fd fafd 	bl	8002104 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e0d5      	b.n	8004cc4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b18:	4b14      	ldr	r3, [pc, #80]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 8004b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1ef      	bne.n	8004b06 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 80c9 	beq.w	8004cc2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b30:	4b0e      	ldr	r3, [pc, #56]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 030c 	and.w	r3, r3, #12
 8004b38:	2b0c      	cmp	r3, #12
 8004b3a:	f000 8083 	beq.w	8004c44 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d15e      	bne.n	8004c04 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b46:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a08      	ldr	r2, [pc, #32]	; (8004b6c <HAL_RCC_OscConfig+0x4b8>)
 8004b4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b52:	f7fd fad7 	bl	8002104 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b58:	e00c      	b.n	8004b74 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b5a:	f7fd fad3 	bl	8002104 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d905      	bls.n	8004b74 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e0ab      	b.n	8004cc4 <HAL_RCC_OscConfig+0x610>
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b74:	4b55      	ldr	r3, [pc, #340]	; (8004ccc <HAL_RCC_OscConfig+0x618>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1ec      	bne.n	8004b5a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b80:	4b52      	ldr	r3, [pc, #328]	; (8004ccc <HAL_RCC_OscConfig+0x618>)
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	4b52      	ldr	r3, [pc, #328]	; (8004cd0 <HAL_RCC_OscConfig+0x61c>)
 8004b86:	4013      	ands	r3, r2
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6a11      	ldr	r1, [r2, #32]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b90:	3a01      	subs	r2, #1
 8004b92:	0112      	lsls	r2, r2, #4
 8004b94:	4311      	orrs	r1, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004b9a:	0212      	lsls	r2, r2, #8
 8004b9c:	4311      	orrs	r1, r2
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ba2:	0852      	lsrs	r2, r2, #1
 8004ba4:	3a01      	subs	r2, #1
 8004ba6:	0552      	lsls	r2, r2, #21
 8004ba8:	4311      	orrs	r1, r2
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bae:	0852      	lsrs	r2, r2, #1
 8004bb0:	3a01      	subs	r2, #1
 8004bb2:	0652      	lsls	r2, r2, #25
 8004bb4:	4311      	orrs	r1, r2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004bba:	06d2      	lsls	r2, r2, #27
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	4943      	ldr	r1, [pc, #268]	; (8004ccc <HAL_RCC_OscConfig+0x618>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc4:	4b41      	ldr	r3, [pc, #260]	; (8004ccc <HAL_RCC_OscConfig+0x618>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a40      	ldr	r2, [pc, #256]	; (8004ccc <HAL_RCC_OscConfig+0x618>)
 8004bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bd0:	4b3e      	ldr	r3, [pc, #248]	; (8004ccc <HAL_RCC_OscConfig+0x618>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	4a3d      	ldr	r2, [pc, #244]	; (8004ccc <HAL_RCC_OscConfig+0x618>)
 8004bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bdc:	f7fd fa92 	bl	8002104 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be4:	f7fd fa8e 	bl	8002104 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e066      	b.n	8004cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf6:	4b35      	ldr	r3, [pc, #212]	; (8004ccc <HAL_RCC_OscConfig+0x618>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f0      	beq.n	8004be4 <HAL_RCC_OscConfig+0x530>
 8004c02:	e05e      	b.n	8004cc2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c04:	4b31      	ldr	r3, [pc, #196]	; (8004ccc <HAL_RCC_OscConfig+0x618>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a30      	ldr	r2, [pc, #192]	; (8004ccc <HAL_RCC_OscConfig+0x618>)
 8004c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c10:	f7fd fa78 	bl	8002104 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c18:	f7fd fa74 	bl	8002104 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e04c      	b.n	8004cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c2a:	4b28      	ldr	r3, [pc, #160]	; (8004ccc <HAL_RCC_OscConfig+0x618>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1f0      	bne.n	8004c18 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004c36:	4b25      	ldr	r3, [pc, #148]	; (8004ccc <HAL_RCC_OscConfig+0x618>)
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	4924      	ldr	r1, [pc, #144]	; (8004ccc <HAL_RCC_OscConfig+0x618>)
 8004c3c:	4b25      	ldr	r3, [pc, #148]	; (8004cd4 <HAL_RCC_OscConfig+0x620>)
 8004c3e:	4013      	ands	r3, r2
 8004c40:	60cb      	str	r3, [r1, #12]
 8004c42:	e03e      	b.n	8004cc2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e039      	b.n	8004cc4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004c50:	4b1e      	ldr	r3, [pc, #120]	; (8004ccc <HAL_RCC_OscConfig+0x618>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f003 0203 	and.w	r2, r3, #3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d12c      	bne.n	8004cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d123      	bne.n	8004cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c80:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d11b      	bne.n	8004cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d113      	bne.n	8004cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	085b      	lsrs	r3, r3, #1
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d109      	bne.n	8004cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb4:	085b      	lsrs	r3, r3, #1
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d001      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3720      	adds	r7, #32
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	019f800c 	.word	0x019f800c
 8004cd4:	feeefffc 	.word	0xfeeefffc

08004cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e11e      	b.n	8004f2e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf0:	4b91      	ldr	r3, [pc, #580]	; (8004f38 <HAL_RCC_ClockConfig+0x260>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d910      	bls.n	8004d20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfe:	4b8e      	ldr	r3, [pc, #568]	; (8004f38 <HAL_RCC_ClockConfig+0x260>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 020f 	bic.w	r2, r3, #15
 8004d06:	498c      	ldr	r1, [pc, #560]	; (8004f38 <HAL_RCC_ClockConfig+0x260>)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0e:	4b8a      	ldr	r3, [pc, #552]	; (8004f38 <HAL_RCC_ClockConfig+0x260>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e106      	b.n	8004f2e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d073      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d129      	bne.n	8004d88 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d34:	4b81      	ldr	r3, [pc, #516]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0f4      	b.n	8004f2e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004d44:	f000 f99e 	bl	8005084 <RCC_GetSysClockFreqFromPLLSource>
 8004d48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	4a7c      	ldr	r2, [pc, #496]	; (8004f40 <HAL_RCC_ClockConfig+0x268>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d93f      	bls.n	8004dd2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d52:	4b7a      	ldr	r3, [pc, #488]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d009      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d033      	beq.n	8004dd2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d12f      	bne.n	8004dd2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d72:	4b72      	ldr	r3, [pc, #456]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d7a:	4a70      	ldr	r2, [pc, #448]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d80:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d82:	2380      	movs	r3, #128	; 0x80
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	e024      	b.n	8004dd2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d107      	bne.n	8004da0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d90:	4b6a      	ldr	r3, [pc, #424]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d109      	bne.n	8004db0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e0c6      	b.n	8004f2e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004da0:	4b66      	ldr	r3, [pc, #408]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0be      	b.n	8004f2e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004db0:	f000 f8ce 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 8004db4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	4a61      	ldr	r2, [pc, #388]	; (8004f40 <HAL_RCC_ClockConfig+0x268>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d909      	bls.n	8004dd2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004dbe:	4b5f      	ldr	r3, [pc, #380]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dc6:	4a5d      	ldr	r2, [pc, #372]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dcc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004dce:	2380      	movs	r3, #128	; 0x80
 8004dd0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dd2:	4b5a      	ldr	r3, [pc, #360]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f023 0203 	bic.w	r2, r3, #3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	4957      	ldr	r1, [pc, #348]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de4:	f7fd f98e 	bl	8002104 <HAL_GetTick>
 8004de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dea:	e00a      	b.n	8004e02 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dec:	f7fd f98a 	bl	8002104 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e095      	b.n	8004f2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e02:	4b4e      	ldr	r3, [pc, #312]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 020c 	and.w	r2, r3, #12
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d1eb      	bne.n	8004dec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d023      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e2c:	4b43      	ldr	r3, [pc, #268]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	4a42      	ldr	r2, [pc, #264]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004e32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e36:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d007      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004e44:	4b3d      	ldr	r3, [pc, #244]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004e4c:	4a3b      	ldr	r2, [pc, #236]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004e4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e54:	4b39      	ldr	r3, [pc, #228]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	4936      	ldr	r1, [pc, #216]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	608b      	str	r3, [r1, #8]
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2b80      	cmp	r3, #128	; 0x80
 8004e6c:	d105      	bne.n	8004e7a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e6e:	4b33      	ldr	r3, [pc, #204]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	4a32      	ldr	r2, [pc, #200]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004e74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e78:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e7a:	4b2f      	ldr	r3, [pc, #188]	; (8004f38 <HAL_RCC_ClockConfig+0x260>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d21d      	bcs.n	8004ec4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e88:	4b2b      	ldr	r3, [pc, #172]	; (8004f38 <HAL_RCC_ClockConfig+0x260>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f023 020f 	bic.w	r2, r3, #15
 8004e90:	4929      	ldr	r1, [pc, #164]	; (8004f38 <HAL_RCC_ClockConfig+0x260>)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e98:	f7fd f934 	bl	8002104 <HAL_GetTick>
 8004e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e9e:	e00a      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ea0:	f7fd f930 	bl	8002104 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e03b      	b.n	8004f2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb6:	4b20      	ldr	r3, [pc, #128]	; (8004f38 <HAL_RCC_ClockConfig+0x260>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d1ed      	bne.n	8004ea0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ed0:	4b1a      	ldr	r3, [pc, #104]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	4917      	ldr	r1, [pc, #92]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eee:	4b13      	ldr	r3, [pc, #76]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	490f      	ldr	r1, [pc, #60]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f02:	f000 f825 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 8004f06:	4602      	mov	r2, r0
 8004f08:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	091b      	lsrs	r3, r3, #4
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	490c      	ldr	r1, [pc, #48]	; (8004f44 <HAL_RCC_ClockConfig+0x26c>)
 8004f14:	5ccb      	ldrb	r3, [r1, r3]
 8004f16:	f003 031f 	and.w	r3, r3, #31
 8004f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1e:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <HAL_RCC_ClockConfig+0x270>)
 8004f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004f22:	4b0a      	ldr	r3, [pc, #40]	; (8004f4c <HAL_RCC_ClockConfig+0x274>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fd f8a0 	bl	800206c <HAL_InitTick>
 8004f2c:	4603      	mov	r3, r0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40022000 	.word	0x40022000
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	04c4b400 	.word	0x04c4b400
 8004f44:	0800954c 	.word	0x0800954c
 8004f48:	20000000 	.word	0x20000000
 8004f4c:	20000004 	.word	0x20000004

08004f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f56:	4b2c      	ldr	r3, [pc, #176]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d102      	bne.n	8004f68 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f62:	4b2a      	ldr	r3, [pc, #168]	; (800500c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	e047      	b.n	8004ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f68:	4b27      	ldr	r3, [pc, #156]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f003 030c 	and.w	r3, r3, #12
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d102      	bne.n	8004f7a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f74:	4b26      	ldr	r3, [pc, #152]	; (8005010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	e03e      	b.n	8004ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004f7a:	4b23      	ldr	r3, [pc, #140]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 030c 	and.w	r3, r3, #12
 8004f82:	2b0c      	cmp	r3, #12
 8004f84:	d136      	bne.n	8004ff4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f86:	4b20      	ldr	r3, [pc, #128]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f90:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	091b      	lsrs	r3, r3, #4
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d10c      	bne.n	8004fbe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fa4:	4a1a      	ldr	r2, [pc, #104]	; (8005010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fac:	4a16      	ldr	r2, [pc, #88]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fae:	68d2      	ldr	r2, [r2, #12]
 8004fb0:	0a12      	lsrs	r2, r2, #8
 8004fb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fb6:	fb02 f303 	mul.w	r3, r2, r3
 8004fba:	617b      	str	r3, [r7, #20]
      break;
 8004fbc:	e00c      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fbe:	4a13      	ldr	r2, [pc, #76]	; (800500c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc6:	4a10      	ldr	r2, [pc, #64]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fc8:	68d2      	ldr	r2, [r2, #12]
 8004fca:	0a12      	lsrs	r2, r2, #8
 8004fcc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fd0:	fb02 f303 	mul.w	r3, r2, r3
 8004fd4:	617b      	str	r3, [r7, #20]
      break;
 8004fd6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	0e5b      	lsrs	r3, r3, #25
 8004fde:	f003 0303 	and.w	r3, r3, #3
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	e001      	b.n	8004ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ff8:	693b      	ldr	r3, [r7, #16]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40021000 	.word	0x40021000
 800500c:	00f42400 	.word	0x00f42400
 8005010:	007a1200 	.word	0x007a1200

08005014 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005018:	4b03      	ldr	r3, [pc, #12]	; (8005028 <HAL_RCC_GetHCLKFreq+0x14>)
 800501a:	681b      	ldr	r3, [r3, #0]
}
 800501c:	4618      	mov	r0, r3
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	20000000 	.word	0x20000000

0800502c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005030:	f7ff fff0 	bl	8005014 <HAL_RCC_GetHCLKFreq>
 8005034:	4602      	mov	r2, r0
 8005036:	4b06      	ldr	r3, [pc, #24]	; (8005050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	0a1b      	lsrs	r3, r3, #8
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	4904      	ldr	r1, [pc, #16]	; (8005054 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005042:	5ccb      	ldrb	r3, [r1, r3]
 8005044:	f003 031f 	and.w	r3, r3, #31
 8005048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800504c:	4618      	mov	r0, r3
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40021000 	.word	0x40021000
 8005054:	0800955c 	.word	0x0800955c

08005058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800505c:	f7ff ffda 	bl	8005014 <HAL_RCC_GetHCLKFreq>
 8005060:	4602      	mov	r2, r0
 8005062:	4b06      	ldr	r3, [pc, #24]	; (800507c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	0adb      	lsrs	r3, r3, #11
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	4904      	ldr	r1, [pc, #16]	; (8005080 <HAL_RCC_GetPCLK2Freq+0x28>)
 800506e:	5ccb      	ldrb	r3, [r1, r3]
 8005070:	f003 031f 	and.w	r3, r3, #31
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005078:	4618      	mov	r0, r3
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40021000 	.word	0x40021000
 8005080:	0800955c 	.word	0x0800955c

08005084 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800508a:	4b1e      	ldr	r3, [pc, #120]	; (8005104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005094:	4b1b      	ldr	r3, [pc, #108]	; (8005104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	091b      	lsrs	r3, r3, #4
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	3301      	adds	r3, #1
 80050a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	d10c      	bne.n	80050c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050a8:	4a17      	ldr	r2, [pc, #92]	; (8005108 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b0:	4a14      	ldr	r2, [pc, #80]	; (8005104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050b2:	68d2      	ldr	r2, [r2, #12]
 80050b4:	0a12      	lsrs	r2, r2, #8
 80050b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050ba:	fb02 f303 	mul.w	r3, r2, r3
 80050be:	617b      	str	r3, [r7, #20]
    break;
 80050c0:	e00c      	b.n	80050dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050c2:	4a12      	ldr	r2, [pc, #72]	; (800510c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ca:	4a0e      	ldr	r2, [pc, #56]	; (8005104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050cc:	68d2      	ldr	r2, [r2, #12]
 80050ce:	0a12      	lsrs	r2, r2, #8
 80050d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050d4:	fb02 f303 	mul.w	r3, r2, r3
 80050d8:	617b      	str	r3, [r7, #20]
    break;
 80050da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050dc:	4b09      	ldr	r3, [pc, #36]	; (8005104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	0e5b      	lsrs	r3, r3, #25
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	3301      	adds	r3, #1
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80050f6:	687b      	ldr	r3, [r7, #4]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	40021000 	.word	0x40021000
 8005108:	007a1200 	.word	0x007a1200
 800510c:	00f42400 	.word	0x00f42400

08005110 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005118:	2300      	movs	r3, #0
 800511a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800511c:	2300      	movs	r3, #0
 800511e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 8098 	beq.w	800525e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800512e:	2300      	movs	r3, #0
 8005130:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005132:	4b43      	ldr	r3, [pc, #268]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10d      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800513e:	4b40      	ldr	r3, [pc, #256]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005142:	4a3f      	ldr	r2, [pc, #252]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005148:	6593      	str	r3, [r2, #88]	; 0x58
 800514a:	4b3d      	ldr	r3, [pc, #244]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800514c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005152:	60bb      	str	r3, [r7, #8]
 8005154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005156:	2301      	movs	r3, #1
 8005158:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800515a:	4b3a      	ldr	r3, [pc, #232]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a39      	ldr	r2, [pc, #228]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005164:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005166:	f7fc ffcd 	bl	8002104 <HAL_GetTick>
 800516a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800516c:	e009      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800516e:	f7fc ffc9 	bl	8002104 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d902      	bls.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	74fb      	strb	r3, [r7, #19]
        break;
 8005180:	e005      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005182:	4b30      	ldr	r3, [pc, #192]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0ef      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800518e:	7cfb      	ldrb	r3, [r7, #19]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d159      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005194:	4b2a      	ldr	r3, [pc, #168]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800519e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d01e      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d019      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051b0:	4b23      	ldr	r3, [pc, #140]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051bc:	4b20      	ldr	r3, [pc, #128]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c2:	4a1f      	ldr	r2, [pc, #124]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051cc:	4b1c      	ldr	r3, [pc, #112]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d2:	4a1b      	ldr	r2, [pc, #108]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051dc:	4a18      	ldr	r2, [pc, #96]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d016      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ee:	f7fc ff89 	bl	8002104 <HAL_GetTick>
 80051f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051f4:	e00b      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f6:	f7fc ff85 	bl	8002104 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	f241 3288 	movw	r2, #5000	; 0x1388
 8005204:	4293      	cmp	r3, r2
 8005206:	d902      	bls.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	74fb      	strb	r3, [r7, #19]
            break;
 800520c:	e006      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800520e:	4b0c      	ldr	r3, [pc, #48]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0ec      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800521c:	7cfb      	ldrb	r3, [r7, #19]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10b      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005222:	4b07      	ldr	r3, [pc, #28]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005228:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	4903      	ldr	r1, [pc, #12]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005238:	e008      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800523a:	7cfb      	ldrb	r3, [r7, #19]
 800523c:	74bb      	strb	r3, [r7, #18]
 800523e:	e005      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005240:	40021000 	.word	0x40021000
 8005244:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005248:	7cfb      	ldrb	r3, [r7, #19]
 800524a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800524c:	7c7b      	ldrb	r3, [r7, #17]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d105      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005252:	4ba6      	ldr	r3, [pc, #664]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005256:	4aa5      	ldr	r2, [pc, #660]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800525c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800526a:	4ba0      	ldr	r3, [pc, #640]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005270:	f023 0203 	bic.w	r2, r3, #3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	499c      	ldr	r1, [pc, #624]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800528c:	4b97      	ldr	r3, [pc, #604]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800528e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005292:	f023 020c 	bic.w	r2, r3, #12
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	4994      	ldr	r1, [pc, #592]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052ae:	4b8f      	ldr	r3, [pc, #572]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	498b      	ldr	r1, [pc, #556]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052d0:	4b86      	ldr	r3, [pc, #536]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	4983      	ldr	r1, [pc, #524]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052f2:	4b7e      	ldr	r3, [pc, #504]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	497a      	ldr	r1, [pc, #488]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00a      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005314:	4b75      	ldr	r3, [pc, #468]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	4972      	ldr	r1, [pc, #456]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005336:	4b6d      	ldr	r3, [pc, #436]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	4969      	ldr	r1, [pc, #420]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00a      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005358:	4b64      	ldr	r3, [pc, #400]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800535a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	4961      	ldr	r1, [pc, #388]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800537a:	4b5c      	ldr	r3, [pc, #368]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800537c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005380:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	4958      	ldr	r1, [pc, #352]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005398:	2b00      	cmp	r3, #0
 800539a:	d015      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800539c:	4b53      	ldr	r3, [pc, #332]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800539e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	4950      	ldr	r1, [pc, #320]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ba:	d105      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053bc:	4b4b      	ldr	r3, [pc, #300]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	4a4a      	ldr	r2, [pc, #296]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d015      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053d4:	4b45      	ldr	r3, [pc, #276]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	4942      	ldr	r1, [pc, #264]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053f2:	d105      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053f4:	4b3d      	ldr	r3, [pc, #244]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	4a3c      	ldr	r2, [pc, #240]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053fe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d015      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800540c:	4b37      	ldr	r3, [pc, #220]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	4934      	ldr	r1, [pc, #208]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800542a:	d105      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800542c:	4b2f      	ldr	r3, [pc, #188]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	4a2e      	ldr	r2, [pc, #184]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005436:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d015      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005444:	4b29      	ldr	r3, [pc, #164]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005452:	4926      	ldr	r1, [pc, #152]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005462:	d105      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005464:	4b21      	ldr	r3, [pc, #132]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	4a20      	ldr	r2, [pc, #128]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800546a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800546e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d015      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800547c:	4b1b      	ldr	r3, [pc, #108]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800547e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005482:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	4918      	ldr	r1, [pc, #96]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800549a:	d105      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800549c:	4b13      	ldr	r3, [pc, #76]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	4a12      	ldr	r2, [pc, #72]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d015      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80054b4:	4b0d      	ldr	r3, [pc, #52]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c2:	490a      	ldr	r1, [pc, #40]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054d2:	d105      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80054d4:	4b05      	ldr	r3, [pc, #20]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	4a04      	ldr	r2, [pc, #16]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80054e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3718      	adds	r7, #24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40021000 	.word	0x40021000

080054f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e049      	b.n	8005596 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fc fbe4 	bl	8001ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3304      	adds	r3, #4
 800552c:	4619      	mov	r1, r3
 800552e:	4610      	mov	r0, r2
 8005530:	f000 fa18 	bl	8005964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d001      	beq.n	80055b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e04a      	b.n	800564e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a21      	ldr	r2, [pc, #132]	; (800565c <HAL_TIM_Base_Start_IT+0xbc>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d018      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x6c>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e2:	d013      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x6c>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a1d      	ldr	r2, [pc, #116]	; (8005660 <HAL_TIM_Base_Start_IT+0xc0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00e      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x6c>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a1c      	ldr	r2, [pc, #112]	; (8005664 <HAL_TIM_Base_Start_IT+0xc4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d009      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x6c>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a1a      	ldr	r2, [pc, #104]	; (8005668 <HAL_TIM_Base_Start_IT+0xc8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d004      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x6c>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a19      	ldr	r2, [pc, #100]	; (800566c <HAL_TIM_Base_Start_IT+0xcc>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d115      	bne.n	8005638 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	4b17      	ldr	r3, [pc, #92]	; (8005670 <HAL_TIM_Base_Start_IT+0xd0>)
 8005614:	4013      	ands	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b06      	cmp	r3, #6
 800561c:	d015      	beq.n	800564a <HAL_TIM_Base_Start_IT+0xaa>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005624:	d011      	beq.n	800564a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f042 0201 	orr.w	r2, r2, #1
 8005634:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005636:	e008      	b.n	800564a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	e000      	b.n	800564c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	40012c00 	.word	0x40012c00
 8005660:	40000400 	.word	0x40000400
 8005664:	40000800 	.word	0x40000800
 8005668:	40013400 	.word	0x40013400
 800566c:	40014000 	.word	0x40014000
 8005670:	00010007 	.word	0x00010007

08005674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d020      	beq.n	80056d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01b      	beq.n	80056d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0202 	mvn.w	r2, #2
 80056a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f931 	bl	8005926 <HAL_TIM_IC_CaptureCallback>
 80056c4:	e005      	b.n	80056d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f923 	bl	8005912 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f934 	bl	800593a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d020      	beq.n	8005724 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01b      	beq.n	8005724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0204 	mvn.w	r2, #4
 80056f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2202      	movs	r2, #2
 80056fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f90b 	bl	8005926 <HAL_TIM_IC_CaptureCallback>
 8005710:	e005      	b.n	800571e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f8fd 	bl	8005912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f90e 	bl	800593a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d020      	beq.n	8005770 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01b      	beq.n	8005770 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f06f 0208 	mvn.w	r2, #8
 8005740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2204      	movs	r2, #4
 8005746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f8e5 	bl	8005926 <HAL_TIM_IC_CaptureCallback>
 800575c:	e005      	b.n	800576a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f8d7 	bl	8005912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f8e8 	bl	800593a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2b00      	cmp	r3, #0
 8005778:	d020      	beq.n	80057bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f003 0310 	and.w	r3, r3, #16
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01b      	beq.n	80057bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0210 	mvn.w	r2, #16
 800578c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2208      	movs	r2, #8
 8005792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f8bf 	bl	8005926 <HAL_TIM_IC_CaptureCallback>
 80057a8:	e005      	b.n	80057b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f8b1 	bl	8005912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f8c2 	bl	800593a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00c      	beq.n	80057e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d007      	beq.n	80057e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0201 	mvn.w	r2, #1
 80057d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fb fdc0 	bl	8001360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d104      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00c      	beq.n	800580e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d007      	beq.n	800580e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f9d3 	bl	8005bb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00c      	beq.n	8005832 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581e:	2b00      	cmp	r3, #0
 8005820:	d007      	beq.n	8005832 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800582a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f9cb 	bl	8005bc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00c      	beq.n	8005856 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	d007      	beq.n	8005856 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800584e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f87c 	bl	800594e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00c      	beq.n	800587a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f003 0320 	and.w	r3, r3, #32
 8005866:	2b00      	cmp	r3, #0
 8005868:	d007      	beq.n	800587a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f06f 0220 	mvn.w	r2, #32
 8005872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f993 	bl	8005ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00c      	beq.n	800589e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d007      	beq.n	800589e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f99f 	bl	8005bdc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00c      	beq.n	80058c2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d007      	beq.n	80058c2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80058ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f997 	bl	8005bf0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00c      	beq.n	80058e6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d007      	beq.n	80058e6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80058de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f98f 	bl	8005c04 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00c      	beq.n	800590a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d007      	beq.n	800590a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f987 	bl	8005c18 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800590a:	bf00      	nop
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005942:	bf00      	nop
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
	...

08005964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a42      	ldr	r2, [pc, #264]	; (8005a80 <TIM_Base_SetConfig+0x11c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00f      	beq.n	800599c <TIM_Base_SetConfig+0x38>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005982:	d00b      	beq.n	800599c <TIM_Base_SetConfig+0x38>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a3f      	ldr	r2, [pc, #252]	; (8005a84 <TIM_Base_SetConfig+0x120>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d007      	beq.n	800599c <TIM_Base_SetConfig+0x38>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a3e      	ldr	r2, [pc, #248]	; (8005a88 <TIM_Base_SetConfig+0x124>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d003      	beq.n	800599c <TIM_Base_SetConfig+0x38>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a3d      	ldr	r2, [pc, #244]	; (8005a8c <TIM_Base_SetConfig+0x128>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d108      	bne.n	80059ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a33      	ldr	r2, [pc, #204]	; (8005a80 <TIM_Base_SetConfig+0x11c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d01b      	beq.n	80059ee <TIM_Base_SetConfig+0x8a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059bc:	d017      	beq.n	80059ee <TIM_Base_SetConfig+0x8a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a30      	ldr	r2, [pc, #192]	; (8005a84 <TIM_Base_SetConfig+0x120>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d013      	beq.n	80059ee <TIM_Base_SetConfig+0x8a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a2f      	ldr	r2, [pc, #188]	; (8005a88 <TIM_Base_SetConfig+0x124>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00f      	beq.n	80059ee <TIM_Base_SetConfig+0x8a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a2e      	ldr	r2, [pc, #184]	; (8005a8c <TIM_Base_SetConfig+0x128>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00b      	beq.n	80059ee <TIM_Base_SetConfig+0x8a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a2d      	ldr	r2, [pc, #180]	; (8005a90 <TIM_Base_SetConfig+0x12c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d007      	beq.n	80059ee <TIM_Base_SetConfig+0x8a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a2c      	ldr	r2, [pc, #176]	; (8005a94 <TIM_Base_SetConfig+0x130>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d003      	beq.n	80059ee <TIM_Base_SetConfig+0x8a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a2b      	ldr	r2, [pc, #172]	; (8005a98 <TIM_Base_SetConfig+0x134>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d108      	bne.n	8005a00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a16      	ldr	r2, [pc, #88]	; (8005a80 <TIM_Base_SetConfig+0x11c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00f      	beq.n	8005a4c <TIM_Base_SetConfig+0xe8>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a17      	ldr	r2, [pc, #92]	; (8005a8c <TIM_Base_SetConfig+0x128>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00b      	beq.n	8005a4c <TIM_Base_SetConfig+0xe8>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a16      	ldr	r2, [pc, #88]	; (8005a90 <TIM_Base_SetConfig+0x12c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d007      	beq.n	8005a4c <TIM_Base_SetConfig+0xe8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a15      	ldr	r2, [pc, #84]	; (8005a94 <TIM_Base_SetConfig+0x130>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d003      	beq.n	8005a4c <TIM_Base_SetConfig+0xe8>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a14      	ldr	r2, [pc, #80]	; (8005a98 <TIM_Base_SetConfig+0x134>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d103      	bne.n	8005a54 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	691a      	ldr	r2, [r3, #16]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d105      	bne.n	8005a72 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f023 0201 	bic.w	r2, r3, #1
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	611a      	str	r2, [r3, #16]
  }
}
 8005a72:	bf00      	nop
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	40012c00 	.word	0x40012c00
 8005a84:	40000400 	.word	0x40000400
 8005a88:	40000800 	.word	0x40000800
 8005a8c:	40013400 	.word	0x40013400
 8005a90:	40014000 	.word	0x40014000
 8005a94:	40014400 	.word	0x40014400
 8005a98:	40014800 	.word	0x40014800

08005a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d101      	bne.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	e065      	b.n	8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a2c      	ldr	r2, [pc, #176]	; (8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d004      	beq.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a2b      	ldr	r2, [pc, #172]	; (8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d108      	bne.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005aee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a1b      	ldr	r2, [pc, #108]	; (8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d018      	beq.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b2a:	d013      	beq.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a18      	ldr	r2, [pc, #96]	; (8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00e      	beq.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a17      	ldr	r2, [pc, #92]	; (8005b98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d009      	beq.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a12      	ldr	r2, [pc, #72]	; (8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d004      	beq.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a13      	ldr	r2, [pc, #76]	; (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d10c      	bne.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	40012c00 	.word	0x40012c00
 8005b90:	40013400 	.word	0x40013400
 8005b94:	40000400 	.word	0x40000400
 8005b98:	40000800 	.word	0x40000800
 8005b9c:	40014000 	.word	0x40014000

08005ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e042      	b.n	8005cc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d106      	bne.n	8005c56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7fc f86d 	bl	8001d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2224      	movs	r2, #36	; 0x24
 8005c5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0201 	bic.w	r2, r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fb82 	bl	8006380 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f8b3 	bl	8005de8 <UART_SetConfig>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e01b      	b.n	8005cc4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689a      	ldr	r2, [r3, #8]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005caa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fc01 	bl	80064c4 <UART_CheckIdleState>
 8005cc2:	4603      	mov	r3, r0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08a      	sub	sp, #40	; 0x28
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce2:	2b20      	cmp	r3, #32
 8005ce4:	d17b      	bne.n	8005dde <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <HAL_UART_Transmit+0x26>
 8005cec:	88fb      	ldrh	r3, [r7, #6]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e074      	b.n	8005de0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2221      	movs	r2, #33	; 0x21
 8005d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d06:	f7fc f9fd 	bl	8002104 <HAL_GetTick>
 8005d0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	88fa      	ldrh	r2, [r7, #6]
 8005d10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	88fa      	ldrh	r2, [r7, #6]
 8005d18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d24:	d108      	bne.n	8005d38 <HAL_UART_Transmit+0x6c>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d104      	bne.n	8005d38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	61bb      	str	r3, [r7, #24]
 8005d36:	e003      	b.n	8005d40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d40:	e030      	b.n	8005da4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	2180      	movs	r1, #128	; 0x80
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 fc63 	bl	8006618 <UART_WaitOnFlagUntilTimeout>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d005      	beq.n	8005d64 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e03d      	b.n	8005de0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10b      	bne.n	8005d82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	3302      	adds	r3, #2
 8005d7e:	61bb      	str	r3, [r7, #24]
 8005d80:	e007      	b.n	8005d92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	781a      	ldrb	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1c8      	bne.n	8005d42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2200      	movs	r2, #0
 8005db8:	2140      	movs	r1, #64	; 0x40
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 fc2c 	bl	8006618 <UART_WaitOnFlagUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d005      	beq.n	8005dd2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e006      	b.n	8005de0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	e000      	b.n	8005de0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005dde:	2302      	movs	r3, #2
  }
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3720      	adds	r7, #32
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dec:	b08c      	sub	sp, #48	; 0x30
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	431a      	orrs	r2, r3
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	431a      	orrs	r2, r3
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4bab      	ldr	r3, [pc, #684]	; (80060c4 <UART_SetConfig+0x2dc>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	6812      	ldr	r2, [r2, #0]
 8005e1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e20:	430b      	orrs	r3, r1
 8005e22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4aa0      	ldr	r2, [pc, #640]	; (80060c8 <UART_SetConfig+0x2e0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d004      	beq.n	8005e54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e50:	4313      	orrs	r3, r2
 8005e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005e5e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	6812      	ldr	r2, [r2, #0]
 8005e66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	f023 010f 	bic.w	r1, r3, #15
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a91      	ldr	r2, [pc, #580]	; (80060cc <UART_SetConfig+0x2e4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d125      	bne.n	8005ed8 <UART_SetConfig+0xf0>
 8005e8c:	4b90      	ldr	r3, [pc, #576]	; (80060d0 <UART_SetConfig+0x2e8>)
 8005e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	d81a      	bhi.n	8005ed0 <UART_SetConfig+0xe8>
 8005e9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <UART_SetConfig+0xb8>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005eb1 	.word	0x08005eb1
 8005ea4:	08005ec1 	.word	0x08005ec1
 8005ea8:	08005eb9 	.word	0x08005eb9
 8005eac:	08005ec9 	.word	0x08005ec9
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eb6:	e0d6      	b.n	8006066 <UART_SetConfig+0x27e>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ebe:	e0d2      	b.n	8006066 <UART_SetConfig+0x27e>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ec6:	e0ce      	b.n	8006066 <UART_SetConfig+0x27e>
 8005ec8:	2308      	movs	r3, #8
 8005eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ece:	e0ca      	b.n	8006066 <UART_SetConfig+0x27e>
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ed6:	e0c6      	b.n	8006066 <UART_SetConfig+0x27e>
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a7d      	ldr	r2, [pc, #500]	; (80060d4 <UART_SetConfig+0x2ec>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d138      	bne.n	8005f54 <UART_SetConfig+0x16c>
 8005ee2:	4b7b      	ldr	r3, [pc, #492]	; (80060d0 <UART_SetConfig+0x2e8>)
 8005ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee8:	f003 030c 	and.w	r3, r3, #12
 8005eec:	2b0c      	cmp	r3, #12
 8005eee:	d82d      	bhi.n	8005f4c <UART_SetConfig+0x164>
 8005ef0:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <UART_SetConfig+0x110>)
 8005ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef6:	bf00      	nop
 8005ef8:	08005f2d 	.word	0x08005f2d
 8005efc:	08005f4d 	.word	0x08005f4d
 8005f00:	08005f4d 	.word	0x08005f4d
 8005f04:	08005f4d 	.word	0x08005f4d
 8005f08:	08005f3d 	.word	0x08005f3d
 8005f0c:	08005f4d 	.word	0x08005f4d
 8005f10:	08005f4d 	.word	0x08005f4d
 8005f14:	08005f4d 	.word	0x08005f4d
 8005f18:	08005f35 	.word	0x08005f35
 8005f1c:	08005f4d 	.word	0x08005f4d
 8005f20:	08005f4d 	.word	0x08005f4d
 8005f24:	08005f4d 	.word	0x08005f4d
 8005f28:	08005f45 	.word	0x08005f45
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f32:	e098      	b.n	8006066 <UART_SetConfig+0x27e>
 8005f34:	2302      	movs	r3, #2
 8005f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f3a:	e094      	b.n	8006066 <UART_SetConfig+0x27e>
 8005f3c:	2304      	movs	r3, #4
 8005f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f42:	e090      	b.n	8006066 <UART_SetConfig+0x27e>
 8005f44:	2308      	movs	r3, #8
 8005f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f4a:	e08c      	b.n	8006066 <UART_SetConfig+0x27e>
 8005f4c:	2310      	movs	r3, #16
 8005f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f52:	e088      	b.n	8006066 <UART_SetConfig+0x27e>
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a5f      	ldr	r2, [pc, #380]	; (80060d8 <UART_SetConfig+0x2f0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d125      	bne.n	8005faa <UART_SetConfig+0x1c2>
 8005f5e:	4b5c      	ldr	r3, [pc, #368]	; (80060d0 <UART_SetConfig+0x2e8>)
 8005f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f68:	2b30      	cmp	r3, #48	; 0x30
 8005f6a:	d016      	beq.n	8005f9a <UART_SetConfig+0x1b2>
 8005f6c:	2b30      	cmp	r3, #48	; 0x30
 8005f6e:	d818      	bhi.n	8005fa2 <UART_SetConfig+0x1ba>
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d00a      	beq.n	8005f8a <UART_SetConfig+0x1a2>
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	d814      	bhi.n	8005fa2 <UART_SetConfig+0x1ba>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <UART_SetConfig+0x19a>
 8005f7c:	2b10      	cmp	r3, #16
 8005f7e:	d008      	beq.n	8005f92 <UART_SetConfig+0x1aa>
 8005f80:	e00f      	b.n	8005fa2 <UART_SetConfig+0x1ba>
 8005f82:	2300      	movs	r3, #0
 8005f84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f88:	e06d      	b.n	8006066 <UART_SetConfig+0x27e>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f90:	e069      	b.n	8006066 <UART_SetConfig+0x27e>
 8005f92:	2304      	movs	r3, #4
 8005f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f98:	e065      	b.n	8006066 <UART_SetConfig+0x27e>
 8005f9a:	2308      	movs	r3, #8
 8005f9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fa0:	e061      	b.n	8006066 <UART_SetConfig+0x27e>
 8005fa2:	2310      	movs	r3, #16
 8005fa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fa8:	e05d      	b.n	8006066 <UART_SetConfig+0x27e>
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a4b      	ldr	r2, [pc, #300]	; (80060dc <UART_SetConfig+0x2f4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d125      	bne.n	8006000 <UART_SetConfig+0x218>
 8005fb4:	4b46      	ldr	r3, [pc, #280]	; (80060d0 <UART_SetConfig+0x2e8>)
 8005fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005fbe:	2bc0      	cmp	r3, #192	; 0xc0
 8005fc0:	d016      	beq.n	8005ff0 <UART_SetConfig+0x208>
 8005fc2:	2bc0      	cmp	r3, #192	; 0xc0
 8005fc4:	d818      	bhi.n	8005ff8 <UART_SetConfig+0x210>
 8005fc6:	2b80      	cmp	r3, #128	; 0x80
 8005fc8:	d00a      	beq.n	8005fe0 <UART_SetConfig+0x1f8>
 8005fca:	2b80      	cmp	r3, #128	; 0x80
 8005fcc:	d814      	bhi.n	8005ff8 <UART_SetConfig+0x210>
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <UART_SetConfig+0x1f0>
 8005fd2:	2b40      	cmp	r3, #64	; 0x40
 8005fd4:	d008      	beq.n	8005fe8 <UART_SetConfig+0x200>
 8005fd6:	e00f      	b.n	8005ff8 <UART_SetConfig+0x210>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fde:	e042      	b.n	8006066 <UART_SetConfig+0x27e>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fe6:	e03e      	b.n	8006066 <UART_SetConfig+0x27e>
 8005fe8:	2304      	movs	r3, #4
 8005fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fee:	e03a      	b.n	8006066 <UART_SetConfig+0x27e>
 8005ff0:	2308      	movs	r3, #8
 8005ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ff6:	e036      	b.n	8006066 <UART_SetConfig+0x27e>
 8005ff8:	2310      	movs	r3, #16
 8005ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ffe:	e032      	b.n	8006066 <UART_SetConfig+0x27e>
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a30      	ldr	r2, [pc, #192]	; (80060c8 <UART_SetConfig+0x2e0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d12a      	bne.n	8006060 <UART_SetConfig+0x278>
 800600a:	4b31      	ldr	r3, [pc, #196]	; (80060d0 <UART_SetConfig+0x2e8>)
 800600c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006010:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006014:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006018:	d01a      	beq.n	8006050 <UART_SetConfig+0x268>
 800601a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800601e:	d81b      	bhi.n	8006058 <UART_SetConfig+0x270>
 8006020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006024:	d00c      	beq.n	8006040 <UART_SetConfig+0x258>
 8006026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800602a:	d815      	bhi.n	8006058 <UART_SetConfig+0x270>
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <UART_SetConfig+0x250>
 8006030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006034:	d008      	beq.n	8006048 <UART_SetConfig+0x260>
 8006036:	e00f      	b.n	8006058 <UART_SetConfig+0x270>
 8006038:	2300      	movs	r3, #0
 800603a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800603e:	e012      	b.n	8006066 <UART_SetConfig+0x27e>
 8006040:	2302      	movs	r3, #2
 8006042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006046:	e00e      	b.n	8006066 <UART_SetConfig+0x27e>
 8006048:	2304      	movs	r3, #4
 800604a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800604e:	e00a      	b.n	8006066 <UART_SetConfig+0x27e>
 8006050:	2308      	movs	r3, #8
 8006052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006056:	e006      	b.n	8006066 <UART_SetConfig+0x27e>
 8006058:	2310      	movs	r3, #16
 800605a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800605e:	e002      	b.n	8006066 <UART_SetConfig+0x27e>
 8006060:	2310      	movs	r3, #16
 8006062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a17      	ldr	r2, [pc, #92]	; (80060c8 <UART_SetConfig+0x2e0>)
 800606c:	4293      	cmp	r3, r2
 800606e:	f040 80a8 	bne.w	80061c2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006072:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006076:	2b08      	cmp	r3, #8
 8006078:	d834      	bhi.n	80060e4 <UART_SetConfig+0x2fc>
 800607a:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <UART_SetConfig+0x298>)
 800607c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006080:	080060a5 	.word	0x080060a5
 8006084:	080060e5 	.word	0x080060e5
 8006088:	080060ad 	.word	0x080060ad
 800608c:	080060e5 	.word	0x080060e5
 8006090:	080060b3 	.word	0x080060b3
 8006094:	080060e5 	.word	0x080060e5
 8006098:	080060e5 	.word	0x080060e5
 800609c:	080060e5 	.word	0x080060e5
 80060a0:	080060bb 	.word	0x080060bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060a4:	f7fe ffc2 	bl	800502c <HAL_RCC_GetPCLK1Freq>
 80060a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060aa:	e021      	b.n	80060f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060ac:	4b0c      	ldr	r3, [pc, #48]	; (80060e0 <UART_SetConfig+0x2f8>)
 80060ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060b0:	e01e      	b.n	80060f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060b2:	f7fe ff4d 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 80060b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060b8:	e01a      	b.n	80060f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060c0:	e016      	b.n	80060f0 <UART_SetConfig+0x308>
 80060c2:	bf00      	nop
 80060c4:	cfff69f3 	.word	0xcfff69f3
 80060c8:	40008000 	.word	0x40008000
 80060cc:	40013800 	.word	0x40013800
 80060d0:	40021000 	.word	0x40021000
 80060d4:	40004400 	.word	0x40004400
 80060d8:	40004800 	.word	0x40004800
 80060dc:	40004c00 	.word	0x40004c00
 80060e0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80060ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 812a 	beq.w	800634c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	4a9e      	ldr	r2, [pc, #632]	; (8006378 <UART_SetConfig+0x590>)
 80060fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006102:	461a      	mov	r2, r3
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	fbb3 f3f2 	udiv	r3, r3, r2
 800610a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	4613      	mov	r3, r2
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	4413      	add	r3, r2
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	429a      	cmp	r2, r3
 800611a:	d305      	bcc.n	8006128 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	429a      	cmp	r2, r3
 8006126:	d903      	bls.n	8006130 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800612e:	e10d      	b.n	800634c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	2200      	movs	r2, #0
 8006134:	60bb      	str	r3, [r7, #8]
 8006136:	60fa      	str	r2, [r7, #12]
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	4a8e      	ldr	r2, [pc, #568]	; (8006378 <UART_SetConfig+0x590>)
 800613e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006142:	b29b      	uxth	r3, r3
 8006144:	2200      	movs	r2, #0
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	607a      	str	r2, [r7, #4]
 800614a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800614e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006152:	f7fa fd51 	bl	8000bf8 <__aeabi_uldivmod>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	4610      	mov	r0, r2
 800615c:	4619      	mov	r1, r3
 800615e:	f04f 0200 	mov.w	r2, #0
 8006162:	f04f 0300 	mov.w	r3, #0
 8006166:	020b      	lsls	r3, r1, #8
 8006168:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800616c:	0202      	lsls	r2, r0, #8
 800616e:	6979      	ldr	r1, [r7, #20]
 8006170:	6849      	ldr	r1, [r1, #4]
 8006172:	0849      	lsrs	r1, r1, #1
 8006174:	2000      	movs	r0, #0
 8006176:	460c      	mov	r4, r1
 8006178:	4605      	mov	r5, r0
 800617a:	eb12 0804 	adds.w	r8, r2, r4
 800617e:	eb43 0905 	adc.w	r9, r3, r5
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	469a      	mov	sl, r3
 800618a:	4693      	mov	fp, r2
 800618c:	4652      	mov	r2, sl
 800618e:	465b      	mov	r3, fp
 8006190:	4640      	mov	r0, r8
 8006192:	4649      	mov	r1, r9
 8006194:	f7fa fd30 	bl	8000bf8 <__aeabi_uldivmod>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4613      	mov	r3, r2
 800619e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061a6:	d308      	bcc.n	80061ba <UART_SetConfig+0x3d2>
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ae:	d204      	bcs.n	80061ba <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6a3a      	ldr	r2, [r7, #32]
 80061b6:	60da      	str	r2, [r3, #12]
 80061b8:	e0c8      	b.n	800634c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80061c0:	e0c4      	b.n	800634c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ca:	d167      	bne.n	800629c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80061cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d828      	bhi.n	8006226 <UART_SetConfig+0x43e>
 80061d4:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <UART_SetConfig+0x3f4>)
 80061d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061da:	bf00      	nop
 80061dc:	08006201 	.word	0x08006201
 80061e0:	08006209 	.word	0x08006209
 80061e4:	08006211 	.word	0x08006211
 80061e8:	08006227 	.word	0x08006227
 80061ec:	08006217 	.word	0x08006217
 80061f0:	08006227 	.word	0x08006227
 80061f4:	08006227 	.word	0x08006227
 80061f8:	08006227 	.word	0x08006227
 80061fc:	0800621f 	.word	0x0800621f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006200:	f7fe ff14 	bl	800502c <HAL_RCC_GetPCLK1Freq>
 8006204:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006206:	e014      	b.n	8006232 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006208:	f7fe ff26 	bl	8005058 <HAL_RCC_GetPCLK2Freq>
 800620c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800620e:	e010      	b.n	8006232 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006210:	4b5a      	ldr	r3, [pc, #360]	; (800637c <UART_SetConfig+0x594>)
 8006212:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006214:	e00d      	b.n	8006232 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006216:	f7fe fe9b 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 800621a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800621c:	e009      	b.n	8006232 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800621e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006222:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006224:	e005      	b.n	8006232 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006226:	2300      	movs	r3, #0
 8006228:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006230:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 8089 	beq.w	800634c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	4a4e      	ldr	r2, [pc, #312]	; (8006378 <UART_SetConfig+0x590>)
 8006240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006244:	461a      	mov	r2, r3
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	fbb3 f3f2 	udiv	r3, r3, r2
 800624c:	005a      	lsls	r2, r3, #1
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	085b      	lsrs	r3, r3, #1
 8006254:	441a      	add	r2, r3
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	fbb2 f3f3 	udiv	r3, r2, r3
 800625e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	2b0f      	cmp	r3, #15
 8006264:	d916      	bls.n	8006294 <UART_SetConfig+0x4ac>
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800626c:	d212      	bcs.n	8006294 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	b29b      	uxth	r3, r3
 8006272:	f023 030f 	bic.w	r3, r3, #15
 8006276:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	085b      	lsrs	r3, r3, #1
 800627c:	b29b      	uxth	r3, r3
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	b29a      	uxth	r2, r3
 8006284:	8bfb      	ldrh	r3, [r7, #30]
 8006286:	4313      	orrs	r3, r2
 8006288:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	8bfa      	ldrh	r2, [r7, #30]
 8006290:	60da      	str	r2, [r3, #12]
 8006292:	e05b      	b.n	800634c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800629a:	e057      	b.n	800634c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800629c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d828      	bhi.n	80062f6 <UART_SetConfig+0x50e>
 80062a4:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <UART_SetConfig+0x4c4>)
 80062a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062aa:	bf00      	nop
 80062ac:	080062d1 	.word	0x080062d1
 80062b0:	080062d9 	.word	0x080062d9
 80062b4:	080062e1 	.word	0x080062e1
 80062b8:	080062f7 	.word	0x080062f7
 80062bc:	080062e7 	.word	0x080062e7
 80062c0:	080062f7 	.word	0x080062f7
 80062c4:	080062f7 	.word	0x080062f7
 80062c8:	080062f7 	.word	0x080062f7
 80062cc:	080062ef 	.word	0x080062ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062d0:	f7fe feac 	bl	800502c <HAL_RCC_GetPCLK1Freq>
 80062d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062d6:	e014      	b.n	8006302 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062d8:	f7fe febe 	bl	8005058 <HAL_RCC_GetPCLK2Freq>
 80062dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062de:	e010      	b.n	8006302 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062e0:	4b26      	ldr	r3, [pc, #152]	; (800637c <UART_SetConfig+0x594>)
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062e4:	e00d      	b.n	8006302 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062e6:	f7fe fe33 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 80062ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062ec:	e009      	b.n	8006302 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062f4:	e005      	b.n	8006302 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006300:	bf00      	nop
    }

    if (pclk != 0U)
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	2b00      	cmp	r3, #0
 8006306:	d021      	beq.n	800634c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	4a1a      	ldr	r2, [pc, #104]	; (8006378 <UART_SetConfig+0x590>)
 800630e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006312:	461a      	mov	r2, r3
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	fbb3 f2f2 	udiv	r2, r3, r2
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	085b      	lsrs	r3, r3, #1
 8006320:	441a      	add	r2, r3
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	fbb2 f3f3 	udiv	r3, r2, r3
 800632a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	2b0f      	cmp	r3, #15
 8006330:	d909      	bls.n	8006346 <UART_SetConfig+0x55e>
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006338:	d205      	bcs.n	8006346 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	b29a      	uxth	r2, r3
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	60da      	str	r2, [r3, #12]
 8006344:	e002      	b.n	800634c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	2201      	movs	r2, #1
 8006350:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	2201      	movs	r2, #1
 8006358:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2200      	movs	r2, #0
 8006360:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2200      	movs	r2, #0
 8006366:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006368:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800636c:	4618      	mov	r0, r3
 800636e:	3730      	adds	r7, #48	; 0x30
 8006370:	46bd      	mov	sp, r7
 8006372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006376:	bf00      	nop
 8006378:	08009564 	.word	0x08009564
 800637c:	00f42400 	.word	0x00f42400

08006380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638c:	f003 0308 	and.w	r3, r3, #8
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00a      	beq.n	80063aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00a      	beq.n	80063ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f2:	f003 0304 	and.w	r3, r3, #4
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006414:	f003 0310 	and.w	r3, r3, #16
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00a      	beq.n	8006432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645c:	2b00      	cmp	r3, #0
 800645e:	d01a      	beq.n	8006496 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800647e:	d10a      	bne.n	8006496 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	430a      	orrs	r2, r1
 8006494:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00a      	beq.n	80064b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	605a      	str	r2, [r3, #4]
  }
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b098      	sub	sp, #96	; 0x60
 80064c8:	af02      	add	r7, sp, #8
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064d4:	f7fb fe16 	bl	8002104 <HAL_GetTick>
 80064d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0308 	and.w	r3, r3, #8
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d12f      	bne.n	8006548 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064f0:	2200      	movs	r2, #0
 80064f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f88e 	bl	8006618 <UART_WaitOnFlagUntilTimeout>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d022      	beq.n	8006548 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650a:	e853 3f00 	ldrex	r3, [r3]
 800650e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006516:	653b      	str	r3, [r7, #80]	; 0x50
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	461a      	mov	r2, r3
 800651e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006520:	647b      	str	r3, [r7, #68]	; 0x44
 8006522:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006524:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006528:	e841 2300 	strex	r3, r2, [r1]
 800652c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800652e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e6      	bne.n	8006502 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2220      	movs	r2, #32
 8006538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e063      	b.n	8006610 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0304 	and.w	r3, r3, #4
 8006552:	2b04      	cmp	r3, #4
 8006554:	d149      	bne.n	80065ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006556:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800655e:	2200      	movs	r2, #0
 8006560:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f857 	bl	8006618 <UART_WaitOnFlagUntilTimeout>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d03c      	beq.n	80065ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	623b      	str	r3, [r7, #32]
   return(result);
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006584:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800658e:	633b      	str	r3, [r7, #48]	; 0x30
 8006590:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006592:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006596:	e841 2300 	strex	r3, r2, [r1]
 800659a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1e6      	bne.n	8006570 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3308      	adds	r3, #8
 80065a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f023 0301 	bic.w	r3, r3, #1
 80065b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3308      	adds	r3, #8
 80065c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065c2:	61fa      	str	r2, [r7, #28]
 80065c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	69b9      	ldr	r1, [r7, #24]
 80065c8:	69fa      	ldr	r2, [r7, #28]
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	617b      	str	r3, [r7, #20]
   return(result);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e5      	bne.n	80065a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e012      	b.n	8006610 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3758      	adds	r7, #88	; 0x58
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	4613      	mov	r3, r2
 8006626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006628:	e04f      	b.n	80066ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006630:	d04b      	beq.n	80066ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006632:	f7fb fd67 	bl	8002104 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	429a      	cmp	r2, r3
 8006640:	d302      	bcc.n	8006648 <UART_WaitOnFlagUntilTimeout+0x30>
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e04e      	b.n	80066ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b00      	cmp	r3, #0
 8006658:	d037      	beq.n	80066ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b80      	cmp	r3, #128	; 0x80
 800665e:	d034      	beq.n	80066ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	d031      	beq.n	80066ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	f003 0308 	and.w	r3, r3, #8
 8006670:	2b08      	cmp	r3, #8
 8006672:	d110      	bne.n	8006696 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2208      	movs	r2, #8
 800667a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 f838 	bl	80066f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2208      	movs	r2, #8
 8006686:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e029      	b.n	80066ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066a4:	d111      	bne.n	80066ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 f81e 	bl	80066f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2220      	movs	r2, #32
 80066ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e00f      	b.n	80066ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	69da      	ldr	r2, [r3, #28]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	4013      	ands	r3, r2
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	bf0c      	ite	eq
 80066da:	2301      	moveq	r3, #1
 80066dc:	2300      	movne	r3, #0
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	461a      	mov	r2, r3
 80066e2:	79fb      	ldrb	r3, [r7, #7]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d0a0      	beq.n	800662a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b095      	sub	sp, #84	; 0x54
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006702:	e853 3f00 	ldrex	r3, [r3]
 8006706:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800670e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	461a      	mov	r2, r3
 8006716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006718:	643b      	str	r3, [r7, #64]	; 0x40
 800671a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800671e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006720:	e841 2300 	strex	r3, r2, [r1]
 8006724:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1e6      	bne.n	80066fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3308      	adds	r3, #8
 8006732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	e853 3f00 	ldrex	r3, [r3]
 800673a:	61fb      	str	r3, [r7, #28]
   return(result);
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006742:	f023 0301 	bic.w	r3, r3, #1
 8006746:	64bb      	str	r3, [r7, #72]	; 0x48
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3308      	adds	r3, #8
 800674e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006750:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006752:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006758:	e841 2300 	strex	r3, r2, [r1]
 800675c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1e3      	bne.n	800672c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006768:	2b01      	cmp	r3, #1
 800676a:	d118      	bne.n	800679e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	e853 3f00 	ldrex	r3, [r3]
 8006778:	60bb      	str	r3, [r7, #8]
   return(result);
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f023 0310 	bic.w	r3, r3, #16
 8006780:	647b      	str	r3, [r7, #68]	; 0x44
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800678a:	61bb      	str	r3, [r7, #24]
 800678c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678e:	6979      	ldr	r1, [r7, #20]
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	e841 2300 	strex	r3, r2, [r1]
 8006796:	613b      	str	r3, [r7, #16]
   return(result);
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1e6      	bne.n	800676c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2220      	movs	r2, #32
 80067a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80067b2:	bf00      	nop
 80067b4:	3754      	adds	r7, #84	; 0x54
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80067be:	b480      	push	{r7}
 80067c0:	b085      	sub	sp, #20
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d101      	bne.n	80067d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80067d0:	2302      	movs	r3, #2
 80067d2:	e027      	b.n	8006824 <HAL_UARTEx_DisableFifoMode+0x66>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2224      	movs	r2, #36	; 0x24
 80067e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0201 	bic.w	r2, r2, #1
 80067fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006802:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2220      	movs	r2, #32
 8006816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006840:	2b01      	cmp	r3, #1
 8006842:	d101      	bne.n	8006848 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006844:	2302      	movs	r3, #2
 8006846:	e02d      	b.n	80068a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2224      	movs	r2, #36	; 0x24
 8006854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0201 	bic.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 f84f 	bl	8006928 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d101      	bne.n	80068c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80068c0:	2302      	movs	r3, #2
 80068c2:	e02d      	b.n	8006920 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2224      	movs	r2, #36	; 0x24
 80068d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 0201 	bic.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f811 	bl	8006928 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2220      	movs	r2, #32
 8006912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006934:	2b00      	cmp	r3, #0
 8006936:	d108      	bne.n	800694a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006948:	e031      	b.n	80069ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800694a:	2308      	movs	r3, #8
 800694c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800694e:	2308      	movs	r3, #8
 8006950:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	0e5b      	lsrs	r3, r3, #25
 800695a:	b2db      	uxtb	r3, r3
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	0f5b      	lsrs	r3, r3, #29
 800696a:	b2db      	uxtb	r3, r3
 800696c:	f003 0307 	and.w	r3, r3, #7
 8006970:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006972:	7bbb      	ldrb	r3, [r7, #14]
 8006974:	7b3a      	ldrb	r2, [r7, #12]
 8006976:	4911      	ldr	r1, [pc, #68]	; (80069bc <UARTEx_SetNbDataToProcess+0x94>)
 8006978:	5c8a      	ldrb	r2, [r1, r2]
 800697a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800697e:	7b3a      	ldrb	r2, [r7, #12]
 8006980:	490f      	ldr	r1, [pc, #60]	; (80069c0 <UARTEx_SetNbDataToProcess+0x98>)
 8006982:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006984:	fb93 f3f2 	sdiv	r3, r3, r2
 8006988:	b29a      	uxth	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006990:	7bfb      	ldrb	r3, [r7, #15]
 8006992:	7b7a      	ldrb	r2, [r7, #13]
 8006994:	4909      	ldr	r1, [pc, #36]	; (80069bc <UARTEx_SetNbDataToProcess+0x94>)
 8006996:	5c8a      	ldrb	r2, [r1, r2]
 8006998:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800699c:	7b7a      	ldrb	r2, [r7, #13]
 800699e:	4908      	ldr	r1, [pc, #32]	; (80069c0 <UARTEx_SetNbDataToProcess+0x98>)
 80069a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80069ae:	bf00      	nop
 80069b0:	3714      	adds	r7, #20
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	0800957c 	.word	0x0800957c
 80069c0:	08009584 	.word	0x08009584

080069c4 <__cvt>:
 80069c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069c8:	ec55 4b10 	vmov	r4, r5, d0
 80069cc:	2d00      	cmp	r5, #0
 80069ce:	460e      	mov	r6, r1
 80069d0:	4619      	mov	r1, r3
 80069d2:	462b      	mov	r3, r5
 80069d4:	bfbb      	ittet	lt
 80069d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80069da:	461d      	movlt	r5, r3
 80069dc:	2300      	movge	r3, #0
 80069de:	232d      	movlt	r3, #45	; 0x2d
 80069e0:	700b      	strb	r3, [r1, #0]
 80069e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80069e8:	4691      	mov	r9, r2
 80069ea:	f023 0820 	bic.w	r8, r3, #32
 80069ee:	bfbc      	itt	lt
 80069f0:	4622      	movlt	r2, r4
 80069f2:	4614      	movlt	r4, r2
 80069f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069f8:	d005      	beq.n	8006a06 <__cvt+0x42>
 80069fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80069fe:	d100      	bne.n	8006a02 <__cvt+0x3e>
 8006a00:	3601      	adds	r6, #1
 8006a02:	2102      	movs	r1, #2
 8006a04:	e000      	b.n	8006a08 <__cvt+0x44>
 8006a06:	2103      	movs	r1, #3
 8006a08:	ab03      	add	r3, sp, #12
 8006a0a:	9301      	str	r3, [sp, #4]
 8006a0c:	ab02      	add	r3, sp, #8
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	ec45 4b10 	vmov	d0, r4, r5
 8006a14:	4653      	mov	r3, sl
 8006a16:	4632      	mov	r2, r6
 8006a18:	f000 ffce 	bl	80079b8 <_dtoa_r>
 8006a1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a20:	4607      	mov	r7, r0
 8006a22:	d102      	bne.n	8006a2a <__cvt+0x66>
 8006a24:	f019 0f01 	tst.w	r9, #1
 8006a28:	d022      	beq.n	8006a70 <__cvt+0xac>
 8006a2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a2e:	eb07 0906 	add.w	r9, r7, r6
 8006a32:	d110      	bne.n	8006a56 <__cvt+0x92>
 8006a34:	783b      	ldrb	r3, [r7, #0]
 8006a36:	2b30      	cmp	r3, #48	; 0x30
 8006a38:	d10a      	bne.n	8006a50 <__cvt+0x8c>
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	4620      	mov	r0, r4
 8006a40:	4629      	mov	r1, r5
 8006a42:	f7fa f869 	bl	8000b18 <__aeabi_dcmpeq>
 8006a46:	b918      	cbnz	r0, 8006a50 <__cvt+0x8c>
 8006a48:	f1c6 0601 	rsb	r6, r6, #1
 8006a4c:	f8ca 6000 	str.w	r6, [sl]
 8006a50:	f8da 3000 	ldr.w	r3, [sl]
 8006a54:	4499      	add	r9, r3
 8006a56:	2200      	movs	r2, #0
 8006a58:	2300      	movs	r3, #0
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	f7fa f85b 	bl	8000b18 <__aeabi_dcmpeq>
 8006a62:	b108      	cbz	r0, 8006a68 <__cvt+0xa4>
 8006a64:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a68:	2230      	movs	r2, #48	; 0x30
 8006a6a:	9b03      	ldr	r3, [sp, #12]
 8006a6c:	454b      	cmp	r3, r9
 8006a6e:	d307      	bcc.n	8006a80 <__cvt+0xbc>
 8006a70:	9b03      	ldr	r3, [sp, #12]
 8006a72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a74:	1bdb      	subs	r3, r3, r7
 8006a76:	4638      	mov	r0, r7
 8006a78:	6013      	str	r3, [r2, #0]
 8006a7a:	b004      	add	sp, #16
 8006a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a80:	1c59      	adds	r1, r3, #1
 8006a82:	9103      	str	r1, [sp, #12]
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	e7f0      	b.n	8006a6a <__cvt+0xa6>

08006a88 <__exponent>:
 8006a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2900      	cmp	r1, #0
 8006a8e:	bfb8      	it	lt
 8006a90:	4249      	neglt	r1, r1
 8006a92:	f803 2b02 	strb.w	r2, [r3], #2
 8006a96:	bfb4      	ite	lt
 8006a98:	222d      	movlt	r2, #45	; 0x2d
 8006a9a:	222b      	movge	r2, #43	; 0x2b
 8006a9c:	2909      	cmp	r1, #9
 8006a9e:	7042      	strb	r2, [r0, #1]
 8006aa0:	dd2a      	ble.n	8006af8 <__exponent+0x70>
 8006aa2:	f10d 0207 	add.w	r2, sp, #7
 8006aa6:	4617      	mov	r7, r2
 8006aa8:	260a      	movs	r6, #10
 8006aaa:	4694      	mov	ip, r2
 8006aac:	fb91 f5f6 	sdiv	r5, r1, r6
 8006ab0:	fb06 1415 	mls	r4, r6, r5, r1
 8006ab4:	3430      	adds	r4, #48	; 0x30
 8006ab6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006aba:	460c      	mov	r4, r1
 8006abc:	2c63      	cmp	r4, #99	; 0x63
 8006abe:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	dcf1      	bgt.n	8006aaa <__exponent+0x22>
 8006ac6:	3130      	adds	r1, #48	; 0x30
 8006ac8:	f1ac 0402 	sub.w	r4, ip, #2
 8006acc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006ad0:	1c41      	adds	r1, r0, #1
 8006ad2:	4622      	mov	r2, r4
 8006ad4:	42ba      	cmp	r2, r7
 8006ad6:	d30a      	bcc.n	8006aee <__exponent+0x66>
 8006ad8:	f10d 0209 	add.w	r2, sp, #9
 8006adc:	eba2 020c 	sub.w	r2, r2, ip
 8006ae0:	42bc      	cmp	r4, r7
 8006ae2:	bf88      	it	hi
 8006ae4:	2200      	movhi	r2, #0
 8006ae6:	4413      	add	r3, r2
 8006ae8:	1a18      	subs	r0, r3, r0
 8006aea:	b003      	add	sp, #12
 8006aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aee:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006af2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006af6:	e7ed      	b.n	8006ad4 <__exponent+0x4c>
 8006af8:	2330      	movs	r3, #48	; 0x30
 8006afa:	3130      	adds	r1, #48	; 0x30
 8006afc:	7083      	strb	r3, [r0, #2]
 8006afe:	70c1      	strb	r1, [r0, #3]
 8006b00:	1d03      	adds	r3, r0, #4
 8006b02:	e7f1      	b.n	8006ae8 <__exponent+0x60>

08006b04 <_printf_float>:
 8006b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b08:	ed2d 8b02 	vpush	{d8}
 8006b0c:	b08d      	sub	sp, #52	; 0x34
 8006b0e:	460c      	mov	r4, r1
 8006b10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b14:	4616      	mov	r6, r2
 8006b16:	461f      	mov	r7, r3
 8006b18:	4605      	mov	r5, r0
 8006b1a:	f000 fe61 	bl	80077e0 <_localeconv_r>
 8006b1e:	f8d0 a000 	ldr.w	sl, [r0]
 8006b22:	4650      	mov	r0, sl
 8006b24:	f7f9 fbcc 	bl	80002c0 <strlen>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	930a      	str	r3, [sp, #40]	; 0x28
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	9305      	str	r3, [sp, #20]
 8006b30:	f8d8 3000 	ldr.w	r3, [r8]
 8006b34:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b38:	3307      	adds	r3, #7
 8006b3a:	f023 0307 	bic.w	r3, r3, #7
 8006b3e:	f103 0208 	add.w	r2, r3, #8
 8006b42:	f8c8 2000 	str.w	r2, [r8]
 8006b46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b4e:	9307      	str	r3, [sp, #28]
 8006b50:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b54:	ee08 0a10 	vmov	s16, r0
 8006b58:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006b5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b60:	4b9e      	ldr	r3, [pc, #632]	; (8006ddc <_printf_float+0x2d8>)
 8006b62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b66:	f7fa f809 	bl	8000b7c <__aeabi_dcmpun>
 8006b6a:	bb88      	cbnz	r0, 8006bd0 <_printf_float+0xcc>
 8006b6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b70:	4b9a      	ldr	r3, [pc, #616]	; (8006ddc <_printf_float+0x2d8>)
 8006b72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b76:	f7f9 ffe3 	bl	8000b40 <__aeabi_dcmple>
 8006b7a:	bb48      	cbnz	r0, 8006bd0 <_printf_float+0xcc>
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	2300      	movs	r3, #0
 8006b80:	4640      	mov	r0, r8
 8006b82:	4649      	mov	r1, r9
 8006b84:	f7f9 ffd2 	bl	8000b2c <__aeabi_dcmplt>
 8006b88:	b110      	cbz	r0, 8006b90 <_printf_float+0x8c>
 8006b8a:	232d      	movs	r3, #45	; 0x2d
 8006b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b90:	4a93      	ldr	r2, [pc, #588]	; (8006de0 <_printf_float+0x2dc>)
 8006b92:	4b94      	ldr	r3, [pc, #592]	; (8006de4 <_printf_float+0x2e0>)
 8006b94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006b98:	bf94      	ite	ls
 8006b9a:	4690      	movls	r8, r2
 8006b9c:	4698      	movhi	r8, r3
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	6123      	str	r3, [r4, #16]
 8006ba2:	9b05      	ldr	r3, [sp, #20]
 8006ba4:	f023 0304 	bic.w	r3, r3, #4
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	f04f 0900 	mov.w	r9, #0
 8006bae:	9700      	str	r7, [sp, #0]
 8006bb0:	4633      	mov	r3, r6
 8006bb2:	aa0b      	add	r2, sp, #44	; 0x2c
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	f000 fa82 	bl	80070c0 <_printf_common>
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	f040 8090 	bne.w	8006ce2 <_printf_float+0x1de>
 8006bc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bc6:	b00d      	add	sp, #52	; 0x34
 8006bc8:	ecbd 8b02 	vpop	{d8}
 8006bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd0:	4642      	mov	r2, r8
 8006bd2:	464b      	mov	r3, r9
 8006bd4:	4640      	mov	r0, r8
 8006bd6:	4649      	mov	r1, r9
 8006bd8:	f7f9 ffd0 	bl	8000b7c <__aeabi_dcmpun>
 8006bdc:	b140      	cbz	r0, 8006bf0 <_printf_float+0xec>
 8006bde:	464b      	mov	r3, r9
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	bfbc      	itt	lt
 8006be4:	232d      	movlt	r3, #45	; 0x2d
 8006be6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006bea:	4a7f      	ldr	r2, [pc, #508]	; (8006de8 <_printf_float+0x2e4>)
 8006bec:	4b7f      	ldr	r3, [pc, #508]	; (8006dec <_printf_float+0x2e8>)
 8006bee:	e7d1      	b.n	8006b94 <_printf_float+0x90>
 8006bf0:	6863      	ldr	r3, [r4, #4]
 8006bf2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006bf6:	9206      	str	r2, [sp, #24]
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	d13f      	bne.n	8006c7c <_printf_float+0x178>
 8006bfc:	2306      	movs	r3, #6
 8006bfe:	6063      	str	r3, [r4, #4]
 8006c00:	9b05      	ldr	r3, [sp, #20]
 8006c02:	6861      	ldr	r1, [r4, #4]
 8006c04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c08:	2300      	movs	r3, #0
 8006c0a:	9303      	str	r3, [sp, #12]
 8006c0c:	ab0a      	add	r3, sp, #40	; 0x28
 8006c0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c12:	ab09      	add	r3, sp, #36	; 0x24
 8006c14:	ec49 8b10 	vmov	d0, r8, r9
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	6022      	str	r2, [r4, #0]
 8006c1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c20:	4628      	mov	r0, r5
 8006c22:	f7ff fecf 	bl	80069c4 <__cvt>
 8006c26:	9b06      	ldr	r3, [sp, #24]
 8006c28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c2a:	2b47      	cmp	r3, #71	; 0x47
 8006c2c:	4680      	mov	r8, r0
 8006c2e:	d108      	bne.n	8006c42 <_printf_float+0x13e>
 8006c30:	1cc8      	adds	r0, r1, #3
 8006c32:	db02      	blt.n	8006c3a <_printf_float+0x136>
 8006c34:	6863      	ldr	r3, [r4, #4]
 8006c36:	4299      	cmp	r1, r3
 8006c38:	dd41      	ble.n	8006cbe <_printf_float+0x1ba>
 8006c3a:	f1ab 0302 	sub.w	r3, fp, #2
 8006c3e:	fa5f fb83 	uxtb.w	fp, r3
 8006c42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c46:	d820      	bhi.n	8006c8a <_printf_float+0x186>
 8006c48:	3901      	subs	r1, #1
 8006c4a:	465a      	mov	r2, fp
 8006c4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c50:	9109      	str	r1, [sp, #36]	; 0x24
 8006c52:	f7ff ff19 	bl	8006a88 <__exponent>
 8006c56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c58:	1813      	adds	r3, r2, r0
 8006c5a:	2a01      	cmp	r2, #1
 8006c5c:	4681      	mov	r9, r0
 8006c5e:	6123      	str	r3, [r4, #16]
 8006c60:	dc02      	bgt.n	8006c68 <_printf_float+0x164>
 8006c62:	6822      	ldr	r2, [r4, #0]
 8006c64:	07d2      	lsls	r2, r2, #31
 8006c66:	d501      	bpl.n	8006c6c <_printf_float+0x168>
 8006c68:	3301      	adds	r3, #1
 8006c6a:	6123      	str	r3, [r4, #16]
 8006c6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d09c      	beq.n	8006bae <_printf_float+0xaa>
 8006c74:	232d      	movs	r3, #45	; 0x2d
 8006c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c7a:	e798      	b.n	8006bae <_printf_float+0xaa>
 8006c7c:	9a06      	ldr	r2, [sp, #24]
 8006c7e:	2a47      	cmp	r2, #71	; 0x47
 8006c80:	d1be      	bne.n	8006c00 <_printf_float+0xfc>
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1bc      	bne.n	8006c00 <_printf_float+0xfc>
 8006c86:	2301      	movs	r3, #1
 8006c88:	e7b9      	b.n	8006bfe <_printf_float+0xfa>
 8006c8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006c8e:	d118      	bne.n	8006cc2 <_printf_float+0x1be>
 8006c90:	2900      	cmp	r1, #0
 8006c92:	6863      	ldr	r3, [r4, #4]
 8006c94:	dd0b      	ble.n	8006cae <_printf_float+0x1aa>
 8006c96:	6121      	str	r1, [r4, #16]
 8006c98:	b913      	cbnz	r3, 8006ca0 <_printf_float+0x19c>
 8006c9a:	6822      	ldr	r2, [r4, #0]
 8006c9c:	07d0      	lsls	r0, r2, #31
 8006c9e:	d502      	bpl.n	8006ca6 <_printf_float+0x1a2>
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	440b      	add	r3, r1
 8006ca4:	6123      	str	r3, [r4, #16]
 8006ca6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ca8:	f04f 0900 	mov.w	r9, #0
 8006cac:	e7de      	b.n	8006c6c <_printf_float+0x168>
 8006cae:	b913      	cbnz	r3, 8006cb6 <_printf_float+0x1b2>
 8006cb0:	6822      	ldr	r2, [r4, #0]
 8006cb2:	07d2      	lsls	r2, r2, #31
 8006cb4:	d501      	bpl.n	8006cba <_printf_float+0x1b6>
 8006cb6:	3302      	adds	r3, #2
 8006cb8:	e7f4      	b.n	8006ca4 <_printf_float+0x1a0>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e7f2      	b.n	8006ca4 <_printf_float+0x1a0>
 8006cbe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cc4:	4299      	cmp	r1, r3
 8006cc6:	db05      	blt.n	8006cd4 <_printf_float+0x1d0>
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	6121      	str	r1, [r4, #16]
 8006ccc:	07d8      	lsls	r0, r3, #31
 8006cce:	d5ea      	bpl.n	8006ca6 <_printf_float+0x1a2>
 8006cd0:	1c4b      	adds	r3, r1, #1
 8006cd2:	e7e7      	b.n	8006ca4 <_printf_float+0x1a0>
 8006cd4:	2900      	cmp	r1, #0
 8006cd6:	bfd4      	ite	le
 8006cd8:	f1c1 0202 	rsble	r2, r1, #2
 8006cdc:	2201      	movgt	r2, #1
 8006cde:	4413      	add	r3, r2
 8006ce0:	e7e0      	b.n	8006ca4 <_printf_float+0x1a0>
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	055a      	lsls	r2, r3, #21
 8006ce6:	d407      	bmi.n	8006cf8 <_printf_float+0x1f4>
 8006ce8:	6923      	ldr	r3, [r4, #16]
 8006cea:	4642      	mov	r2, r8
 8006cec:	4631      	mov	r1, r6
 8006cee:	4628      	mov	r0, r5
 8006cf0:	47b8      	blx	r7
 8006cf2:	3001      	adds	r0, #1
 8006cf4:	d12c      	bne.n	8006d50 <_printf_float+0x24c>
 8006cf6:	e764      	b.n	8006bc2 <_printf_float+0xbe>
 8006cf8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006cfc:	f240 80e0 	bls.w	8006ec0 <_printf_float+0x3bc>
 8006d00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d04:	2200      	movs	r2, #0
 8006d06:	2300      	movs	r3, #0
 8006d08:	f7f9 ff06 	bl	8000b18 <__aeabi_dcmpeq>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d034      	beq.n	8006d7a <_printf_float+0x276>
 8006d10:	4a37      	ldr	r2, [pc, #220]	; (8006df0 <_printf_float+0x2ec>)
 8006d12:	2301      	movs	r3, #1
 8006d14:	4631      	mov	r1, r6
 8006d16:	4628      	mov	r0, r5
 8006d18:	47b8      	blx	r7
 8006d1a:	3001      	adds	r0, #1
 8006d1c:	f43f af51 	beq.w	8006bc2 <_printf_float+0xbe>
 8006d20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d24:	429a      	cmp	r2, r3
 8006d26:	db02      	blt.n	8006d2e <_printf_float+0x22a>
 8006d28:	6823      	ldr	r3, [r4, #0]
 8006d2a:	07d8      	lsls	r0, r3, #31
 8006d2c:	d510      	bpl.n	8006d50 <_printf_float+0x24c>
 8006d2e:	ee18 3a10 	vmov	r3, s16
 8006d32:	4652      	mov	r2, sl
 8006d34:	4631      	mov	r1, r6
 8006d36:	4628      	mov	r0, r5
 8006d38:	47b8      	blx	r7
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	f43f af41 	beq.w	8006bc2 <_printf_float+0xbe>
 8006d40:	f04f 0800 	mov.w	r8, #0
 8006d44:	f104 091a 	add.w	r9, r4, #26
 8006d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	4543      	cmp	r3, r8
 8006d4e:	dc09      	bgt.n	8006d64 <_printf_float+0x260>
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	079b      	lsls	r3, r3, #30
 8006d54:	f100 8107 	bmi.w	8006f66 <_printf_float+0x462>
 8006d58:	68e0      	ldr	r0, [r4, #12]
 8006d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d5c:	4298      	cmp	r0, r3
 8006d5e:	bfb8      	it	lt
 8006d60:	4618      	movlt	r0, r3
 8006d62:	e730      	b.n	8006bc6 <_printf_float+0xc2>
 8006d64:	2301      	movs	r3, #1
 8006d66:	464a      	mov	r2, r9
 8006d68:	4631      	mov	r1, r6
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	47b8      	blx	r7
 8006d6e:	3001      	adds	r0, #1
 8006d70:	f43f af27 	beq.w	8006bc2 <_printf_float+0xbe>
 8006d74:	f108 0801 	add.w	r8, r8, #1
 8006d78:	e7e6      	b.n	8006d48 <_printf_float+0x244>
 8006d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	dc39      	bgt.n	8006df4 <_printf_float+0x2f0>
 8006d80:	4a1b      	ldr	r2, [pc, #108]	; (8006df0 <_printf_float+0x2ec>)
 8006d82:	2301      	movs	r3, #1
 8006d84:	4631      	mov	r1, r6
 8006d86:	4628      	mov	r0, r5
 8006d88:	47b8      	blx	r7
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	f43f af19 	beq.w	8006bc2 <_printf_float+0xbe>
 8006d90:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006d94:	4313      	orrs	r3, r2
 8006d96:	d102      	bne.n	8006d9e <_printf_float+0x29a>
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	07d9      	lsls	r1, r3, #31
 8006d9c:	d5d8      	bpl.n	8006d50 <_printf_float+0x24c>
 8006d9e:	ee18 3a10 	vmov	r3, s16
 8006da2:	4652      	mov	r2, sl
 8006da4:	4631      	mov	r1, r6
 8006da6:	4628      	mov	r0, r5
 8006da8:	47b8      	blx	r7
 8006daa:	3001      	adds	r0, #1
 8006dac:	f43f af09 	beq.w	8006bc2 <_printf_float+0xbe>
 8006db0:	f04f 0900 	mov.w	r9, #0
 8006db4:	f104 0a1a 	add.w	sl, r4, #26
 8006db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dba:	425b      	negs	r3, r3
 8006dbc:	454b      	cmp	r3, r9
 8006dbe:	dc01      	bgt.n	8006dc4 <_printf_float+0x2c0>
 8006dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dc2:	e792      	b.n	8006cea <_printf_float+0x1e6>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	4652      	mov	r2, sl
 8006dc8:	4631      	mov	r1, r6
 8006dca:	4628      	mov	r0, r5
 8006dcc:	47b8      	blx	r7
 8006dce:	3001      	adds	r0, #1
 8006dd0:	f43f aef7 	beq.w	8006bc2 <_printf_float+0xbe>
 8006dd4:	f109 0901 	add.w	r9, r9, #1
 8006dd8:	e7ee      	b.n	8006db8 <_printf_float+0x2b4>
 8006dda:	bf00      	nop
 8006ddc:	7fefffff 	.word	0x7fefffff
 8006de0:	0800958c 	.word	0x0800958c
 8006de4:	08009590 	.word	0x08009590
 8006de8:	08009594 	.word	0x08009594
 8006dec:	08009598 	.word	0x08009598
 8006df0:	0800959c 	.word	0x0800959c
 8006df4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006df6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	bfa8      	it	ge
 8006dfc:	461a      	movge	r2, r3
 8006dfe:	2a00      	cmp	r2, #0
 8006e00:	4691      	mov	r9, r2
 8006e02:	dc37      	bgt.n	8006e74 <_printf_float+0x370>
 8006e04:	f04f 0b00 	mov.w	fp, #0
 8006e08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e0c:	f104 021a 	add.w	r2, r4, #26
 8006e10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e12:	9305      	str	r3, [sp, #20]
 8006e14:	eba3 0309 	sub.w	r3, r3, r9
 8006e18:	455b      	cmp	r3, fp
 8006e1a:	dc33      	bgt.n	8006e84 <_printf_float+0x380>
 8006e1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e20:	429a      	cmp	r2, r3
 8006e22:	db3b      	blt.n	8006e9c <_printf_float+0x398>
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	07da      	lsls	r2, r3, #31
 8006e28:	d438      	bmi.n	8006e9c <_printf_float+0x398>
 8006e2a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006e2e:	eba2 0903 	sub.w	r9, r2, r3
 8006e32:	9b05      	ldr	r3, [sp, #20]
 8006e34:	1ad2      	subs	r2, r2, r3
 8006e36:	4591      	cmp	r9, r2
 8006e38:	bfa8      	it	ge
 8006e3a:	4691      	movge	r9, r2
 8006e3c:	f1b9 0f00 	cmp.w	r9, #0
 8006e40:	dc35      	bgt.n	8006eae <_printf_float+0x3aa>
 8006e42:	f04f 0800 	mov.w	r8, #0
 8006e46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e4a:	f104 0a1a 	add.w	sl, r4, #26
 8006e4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e52:	1a9b      	subs	r3, r3, r2
 8006e54:	eba3 0309 	sub.w	r3, r3, r9
 8006e58:	4543      	cmp	r3, r8
 8006e5a:	f77f af79 	ble.w	8006d50 <_printf_float+0x24c>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	4652      	mov	r2, sl
 8006e62:	4631      	mov	r1, r6
 8006e64:	4628      	mov	r0, r5
 8006e66:	47b8      	blx	r7
 8006e68:	3001      	adds	r0, #1
 8006e6a:	f43f aeaa 	beq.w	8006bc2 <_printf_float+0xbe>
 8006e6e:	f108 0801 	add.w	r8, r8, #1
 8006e72:	e7ec      	b.n	8006e4e <_printf_float+0x34a>
 8006e74:	4613      	mov	r3, r2
 8006e76:	4631      	mov	r1, r6
 8006e78:	4642      	mov	r2, r8
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	47b8      	blx	r7
 8006e7e:	3001      	adds	r0, #1
 8006e80:	d1c0      	bne.n	8006e04 <_printf_float+0x300>
 8006e82:	e69e      	b.n	8006bc2 <_printf_float+0xbe>
 8006e84:	2301      	movs	r3, #1
 8006e86:	4631      	mov	r1, r6
 8006e88:	4628      	mov	r0, r5
 8006e8a:	9205      	str	r2, [sp, #20]
 8006e8c:	47b8      	blx	r7
 8006e8e:	3001      	adds	r0, #1
 8006e90:	f43f ae97 	beq.w	8006bc2 <_printf_float+0xbe>
 8006e94:	9a05      	ldr	r2, [sp, #20]
 8006e96:	f10b 0b01 	add.w	fp, fp, #1
 8006e9a:	e7b9      	b.n	8006e10 <_printf_float+0x30c>
 8006e9c:	ee18 3a10 	vmov	r3, s16
 8006ea0:	4652      	mov	r2, sl
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	47b8      	blx	r7
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	d1be      	bne.n	8006e2a <_printf_float+0x326>
 8006eac:	e689      	b.n	8006bc2 <_printf_float+0xbe>
 8006eae:	9a05      	ldr	r2, [sp, #20]
 8006eb0:	464b      	mov	r3, r9
 8006eb2:	4442      	add	r2, r8
 8006eb4:	4631      	mov	r1, r6
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	47b8      	blx	r7
 8006eba:	3001      	adds	r0, #1
 8006ebc:	d1c1      	bne.n	8006e42 <_printf_float+0x33e>
 8006ebe:	e680      	b.n	8006bc2 <_printf_float+0xbe>
 8006ec0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ec2:	2a01      	cmp	r2, #1
 8006ec4:	dc01      	bgt.n	8006eca <_printf_float+0x3c6>
 8006ec6:	07db      	lsls	r3, r3, #31
 8006ec8:	d53a      	bpl.n	8006f40 <_printf_float+0x43c>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	4642      	mov	r2, r8
 8006ece:	4631      	mov	r1, r6
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	47b8      	blx	r7
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	f43f ae74 	beq.w	8006bc2 <_printf_float+0xbe>
 8006eda:	ee18 3a10 	vmov	r3, s16
 8006ede:	4652      	mov	r2, sl
 8006ee0:	4631      	mov	r1, r6
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	47b8      	blx	r7
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	f43f ae6b 	beq.w	8006bc2 <_printf_float+0xbe>
 8006eec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006ef8:	f7f9 fe0e 	bl	8000b18 <__aeabi_dcmpeq>
 8006efc:	b9d8      	cbnz	r0, 8006f36 <_printf_float+0x432>
 8006efe:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006f02:	f108 0201 	add.w	r2, r8, #1
 8006f06:	4631      	mov	r1, r6
 8006f08:	4628      	mov	r0, r5
 8006f0a:	47b8      	blx	r7
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d10e      	bne.n	8006f2e <_printf_float+0x42a>
 8006f10:	e657      	b.n	8006bc2 <_printf_float+0xbe>
 8006f12:	2301      	movs	r3, #1
 8006f14:	4652      	mov	r2, sl
 8006f16:	4631      	mov	r1, r6
 8006f18:	4628      	mov	r0, r5
 8006f1a:	47b8      	blx	r7
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	f43f ae50 	beq.w	8006bc2 <_printf_float+0xbe>
 8006f22:	f108 0801 	add.w	r8, r8, #1
 8006f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	4543      	cmp	r3, r8
 8006f2c:	dcf1      	bgt.n	8006f12 <_printf_float+0x40e>
 8006f2e:	464b      	mov	r3, r9
 8006f30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f34:	e6da      	b.n	8006cec <_printf_float+0x1e8>
 8006f36:	f04f 0800 	mov.w	r8, #0
 8006f3a:	f104 0a1a 	add.w	sl, r4, #26
 8006f3e:	e7f2      	b.n	8006f26 <_printf_float+0x422>
 8006f40:	2301      	movs	r3, #1
 8006f42:	4642      	mov	r2, r8
 8006f44:	e7df      	b.n	8006f06 <_printf_float+0x402>
 8006f46:	2301      	movs	r3, #1
 8006f48:	464a      	mov	r2, r9
 8006f4a:	4631      	mov	r1, r6
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	47b8      	blx	r7
 8006f50:	3001      	adds	r0, #1
 8006f52:	f43f ae36 	beq.w	8006bc2 <_printf_float+0xbe>
 8006f56:	f108 0801 	add.w	r8, r8, #1
 8006f5a:	68e3      	ldr	r3, [r4, #12]
 8006f5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f5e:	1a5b      	subs	r3, r3, r1
 8006f60:	4543      	cmp	r3, r8
 8006f62:	dcf0      	bgt.n	8006f46 <_printf_float+0x442>
 8006f64:	e6f8      	b.n	8006d58 <_printf_float+0x254>
 8006f66:	f04f 0800 	mov.w	r8, #0
 8006f6a:	f104 0919 	add.w	r9, r4, #25
 8006f6e:	e7f4      	b.n	8006f5a <_printf_float+0x456>

08006f70 <malloc>:
 8006f70:	4b02      	ldr	r3, [pc, #8]	; (8006f7c <malloc+0xc>)
 8006f72:	4601      	mov	r1, r0
 8006f74:	6818      	ldr	r0, [r3, #0]
 8006f76:	f000 b823 	b.w	8006fc0 <_malloc_r>
 8006f7a:	bf00      	nop
 8006f7c:	20000064 	.word	0x20000064

08006f80 <sbrk_aligned>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	4e0e      	ldr	r6, [pc, #56]	; (8006fbc <sbrk_aligned+0x3c>)
 8006f84:	460c      	mov	r4, r1
 8006f86:	6831      	ldr	r1, [r6, #0]
 8006f88:	4605      	mov	r5, r0
 8006f8a:	b911      	cbnz	r1, 8006f92 <sbrk_aligned+0x12>
 8006f8c:	f000 fc4e 	bl	800782c <_sbrk_r>
 8006f90:	6030      	str	r0, [r6, #0]
 8006f92:	4621      	mov	r1, r4
 8006f94:	4628      	mov	r0, r5
 8006f96:	f000 fc49 	bl	800782c <_sbrk_r>
 8006f9a:	1c43      	adds	r3, r0, #1
 8006f9c:	d00a      	beq.n	8006fb4 <sbrk_aligned+0x34>
 8006f9e:	1cc4      	adds	r4, r0, #3
 8006fa0:	f024 0403 	bic.w	r4, r4, #3
 8006fa4:	42a0      	cmp	r0, r4
 8006fa6:	d007      	beq.n	8006fb8 <sbrk_aligned+0x38>
 8006fa8:	1a21      	subs	r1, r4, r0
 8006faa:	4628      	mov	r0, r5
 8006fac:	f000 fc3e 	bl	800782c <_sbrk_r>
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	d101      	bne.n	8006fb8 <sbrk_aligned+0x38>
 8006fb4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006fb8:	4620      	mov	r0, r4
 8006fba:	bd70      	pop	{r4, r5, r6, pc}
 8006fbc:	200004f8 	.word	0x200004f8

08006fc0 <_malloc_r>:
 8006fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc4:	1ccd      	adds	r5, r1, #3
 8006fc6:	f025 0503 	bic.w	r5, r5, #3
 8006fca:	3508      	adds	r5, #8
 8006fcc:	2d0c      	cmp	r5, #12
 8006fce:	bf38      	it	cc
 8006fd0:	250c      	movcc	r5, #12
 8006fd2:	2d00      	cmp	r5, #0
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	db01      	blt.n	8006fdc <_malloc_r+0x1c>
 8006fd8:	42a9      	cmp	r1, r5
 8006fda:	d905      	bls.n	8006fe8 <_malloc_r+0x28>
 8006fdc:	230c      	movs	r3, #12
 8006fde:	603b      	str	r3, [r7, #0]
 8006fe0:	2600      	movs	r6, #0
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fe8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80070bc <_malloc_r+0xfc>
 8006fec:	f000 faae 	bl	800754c <__malloc_lock>
 8006ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ff4:	461c      	mov	r4, r3
 8006ff6:	bb5c      	cbnz	r4, 8007050 <_malloc_r+0x90>
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	f7ff ffc0 	bl	8006f80 <sbrk_aligned>
 8007000:	1c43      	adds	r3, r0, #1
 8007002:	4604      	mov	r4, r0
 8007004:	d155      	bne.n	80070b2 <_malloc_r+0xf2>
 8007006:	f8d8 4000 	ldr.w	r4, [r8]
 800700a:	4626      	mov	r6, r4
 800700c:	2e00      	cmp	r6, #0
 800700e:	d145      	bne.n	800709c <_malloc_r+0xdc>
 8007010:	2c00      	cmp	r4, #0
 8007012:	d048      	beq.n	80070a6 <_malloc_r+0xe6>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	4631      	mov	r1, r6
 8007018:	4638      	mov	r0, r7
 800701a:	eb04 0903 	add.w	r9, r4, r3
 800701e:	f000 fc05 	bl	800782c <_sbrk_r>
 8007022:	4581      	cmp	r9, r0
 8007024:	d13f      	bne.n	80070a6 <_malloc_r+0xe6>
 8007026:	6821      	ldr	r1, [r4, #0]
 8007028:	1a6d      	subs	r5, r5, r1
 800702a:	4629      	mov	r1, r5
 800702c:	4638      	mov	r0, r7
 800702e:	f7ff ffa7 	bl	8006f80 <sbrk_aligned>
 8007032:	3001      	adds	r0, #1
 8007034:	d037      	beq.n	80070a6 <_malloc_r+0xe6>
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	442b      	add	r3, r5
 800703a:	6023      	str	r3, [r4, #0]
 800703c:	f8d8 3000 	ldr.w	r3, [r8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d038      	beq.n	80070b6 <_malloc_r+0xf6>
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	42a2      	cmp	r2, r4
 8007048:	d12b      	bne.n	80070a2 <_malloc_r+0xe2>
 800704a:	2200      	movs	r2, #0
 800704c:	605a      	str	r2, [r3, #4]
 800704e:	e00f      	b.n	8007070 <_malloc_r+0xb0>
 8007050:	6822      	ldr	r2, [r4, #0]
 8007052:	1b52      	subs	r2, r2, r5
 8007054:	d41f      	bmi.n	8007096 <_malloc_r+0xd6>
 8007056:	2a0b      	cmp	r2, #11
 8007058:	d917      	bls.n	800708a <_malloc_r+0xca>
 800705a:	1961      	adds	r1, r4, r5
 800705c:	42a3      	cmp	r3, r4
 800705e:	6025      	str	r5, [r4, #0]
 8007060:	bf18      	it	ne
 8007062:	6059      	strne	r1, [r3, #4]
 8007064:	6863      	ldr	r3, [r4, #4]
 8007066:	bf08      	it	eq
 8007068:	f8c8 1000 	streq.w	r1, [r8]
 800706c:	5162      	str	r2, [r4, r5]
 800706e:	604b      	str	r3, [r1, #4]
 8007070:	4638      	mov	r0, r7
 8007072:	f104 060b 	add.w	r6, r4, #11
 8007076:	f000 fa6f 	bl	8007558 <__malloc_unlock>
 800707a:	f026 0607 	bic.w	r6, r6, #7
 800707e:	1d23      	adds	r3, r4, #4
 8007080:	1af2      	subs	r2, r6, r3
 8007082:	d0ae      	beq.n	8006fe2 <_malloc_r+0x22>
 8007084:	1b9b      	subs	r3, r3, r6
 8007086:	50a3      	str	r3, [r4, r2]
 8007088:	e7ab      	b.n	8006fe2 <_malloc_r+0x22>
 800708a:	42a3      	cmp	r3, r4
 800708c:	6862      	ldr	r2, [r4, #4]
 800708e:	d1dd      	bne.n	800704c <_malloc_r+0x8c>
 8007090:	f8c8 2000 	str.w	r2, [r8]
 8007094:	e7ec      	b.n	8007070 <_malloc_r+0xb0>
 8007096:	4623      	mov	r3, r4
 8007098:	6864      	ldr	r4, [r4, #4]
 800709a:	e7ac      	b.n	8006ff6 <_malloc_r+0x36>
 800709c:	4634      	mov	r4, r6
 800709e:	6876      	ldr	r6, [r6, #4]
 80070a0:	e7b4      	b.n	800700c <_malloc_r+0x4c>
 80070a2:	4613      	mov	r3, r2
 80070a4:	e7cc      	b.n	8007040 <_malloc_r+0x80>
 80070a6:	230c      	movs	r3, #12
 80070a8:	603b      	str	r3, [r7, #0]
 80070aa:	4638      	mov	r0, r7
 80070ac:	f000 fa54 	bl	8007558 <__malloc_unlock>
 80070b0:	e797      	b.n	8006fe2 <_malloc_r+0x22>
 80070b2:	6025      	str	r5, [r4, #0]
 80070b4:	e7dc      	b.n	8007070 <_malloc_r+0xb0>
 80070b6:	605b      	str	r3, [r3, #4]
 80070b8:	deff      	udf	#255	; 0xff
 80070ba:	bf00      	nop
 80070bc:	200004f4 	.word	0x200004f4

080070c0 <_printf_common>:
 80070c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c4:	4616      	mov	r6, r2
 80070c6:	4699      	mov	r9, r3
 80070c8:	688a      	ldr	r2, [r1, #8]
 80070ca:	690b      	ldr	r3, [r1, #16]
 80070cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070d0:	4293      	cmp	r3, r2
 80070d2:	bfb8      	it	lt
 80070d4:	4613      	movlt	r3, r2
 80070d6:	6033      	str	r3, [r6, #0]
 80070d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070dc:	4607      	mov	r7, r0
 80070de:	460c      	mov	r4, r1
 80070e0:	b10a      	cbz	r2, 80070e6 <_printf_common+0x26>
 80070e2:	3301      	adds	r3, #1
 80070e4:	6033      	str	r3, [r6, #0]
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	0699      	lsls	r1, r3, #26
 80070ea:	bf42      	ittt	mi
 80070ec:	6833      	ldrmi	r3, [r6, #0]
 80070ee:	3302      	addmi	r3, #2
 80070f0:	6033      	strmi	r3, [r6, #0]
 80070f2:	6825      	ldr	r5, [r4, #0]
 80070f4:	f015 0506 	ands.w	r5, r5, #6
 80070f8:	d106      	bne.n	8007108 <_printf_common+0x48>
 80070fa:	f104 0a19 	add.w	sl, r4, #25
 80070fe:	68e3      	ldr	r3, [r4, #12]
 8007100:	6832      	ldr	r2, [r6, #0]
 8007102:	1a9b      	subs	r3, r3, r2
 8007104:	42ab      	cmp	r3, r5
 8007106:	dc26      	bgt.n	8007156 <_printf_common+0x96>
 8007108:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800710c:	1e13      	subs	r3, r2, #0
 800710e:	6822      	ldr	r2, [r4, #0]
 8007110:	bf18      	it	ne
 8007112:	2301      	movne	r3, #1
 8007114:	0692      	lsls	r2, r2, #26
 8007116:	d42b      	bmi.n	8007170 <_printf_common+0xb0>
 8007118:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800711c:	4649      	mov	r1, r9
 800711e:	4638      	mov	r0, r7
 8007120:	47c0      	blx	r8
 8007122:	3001      	adds	r0, #1
 8007124:	d01e      	beq.n	8007164 <_printf_common+0xa4>
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	6922      	ldr	r2, [r4, #16]
 800712a:	f003 0306 	and.w	r3, r3, #6
 800712e:	2b04      	cmp	r3, #4
 8007130:	bf02      	ittt	eq
 8007132:	68e5      	ldreq	r5, [r4, #12]
 8007134:	6833      	ldreq	r3, [r6, #0]
 8007136:	1aed      	subeq	r5, r5, r3
 8007138:	68a3      	ldr	r3, [r4, #8]
 800713a:	bf0c      	ite	eq
 800713c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007140:	2500      	movne	r5, #0
 8007142:	4293      	cmp	r3, r2
 8007144:	bfc4      	itt	gt
 8007146:	1a9b      	subgt	r3, r3, r2
 8007148:	18ed      	addgt	r5, r5, r3
 800714a:	2600      	movs	r6, #0
 800714c:	341a      	adds	r4, #26
 800714e:	42b5      	cmp	r5, r6
 8007150:	d11a      	bne.n	8007188 <_printf_common+0xc8>
 8007152:	2000      	movs	r0, #0
 8007154:	e008      	b.n	8007168 <_printf_common+0xa8>
 8007156:	2301      	movs	r3, #1
 8007158:	4652      	mov	r2, sl
 800715a:	4649      	mov	r1, r9
 800715c:	4638      	mov	r0, r7
 800715e:	47c0      	blx	r8
 8007160:	3001      	adds	r0, #1
 8007162:	d103      	bne.n	800716c <_printf_common+0xac>
 8007164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800716c:	3501      	adds	r5, #1
 800716e:	e7c6      	b.n	80070fe <_printf_common+0x3e>
 8007170:	18e1      	adds	r1, r4, r3
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	2030      	movs	r0, #48	; 0x30
 8007176:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800717a:	4422      	add	r2, r4
 800717c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007180:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007184:	3302      	adds	r3, #2
 8007186:	e7c7      	b.n	8007118 <_printf_common+0x58>
 8007188:	2301      	movs	r3, #1
 800718a:	4622      	mov	r2, r4
 800718c:	4649      	mov	r1, r9
 800718e:	4638      	mov	r0, r7
 8007190:	47c0      	blx	r8
 8007192:	3001      	adds	r0, #1
 8007194:	d0e6      	beq.n	8007164 <_printf_common+0xa4>
 8007196:	3601      	adds	r6, #1
 8007198:	e7d9      	b.n	800714e <_printf_common+0x8e>
	...

0800719c <_printf_i>:
 800719c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071a0:	7e0f      	ldrb	r7, [r1, #24]
 80071a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071a4:	2f78      	cmp	r7, #120	; 0x78
 80071a6:	4691      	mov	r9, r2
 80071a8:	4680      	mov	r8, r0
 80071aa:	460c      	mov	r4, r1
 80071ac:	469a      	mov	sl, r3
 80071ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071b2:	d807      	bhi.n	80071c4 <_printf_i+0x28>
 80071b4:	2f62      	cmp	r7, #98	; 0x62
 80071b6:	d80a      	bhi.n	80071ce <_printf_i+0x32>
 80071b8:	2f00      	cmp	r7, #0
 80071ba:	f000 80d4 	beq.w	8007366 <_printf_i+0x1ca>
 80071be:	2f58      	cmp	r7, #88	; 0x58
 80071c0:	f000 80c0 	beq.w	8007344 <_printf_i+0x1a8>
 80071c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071cc:	e03a      	b.n	8007244 <_printf_i+0xa8>
 80071ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071d2:	2b15      	cmp	r3, #21
 80071d4:	d8f6      	bhi.n	80071c4 <_printf_i+0x28>
 80071d6:	a101      	add	r1, pc, #4	; (adr r1, 80071dc <_printf_i+0x40>)
 80071d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071dc:	08007235 	.word	0x08007235
 80071e0:	08007249 	.word	0x08007249
 80071e4:	080071c5 	.word	0x080071c5
 80071e8:	080071c5 	.word	0x080071c5
 80071ec:	080071c5 	.word	0x080071c5
 80071f0:	080071c5 	.word	0x080071c5
 80071f4:	08007249 	.word	0x08007249
 80071f8:	080071c5 	.word	0x080071c5
 80071fc:	080071c5 	.word	0x080071c5
 8007200:	080071c5 	.word	0x080071c5
 8007204:	080071c5 	.word	0x080071c5
 8007208:	0800734d 	.word	0x0800734d
 800720c:	08007275 	.word	0x08007275
 8007210:	08007307 	.word	0x08007307
 8007214:	080071c5 	.word	0x080071c5
 8007218:	080071c5 	.word	0x080071c5
 800721c:	0800736f 	.word	0x0800736f
 8007220:	080071c5 	.word	0x080071c5
 8007224:	08007275 	.word	0x08007275
 8007228:	080071c5 	.word	0x080071c5
 800722c:	080071c5 	.word	0x080071c5
 8007230:	0800730f 	.word	0x0800730f
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	1d1a      	adds	r2, r3, #4
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	602a      	str	r2, [r5, #0]
 800723c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007244:	2301      	movs	r3, #1
 8007246:	e09f      	b.n	8007388 <_printf_i+0x1ec>
 8007248:	6820      	ldr	r0, [r4, #0]
 800724a:	682b      	ldr	r3, [r5, #0]
 800724c:	0607      	lsls	r7, r0, #24
 800724e:	f103 0104 	add.w	r1, r3, #4
 8007252:	6029      	str	r1, [r5, #0]
 8007254:	d501      	bpl.n	800725a <_printf_i+0xbe>
 8007256:	681e      	ldr	r6, [r3, #0]
 8007258:	e003      	b.n	8007262 <_printf_i+0xc6>
 800725a:	0646      	lsls	r6, r0, #25
 800725c:	d5fb      	bpl.n	8007256 <_printf_i+0xba>
 800725e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007262:	2e00      	cmp	r6, #0
 8007264:	da03      	bge.n	800726e <_printf_i+0xd2>
 8007266:	232d      	movs	r3, #45	; 0x2d
 8007268:	4276      	negs	r6, r6
 800726a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800726e:	485a      	ldr	r0, [pc, #360]	; (80073d8 <_printf_i+0x23c>)
 8007270:	230a      	movs	r3, #10
 8007272:	e012      	b.n	800729a <_printf_i+0xfe>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	6820      	ldr	r0, [r4, #0]
 8007278:	1d19      	adds	r1, r3, #4
 800727a:	6029      	str	r1, [r5, #0]
 800727c:	0605      	lsls	r5, r0, #24
 800727e:	d501      	bpl.n	8007284 <_printf_i+0xe8>
 8007280:	681e      	ldr	r6, [r3, #0]
 8007282:	e002      	b.n	800728a <_printf_i+0xee>
 8007284:	0641      	lsls	r1, r0, #25
 8007286:	d5fb      	bpl.n	8007280 <_printf_i+0xe4>
 8007288:	881e      	ldrh	r6, [r3, #0]
 800728a:	4853      	ldr	r0, [pc, #332]	; (80073d8 <_printf_i+0x23c>)
 800728c:	2f6f      	cmp	r7, #111	; 0x6f
 800728e:	bf0c      	ite	eq
 8007290:	2308      	moveq	r3, #8
 8007292:	230a      	movne	r3, #10
 8007294:	2100      	movs	r1, #0
 8007296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800729a:	6865      	ldr	r5, [r4, #4]
 800729c:	60a5      	str	r5, [r4, #8]
 800729e:	2d00      	cmp	r5, #0
 80072a0:	bfa2      	ittt	ge
 80072a2:	6821      	ldrge	r1, [r4, #0]
 80072a4:	f021 0104 	bicge.w	r1, r1, #4
 80072a8:	6021      	strge	r1, [r4, #0]
 80072aa:	b90e      	cbnz	r6, 80072b0 <_printf_i+0x114>
 80072ac:	2d00      	cmp	r5, #0
 80072ae:	d04b      	beq.n	8007348 <_printf_i+0x1ac>
 80072b0:	4615      	mov	r5, r2
 80072b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80072b6:	fb03 6711 	mls	r7, r3, r1, r6
 80072ba:	5dc7      	ldrb	r7, [r0, r7]
 80072bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072c0:	4637      	mov	r7, r6
 80072c2:	42bb      	cmp	r3, r7
 80072c4:	460e      	mov	r6, r1
 80072c6:	d9f4      	bls.n	80072b2 <_printf_i+0x116>
 80072c8:	2b08      	cmp	r3, #8
 80072ca:	d10b      	bne.n	80072e4 <_printf_i+0x148>
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	07de      	lsls	r6, r3, #31
 80072d0:	d508      	bpl.n	80072e4 <_printf_i+0x148>
 80072d2:	6923      	ldr	r3, [r4, #16]
 80072d4:	6861      	ldr	r1, [r4, #4]
 80072d6:	4299      	cmp	r1, r3
 80072d8:	bfde      	ittt	le
 80072da:	2330      	movle	r3, #48	; 0x30
 80072dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072e0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80072e4:	1b52      	subs	r2, r2, r5
 80072e6:	6122      	str	r2, [r4, #16]
 80072e8:	f8cd a000 	str.w	sl, [sp]
 80072ec:	464b      	mov	r3, r9
 80072ee:	aa03      	add	r2, sp, #12
 80072f0:	4621      	mov	r1, r4
 80072f2:	4640      	mov	r0, r8
 80072f4:	f7ff fee4 	bl	80070c0 <_printf_common>
 80072f8:	3001      	adds	r0, #1
 80072fa:	d14a      	bne.n	8007392 <_printf_i+0x1f6>
 80072fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007300:	b004      	add	sp, #16
 8007302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	f043 0320 	orr.w	r3, r3, #32
 800730c:	6023      	str	r3, [r4, #0]
 800730e:	4833      	ldr	r0, [pc, #204]	; (80073dc <_printf_i+0x240>)
 8007310:	2778      	movs	r7, #120	; 0x78
 8007312:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	6829      	ldr	r1, [r5, #0]
 800731a:	061f      	lsls	r7, r3, #24
 800731c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007320:	d402      	bmi.n	8007328 <_printf_i+0x18c>
 8007322:	065f      	lsls	r7, r3, #25
 8007324:	bf48      	it	mi
 8007326:	b2b6      	uxthmi	r6, r6
 8007328:	07df      	lsls	r7, r3, #31
 800732a:	bf48      	it	mi
 800732c:	f043 0320 	orrmi.w	r3, r3, #32
 8007330:	6029      	str	r1, [r5, #0]
 8007332:	bf48      	it	mi
 8007334:	6023      	strmi	r3, [r4, #0]
 8007336:	b91e      	cbnz	r6, 8007340 <_printf_i+0x1a4>
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	f023 0320 	bic.w	r3, r3, #32
 800733e:	6023      	str	r3, [r4, #0]
 8007340:	2310      	movs	r3, #16
 8007342:	e7a7      	b.n	8007294 <_printf_i+0xf8>
 8007344:	4824      	ldr	r0, [pc, #144]	; (80073d8 <_printf_i+0x23c>)
 8007346:	e7e4      	b.n	8007312 <_printf_i+0x176>
 8007348:	4615      	mov	r5, r2
 800734a:	e7bd      	b.n	80072c8 <_printf_i+0x12c>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	6826      	ldr	r6, [r4, #0]
 8007350:	6961      	ldr	r1, [r4, #20]
 8007352:	1d18      	adds	r0, r3, #4
 8007354:	6028      	str	r0, [r5, #0]
 8007356:	0635      	lsls	r5, r6, #24
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	d501      	bpl.n	8007360 <_printf_i+0x1c4>
 800735c:	6019      	str	r1, [r3, #0]
 800735e:	e002      	b.n	8007366 <_printf_i+0x1ca>
 8007360:	0670      	lsls	r0, r6, #25
 8007362:	d5fb      	bpl.n	800735c <_printf_i+0x1c0>
 8007364:	8019      	strh	r1, [r3, #0]
 8007366:	2300      	movs	r3, #0
 8007368:	6123      	str	r3, [r4, #16]
 800736a:	4615      	mov	r5, r2
 800736c:	e7bc      	b.n	80072e8 <_printf_i+0x14c>
 800736e:	682b      	ldr	r3, [r5, #0]
 8007370:	1d1a      	adds	r2, r3, #4
 8007372:	602a      	str	r2, [r5, #0]
 8007374:	681d      	ldr	r5, [r3, #0]
 8007376:	6862      	ldr	r2, [r4, #4]
 8007378:	2100      	movs	r1, #0
 800737a:	4628      	mov	r0, r5
 800737c:	f7f8 ff50 	bl	8000220 <memchr>
 8007380:	b108      	cbz	r0, 8007386 <_printf_i+0x1ea>
 8007382:	1b40      	subs	r0, r0, r5
 8007384:	6060      	str	r0, [r4, #4]
 8007386:	6863      	ldr	r3, [r4, #4]
 8007388:	6123      	str	r3, [r4, #16]
 800738a:	2300      	movs	r3, #0
 800738c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007390:	e7aa      	b.n	80072e8 <_printf_i+0x14c>
 8007392:	6923      	ldr	r3, [r4, #16]
 8007394:	462a      	mov	r2, r5
 8007396:	4649      	mov	r1, r9
 8007398:	4640      	mov	r0, r8
 800739a:	47d0      	blx	sl
 800739c:	3001      	adds	r0, #1
 800739e:	d0ad      	beq.n	80072fc <_printf_i+0x160>
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	079b      	lsls	r3, r3, #30
 80073a4:	d413      	bmi.n	80073ce <_printf_i+0x232>
 80073a6:	68e0      	ldr	r0, [r4, #12]
 80073a8:	9b03      	ldr	r3, [sp, #12]
 80073aa:	4298      	cmp	r0, r3
 80073ac:	bfb8      	it	lt
 80073ae:	4618      	movlt	r0, r3
 80073b0:	e7a6      	b.n	8007300 <_printf_i+0x164>
 80073b2:	2301      	movs	r3, #1
 80073b4:	4632      	mov	r2, r6
 80073b6:	4649      	mov	r1, r9
 80073b8:	4640      	mov	r0, r8
 80073ba:	47d0      	blx	sl
 80073bc:	3001      	adds	r0, #1
 80073be:	d09d      	beq.n	80072fc <_printf_i+0x160>
 80073c0:	3501      	adds	r5, #1
 80073c2:	68e3      	ldr	r3, [r4, #12]
 80073c4:	9903      	ldr	r1, [sp, #12]
 80073c6:	1a5b      	subs	r3, r3, r1
 80073c8:	42ab      	cmp	r3, r5
 80073ca:	dcf2      	bgt.n	80073b2 <_printf_i+0x216>
 80073cc:	e7eb      	b.n	80073a6 <_printf_i+0x20a>
 80073ce:	2500      	movs	r5, #0
 80073d0:	f104 0619 	add.w	r6, r4, #25
 80073d4:	e7f5      	b.n	80073c2 <_printf_i+0x226>
 80073d6:	bf00      	nop
 80073d8:	0800959e 	.word	0x0800959e
 80073dc:	080095af 	.word	0x080095af

080073e0 <setbuf>:
 80073e0:	fab1 f281 	clz	r2, r1
 80073e4:	0952      	lsrs	r2, r2, #5
 80073e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073ea:	0052      	lsls	r2, r2, #1
 80073ec:	f000 b800 	b.w	80073f0 <setvbuf>

080073f0 <setvbuf>:
 80073f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073f4:	461d      	mov	r5, r3
 80073f6:	4b54      	ldr	r3, [pc, #336]	; (8007548 <setvbuf+0x158>)
 80073f8:	681f      	ldr	r7, [r3, #0]
 80073fa:	4604      	mov	r4, r0
 80073fc:	460e      	mov	r6, r1
 80073fe:	4690      	mov	r8, r2
 8007400:	b127      	cbz	r7, 800740c <setvbuf+0x1c>
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	b913      	cbnz	r3, 800740c <setvbuf+0x1c>
 8007406:	4638      	mov	r0, r7
 8007408:	f000 f938 	bl	800767c <__sinit>
 800740c:	f1b8 0f02 	cmp.w	r8, #2
 8007410:	d006      	beq.n	8007420 <setvbuf+0x30>
 8007412:	f1b8 0f01 	cmp.w	r8, #1
 8007416:	f200 8094 	bhi.w	8007542 <setvbuf+0x152>
 800741a:	2d00      	cmp	r5, #0
 800741c:	f2c0 8091 	blt.w	8007542 <setvbuf+0x152>
 8007420:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007422:	07da      	lsls	r2, r3, #31
 8007424:	d405      	bmi.n	8007432 <setvbuf+0x42>
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	059b      	lsls	r3, r3, #22
 800742a:	d402      	bmi.n	8007432 <setvbuf+0x42>
 800742c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800742e:	f000 fa38 	bl	80078a2 <__retarget_lock_acquire_recursive>
 8007432:	4621      	mov	r1, r4
 8007434:	4638      	mov	r0, r7
 8007436:	f001 fac7 	bl	80089c8 <_fflush_r>
 800743a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800743c:	b141      	cbz	r1, 8007450 <setvbuf+0x60>
 800743e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007442:	4299      	cmp	r1, r3
 8007444:	d002      	beq.n	800744c <setvbuf+0x5c>
 8007446:	4638      	mov	r0, r7
 8007448:	f001 f8a8 	bl	800859c <_free_r>
 800744c:	2300      	movs	r3, #0
 800744e:	6363      	str	r3, [r4, #52]	; 0x34
 8007450:	2300      	movs	r3, #0
 8007452:	61a3      	str	r3, [r4, #24]
 8007454:	6063      	str	r3, [r4, #4]
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	0618      	lsls	r0, r3, #24
 800745a:	d503      	bpl.n	8007464 <setvbuf+0x74>
 800745c:	6921      	ldr	r1, [r4, #16]
 800745e:	4638      	mov	r0, r7
 8007460:	f001 f89c 	bl	800859c <_free_r>
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800746a:	f023 0303 	bic.w	r3, r3, #3
 800746e:	f1b8 0f02 	cmp.w	r8, #2
 8007472:	81a3      	strh	r3, [r4, #12]
 8007474:	d05f      	beq.n	8007536 <setvbuf+0x146>
 8007476:	ab01      	add	r3, sp, #4
 8007478:	466a      	mov	r2, sp
 800747a:	4621      	mov	r1, r4
 800747c:	4638      	mov	r0, r7
 800747e:	f000 f933 	bl	80076e8 <__swhatbuf_r>
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	4318      	orrs	r0, r3
 8007486:	81a0      	strh	r0, [r4, #12]
 8007488:	bb2d      	cbnz	r5, 80074d6 <setvbuf+0xe6>
 800748a:	9d00      	ldr	r5, [sp, #0]
 800748c:	4628      	mov	r0, r5
 800748e:	f7ff fd6f 	bl	8006f70 <malloc>
 8007492:	4606      	mov	r6, r0
 8007494:	2800      	cmp	r0, #0
 8007496:	d150      	bne.n	800753a <setvbuf+0x14a>
 8007498:	f8dd 9000 	ldr.w	r9, [sp]
 800749c:	45a9      	cmp	r9, r5
 800749e:	d13e      	bne.n	800751e <setvbuf+0x12e>
 80074a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80074a4:	2200      	movs	r2, #0
 80074a6:	60a2      	str	r2, [r4, #8]
 80074a8:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80074ac:	6022      	str	r2, [r4, #0]
 80074ae:	6122      	str	r2, [r4, #16]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074b6:	6162      	str	r2, [r4, #20]
 80074b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074ba:	f043 0302 	orr.w	r3, r3, #2
 80074be:	07d1      	lsls	r1, r2, #31
 80074c0:	81a3      	strh	r3, [r4, #12]
 80074c2:	d404      	bmi.n	80074ce <setvbuf+0xde>
 80074c4:	059b      	lsls	r3, r3, #22
 80074c6:	d402      	bmi.n	80074ce <setvbuf+0xde>
 80074c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074ca:	f000 f9eb 	bl	80078a4 <__retarget_lock_release_recursive>
 80074ce:	4628      	mov	r0, r5
 80074d0:	b003      	add	sp, #12
 80074d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074d6:	2e00      	cmp	r6, #0
 80074d8:	d0d8      	beq.n	800748c <setvbuf+0x9c>
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	b913      	cbnz	r3, 80074e4 <setvbuf+0xf4>
 80074de:	4638      	mov	r0, r7
 80074e0:	f000 f8cc 	bl	800767c <__sinit>
 80074e4:	f1b8 0f01 	cmp.w	r8, #1
 80074e8:	bf08      	it	eq
 80074ea:	89a3      	ldrheq	r3, [r4, #12]
 80074ec:	6026      	str	r6, [r4, #0]
 80074ee:	bf04      	itt	eq
 80074f0:	f043 0301 	orreq.w	r3, r3, #1
 80074f4:	81a3      	strheq	r3, [r4, #12]
 80074f6:	89a3      	ldrh	r3, [r4, #12]
 80074f8:	f013 0208 	ands.w	r2, r3, #8
 80074fc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007500:	d01d      	beq.n	800753e <setvbuf+0x14e>
 8007502:	07da      	lsls	r2, r3, #31
 8007504:	bf41      	itttt	mi
 8007506:	2200      	movmi	r2, #0
 8007508:	426d      	negmi	r5, r5
 800750a:	60a2      	strmi	r2, [r4, #8]
 800750c:	61a5      	strmi	r5, [r4, #24]
 800750e:	bf58      	it	pl
 8007510:	60a5      	strpl	r5, [r4, #8]
 8007512:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007514:	f015 0501 	ands.w	r5, r5, #1
 8007518:	d0d4      	beq.n	80074c4 <setvbuf+0xd4>
 800751a:	2500      	movs	r5, #0
 800751c:	e7d7      	b.n	80074ce <setvbuf+0xde>
 800751e:	4648      	mov	r0, r9
 8007520:	f7ff fd26 	bl	8006f70 <malloc>
 8007524:	4606      	mov	r6, r0
 8007526:	2800      	cmp	r0, #0
 8007528:	d0ba      	beq.n	80074a0 <setvbuf+0xb0>
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007530:	81a3      	strh	r3, [r4, #12]
 8007532:	464d      	mov	r5, r9
 8007534:	e7d1      	b.n	80074da <setvbuf+0xea>
 8007536:	2500      	movs	r5, #0
 8007538:	e7b4      	b.n	80074a4 <setvbuf+0xb4>
 800753a:	46a9      	mov	r9, r5
 800753c:	e7f5      	b.n	800752a <setvbuf+0x13a>
 800753e:	60a2      	str	r2, [r4, #8]
 8007540:	e7e7      	b.n	8007512 <setvbuf+0x122>
 8007542:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007546:	e7c2      	b.n	80074ce <setvbuf+0xde>
 8007548:	20000064 	.word	0x20000064

0800754c <__malloc_lock>:
 800754c:	4801      	ldr	r0, [pc, #4]	; (8007554 <__malloc_lock+0x8>)
 800754e:	f000 b9a8 	b.w	80078a2 <__retarget_lock_acquire_recursive>
 8007552:	bf00      	nop
 8007554:	20000638 	.word	0x20000638

08007558 <__malloc_unlock>:
 8007558:	4801      	ldr	r0, [pc, #4]	; (8007560 <__malloc_unlock+0x8>)
 800755a:	f000 b9a3 	b.w	80078a4 <__retarget_lock_release_recursive>
 800755e:	bf00      	nop
 8007560:	20000638 	.word	0x20000638

08007564 <std>:
 8007564:	2300      	movs	r3, #0
 8007566:	b510      	push	{r4, lr}
 8007568:	4604      	mov	r4, r0
 800756a:	e9c0 3300 	strd	r3, r3, [r0]
 800756e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007572:	6083      	str	r3, [r0, #8]
 8007574:	8181      	strh	r1, [r0, #12]
 8007576:	6643      	str	r3, [r0, #100]	; 0x64
 8007578:	81c2      	strh	r2, [r0, #14]
 800757a:	6183      	str	r3, [r0, #24]
 800757c:	4619      	mov	r1, r3
 800757e:	2208      	movs	r2, #8
 8007580:	305c      	adds	r0, #92	; 0x5c
 8007582:	f000 f925 	bl	80077d0 <memset>
 8007586:	4b0d      	ldr	r3, [pc, #52]	; (80075bc <std+0x58>)
 8007588:	6263      	str	r3, [r4, #36]	; 0x24
 800758a:	4b0d      	ldr	r3, [pc, #52]	; (80075c0 <std+0x5c>)
 800758c:	62a3      	str	r3, [r4, #40]	; 0x28
 800758e:	4b0d      	ldr	r3, [pc, #52]	; (80075c4 <std+0x60>)
 8007590:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007592:	4b0d      	ldr	r3, [pc, #52]	; (80075c8 <std+0x64>)
 8007594:	6323      	str	r3, [r4, #48]	; 0x30
 8007596:	4b0d      	ldr	r3, [pc, #52]	; (80075cc <std+0x68>)
 8007598:	6224      	str	r4, [r4, #32]
 800759a:	429c      	cmp	r4, r3
 800759c:	d006      	beq.n	80075ac <std+0x48>
 800759e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80075a2:	4294      	cmp	r4, r2
 80075a4:	d002      	beq.n	80075ac <std+0x48>
 80075a6:	33d0      	adds	r3, #208	; 0xd0
 80075a8:	429c      	cmp	r4, r3
 80075aa:	d105      	bne.n	80075b8 <std+0x54>
 80075ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b4:	f000 b974 	b.w	80078a0 <__retarget_lock_init_recursive>
 80075b8:	bd10      	pop	{r4, pc}
 80075ba:	bf00      	nop
 80075bc:	08009111 	.word	0x08009111
 80075c0:	08009133 	.word	0x08009133
 80075c4:	0800916b 	.word	0x0800916b
 80075c8:	0800918f 	.word	0x0800918f
 80075cc:	200004fc 	.word	0x200004fc

080075d0 <stdio_exit_handler>:
 80075d0:	4a02      	ldr	r2, [pc, #8]	; (80075dc <stdio_exit_handler+0xc>)
 80075d2:	4903      	ldr	r1, [pc, #12]	; (80075e0 <stdio_exit_handler+0x10>)
 80075d4:	4803      	ldr	r0, [pc, #12]	; (80075e4 <stdio_exit_handler+0x14>)
 80075d6:	f000 b869 	b.w	80076ac <_fwalk_sglue>
 80075da:	bf00      	nop
 80075dc:	2000000c 	.word	0x2000000c
 80075e0:	080089c9 	.word	0x080089c9
 80075e4:	20000018 	.word	0x20000018

080075e8 <cleanup_stdio>:
 80075e8:	6841      	ldr	r1, [r0, #4]
 80075ea:	4b0c      	ldr	r3, [pc, #48]	; (800761c <cleanup_stdio+0x34>)
 80075ec:	4299      	cmp	r1, r3
 80075ee:	b510      	push	{r4, lr}
 80075f0:	4604      	mov	r4, r0
 80075f2:	d001      	beq.n	80075f8 <cleanup_stdio+0x10>
 80075f4:	f001 f9e8 	bl	80089c8 <_fflush_r>
 80075f8:	68a1      	ldr	r1, [r4, #8]
 80075fa:	4b09      	ldr	r3, [pc, #36]	; (8007620 <cleanup_stdio+0x38>)
 80075fc:	4299      	cmp	r1, r3
 80075fe:	d002      	beq.n	8007606 <cleanup_stdio+0x1e>
 8007600:	4620      	mov	r0, r4
 8007602:	f001 f9e1 	bl	80089c8 <_fflush_r>
 8007606:	68e1      	ldr	r1, [r4, #12]
 8007608:	4b06      	ldr	r3, [pc, #24]	; (8007624 <cleanup_stdio+0x3c>)
 800760a:	4299      	cmp	r1, r3
 800760c:	d004      	beq.n	8007618 <cleanup_stdio+0x30>
 800760e:	4620      	mov	r0, r4
 8007610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007614:	f001 b9d8 	b.w	80089c8 <_fflush_r>
 8007618:	bd10      	pop	{r4, pc}
 800761a:	bf00      	nop
 800761c:	200004fc 	.word	0x200004fc
 8007620:	20000564 	.word	0x20000564
 8007624:	200005cc 	.word	0x200005cc

08007628 <global_stdio_init.part.0>:
 8007628:	b510      	push	{r4, lr}
 800762a:	4b0b      	ldr	r3, [pc, #44]	; (8007658 <global_stdio_init.part.0+0x30>)
 800762c:	4c0b      	ldr	r4, [pc, #44]	; (800765c <global_stdio_init.part.0+0x34>)
 800762e:	4a0c      	ldr	r2, [pc, #48]	; (8007660 <global_stdio_init.part.0+0x38>)
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	4620      	mov	r0, r4
 8007634:	2200      	movs	r2, #0
 8007636:	2104      	movs	r1, #4
 8007638:	f7ff ff94 	bl	8007564 <std>
 800763c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007640:	2201      	movs	r2, #1
 8007642:	2109      	movs	r1, #9
 8007644:	f7ff ff8e 	bl	8007564 <std>
 8007648:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800764c:	2202      	movs	r2, #2
 800764e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007652:	2112      	movs	r1, #18
 8007654:	f7ff bf86 	b.w	8007564 <std>
 8007658:	20000634 	.word	0x20000634
 800765c:	200004fc 	.word	0x200004fc
 8007660:	080075d1 	.word	0x080075d1

08007664 <__sfp_lock_acquire>:
 8007664:	4801      	ldr	r0, [pc, #4]	; (800766c <__sfp_lock_acquire+0x8>)
 8007666:	f000 b91c 	b.w	80078a2 <__retarget_lock_acquire_recursive>
 800766a:	bf00      	nop
 800766c:	20000639 	.word	0x20000639

08007670 <__sfp_lock_release>:
 8007670:	4801      	ldr	r0, [pc, #4]	; (8007678 <__sfp_lock_release+0x8>)
 8007672:	f000 b917 	b.w	80078a4 <__retarget_lock_release_recursive>
 8007676:	bf00      	nop
 8007678:	20000639 	.word	0x20000639

0800767c <__sinit>:
 800767c:	b510      	push	{r4, lr}
 800767e:	4604      	mov	r4, r0
 8007680:	f7ff fff0 	bl	8007664 <__sfp_lock_acquire>
 8007684:	6a23      	ldr	r3, [r4, #32]
 8007686:	b11b      	cbz	r3, 8007690 <__sinit+0x14>
 8007688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800768c:	f7ff bff0 	b.w	8007670 <__sfp_lock_release>
 8007690:	4b04      	ldr	r3, [pc, #16]	; (80076a4 <__sinit+0x28>)
 8007692:	6223      	str	r3, [r4, #32]
 8007694:	4b04      	ldr	r3, [pc, #16]	; (80076a8 <__sinit+0x2c>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1f5      	bne.n	8007688 <__sinit+0xc>
 800769c:	f7ff ffc4 	bl	8007628 <global_stdio_init.part.0>
 80076a0:	e7f2      	b.n	8007688 <__sinit+0xc>
 80076a2:	bf00      	nop
 80076a4:	080075e9 	.word	0x080075e9
 80076a8:	20000634 	.word	0x20000634

080076ac <_fwalk_sglue>:
 80076ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076b0:	4607      	mov	r7, r0
 80076b2:	4688      	mov	r8, r1
 80076b4:	4614      	mov	r4, r2
 80076b6:	2600      	movs	r6, #0
 80076b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076bc:	f1b9 0901 	subs.w	r9, r9, #1
 80076c0:	d505      	bpl.n	80076ce <_fwalk_sglue+0x22>
 80076c2:	6824      	ldr	r4, [r4, #0]
 80076c4:	2c00      	cmp	r4, #0
 80076c6:	d1f7      	bne.n	80076b8 <_fwalk_sglue+0xc>
 80076c8:	4630      	mov	r0, r6
 80076ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ce:	89ab      	ldrh	r3, [r5, #12]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d907      	bls.n	80076e4 <_fwalk_sglue+0x38>
 80076d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076d8:	3301      	adds	r3, #1
 80076da:	d003      	beq.n	80076e4 <_fwalk_sglue+0x38>
 80076dc:	4629      	mov	r1, r5
 80076de:	4638      	mov	r0, r7
 80076e0:	47c0      	blx	r8
 80076e2:	4306      	orrs	r6, r0
 80076e4:	3568      	adds	r5, #104	; 0x68
 80076e6:	e7e9      	b.n	80076bc <_fwalk_sglue+0x10>

080076e8 <__swhatbuf_r>:
 80076e8:	b570      	push	{r4, r5, r6, lr}
 80076ea:	460c      	mov	r4, r1
 80076ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076f0:	2900      	cmp	r1, #0
 80076f2:	b096      	sub	sp, #88	; 0x58
 80076f4:	4615      	mov	r5, r2
 80076f6:	461e      	mov	r6, r3
 80076f8:	da0d      	bge.n	8007716 <__swhatbuf_r+0x2e>
 80076fa:	89a3      	ldrh	r3, [r4, #12]
 80076fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007700:	f04f 0100 	mov.w	r1, #0
 8007704:	bf0c      	ite	eq
 8007706:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800770a:	2340      	movne	r3, #64	; 0x40
 800770c:	2000      	movs	r0, #0
 800770e:	6031      	str	r1, [r6, #0]
 8007710:	602b      	str	r3, [r5, #0]
 8007712:	b016      	add	sp, #88	; 0x58
 8007714:	bd70      	pop	{r4, r5, r6, pc}
 8007716:	466a      	mov	r2, sp
 8007718:	f000 f866 	bl	80077e8 <_fstat_r>
 800771c:	2800      	cmp	r0, #0
 800771e:	dbec      	blt.n	80076fa <__swhatbuf_r+0x12>
 8007720:	9901      	ldr	r1, [sp, #4]
 8007722:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007726:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800772a:	4259      	negs	r1, r3
 800772c:	4159      	adcs	r1, r3
 800772e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007732:	e7eb      	b.n	800770c <__swhatbuf_r+0x24>

08007734 <__smakebuf_r>:
 8007734:	898b      	ldrh	r3, [r1, #12]
 8007736:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007738:	079d      	lsls	r5, r3, #30
 800773a:	4606      	mov	r6, r0
 800773c:	460c      	mov	r4, r1
 800773e:	d507      	bpl.n	8007750 <__smakebuf_r+0x1c>
 8007740:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007744:	6023      	str	r3, [r4, #0]
 8007746:	6123      	str	r3, [r4, #16]
 8007748:	2301      	movs	r3, #1
 800774a:	6163      	str	r3, [r4, #20]
 800774c:	b002      	add	sp, #8
 800774e:	bd70      	pop	{r4, r5, r6, pc}
 8007750:	ab01      	add	r3, sp, #4
 8007752:	466a      	mov	r2, sp
 8007754:	f7ff ffc8 	bl	80076e8 <__swhatbuf_r>
 8007758:	9900      	ldr	r1, [sp, #0]
 800775a:	4605      	mov	r5, r0
 800775c:	4630      	mov	r0, r6
 800775e:	f7ff fc2f 	bl	8006fc0 <_malloc_r>
 8007762:	b948      	cbnz	r0, 8007778 <__smakebuf_r+0x44>
 8007764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007768:	059a      	lsls	r2, r3, #22
 800776a:	d4ef      	bmi.n	800774c <__smakebuf_r+0x18>
 800776c:	f023 0303 	bic.w	r3, r3, #3
 8007770:	f043 0302 	orr.w	r3, r3, #2
 8007774:	81a3      	strh	r3, [r4, #12]
 8007776:	e7e3      	b.n	8007740 <__smakebuf_r+0xc>
 8007778:	89a3      	ldrh	r3, [r4, #12]
 800777a:	6020      	str	r0, [r4, #0]
 800777c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007780:	81a3      	strh	r3, [r4, #12]
 8007782:	9b00      	ldr	r3, [sp, #0]
 8007784:	6163      	str	r3, [r4, #20]
 8007786:	9b01      	ldr	r3, [sp, #4]
 8007788:	6120      	str	r0, [r4, #16]
 800778a:	b15b      	cbz	r3, 80077a4 <__smakebuf_r+0x70>
 800778c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007790:	4630      	mov	r0, r6
 8007792:	f000 f83b 	bl	800780c <_isatty_r>
 8007796:	b128      	cbz	r0, 80077a4 <__smakebuf_r+0x70>
 8007798:	89a3      	ldrh	r3, [r4, #12]
 800779a:	f023 0303 	bic.w	r3, r3, #3
 800779e:	f043 0301 	orr.w	r3, r3, #1
 80077a2:	81a3      	strh	r3, [r4, #12]
 80077a4:	89a3      	ldrh	r3, [r4, #12]
 80077a6:	431d      	orrs	r5, r3
 80077a8:	81a5      	strh	r5, [r4, #12]
 80077aa:	e7cf      	b.n	800774c <__smakebuf_r+0x18>

080077ac <iprintf>:
 80077ac:	b40f      	push	{r0, r1, r2, r3}
 80077ae:	b507      	push	{r0, r1, r2, lr}
 80077b0:	4906      	ldr	r1, [pc, #24]	; (80077cc <iprintf+0x20>)
 80077b2:	ab04      	add	r3, sp, #16
 80077b4:	6808      	ldr	r0, [r1, #0]
 80077b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80077ba:	6881      	ldr	r1, [r0, #8]
 80077bc:	9301      	str	r3, [sp, #4]
 80077be:	f000 ff63 	bl	8008688 <_vfiprintf_r>
 80077c2:	b003      	add	sp, #12
 80077c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80077c8:	b004      	add	sp, #16
 80077ca:	4770      	bx	lr
 80077cc:	20000064 	.word	0x20000064

080077d0 <memset>:
 80077d0:	4402      	add	r2, r0
 80077d2:	4603      	mov	r3, r0
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d100      	bne.n	80077da <memset+0xa>
 80077d8:	4770      	bx	lr
 80077da:	f803 1b01 	strb.w	r1, [r3], #1
 80077de:	e7f9      	b.n	80077d4 <memset+0x4>

080077e0 <_localeconv_r>:
 80077e0:	4800      	ldr	r0, [pc, #0]	; (80077e4 <_localeconv_r+0x4>)
 80077e2:	4770      	bx	lr
 80077e4:	20000158 	.word	0x20000158

080077e8 <_fstat_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	4d07      	ldr	r5, [pc, #28]	; (8007808 <_fstat_r+0x20>)
 80077ec:	2300      	movs	r3, #0
 80077ee:	4604      	mov	r4, r0
 80077f0:	4608      	mov	r0, r1
 80077f2:	4611      	mov	r1, r2
 80077f4:	602b      	str	r3, [r5, #0]
 80077f6:	f7fa fb86 	bl	8001f06 <_fstat>
 80077fa:	1c43      	adds	r3, r0, #1
 80077fc:	d102      	bne.n	8007804 <_fstat_r+0x1c>
 80077fe:	682b      	ldr	r3, [r5, #0]
 8007800:	b103      	cbz	r3, 8007804 <_fstat_r+0x1c>
 8007802:	6023      	str	r3, [r4, #0]
 8007804:	bd38      	pop	{r3, r4, r5, pc}
 8007806:	bf00      	nop
 8007808:	2000063c 	.word	0x2000063c

0800780c <_isatty_r>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	4d06      	ldr	r5, [pc, #24]	; (8007828 <_isatty_r+0x1c>)
 8007810:	2300      	movs	r3, #0
 8007812:	4604      	mov	r4, r0
 8007814:	4608      	mov	r0, r1
 8007816:	602b      	str	r3, [r5, #0]
 8007818:	f7fa fb85 	bl	8001f26 <_isatty>
 800781c:	1c43      	adds	r3, r0, #1
 800781e:	d102      	bne.n	8007826 <_isatty_r+0x1a>
 8007820:	682b      	ldr	r3, [r5, #0]
 8007822:	b103      	cbz	r3, 8007826 <_isatty_r+0x1a>
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	bd38      	pop	{r3, r4, r5, pc}
 8007828:	2000063c 	.word	0x2000063c

0800782c <_sbrk_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	4d06      	ldr	r5, [pc, #24]	; (8007848 <_sbrk_r+0x1c>)
 8007830:	2300      	movs	r3, #0
 8007832:	4604      	mov	r4, r0
 8007834:	4608      	mov	r0, r1
 8007836:	602b      	str	r3, [r5, #0]
 8007838:	f7fa fb8e 	bl	8001f58 <_sbrk>
 800783c:	1c43      	adds	r3, r0, #1
 800783e:	d102      	bne.n	8007846 <_sbrk_r+0x1a>
 8007840:	682b      	ldr	r3, [r5, #0]
 8007842:	b103      	cbz	r3, 8007846 <_sbrk_r+0x1a>
 8007844:	6023      	str	r3, [r4, #0]
 8007846:	bd38      	pop	{r3, r4, r5, pc}
 8007848:	2000063c 	.word	0x2000063c

0800784c <__errno>:
 800784c:	4b01      	ldr	r3, [pc, #4]	; (8007854 <__errno+0x8>)
 800784e:	6818      	ldr	r0, [r3, #0]
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	20000064 	.word	0x20000064

08007858 <__libc_init_array>:
 8007858:	b570      	push	{r4, r5, r6, lr}
 800785a:	4d0d      	ldr	r5, [pc, #52]	; (8007890 <__libc_init_array+0x38>)
 800785c:	4c0d      	ldr	r4, [pc, #52]	; (8007894 <__libc_init_array+0x3c>)
 800785e:	1b64      	subs	r4, r4, r5
 8007860:	10a4      	asrs	r4, r4, #2
 8007862:	2600      	movs	r6, #0
 8007864:	42a6      	cmp	r6, r4
 8007866:	d109      	bne.n	800787c <__libc_init_array+0x24>
 8007868:	4d0b      	ldr	r5, [pc, #44]	; (8007898 <__libc_init_array+0x40>)
 800786a:	4c0c      	ldr	r4, [pc, #48]	; (800789c <__libc_init_array+0x44>)
 800786c:	f001 fe2c 	bl	80094c8 <_init>
 8007870:	1b64      	subs	r4, r4, r5
 8007872:	10a4      	asrs	r4, r4, #2
 8007874:	2600      	movs	r6, #0
 8007876:	42a6      	cmp	r6, r4
 8007878:	d105      	bne.n	8007886 <__libc_init_array+0x2e>
 800787a:	bd70      	pop	{r4, r5, r6, pc}
 800787c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007880:	4798      	blx	r3
 8007882:	3601      	adds	r6, #1
 8007884:	e7ee      	b.n	8007864 <__libc_init_array+0xc>
 8007886:	f855 3b04 	ldr.w	r3, [r5], #4
 800788a:	4798      	blx	r3
 800788c:	3601      	adds	r6, #1
 800788e:	e7f2      	b.n	8007876 <__libc_init_array+0x1e>
 8007890:	08009904 	.word	0x08009904
 8007894:	08009904 	.word	0x08009904
 8007898:	08009904 	.word	0x08009904
 800789c:	08009908 	.word	0x08009908

080078a0 <__retarget_lock_init_recursive>:
 80078a0:	4770      	bx	lr

080078a2 <__retarget_lock_acquire_recursive>:
 80078a2:	4770      	bx	lr

080078a4 <__retarget_lock_release_recursive>:
 80078a4:	4770      	bx	lr

080078a6 <quorem>:
 80078a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078aa:	6903      	ldr	r3, [r0, #16]
 80078ac:	690c      	ldr	r4, [r1, #16]
 80078ae:	42a3      	cmp	r3, r4
 80078b0:	4607      	mov	r7, r0
 80078b2:	db7e      	blt.n	80079b2 <quorem+0x10c>
 80078b4:	3c01      	subs	r4, #1
 80078b6:	f101 0814 	add.w	r8, r1, #20
 80078ba:	f100 0514 	add.w	r5, r0, #20
 80078be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078c2:	9301      	str	r3, [sp, #4]
 80078c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078cc:	3301      	adds	r3, #1
 80078ce:	429a      	cmp	r2, r3
 80078d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80078d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80078dc:	d331      	bcc.n	8007942 <quorem+0x9c>
 80078de:	f04f 0e00 	mov.w	lr, #0
 80078e2:	4640      	mov	r0, r8
 80078e4:	46ac      	mov	ip, r5
 80078e6:	46f2      	mov	sl, lr
 80078e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80078ec:	b293      	uxth	r3, r2
 80078ee:	fb06 e303 	mla	r3, r6, r3, lr
 80078f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80078f6:	0c1a      	lsrs	r2, r3, #16
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	ebaa 0303 	sub.w	r3, sl, r3
 80078fe:	f8dc a000 	ldr.w	sl, [ip]
 8007902:	fa13 f38a 	uxtah	r3, r3, sl
 8007906:	fb06 220e 	mla	r2, r6, lr, r2
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	9b00      	ldr	r3, [sp, #0]
 800790e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007912:	b292      	uxth	r2, r2
 8007914:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007918:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800791c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007920:	4581      	cmp	r9, r0
 8007922:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007926:	f84c 3b04 	str.w	r3, [ip], #4
 800792a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800792e:	d2db      	bcs.n	80078e8 <quorem+0x42>
 8007930:	f855 300b 	ldr.w	r3, [r5, fp]
 8007934:	b92b      	cbnz	r3, 8007942 <quorem+0x9c>
 8007936:	9b01      	ldr	r3, [sp, #4]
 8007938:	3b04      	subs	r3, #4
 800793a:	429d      	cmp	r5, r3
 800793c:	461a      	mov	r2, r3
 800793e:	d32c      	bcc.n	800799a <quorem+0xf4>
 8007940:	613c      	str	r4, [r7, #16]
 8007942:	4638      	mov	r0, r7
 8007944:	f001 fae4 	bl	8008f10 <__mcmp>
 8007948:	2800      	cmp	r0, #0
 800794a:	db22      	blt.n	8007992 <quorem+0xec>
 800794c:	3601      	adds	r6, #1
 800794e:	4629      	mov	r1, r5
 8007950:	2000      	movs	r0, #0
 8007952:	f858 2b04 	ldr.w	r2, [r8], #4
 8007956:	f8d1 c000 	ldr.w	ip, [r1]
 800795a:	b293      	uxth	r3, r2
 800795c:	1ac3      	subs	r3, r0, r3
 800795e:	0c12      	lsrs	r2, r2, #16
 8007960:	fa13 f38c 	uxtah	r3, r3, ip
 8007964:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007968:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800796c:	b29b      	uxth	r3, r3
 800796e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007972:	45c1      	cmp	r9, r8
 8007974:	f841 3b04 	str.w	r3, [r1], #4
 8007978:	ea4f 4022 	mov.w	r0, r2, asr #16
 800797c:	d2e9      	bcs.n	8007952 <quorem+0xac>
 800797e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007982:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007986:	b922      	cbnz	r2, 8007992 <quorem+0xec>
 8007988:	3b04      	subs	r3, #4
 800798a:	429d      	cmp	r5, r3
 800798c:	461a      	mov	r2, r3
 800798e:	d30a      	bcc.n	80079a6 <quorem+0x100>
 8007990:	613c      	str	r4, [r7, #16]
 8007992:	4630      	mov	r0, r6
 8007994:	b003      	add	sp, #12
 8007996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800799a:	6812      	ldr	r2, [r2, #0]
 800799c:	3b04      	subs	r3, #4
 800799e:	2a00      	cmp	r2, #0
 80079a0:	d1ce      	bne.n	8007940 <quorem+0x9a>
 80079a2:	3c01      	subs	r4, #1
 80079a4:	e7c9      	b.n	800793a <quorem+0x94>
 80079a6:	6812      	ldr	r2, [r2, #0]
 80079a8:	3b04      	subs	r3, #4
 80079aa:	2a00      	cmp	r2, #0
 80079ac:	d1f0      	bne.n	8007990 <quorem+0xea>
 80079ae:	3c01      	subs	r4, #1
 80079b0:	e7eb      	b.n	800798a <quorem+0xe4>
 80079b2:	2000      	movs	r0, #0
 80079b4:	e7ee      	b.n	8007994 <quorem+0xee>
	...

080079b8 <_dtoa_r>:
 80079b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079bc:	ed2d 8b04 	vpush	{d8-d9}
 80079c0:	69c5      	ldr	r5, [r0, #28]
 80079c2:	b093      	sub	sp, #76	; 0x4c
 80079c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80079c8:	ec57 6b10 	vmov	r6, r7, d0
 80079cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80079d0:	9107      	str	r1, [sp, #28]
 80079d2:	4604      	mov	r4, r0
 80079d4:	920a      	str	r2, [sp, #40]	; 0x28
 80079d6:	930d      	str	r3, [sp, #52]	; 0x34
 80079d8:	b975      	cbnz	r5, 80079f8 <_dtoa_r+0x40>
 80079da:	2010      	movs	r0, #16
 80079dc:	f7ff fac8 	bl	8006f70 <malloc>
 80079e0:	4602      	mov	r2, r0
 80079e2:	61e0      	str	r0, [r4, #28]
 80079e4:	b920      	cbnz	r0, 80079f0 <_dtoa_r+0x38>
 80079e6:	4bae      	ldr	r3, [pc, #696]	; (8007ca0 <_dtoa_r+0x2e8>)
 80079e8:	21ef      	movs	r1, #239	; 0xef
 80079ea:	48ae      	ldr	r0, [pc, #696]	; (8007ca4 <_dtoa_r+0x2ec>)
 80079ec:	f001 fcbc 	bl	8009368 <__assert_func>
 80079f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80079f4:	6005      	str	r5, [r0, #0]
 80079f6:	60c5      	str	r5, [r0, #12]
 80079f8:	69e3      	ldr	r3, [r4, #28]
 80079fa:	6819      	ldr	r1, [r3, #0]
 80079fc:	b151      	cbz	r1, 8007a14 <_dtoa_r+0x5c>
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	604a      	str	r2, [r1, #4]
 8007a02:	2301      	movs	r3, #1
 8007a04:	4093      	lsls	r3, r2
 8007a06:	608b      	str	r3, [r1, #8]
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f001 f845 	bl	8008a98 <_Bfree>
 8007a0e:	69e3      	ldr	r3, [r4, #28]
 8007a10:	2200      	movs	r2, #0
 8007a12:	601a      	str	r2, [r3, #0]
 8007a14:	1e3b      	subs	r3, r7, #0
 8007a16:	bfbb      	ittet	lt
 8007a18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a1c:	9303      	strlt	r3, [sp, #12]
 8007a1e:	2300      	movge	r3, #0
 8007a20:	2201      	movlt	r2, #1
 8007a22:	bfac      	ite	ge
 8007a24:	f8c8 3000 	strge.w	r3, [r8]
 8007a28:	f8c8 2000 	strlt.w	r2, [r8]
 8007a2c:	4b9e      	ldr	r3, [pc, #632]	; (8007ca8 <_dtoa_r+0x2f0>)
 8007a2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007a32:	ea33 0308 	bics.w	r3, r3, r8
 8007a36:	d11b      	bne.n	8007a70 <_dtoa_r+0xb8>
 8007a38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a3e:	6013      	str	r3, [r2, #0]
 8007a40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007a44:	4333      	orrs	r3, r6
 8007a46:	f000 8593 	beq.w	8008570 <_dtoa_r+0xbb8>
 8007a4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a4c:	b963      	cbnz	r3, 8007a68 <_dtoa_r+0xb0>
 8007a4e:	4b97      	ldr	r3, [pc, #604]	; (8007cac <_dtoa_r+0x2f4>)
 8007a50:	e027      	b.n	8007aa2 <_dtoa_r+0xea>
 8007a52:	4b97      	ldr	r3, [pc, #604]	; (8007cb0 <_dtoa_r+0x2f8>)
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	3308      	adds	r3, #8
 8007a58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	9800      	ldr	r0, [sp, #0]
 8007a5e:	b013      	add	sp, #76	; 0x4c
 8007a60:	ecbd 8b04 	vpop	{d8-d9}
 8007a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a68:	4b90      	ldr	r3, [pc, #576]	; (8007cac <_dtoa_r+0x2f4>)
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	3303      	adds	r3, #3
 8007a6e:	e7f3      	b.n	8007a58 <_dtoa_r+0xa0>
 8007a70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a74:	2200      	movs	r2, #0
 8007a76:	ec51 0b17 	vmov	r0, r1, d7
 8007a7a:	eeb0 8a47 	vmov.f32	s16, s14
 8007a7e:	eef0 8a67 	vmov.f32	s17, s15
 8007a82:	2300      	movs	r3, #0
 8007a84:	f7f9 f848 	bl	8000b18 <__aeabi_dcmpeq>
 8007a88:	4681      	mov	r9, r0
 8007a8a:	b160      	cbz	r0, 8007aa6 <_dtoa_r+0xee>
 8007a8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a8e:	2301      	movs	r3, #1
 8007a90:	6013      	str	r3, [r2, #0]
 8007a92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 8568 	beq.w	800856a <_dtoa_r+0xbb2>
 8007a9a:	4b86      	ldr	r3, [pc, #536]	; (8007cb4 <_dtoa_r+0x2fc>)
 8007a9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a9e:	6013      	str	r3, [r2, #0]
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	e7da      	b.n	8007a5c <_dtoa_r+0xa4>
 8007aa6:	aa10      	add	r2, sp, #64	; 0x40
 8007aa8:	a911      	add	r1, sp, #68	; 0x44
 8007aaa:	4620      	mov	r0, r4
 8007aac:	eeb0 0a48 	vmov.f32	s0, s16
 8007ab0:	eef0 0a68 	vmov.f32	s1, s17
 8007ab4:	f001 fad2 	bl	800905c <__d2b>
 8007ab8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007abc:	4682      	mov	sl, r0
 8007abe:	2d00      	cmp	r5, #0
 8007ac0:	d07f      	beq.n	8007bc2 <_dtoa_r+0x20a>
 8007ac2:	ee18 3a90 	vmov	r3, s17
 8007ac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007aca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007ace:	ec51 0b18 	vmov	r0, r1, d8
 8007ad2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007ad6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007ada:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007ade:	4619      	mov	r1, r3
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	4b75      	ldr	r3, [pc, #468]	; (8007cb8 <_dtoa_r+0x300>)
 8007ae4:	f7f8 fbf8 	bl	80002d8 <__aeabi_dsub>
 8007ae8:	a367      	add	r3, pc, #412	; (adr r3, 8007c88 <_dtoa_r+0x2d0>)
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	f7f8 fdab 	bl	8000648 <__aeabi_dmul>
 8007af2:	a367      	add	r3, pc, #412	; (adr r3, 8007c90 <_dtoa_r+0x2d8>)
 8007af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af8:	f7f8 fbf0 	bl	80002dc <__adddf3>
 8007afc:	4606      	mov	r6, r0
 8007afe:	4628      	mov	r0, r5
 8007b00:	460f      	mov	r7, r1
 8007b02:	f7f8 fd37 	bl	8000574 <__aeabi_i2d>
 8007b06:	a364      	add	r3, pc, #400	; (adr r3, 8007c98 <_dtoa_r+0x2e0>)
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	f7f8 fd9c 	bl	8000648 <__aeabi_dmul>
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	4630      	mov	r0, r6
 8007b16:	4639      	mov	r1, r7
 8007b18:	f7f8 fbe0 	bl	80002dc <__adddf3>
 8007b1c:	4606      	mov	r6, r0
 8007b1e:	460f      	mov	r7, r1
 8007b20:	f7f9 f842 	bl	8000ba8 <__aeabi_d2iz>
 8007b24:	2200      	movs	r2, #0
 8007b26:	4683      	mov	fp, r0
 8007b28:	2300      	movs	r3, #0
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	4639      	mov	r1, r7
 8007b2e:	f7f8 fffd 	bl	8000b2c <__aeabi_dcmplt>
 8007b32:	b148      	cbz	r0, 8007b48 <_dtoa_r+0x190>
 8007b34:	4658      	mov	r0, fp
 8007b36:	f7f8 fd1d 	bl	8000574 <__aeabi_i2d>
 8007b3a:	4632      	mov	r2, r6
 8007b3c:	463b      	mov	r3, r7
 8007b3e:	f7f8 ffeb 	bl	8000b18 <__aeabi_dcmpeq>
 8007b42:	b908      	cbnz	r0, 8007b48 <_dtoa_r+0x190>
 8007b44:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007b48:	f1bb 0f16 	cmp.w	fp, #22
 8007b4c:	d857      	bhi.n	8007bfe <_dtoa_r+0x246>
 8007b4e:	4b5b      	ldr	r3, [pc, #364]	; (8007cbc <_dtoa_r+0x304>)
 8007b50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b58:	ec51 0b18 	vmov	r0, r1, d8
 8007b5c:	f7f8 ffe6 	bl	8000b2c <__aeabi_dcmplt>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d04e      	beq.n	8007c02 <_dtoa_r+0x24a>
 8007b64:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007b68:	2300      	movs	r3, #0
 8007b6a:	930c      	str	r3, [sp, #48]	; 0x30
 8007b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b6e:	1b5b      	subs	r3, r3, r5
 8007b70:	1e5a      	subs	r2, r3, #1
 8007b72:	bf45      	ittet	mi
 8007b74:	f1c3 0301 	rsbmi	r3, r3, #1
 8007b78:	9305      	strmi	r3, [sp, #20]
 8007b7a:	2300      	movpl	r3, #0
 8007b7c:	2300      	movmi	r3, #0
 8007b7e:	9206      	str	r2, [sp, #24]
 8007b80:	bf54      	ite	pl
 8007b82:	9305      	strpl	r3, [sp, #20]
 8007b84:	9306      	strmi	r3, [sp, #24]
 8007b86:	f1bb 0f00 	cmp.w	fp, #0
 8007b8a:	db3c      	blt.n	8007c06 <_dtoa_r+0x24e>
 8007b8c:	9b06      	ldr	r3, [sp, #24]
 8007b8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007b92:	445b      	add	r3, fp
 8007b94:	9306      	str	r3, [sp, #24]
 8007b96:	2300      	movs	r3, #0
 8007b98:	9308      	str	r3, [sp, #32]
 8007b9a:	9b07      	ldr	r3, [sp, #28]
 8007b9c:	2b09      	cmp	r3, #9
 8007b9e:	d868      	bhi.n	8007c72 <_dtoa_r+0x2ba>
 8007ba0:	2b05      	cmp	r3, #5
 8007ba2:	bfc4      	itt	gt
 8007ba4:	3b04      	subgt	r3, #4
 8007ba6:	9307      	strgt	r3, [sp, #28]
 8007ba8:	9b07      	ldr	r3, [sp, #28]
 8007baa:	f1a3 0302 	sub.w	r3, r3, #2
 8007bae:	bfcc      	ite	gt
 8007bb0:	2500      	movgt	r5, #0
 8007bb2:	2501      	movle	r5, #1
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	f200 8085 	bhi.w	8007cc4 <_dtoa_r+0x30c>
 8007bba:	e8df f003 	tbb	[pc, r3]
 8007bbe:	3b2e      	.short	0x3b2e
 8007bc0:	5839      	.short	0x5839
 8007bc2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007bc6:	441d      	add	r5, r3
 8007bc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007bcc:	2b20      	cmp	r3, #32
 8007bce:	bfc1      	itttt	gt
 8007bd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007bd4:	fa08 f803 	lslgt.w	r8, r8, r3
 8007bd8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007bdc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007be0:	bfd6      	itet	le
 8007be2:	f1c3 0320 	rsble	r3, r3, #32
 8007be6:	ea48 0003 	orrgt.w	r0, r8, r3
 8007bea:	fa06 f003 	lslle.w	r0, r6, r3
 8007bee:	f7f8 fcb1 	bl	8000554 <__aeabi_ui2d>
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007bf8:	3d01      	subs	r5, #1
 8007bfa:	920e      	str	r2, [sp, #56]	; 0x38
 8007bfc:	e76f      	b.n	8007ade <_dtoa_r+0x126>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e7b3      	b.n	8007b6a <_dtoa_r+0x1b2>
 8007c02:	900c      	str	r0, [sp, #48]	; 0x30
 8007c04:	e7b2      	b.n	8007b6c <_dtoa_r+0x1b4>
 8007c06:	9b05      	ldr	r3, [sp, #20]
 8007c08:	eba3 030b 	sub.w	r3, r3, fp
 8007c0c:	9305      	str	r3, [sp, #20]
 8007c0e:	f1cb 0300 	rsb	r3, fp, #0
 8007c12:	9308      	str	r3, [sp, #32]
 8007c14:	2300      	movs	r3, #0
 8007c16:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c18:	e7bf      	b.n	8007b9a <_dtoa_r+0x1e2>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	dc52      	bgt.n	8007cca <_dtoa_r+0x312>
 8007c24:	2301      	movs	r3, #1
 8007c26:	9301      	str	r3, [sp, #4]
 8007c28:	9304      	str	r3, [sp, #16]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	920a      	str	r2, [sp, #40]	; 0x28
 8007c2e:	e00b      	b.n	8007c48 <_dtoa_r+0x290>
 8007c30:	2301      	movs	r3, #1
 8007c32:	e7f3      	b.n	8007c1c <_dtoa_r+0x264>
 8007c34:	2300      	movs	r3, #0
 8007c36:	9309      	str	r3, [sp, #36]	; 0x24
 8007c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c3a:	445b      	add	r3, fp
 8007c3c:	9301      	str	r3, [sp, #4]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	9304      	str	r3, [sp, #16]
 8007c44:	bfb8      	it	lt
 8007c46:	2301      	movlt	r3, #1
 8007c48:	69e0      	ldr	r0, [r4, #28]
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	2204      	movs	r2, #4
 8007c4e:	f102 0614 	add.w	r6, r2, #20
 8007c52:	429e      	cmp	r6, r3
 8007c54:	d93d      	bls.n	8007cd2 <_dtoa_r+0x31a>
 8007c56:	6041      	str	r1, [r0, #4]
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f000 fedd 	bl	8008a18 <_Balloc>
 8007c5e:	9000      	str	r0, [sp, #0]
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d139      	bne.n	8007cd8 <_dtoa_r+0x320>
 8007c64:	4b16      	ldr	r3, [pc, #88]	; (8007cc0 <_dtoa_r+0x308>)
 8007c66:	4602      	mov	r2, r0
 8007c68:	f240 11af 	movw	r1, #431	; 0x1af
 8007c6c:	e6bd      	b.n	80079ea <_dtoa_r+0x32>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e7e1      	b.n	8007c36 <_dtoa_r+0x27e>
 8007c72:	2501      	movs	r5, #1
 8007c74:	2300      	movs	r3, #0
 8007c76:	9307      	str	r3, [sp, #28]
 8007c78:	9509      	str	r5, [sp, #36]	; 0x24
 8007c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c7e:	9301      	str	r3, [sp, #4]
 8007c80:	9304      	str	r3, [sp, #16]
 8007c82:	2200      	movs	r2, #0
 8007c84:	2312      	movs	r3, #18
 8007c86:	e7d1      	b.n	8007c2c <_dtoa_r+0x274>
 8007c88:	636f4361 	.word	0x636f4361
 8007c8c:	3fd287a7 	.word	0x3fd287a7
 8007c90:	8b60c8b3 	.word	0x8b60c8b3
 8007c94:	3fc68a28 	.word	0x3fc68a28
 8007c98:	509f79fb 	.word	0x509f79fb
 8007c9c:	3fd34413 	.word	0x3fd34413
 8007ca0:	080095cd 	.word	0x080095cd
 8007ca4:	080095e4 	.word	0x080095e4
 8007ca8:	7ff00000 	.word	0x7ff00000
 8007cac:	080095c9 	.word	0x080095c9
 8007cb0:	080095c0 	.word	0x080095c0
 8007cb4:	0800959d 	.word	0x0800959d
 8007cb8:	3ff80000 	.word	0x3ff80000
 8007cbc:	080096e0 	.word	0x080096e0
 8007cc0:	0800963c 	.word	0x0800963c
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cc8:	e7d7      	b.n	8007c7a <_dtoa_r+0x2c2>
 8007cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ccc:	9301      	str	r3, [sp, #4]
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	e7ba      	b.n	8007c48 <_dtoa_r+0x290>
 8007cd2:	3101      	adds	r1, #1
 8007cd4:	0052      	lsls	r2, r2, #1
 8007cd6:	e7ba      	b.n	8007c4e <_dtoa_r+0x296>
 8007cd8:	69e3      	ldr	r3, [r4, #28]
 8007cda:	9a00      	ldr	r2, [sp, #0]
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	9b04      	ldr	r3, [sp, #16]
 8007ce0:	2b0e      	cmp	r3, #14
 8007ce2:	f200 80a8 	bhi.w	8007e36 <_dtoa_r+0x47e>
 8007ce6:	2d00      	cmp	r5, #0
 8007ce8:	f000 80a5 	beq.w	8007e36 <_dtoa_r+0x47e>
 8007cec:	f1bb 0f00 	cmp.w	fp, #0
 8007cf0:	dd38      	ble.n	8007d64 <_dtoa_r+0x3ac>
 8007cf2:	4bc0      	ldr	r3, [pc, #768]	; (8007ff4 <_dtoa_r+0x63c>)
 8007cf4:	f00b 020f 	and.w	r2, fp, #15
 8007cf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cfc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007d00:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007d04:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007d08:	d019      	beq.n	8007d3e <_dtoa_r+0x386>
 8007d0a:	4bbb      	ldr	r3, [pc, #748]	; (8007ff8 <_dtoa_r+0x640>)
 8007d0c:	ec51 0b18 	vmov	r0, r1, d8
 8007d10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d14:	f7f8 fdc2 	bl	800089c <__aeabi_ddiv>
 8007d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d1c:	f008 080f 	and.w	r8, r8, #15
 8007d20:	2503      	movs	r5, #3
 8007d22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007ff8 <_dtoa_r+0x640>
 8007d26:	f1b8 0f00 	cmp.w	r8, #0
 8007d2a:	d10a      	bne.n	8007d42 <_dtoa_r+0x38a>
 8007d2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d30:	4632      	mov	r2, r6
 8007d32:	463b      	mov	r3, r7
 8007d34:	f7f8 fdb2 	bl	800089c <__aeabi_ddiv>
 8007d38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d3c:	e02b      	b.n	8007d96 <_dtoa_r+0x3de>
 8007d3e:	2502      	movs	r5, #2
 8007d40:	e7ef      	b.n	8007d22 <_dtoa_r+0x36a>
 8007d42:	f018 0f01 	tst.w	r8, #1
 8007d46:	d008      	beq.n	8007d5a <_dtoa_r+0x3a2>
 8007d48:	4630      	mov	r0, r6
 8007d4a:	4639      	mov	r1, r7
 8007d4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007d50:	f7f8 fc7a 	bl	8000648 <__aeabi_dmul>
 8007d54:	3501      	adds	r5, #1
 8007d56:	4606      	mov	r6, r0
 8007d58:	460f      	mov	r7, r1
 8007d5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007d5e:	f109 0908 	add.w	r9, r9, #8
 8007d62:	e7e0      	b.n	8007d26 <_dtoa_r+0x36e>
 8007d64:	f000 809f 	beq.w	8007ea6 <_dtoa_r+0x4ee>
 8007d68:	f1cb 0600 	rsb	r6, fp, #0
 8007d6c:	4ba1      	ldr	r3, [pc, #644]	; (8007ff4 <_dtoa_r+0x63c>)
 8007d6e:	4fa2      	ldr	r7, [pc, #648]	; (8007ff8 <_dtoa_r+0x640>)
 8007d70:	f006 020f 	and.w	r2, r6, #15
 8007d74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7c:	ec51 0b18 	vmov	r0, r1, d8
 8007d80:	f7f8 fc62 	bl	8000648 <__aeabi_dmul>
 8007d84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d88:	1136      	asrs	r6, r6, #4
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	2502      	movs	r5, #2
 8007d8e:	2e00      	cmp	r6, #0
 8007d90:	d17e      	bne.n	8007e90 <_dtoa_r+0x4d8>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1d0      	bne.n	8007d38 <_dtoa_r+0x380>
 8007d96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 8084 	beq.w	8007eaa <_dtoa_r+0x4f2>
 8007da2:	4b96      	ldr	r3, [pc, #600]	; (8007ffc <_dtoa_r+0x644>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	4640      	mov	r0, r8
 8007da8:	4649      	mov	r1, r9
 8007daa:	f7f8 febf 	bl	8000b2c <__aeabi_dcmplt>
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d07b      	beq.n	8007eaa <_dtoa_r+0x4f2>
 8007db2:	9b04      	ldr	r3, [sp, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d078      	beq.n	8007eaa <_dtoa_r+0x4f2>
 8007db8:	9b01      	ldr	r3, [sp, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	dd39      	ble.n	8007e32 <_dtoa_r+0x47a>
 8007dbe:	4b90      	ldr	r3, [pc, #576]	; (8008000 <_dtoa_r+0x648>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	f7f8 fc3f 	bl	8000648 <__aeabi_dmul>
 8007dca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dce:	9e01      	ldr	r6, [sp, #4]
 8007dd0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007dd4:	3501      	adds	r5, #1
 8007dd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007dda:	4628      	mov	r0, r5
 8007ddc:	f7f8 fbca 	bl	8000574 <__aeabi_i2d>
 8007de0:	4642      	mov	r2, r8
 8007de2:	464b      	mov	r3, r9
 8007de4:	f7f8 fc30 	bl	8000648 <__aeabi_dmul>
 8007de8:	4b86      	ldr	r3, [pc, #536]	; (8008004 <_dtoa_r+0x64c>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	f7f8 fa76 	bl	80002dc <__adddf3>
 8007df0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007df8:	9303      	str	r3, [sp, #12]
 8007dfa:	2e00      	cmp	r6, #0
 8007dfc:	d158      	bne.n	8007eb0 <_dtoa_r+0x4f8>
 8007dfe:	4b82      	ldr	r3, [pc, #520]	; (8008008 <_dtoa_r+0x650>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	4640      	mov	r0, r8
 8007e04:	4649      	mov	r1, r9
 8007e06:	f7f8 fa67 	bl	80002d8 <__aeabi_dsub>
 8007e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e0e:	4680      	mov	r8, r0
 8007e10:	4689      	mov	r9, r1
 8007e12:	f7f8 fea9 	bl	8000b68 <__aeabi_dcmpgt>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	f040 8296 	bne.w	8008348 <_dtoa_r+0x990>
 8007e1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007e20:	4640      	mov	r0, r8
 8007e22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e26:	4649      	mov	r1, r9
 8007e28:	f7f8 fe80 	bl	8000b2c <__aeabi_dcmplt>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	f040 8289 	bne.w	8008344 <_dtoa_r+0x98c>
 8007e32:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007e36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f2c0 814e 	blt.w	80080da <_dtoa_r+0x722>
 8007e3e:	f1bb 0f0e 	cmp.w	fp, #14
 8007e42:	f300 814a 	bgt.w	80080da <_dtoa_r+0x722>
 8007e46:	4b6b      	ldr	r3, [pc, #428]	; (8007ff4 <_dtoa_r+0x63c>)
 8007e48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f280 80dc 	bge.w	8008010 <_dtoa_r+0x658>
 8007e58:	9b04      	ldr	r3, [sp, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f300 80d8 	bgt.w	8008010 <_dtoa_r+0x658>
 8007e60:	f040 826f 	bne.w	8008342 <_dtoa_r+0x98a>
 8007e64:	4b68      	ldr	r3, [pc, #416]	; (8008008 <_dtoa_r+0x650>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	4640      	mov	r0, r8
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	f7f8 fbec 	bl	8000648 <__aeabi_dmul>
 8007e70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e74:	f7f8 fe6e 	bl	8000b54 <__aeabi_dcmpge>
 8007e78:	9e04      	ldr	r6, [sp, #16]
 8007e7a:	4637      	mov	r7, r6
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	f040 8245 	bne.w	800830c <_dtoa_r+0x954>
 8007e82:	9d00      	ldr	r5, [sp, #0]
 8007e84:	2331      	movs	r3, #49	; 0x31
 8007e86:	f805 3b01 	strb.w	r3, [r5], #1
 8007e8a:	f10b 0b01 	add.w	fp, fp, #1
 8007e8e:	e241      	b.n	8008314 <_dtoa_r+0x95c>
 8007e90:	07f2      	lsls	r2, r6, #31
 8007e92:	d505      	bpl.n	8007ea0 <_dtoa_r+0x4e8>
 8007e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e98:	f7f8 fbd6 	bl	8000648 <__aeabi_dmul>
 8007e9c:	3501      	adds	r5, #1
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	1076      	asrs	r6, r6, #1
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	e773      	b.n	8007d8e <_dtoa_r+0x3d6>
 8007ea6:	2502      	movs	r5, #2
 8007ea8:	e775      	b.n	8007d96 <_dtoa_r+0x3de>
 8007eaa:	9e04      	ldr	r6, [sp, #16]
 8007eac:	465f      	mov	r7, fp
 8007eae:	e792      	b.n	8007dd6 <_dtoa_r+0x41e>
 8007eb0:	9900      	ldr	r1, [sp, #0]
 8007eb2:	4b50      	ldr	r3, [pc, #320]	; (8007ff4 <_dtoa_r+0x63c>)
 8007eb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007eb8:	4431      	add	r1, r6
 8007eba:	9102      	str	r1, [sp, #8]
 8007ebc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ebe:	eeb0 9a47 	vmov.f32	s18, s14
 8007ec2:	eef0 9a67 	vmov.f32	s19, s15
 8007ec6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007eca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ece:	2900      	cmp	r1, #0
 8007ed0:	d044      	beq.n	8007f5c <_dtoa_r+0x5a4>
 8007ed2:	494e      	ldr	r1, [pc, #312]	; (800800c <_dtoa_r+0x654>)
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	f7f8 fce1 	bl	800089c <__aeabi_ddiv>
 8007eda:	ec53 2b19 	vmov	r2, r3, d9
 8007ede:	f7f8 f9fb 	bl	80002d8 <__aeabi_dsub>
 8007ee2:	9d00      	ldr	r5, [sp, #0]
 8007ee4:	ec41 0b19 	vmov	d9, r0, r1
 8007ee8:	4649      	mov	r1, r9
 8007eea:	4640      	mov	r0, r8
 8007eec:	f7f8 fe5c 	bl	8000ba8 <__aeabi_d2iz>
 8007ef0:	4606      	mov	r6, r0
 8007ef2:	f7f8 fb3f 	bl	8000574 <__aeabi_i2d>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4640      	mov	r0, r8
 8007efc:	4649      	mov	r1, r9
 8007efe:	f7f8 f9eb 	bl	80002d8 <__aeabi_dsub>
 8007f02:	3630      	adds	r6, #48	; 0x30
 8007f04:	f805 6b01 	strb.w	r6, [r5], #1
 8007f08:	ec53 2b19 	vmov	r2, r3, d9
 8007f0c:	4680      	mov	r8, r0
 8007f0e:	4689      	mov	r9, r1
 8007f10:	f7f8 fe0c 	bl	8000b2c <__aeabi_dcmplt>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d164      	bne.n	8007fe2 <_dtoa_r+0x62a>
 8007f18:	4642      	mov	r2, r8
 8007f1a:	464b      	mov	r3, r9
 8007f1c:	4937      	ldr	r1, [pc, #220]	; (8007ffc <_dtoa_r+0x644>)
 8007f1e:	2000      	movs	r0, #0
 8007f20:	f7f8 f9da 	bl	80002d8 <__aeabi_dsub>
 8007f24:	ec53 2b19 	vmov	r2, r3, d9
 8007f28:	f7f8 fe00 	bl	8000b2c <__aeabi_dcmplt>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	f040 80b6 	bne.w	800809e <_dtoa_r+0x6e6>
 8007f32:	9b02      	ldr	r3, [sp, #8]
 8007f34:	429d      	cmp	r5, r3
 8007f36:	f43f af7c 	beq.w	8007e32 <_dtoa_r+0x47a>
 8007f3a:	4b31      	ldr	r3, [pc, #196]	; (8008000 <_dtoa_r+0x648>)
 8007f3c:	ec51 0b19 	vmov	r0, r1, d9
 8007f40:	2200      	movs	r2, #0
 8007f42:	f7f8 fb81 	bl	8000648 <__aeabi_dmul>
 8007f46:	4b2e      	ldr	r3, [pc, #184]	; (8008000 <_dtoa_r+0x648>)
 8007f48:	ec41 0b19 	vmov	d9, r0, r1
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	4640      	mov	r0, r8
 8007f50:	4649      	mov	r1, r9
 8007f52:	f7f8 fb79 	bl	8000648 <__aeabi_dmul>
 8007f56:	4680      	mov	r8, r0
 8007f58:	4689      	mov	r9, r1
 8007f5a:	e7c5      	b.n	8007ee8 <_dtoa_r+0x530>
 8007f5c:	ec51 0b17 	vmov	r0, r1, d7
 8007f60:	f7f8 fb72 	bl	8000648 <__aeabi_dmul>
 8007f64:	9b02      	ldr	r3, [sp, #8]
 8007f66:	9d00      	ldr	r5, [sp, #0]
 8007f68:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f6a:	ec41 0b19 	vmov	d9, r0, r1
 8007f6e:	4649      	mov	r1, r9
 8007f70:	4640      	mov	r0, r8
 8007f72:	f7f8 fe19 	bl	8000ba8 <__aeabi_d2iz>
 8007f76:	4606      	mov	r6, r0
 8007f78:	f7f8 fafc 	bl	8000574 <__aeabi_i2d>
 8007f7c:	3630      	adds	r6, #48	; 0x30
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4640      	mov	r0, r8
 8007f84:	4649      	mov	r1, r9
 8007f86:	f7f8 f9a7 	bl	80002d8 <__aeabi_dsub>
 8007f8a:	f805 6b01 	strb.w	r6, [r5], #1
 8007f8e:	9b02      	ldr	r3, [sp, #8]
 8007f90:	429d      	cmp	r5, r3
 8007f92:	4680      	mov	r8, r0
 8007f94:	4689      	mov	r9, r1
 8007f96:	f04f 0200 	mov.w	r2, #0
 8007f9a:	d124      	bne.n	8007fe6 <_dtoa_r+0x62e>
 8007f9c:	4b1b      	ldr	r3, [pc, #108]	; (800800c <_dtoa_r+0x654>)
 8007f9e:	ec51 0b19 	vmov	r0, r1, d9
 8007fa2:	f7f8 f99b 	bl	80002dc <__adddf3>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	460b      	mov	r3, r1
 8007faa:	4640      	mov	r0, r8
 8007fac:	4649      	mov	r1, r9
 8007fae:	f7f8 fddb 	bl	8000b68 <__aeabi_dcmpgt>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d173      	bne.n	800809e <_dtoa_r+0x6e6>
 8007fb6:	ec53 2b19 	vmov	r2, r3, d9
 8007fba:	4914      	ldr	r1, [pc, #80]	; (800800c <_dtoa_r+0x654>)
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	f7f8 f98b 	bl	80002d8 <__aeabi_dsub>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4640      	mov	r0, r8
 8007fc8:	4649      	mov	r1, r9
 8007fca:	f7f8 fdaf 	bl	8000b2c <__aeabi_dcmplt>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	f43f af2f 	beq.w	8007e32 <_dtoa_r+0x47a>
 8007fd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007fd6:	1e6b      	subs	r3, r5, #1
 8007fd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007fde:	2b30      	cmp	r3, #48	; 0x30
 8007fe0:	d0f8      	beq.n	8007fd4 <_dtoa_r+0x61c>
 8007fe2:	46bb      	mov	fp, r7
 8007fe4:	e04a      	b.n	800807c <_dtoa_r+0x6c4>
 8007fe6:	4b06      	ldr	r3, [pc, #24]	; (8008000 <_dtoa_r+0x648>)
 8007fe8:	f7f8 fb2e 	bl	8000648 <__aeabi_dmul>
 8007fec:	4680      	mov	r8, r0
 8007fee:	4689      	mov	r9, r1
 8007ff0:	e7bd      	b.n	8007f6e <_dtoa_r+0x5b6>
 8007ff2:	bf00      	nop
 8007ff4:	080096e0 	.word	0x080096e0
 8007ff8:	080096b8 	.word	0x080096b8
 8007ffc:	3ff00000 	.word	0x3ff00000
 8008000:	40240000 	.word	0x40240000
 8008004:	401c0000 	.word	0x401c0000
 8008008:	40140000 	.word	0x40140000
 800800c:	3fe00000 	.word	0x3fe00000
 8008010:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008014:	9d00      	ldr	r5, [sp, #0]
 8008016:	4642      	mov	r2, r8
 8008018:	464b      	mov	r3, r9
 800801a:	4630      	mov	r0, r6
 800801c:	4639      	mov	r1, r7
 800801e:	f7f8 fc3d 	bl	800089c <__aeabi_ddiv>
 8008022:	f7f8 fdc1 	bl	8000ba8 <__aeabi_d2iz>
 8008026:	9001      	str	r0, [sp, #4]
 8008028:	f7f8 faa4 	bl	8000574 <__aeabi_i2d>
 800802c:	4642      	mov	r2, r8
 800802e:	464b      	mov	r3, r9
 8008030:	f7f8 fb0a 	bl	8000648 <__aeabi_dmul>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	4630      	mov	r0, r6
 800803a:	4639      	mov	r1, r7
 800803c:	f7f8 f94c 	bl	80002d8 <__aeabi_dsub>
 8008040:	9e01      	ldr	r6, [sp, #4]
 8008042:	9f04      	ldr	r7, [sp, #16]
 8008044:	3630      	adds	r6, #48	; 0x30
 8008046:	f805 6b01 	strb.w	r6, [r5], #1
 800804a:	9e00      	ldr	r6, [sp, #0]
 800804c:	1bae      	subs	r6, r5, r6
 800804e:	42b7      	cmp	r7, r6
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	d134      	bne.n	80080c0 <_dtoa_r+0x708>
 8008056:	f7f8 f941 	bl	80002dc <__adddf3>
 800805a:	4642      	mov	r2, r8
 800805c:	464b      	mov	r3, r9
 800805e:	4606      	mov	r6, r0
 8008060:	460f      	mov	r7, r1
 8008062:	f7f8 fd81 	bl	8000b68 <__aeabi_dcmpgt>
 8008066:	b9c8      	cbnz	r0, 800809c <_dtoa_r+0x6e4>
 8008068:	4642      	mov	r2, r8
 800806a:	464b      	mov	r3, r9
 800806c:	4630      	mov	r0, r6
 800806e:	4639      	mov	r1, r7
 8008070:	f7f8 fd52 	bl	8000b18 <__aeabi_dcmpeq>
 8008074:	b110      	cbz	r0, 800807c <_dtoa_r+0x6c4>
 8008076:	9b01      	ldr	r3, [sp, #4]
 8008078:	07db      	lsls	r3, r3, #31
 800807a:	d40f      	bmi.n	800809c <_dtoa_r+0x6e4>
 800807c:	4651      	mov	r1, sl
 800807e:	4620      	mov	r0, r4
 8008080:	f000 fd0a 	bl	8008a98 <_Bfree>
 8008084:	2300      	movs	r3, #0
 8008086:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008088:	702b      	strb	r3, [r5, #0]
 800808a:	f10b 0301 	add.w	r3, fp, #1
 800808e:	6013      	str	r3, [r2, #0]
 8008090:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008092:	2b00      	cmp	r3, #0
 8008094:	f43f ace2 	beq.w	8007a5c <_dtoa_r+0xa4>
 8008098:	601d      	str	r5, [r3, #0]
 800809a:	e4df      	b.n	8007a5c <_dtoa_r+0xa4>
 800809c:	465f      	mov	r7, fp
 800809e:	462b      	mov	r3, r5
 80080a0:	461d      	mov	r5, r3
 80080a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080a6:	2a39      	cmp	r2, #57	; 0x39
 80080a8:	d106      	bne.n	80080b8 <_dtoa_r+0x700>
 80080aa:	9a00      	ldr	r2, [sp, #0]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d1f7      	bne.n	80080a0 <_dtoa_r+0x6e8>
 80080b0:	9900      	ldr	r1, [sp, #0]
 80080b2:	2230      	movs	r2, #48	; 0x30
 80080b4:	3701      	adds	r7, #1
 80080b6:	700a      	strb	r2, [r1, #0]
 80080b8:	781a      	ldrb	r2, [r3, #0]
 80080ba:	3201      	adds	r2, #1
 80080bc:	701a      	strb	r2, [r3, #0]
 80080be:	e790      	b.n	8007fe2 <_dtoa_r+0x62a>
 80080c0:	4ba3      	ldr	r3, [pc, #652]	; (8008350 <_dtoa_r+0x998>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	f7f8 fac0 	bl	8000648 <__aeabi_dmul>
 80080c8:	2200      	movs	r2, #0
 80080ca:	2300      	movs	r3, #0
 80080cc:	4606      	mov	r6, r0
 80080ce:	460f      	mov	r7, r1
 80080d0:	f7f8 fd22 	bl	8000b18 <__aeabi_dcmpeq>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d09e      	beq.n	8008016 <_dtoa_r+0x65e>
 80080d8:	e7d0      	b.n	800807c <_dtoa_r+0x6c4>
 80080da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080dc:	2a00      	cmp	r2, #0
 80080de:	f000 80ca 	beq.w	8008276 <_dtoa_r+0x8be>
 80080e2:	9a07      	ldr	r2, [sp, #28]
 80080e4:	2a01      	cmp	r2, #1
 80080e6:	f300 80ad 	bgt.w	8008244 <_dtoa_r+0x88c>
 80080ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080ec:	2a00      	cmp	r2, #0
 80080ee:	f000 80a5 	beq.w	800823c <_dtoa_r+0x884>
 80080f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80080f6:	9e08      	ldr	r6, [sp, #32]
 80080f8:	9d05      	ldr	r5, [sp, #20]
 80080fa:	9a05      	ldr	r2, [sp, #20]
 80080fc:	441a      	add	r2, r3
 80080fe:	9205      	str	r2, [sp, #20]
 8008100:	9a06      	ldr	r2, [sp, #24]
 8008102:	2101      	movs	r1, #1
 8008104:	441a      	add	r2, r3
 8008106:	4620      	mov	r0, r4
 8008108:	9206      	str	r2, [sp, #24]
 800810a:	f000 fd7b 	bl	8008c04 <__i2b>
 800810e:	4607      	mov	r7, r0
 8008110:	b165      	cbz	r5, 800812c <_dtoa_r+0x774>
 8008112:	9b06      	ldr	r3, [sp, #24]
 8008114:	2b00      	cmp	r3, #0
 8008116:	dd09      	ble.n	800812c <_dtoa_r+0x774>
 8008118:	42ab      	cmp	r3, r5
 800811a:	9a05      	ldr	r2, [sp, #20]
 800811c:	bfa8      	it	ge
 800811e:	462b      	movge	r3, r5
 8008120:	1ad2      	subs	r2, r2, r3
 8008122:	9205      	str	r2, [sp, #20]
 8008124:	9a06      	ldr	r2, [sp, #24]
 8008126:	1aed      	subs	r5, r5, r3
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	9306      	str	r3, [sp, #24]
 800812c:	9b08      	ldr	r3, [sp, #32]
 800812e:	b1f3      	cbz	r3, 800816e <_dtoa_r+0x7b6>
 8008130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 80a3 	beq.w	800827e <_dtoa_r+0x8c6>
 8008138:	2e00      	cmp	r6, #0
 800813a:	dd10      	ble.n	800815e <_dtoa_r+0x7a6>
 800813c:	4639      	mov	r1, r7
 800813e:	4632      	mov	r2, r6
 8008140:	4620      	mov	r0, r4
 8008142:	f000 fe1f 	bl	8008d84 <__pow5mult>
 8008146:	4652      	mov	r2, sl
 8008148:	4601      	mov	r1, r0
 800814a:	4607      	mov	r7, r0
 800814c:	4620      	mov	r0, r4
 800814e:	f000 fd6f 	bl	8008c30 <__multiply>
 8008152:	4651      	mov	r1, sl
 8008154:	4680      	mov	r8, r0
 8008156:	4620      	mov	r0, r4
 8008158:	f000 fc9e 	bl	8008a98 <_Bfree>
 800815c:	46c2      	mov	sl, r8
 800815e:	9b08      	ldr	r3, [sp, #32]
 8008160:	1b9a      	subs	r2, r3, r6
 8008162:	d004      	beq.n	800816e <_dtoa_r+0x7b6>
 8008164:	4651      	mov	r1, sl
 8008166:	4620      	mov	r0, r4
 8008168:	f000 fe0c 	bl	8008d84 <__pow5mult>
 800816c:	4682      	mov	sl, r0
 800816e:	2101      	movs	r1, #1
 8008170:	4620      	mov	r0, r4
 8008172:	f000 fd47 	bl	8008c04 <__i2b>
 8008176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008178:	2b00      	cmp	r3, #0
 800817a:	4606      	mov	r6, r0
 800817c:	f340 8081 	ble.w	8008282 <_dtoa_r+0x8ca>
 8008180:	461a      	mov	r2, r3
 8008182:	4601      	mov	r1, r0
 8008184:	4620      	mov	r0, r4
 8008186:	f000 fdfd 	bl	8008d84 <__pow5mult>
 800818a:	9b07      	ldr	r3, [sp, #28]
 800818c:	2b01      	cmp	r3, #1
 800818e:	4606      	mov	r6, r0
 8008190:	dd7a      	ble.n	8008288 <_dtoa_r+0x8d0>
 8008192:	f04f 0800 	mov.w	r8, #0
 8008196:	6933      	ldr	r3, [r6, #16]
 8008198:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800819c:	6918      	ldr	r0, [r3, #16]
 800819e:	f000 fce3 	bl	8008b68 <__hi0bits>
 80081a2:	f1c0 0020 	rsb	r0, r0, #32
 80081a6:	9b06      	ldr	r3, [sp, #24]
 80081a8:	4418      	add	r0, r3
 80081aa:	f010 001f 	ands.w	r0, r0, #31
 80081ae:	f000 8094 	beq.w	80082da <_dtoa_r+0x922>
 80081b2:	f1c0 0320 	rsb	r3, r0, #32
 80081b6:	2b04      	cmp	r3, #4
 80081b8:	f340 8085 	ble.w	80082c6 <_dtoa_r+0x90e>
 80081bc:	9b05      	ldr	r3, [sp, #20]
 80081be:	f1c0 001c 	rsb	r0, r0, #28
 80081c2:	4403      	add	r3, r0
 80081c4:	9305      	str	r3, [sp, #20]
 80081c6:	9b06      	ldr	r3, [sp, #24]
 80081c8:	4403      	add	r3, r0
 80081ca:	4405      	add	r5, r0
 80081cc:	9306      	str	r3, [sp, #24]
 80081ce:	9b05      	ldr	r3, [sp, #20]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	dd05      	ble.n	80081e0 <_dtoa_r+0x828>
 80081d4:	4651      	mov	r1, sl
 80081d6:	461a      	mov	r2, r3
 80081d8:	4620      	mov	r0, r4
 80081da:	f000 fe2d 	bl	8008e38 <__lshift>
 80081de:	4682      	mov	sl, r0
 80081e0:	9b06      	ldr	r3, [sp, #24]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	dd05      	ble.n	80081f2 <_dtoa_r+0x83a>
 80081e6:	4631      	mov	r1, r6
 80081e8:	461a      	mov	r2, r3
 80081ea:	4620      	mov	r0, r4
 80081ec:	f000 fe24 	bl	8008e38 <__lshift>
 80081f0:	4606      	mov	r6, r0
 80081f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d072      	beq.n	80082de <_dtoa_r+0x926>
 80081f8:	4631      	mov	r1, r6
 80081fa:	4650      	mov	r0, sl
 80081fc:	f000 fe88 	bl	8008f10 <__mcmp>
 8008200:	2800      	cmp	r0, #0
 8008202:	da6c      	bge.n	80082de <_dtoa_r+0x926>
 8008204:	2300      	movs	r3, #0
 8008206:	4651      	mov	r1, sl
 8008208:	220a      	movs	r2, #10
 800820a:	4620      	mov	r0, r4
 800820c:	f000 fc66 	bl	8008adc <__multadd>
 8008210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008212:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008216:	4682      	mov	sl, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 81b0 	beq.w	800857e <_dtoa_r+0xbc6>
 800821e:	2300      	movs	r3, #0
 8008220:	4639      	mov	r1, r7
 8008222:	220a      	movs	r2, #10
 8008224:	4620      	mov	r0, r4
 8008226:	f000 fc59 	bl	8008adc <__multadd>
 800822a:	9b01      	ldr	r3, [sp, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	4607      	mov	r7, r0
 8008230:	f300 8096 	bgt.w	8008360 <_dtoa_r+0x9a8>
 8008234:	9b07      	ldr	r3, [sp, #28]
 8008236:	2b02      	cmp	r3, #2
 8008238:	dc59      	bgt.n	80082ee <_dtoa_r+0x936>
 800823a:	e091      	b.n	8008360 <_dtoa_r+0x9a8>
 800823c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800823e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008242:	e758      	b.n	80080f6 <_dtoa_r+0x73e>
 8008244:	9b04      	ldr	r3, [sp, #16]
 8008246:	1e5e      	subs	r6, r3, #1
 8008248:	9b08      	ldr	r3, [sp, #32]
 800824a:	42b3      	cmp	r3, r6
 800824c:	bfbf      	itttt	lt
 800824e:	9b08      	ldrlt	r3, [sp, #32]
 8008250:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008252:	9608      	strlt	r6, [sp, #32]
 8008254:	1af3      	sublt	r3, r6, r3
 8008256:	bfb4      	ite	lt
 8008258:	18d2      	addlt	r2, r2, r3
 800825a:	1b9e      	subge	r6, r3, r6
 800825c:	9b04      	ldr	r3, [sp, #16]
 800825e:	bfbc      	itt	lt
 8008260:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008262:	2600      	movlt	r6, #0
 8008264:	2b00      	cmp	r3, #0
 8008266:	bfb7      	itett	lt
 8008268:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800826c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008270:	1a9d      	sublt	r5, r3, r2
 8008272:	2300      	movlt	r3, #0
 8008274:	e741      	b.n	80080fa <_dtoa_r+0x742>
 8008276:	9e08      	ldr	r6, [sp, #32]
 8008278:	9d05      	ldr	r5, [sp, #20]
 800827a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800827c:	e748      	b.n	8008110 <_dtoa_r+0x758>
 800827e:	9a08      	ldr	r2, [sp, #32]
 8008280:	e770      	b.n	8008164 <_dtoa_r+0x7ac>
 8008282:	9b07      	ldr	r3, [sp, #28]
 8008284:	2b01      	cmp	r3, #1
 8008286:	dc19      	bgt.n	80082bc <_dtoa_r+0x904>
 8008288:	9b02      	ldr	r3, [sp, #8]
 800828a:	b9bb      	cbnz	r3, 80082bc <_dtoa_r+0x904>
 800828c:	9b03      	ldr	r3, [sp, #12]
 800828e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008292:	b99b      	cbnz	r3, 80082bc <_dtoa_r+0x904>
 8008294:	9b03      	ldr	r3, [sp, #12]
 8008296:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800829a:	0d1b      	lsrs	r3, r3, #20
 800829c:	051b      	lsls	r3, r3, #20
 800829e:	b183      	cbz	r3, 80082c2 <_dtoa_r+0x90a>
 80082a0:	9b05      	ldr	r3, [sp, #20]
 80082a2:	3301      	adds	r3, #1
 80082a4:	9305      	str	r3, [sp, #20]
 80082a6:	9b06      	ldr	r3, [sp, #24]
 80082a8:	3301      	adds	r3, #1
 80082aa:	9306      	str	r3, [sp, #24]
 80082ac:	f04f 0801 	mov.w	r8, #1
 80082b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f47f af6f 	bne.w	8008196 <_dtoa_r+0x7de>
 80082b8:	2001      	movs	r0, #1
 80082ba:	e774      	b.n	80081a6 <_dtoa_r+0x7ee>
 80082bc:	f04f 0800 	mov.w	r8, #0
 80082c0:	e7f6      	b.n	80082b0 <_dtoa_r+0x8f8>
 80082c2:	4698      	mov	r8, r3
 80082c4:	e7f4      	b.n	80082b0 <_dtoa_r+0x8f8>
 80082c6:	d082      	beq.n	80081ce <_dtoa_r+0x816>
 80082c8:	9a05      	ldr	r2, [sp, #20]
 80082ca:	331c      	adds	r3, #28
 80082cc:	441a      	add	r2, r3
 80082ce:	9205      	str	r2, [sp, #20]
 80082d0:	9a06      	ldr	r2, [sp, #24]
 80082d2:	441a      	add	r2, r3
 80082d4:	441d      	add	r5, r3
 80082d6:	9206      	str	r2, [sp, #24]
 80082d8:	e779      	b.n	80081ce <_dtoa_r+0x816>
 80082da:	4603      	mov	r3, r0
 80082dc:	e7f4      	b.n	80082c8 <_dtoa_r+0x910>
 80082de:	9b04      	ldr	r3, [sp, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	dc37      	bgt.n	8008354 <_dtoa_r+0x99c>
 80082e4:	9b07      	ldr	r3, [sp, #28]
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	dd34      	ble.n	8008354 <_dtoa_r+0x99c>
 80082ea:	9b04      	ldr	r3, [sp, #16]
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	9b01      	ldr	r3, [sp, #4]
 80082f0:	b963      	cbnz	r3, 800830c <_dtoa_r+0x954>
 80082f2:	4631      	mov	r1, r6
 80082f4:	2205      	movs	r2, #5
 80082f6:	4620      	mov	r0, r4
 80082f8:	f000 fbf0 	bl	8008adc <__multadd>
 80082fc:	4601      	mov	r1, r0
 80082fe:	4606      	mov	r6, r0
 8008300:	4650      	mov	r0, sl
 8008302:	f000 fe05 	bl	8008f10 <__mcmp>
 8008306:	2800      	cmp	r0, #0
 8008308:	f73f adbb 	bgt.w	8007e82 <_dtoa_r+0x4ca>
 800830c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800830e:	9d00      	ldr	r5, [sp, #0]
 8008310:	ea6f 0b03 	mvn.w	fp, r3
 8008314:	f04f 0800 	mov.w	r8, #0
 8008318:	4631      	mov	r1, r6
 800831a:	4620      	mov	r0, r4
 800831c:	f000 fbbc 	bl	8008a98 <_Bfree>
 8008320:	2f00      	cmp	r7, #0
 8008322:	f43f aeab 	beq.w	800807c <_dtoa_r+0x6c4>
 8008326:	f1b8 0f00 	cmp.w	r8, #0
 800832a:	d005      	beq.n	8008338 <_dtoa_r+0x980>
 800832c:	45b8      	cmp	r8, r7
 800832e:	d003      	beq.n	8008338 <_dtoa_r+0x980>
 8008330:	4641      	mov	r1, r8
 8008332:	4620      	mov	r0, r4
 8008334:	f000 fbb0 	bl	8008a98 <_Bfree>
 8008338:	4639      	mov	r1, r7
 800833a:	4620      	mov	r0, r4
 800833c:	f000 fbac 	bl	8008a98 <_Bfree>
 8008340:	e69c      	b.n	800807c <_dtoa_r+0x6c4>
 8008342:	2600      	movs	r6, #0
 8008344:	4637      	mov	r7, r6
 8008346:	e7e1      	b.n	800830c <_dtoa_r+0x954>
 8008348:	46bb      	mov	fp, r7
 800834a:	4637      	mov	r7, r6
 800834c:	e599      	b.n	8007e82 <_dtoa_r+0x4ca>
 800834e:	bf00      	nop
 8008350:	40240000 	.word	0x40240000
 8008354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008356:	2b00      	cmp	r3, #0
 8008358:	f000 80c8 	beq.w	80084ec <_dtoa_r+0xb34>
 800835c:	9b04      	ldr	r3, [sp, #16]
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	2d00      	cmp	r5, #0
 8008362:	dd05      	ble.n	8008370 <_dtoa_r+0x9b8>
 8008364:	4639      	mov	r1, r7
 8008366:	462a      	mov	r2, r5
 8008368:	4620      	mov	r0, r4
 800836a:	f000 fd65 	bl	8008e38 <__lshift>
 800836e:	4607      	mov	r7, r0
 8008370:	f1b8 0f00 	cmp.w	r8, #0
 8008374:	d05b      	beq.n	800842e <_dtoa_r+0xa76>
 8008376:	6879      	ldr	r1, [r7, #4]
 8008378:	4620      	mov	r0, r4
 800837a:	f000 fb4d 	bl	8008a18 <_Balloc>
 800837e:	4605      	mov	r5, r0
 8008380:	b928      	cbnz	r0, 800838e <_dtoa_r+0x9d6>
 8008382:	4b83      	ldr	r3, [pc, #524]	; (8008590 <_dtoa_r+0xbd8>)
 8008384:	4602      	mov	r2, r0
 8008386:	f240 21ef 	movw	r1, #751	; 0x2ef
 800838a:	f7ff bb2e 	b.w	80079ea <_dtoa_r+0x32>
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	3202      	adds	r2, #2
 8008392:	0092      	lsls	r2, r2, #2
 8008394:	f107 010c 	add.w	r1, r7, #12
 8008398:	300c      	adds	r0, #12
 800839a:	f000 ffd7 	bl	800934c <memcpy>
 800839e:	2201      	movs	r2, #1
 80083a0:	4629      	mov	r1, r5
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 fd48 	bl	8008e38 <__lshift>
 80083a8:	9b00      	ldr	r3, [sp, #0]
 80083aa:	3301      	adds	r3, #1
 80083ac:	9304      	str	r3, [sp, #16]
 80083ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083b2:	4413      	add	r3, r2
 80083b4:	9308      	str	r3, [sp, #32]
 80083b6:	9b02      	ldr	r3, [sp, #8]
 80083b8:	f003 0301 	and.w	r3, r3, #1
 80083bc:	46b8      	mov	r8, r7
 80083be:	9306      	str	r3, [sp, #24]
 80083c0:	4607      	mov	r7, r0
 80083c2:	9b04      	ldr	r3, [sp, #16]
 80083c4:	4631      	mov	r1, r6
 80083c6:	3b01      	subs	r3, #1
 80083c8:	4650      	mov	r0, sl
 80083ca:	9301      	str	r3, [sp, #4]
 80083cc:	f7ff fa6b 	bl	80078a6 <quorem>
 80083d0:	4641      	mov	r1, r8
 80083d2:	9002      	str	r0, [sp, #8]
 80083d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80083d8:	4650      	mov	r0, sl
 80083da:	f000 fd99 	bl	8008f10 <__mcmp>
 80083de:	463a      	mov	r2, r7
 80083e0:	9005      	str	r0, [sp, #20]
 80083e2:	4631      	mov	r1, r6
 80083e4:	4620      	mov	r0, r4
 80083e6:	f000 fdaf 	bl	8008f48 <__mdiff>
 80083ea:	68c2      	ldr	r2, [r0, #12]
 80083ec:	4605      	mov	r5, r0
 80083ee:	bb02      	cbnz	r2, 8008432 <_dtoa_r+0xa7a>
 80083f0:	4601      	mov	r1, r0
 80083f2:	4650      	mov	r0, sl
 80083f4:	f000 fd8c 	bl	8008f10 <__mcmp>
 80083f8:	4602      	mov	r2, r0
 80083fa:	4629      	mov	r1, r5
 80083fc:	4620      	mov	r0, r4
 80083fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008400:	f000 fb4a 	bl	8008a98 <_Bfree>
 8008404:	9b07      	ldr	r3, [sp, #28]
 8008406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008408:	9d04      	ldr	r5, [sp, #16]
 800840a:	ea43 0102 	orr.w	r1, r3, r2
 800840e:	9b06      	ldr	r3, [sp, #24]
 8008410:	4319      	orrs	r1, r3
 8008412:	d110      	bne.n	8008436 <_dtoa_r+0xa7e>
 8008414:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008418:	d029      	beq.n	800846e <_dtoa_r+0xab6>
 800841a:	9b05      	ldr	r3, [sp, #20]
 800841c:	2b00      	cmp	r3, #0
 800841e:	dd02      	ble.n	8008426 <_dtoa_r+0xa6e>
 8008420:	9b02      	ldr	r3, [sp, #8]
 8008422:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008426:	9b01      	ldr	r3, [sp, #4]
 8008428:	f883 9000 	strb.w	r9, [r3]
 800842c:	e774      	b.n	8008318 <_dtoa_r+0x960>
 800842e:	4638      	mov	r0, r7
 8008430:	e7ba      	b.n	80083a8 <_dtoa_r+0x9f0>
 8008432:	2201      	movs	r2, #1
 8008434:	e7e1      	b.n	80083fa <_dtoa_r+0xa42>
 8008436:	9b05      	ldr	r3, [sp, #20]
 8008438:	2b00      	cmp	r3, #0
 800843a:	db04      	blt.n	8008446 <_dtoa_r+0xa8e>
 800843c:	9907      	ldr	r1, [sp, #28]
 800843e:	430b      	orrs	r3, r1
 8008440:	9906      	ldr	r1, [sp, #24]
 8008442:	430b      	orrs	r3, r1
 8008444:	d120      	bne.n	8008488 <_dtoa_r+0xad0>
 8008446:	2a00      	cmp	r2, #0
 8008448:	dded      	ble.n	8008426 <_dtoa_r+0xa6e>
 800844a:	4651      	mov	r1, sl
 800844c:	2201      	movs	r2, #1
 800844e:	4620      	mov	r0, r4
 8008450:	f000 fcf2 	bl	8008e38 <__lshift>
 8008454:	4631      	mov	r1, r6
 8008456:	4682      	mov	sl, r0
 8008458:	f000 fd5a 	bl	8008f10 <__mcmp>
 800845c:	2800      	cmp	r0, #0
 800845e:	dc03      	bgt.n	8008468 <_dtoa_r+0xab0>
 8008460:	d1e1      	bne.n	8008426 <_dtoa_r+0xa6e>
 8008462:	f019 0f01 	tst.w	r9, #1
 8008466:	d0de      	beq.n	8008426 <_dtoa_r+0xa6e>
 8008468:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800846c:	d1d8      	bne.n	8008420 <_dtoa_r+0xa68>
 800846e:	9a01      	ldr	r2, [sp, #4]
 8008470:	2339      	movs	r3, #57	; 0x39
 8008472:	7013      	strb	r3, [r2, #0]
 8008474:	462b      	mov	r3, r5
 8008476:	461d      	mov	r5, r3
 8008478:	3b01      	subs	r3, #1
 800847a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800847e:	2a39      	cmp	r2, #57	; 0x39
 8008480:	d06c      	beq.n	800855c <_dtoa_r+0xba4>
 8008482:	3201      	adds	r2, #1
 8008484:	701a      	strb	r2, [r3, #0]
 8008486:	e747      	b.n	8008318 <_dtoa_r+0x960>
 8008488:	2a00      	cmp	r2, #0
 800848a:	dd07      	ble.n	800849c <_dtoa_r+0xae4>
 800848c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008490:	d0ed      	beq.n	800846e <_dtoa_r+0xab6>
 8008492:	9a01      	ldr	r2, [sp, #4]
 8008494:	f109 0301 	add.w	r3, r9, #1
 8008498:	7013      	strb	r3, [r2, #0]
 800849a:	e73d      	b.n	8008318 <_dtoa_r+0x960>
 800849c:	9b04      	ldr	r3, [sp, #16]
 800849e:	9a08      	ldr	r2, [sp, #32]
 80084a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d043      	beq.n	8008530 <_dtoa_r+0xb78>
 80084a8:	4651      	mov	r1, sl
 80084aa:	2300      	movs	r3, #0
 80084ac:	220a      	movs	r2, #10
 80084ae:	4620      	mov	r0, r4
 80084b0:	f000 fb14 	bl	8008adc <__multadd>
 80084b4:	45b8      	cmp	r8, r7
 80084b6:	4682      	mov	sl, r0
 80084b8:	f04f 0300 	mov.w	r3, #0
 80084bc:	f04f 020a 	mov.w	r2, #10
 80084c0:	4641      	mov	r1, r8
 80084c2:	4620      	mov	r0, r4
 80084c4:	d107      	bne.n	80084d6 <_dtoa_r+0xb1e>
 80084c6:	f000 fb09 	bl	8008adc <__multadd>
 80084ca:	4680      	mov	r8, r0
 80084cc:	4607      	mov	r7, r0
 80084ce:	9b04      	ldr	r3, [sp, #16]
 80084d0:	3301      	adds	r3, #1
 80084d2:	9304      	str	r3, [sp, #16]
 80084d4:	e775      	b.n	80083c2 <_dtoa_r+0xa0a>
 80084d6:	f000 fb01 	bl	8008adc <__multadd>
 80084da:	4639      	mov	r1, r7
 80084dc:	4680      	mov	r8, r0
 80084de:	2300      	movs	r3, #0
 80084e0:	220a      	movs	r2, #10
 80084e2:	4620      	mov	r0, r4
 80084e4:	f000 fafa 	bl	8008adc <__multadd>
 80084e8:	4607      	mov	r7, r0
 80084ea:	e7f0      	b.n	80084ce <_dtoa_r+0xb16>
 80084ec:	9b04      	ldr	r3, [sp, #16]
 80084ee:	9301      	str	r3, [sp, #4]
 80084f0:	9d00      	ldr	r5, [sp, #0]
 80084f2:	4631      	mov	r1, r6
 80084f4:	4650      	mov	r0, sl
 80084f6:	f7ff f9d6 	bl	80078a6 <quorem>
 80084fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80084fe:	9b00      	ldr	r3, [sp, #0]
 8008500:	f805 9b01 	strb.w	r9, [r5], #1
 8008504:	1aea      	subs	r2, r5, r3
 8008506:	9b01      	ldr	r3, [sp, #4]
 8008508:	4293      	cmp	r3, r2
 800850a:	dd07      	ble.n	800851c <_dtoa_r+0xb64>
 800850c:	4651      	mov	r1, sl
 800850e:	2300      	movs	r3, #0
 8008510:	220a      	movs	r2, #10
 8008512:	4620      	mov	r0, r4
 8008514:	f000 fae2 	bl	8008adc <__multadd>
 8008518:	4682      	mov	sl, r0
 800851a:	e7ea      	b.n	80084f2 <_dtoa_r+0xb3a>
 800851c:	9b01      	ldr	r3, [sp, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	bfc8      	it	gt
 8008522:	461d      	movgt	r5, r3
 8008524:	9b00      	ldr	r3, [sp, #0]
 8008526:	bfd8      	it	le
 8008528:	2501      	movle	r5, #1
 800852a:	441d      	add	r5, r3
 800852c:	f04f 0800 	mov.w	r8, #0
 8008530:	4651      	mov	r1, sl
 8008532:	2201      	movs	r2, #1
 8008534:	4620      	mov	r0, r4
 8008536:	f000 fc7f 	bl	8008e38 <__lshift>
 800853a:	4631      	mov	r1, r6
 800853c:	4682      	mov	sl, r0
 800853e:	f000 fce7 	bl	8008f10 <__mcmp>
 8008542:	2800      	cmp	r0, #0
 8008544:	dc96      	bgt.n	8008474 <_dtoa_r+0xabc>
 8008546:	d102      	bne.n	800854e <_dtoa_r+0xb96>
 8008548:	f019 0f01 	tst.w	r9, #1
 800854c:	d192      	bne.n	8008474 <_dtoa_r+0xabc>
 800854e:	462b      	mov	r3, r5
 8008550:	461d      	mov	r5, r3
 8008552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008556:	2a30      	cmp	r2, #48	; 0x30
 8008558:	d0fa      	beq.n	8008550 <_dtoa_r+0xb98>
 800855a:	e6dd      	b.n	8008318 <_dtoa_r+0x960>
 800855c:	9a00      	ldr	r2, [sp, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	d189      	bne.n	8008476 <_dtoa_r+0xabe>
 8008562:	f10b 0b01 	add.w	fp, fp, #1
 8008566:	2331      	movs	r3, #49	; 0x31
 8008568:	e796      	b.n	8008498 <_dtoa_r+0xae0>
 800856a:	4b0a      	ldr	r3, [pc, #40]	; (8008594 <_dtoa_r+0xbdc>)
 800856c:	f7ff ba99 	b.w	8007aa2 <_dtoa_r+0xea>
 8008570:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008572:	2b00      	cmp	r3, #0
 8008574:	f47f aa6d 	bne.w	8007a52 <_dtoa_r+0x9a>
 8008578:	4b07      	ldr	r3, [pc, #28]	; (8008598 <_dtoa_r+0xbe0>)
 800857a:	f7ff ba92 	b.w	8007aa2 <_dtoa_r+0xea>
 800857e:	9b01      	ldr	r3, [sp, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	dcb5      	bgt.n	80084f0 <_dtoa_r+0xb38>
 8008584:	9b07      	ldr	r3, [sp, #28]
 8008586:	2b02      	cmp	r3, #2
 8008588:	f73f aeb1 	bgt.w	80082ee <_dtoa_r+0x936>
 800858c:	e7b0      	b.n	80084f0 <_dtoa_r+0xb38>
 800858e:	bf00      	nop
 8008590:	0800963c 	.word	0x0800963c
 8008594:	0800959c 	.word	0x0800959c
 8008598:	080095c0 	.word	0x080095c0

0800859c <_free_r>:
 800859c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800859e:	2900      	cmp	r1, #0
 80085a0:	d044      	beq.n	800862c <_free_r+0x90>
 80085a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085a6:	9001      	str	r0, [sp, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f1a1 0404 	sub.w	r4, r1, #4
 80085ae:	bfb8      	it	lt
 80085b0:	18e4      	addlt	r4, r4, r3
 80085b2:	f7fe ffcb 	bl	800754c <__malloc_lock>
 80085b6:	4a1e      	ldr	r2, [pc, #120]	; (8008630 <_free_r+0x94>)
 80085b8:	9801      	ldr	r0, [sp, #4]
 80085ba:	6813      	ldr	r3, [r2, #0]
 80085bc:	b933      	cbnz	r3, 80085cc <_free_r+0x30>
 80085be:	6063      	str	r3, [r4, #4]
 80085c0:	6014      	str	r4, [r2, #0]
 80085c2:	b003      	add	sp, #12
 80085c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085c8:	f7fe bfc6 	b.w	8007558 <__malloc_unlock>
 80085cc:	42a3      	cmp	r3, r4
 80085ce:	d908      	bls.n	80085e2 <_free_r+0x46>
 80085d0:	6825      	ldr	r5, [r4, #0]
 80085d2:	1961      	adds	r1, r4, r5
 80085d4:	428b      	cmp	r3, r1
 80085d6:	bf01      	itttt	eq
 80085d8:	6819      	ldreq	r1, [r3, #0]
 80085da:	685b      	ldreq	r3, [r3, #4]
 80085dc:	1949      	addeq	r1, r1, r5
 80085de:	6021      	streq	r1, [r4, #0]
 80085e0:	e7ed      	b.n	80085be <_free_r+0x22>
 80085e2:	461a      	mov	r2, r3
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	b10b      	cbz	r3, 80085ec <_free_r+0x50>
 80085e8:	42a3      	cmp	r3, r4
 80085ea:	d9fa      	bls.n	80085e2 <_free_r+0x46>
 80085ec:	6811      	ldr	r1, [r2, #0]
 80085ee:	1855      	adds	r5, r2, r1
 80085f0:	42a5      	cmp	r5, r4
 80085f2:	d10b      	bne.n	800860c <_free_r+0x70>
 80085f4:	6824      	ldr	r4, [r4, #0]
 80085f6:	4421      	add	r1, r4
 80085f8:	1854      	adds	r4, r2, r1
 80085fa:	42a3      	cmp	r3, r4
 80085fc:	6011      	str	r1, [r2, #0]
 80085fe:	d1e0      	bne.n	80085c2 <_free_r+0x26>
 8008600:	681c      	ldr	r4, [r3, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	6053      	str	r3, [r2, #4]
 8008606:	440c      	add	r4, r1
 8008608:	6014      	str	r4, [r2, #0]
 800860a:	e7da      	b.n	80085c2 <_free_r+0x26>
 800860c:	d902      	bls.n	8008614 <_free_r+0x78>
 800860e:	230c      	movs	r3, #12
 8008610:	6003      	str	r3, [r0, #0]
 8008612:	e7d6      	b.n	80085c2 <_free_r+0x26>
 8008614:	6825      	ldr	r5, [r4, #0]
 8008616:	1961      	adds	r1, r4, r5
 8008618:	428b      	cmp	r3, r1
 800861a:	bf04      	itt	eq
 800861c:	6819      	ldreq	r1, [r3, #0]
 800861e:	685b      	ldreq	r3, [r3, #4]
 8008620:	6063      	str	r3, [r4, #4]
 8008622:	bf04      	itt	eq
 8008624:	1949      	addeq	r1, r1, r5
 8008626:	6021      	streq	r1, [r4, #0]
 8008628:	6054      	str	r4, [r2, #4]
 800862a:	e7ca      	b.n	80085c2 <_free_r+0x26>
 800862c:	b003      	add	sp, #12
 800862e:	bd30      	pop	{r4, r5, pc}
 8008630:	200004f4 	.word	0x200004f4

08008634 <__sfputc_r>:
 8008634:	6893      	ldr	r3, [r2, #8]
 8008636:	3b01      	subs	r3, #1
 8008638:	2b00      	cmp	r3, #0
 800863a:	b410      	push	{r4}
 800863c:	6093      	str	r3, [r2, #8]
 800863e:	da08      	bge.n	8008652 <__sfputc_r+0x1e>
 8008640:	6994      	ldr	r4, [r2, #24]
 8008642:	42a3      	cmp	r3, r4
 8008644:	db01      	blt.n	800864a <__sfputc_r+0x16>
 8008646:	290a      	cmp	r1, #10
 8008648:	d103      	bne.n	8008652 <__sfputc_r+0x1e>
 800864a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800864e:	f000 bda2 	b.w	8009196 <__swbuf_r>
 8008652:	6813      	ldr	r3, [r2, #0]
 8008654:	1c58      	adds	r0, r3, #1
 8008656:	6010      	str	r0, [r2, #0]
 8008658:	7019      	strb	r1, [r3, #0]
 800865a:	4608      	mov	r0, r1
 800865c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008660:	4770      	bx	lr

08008662 <__sfputs_r>:
 8008662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008664:	4606      	mov	r6, r0
 8008666:	460f      	mov	r7, r1
 8008668:	4614      	mov	r4, r2
 800866a:	18d5      	adds	r5, r2, r3
 800866c:	42ac      	cmp	r4, r5
 800866e:	d101      	bne.n	8008674 <__sfputs_r+0x12>
 8008670:	2000      	movs	r0, #0
 8008672:	e007      	b.n	8008684 <__sfputs_r+0x22>
 8008674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008678:	463a      	mov	r2, r7
 800867a:	4630      	mov	r0, r6
 800867c:	f7ff ffda 	bl	8008634 <__sfputc_r>
 8008680:	1c43      	adds	r3, r0, #1
 8008682:	d1f3      	bne.n	800866c <__sfputs_r+0xa>
 8008684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008688 <_vfiprintf_r>:
 8008688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800868c:	460d      	mov	r5, r1
 800868e:	b09d      	sub	sp, #116	; 0x74
 8008690:	4614      	mov	r4, r2
 8008692:	4698      	mov	r8, r3
 8008694:	4606      	mov	r6, r0
 8008696:	b118      	cbz	r0, 80086a0 <_vfiprintf_r+0x18>
 8008698:	6a03      	ldr	r3, [r0, #32]
 800869a:	b90b      	cbnz	r3, 80086a0 <_vfiprintf_r+0x18>
 800869c:	f7fe ffee 	bl	800767c <__sinit>
 80086a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086a2:	07d9      	lsls	r1, r3, #31
 80086a4:	d405      	bmi.n	80086b2 <_vfiprintf_r+0x2a>
 80086a6:	89ab      	ldrh	r3, [r5, #12]
 80086a8:	059a      	lsls	r2, r3, #22
 80086aa:	d402      	bmi.n	80086b2 <_vfiprintf_r+0x2a>
 80086ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086ae:	f7ff f8f8 	bl	80078a2 <__retarget_lock_acquire_recursive>
 80086b2:	89ab      	ldrh	r3, [r5, #12]
 80086b4:	071b      	lsls	r3, r3, #28
 80086b6:	d501      	bpl.n	80086bc <_vfiprintf_r+0x34>
 80086b8:	692b      	ldr	r3, [r5, #16]
 80086ba:	b99b      	cbnz	r3, 80086e4 <_vfiprintf_r+0x5c>
 80086bc:	4629      	mov	r1, r5
 80086be:	4630      	mov	r0, r6
 80086c0:	f000 fda6 	bl	8009210 <__swsetup_r>
 80086c4:	b170      	cbz	r0, 80086e4 <_vfiprintf_r+0x5c>
 80086c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086c8:	07dc      	lsls	r4, r3, #31
 80086ca:	d504      	bpl.n	80086d6 <_vfiprintf_r+0x4e>
 80086cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086d0:	b01d      	add	sp, #116	; 0x74
 80086d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d6:	89ab      	ldrh	r3, [r5, #12]
 80086d8:	0598      	lsls	r0, r3, #22
 80086da:	d4f7      	bmi.n	80086cc <_vfiprintf_r+0x44>
 80086dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086de:	f7ff f8e1 	bl	80078a4 <__retarget_lock_release_recursive>
 80086e2:	e7f3      	b.n	80086cc <_vfiprintf_r+0x44>
 80086e4:	2300      	movs	r3, #0
 80086e6:	9309      	str	r3, [sp, #36]	; 0x24
 80086e8:	2320      	movs	r3, #32
 80086ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80086f2:	2330      	movs	r3, #48	; 0x30
 80086f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80088a8 <_vfiprintf_r+0x220>
 80086f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086fc:	f04f 0901 	mov.w	r9, #1
 8008700:	4623      	mov	r3, r4
 8008702:	469a      	mov	sl, r3
 8008704:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008708:	b10a      	cbz	r2, 800870e <_vfiprintf_r+0x86>
 800870a:	2a25      	cmp	r2, #37	; 0x25
 800870c:	d1f9      	bne.n	8008702 <_vfiprintf_r+0x7a>
 800870e:	ebba 0b04 	subs.w	fp, sl, r4
 8008712:	d00b      	beq.n	800872c <_vfiprintf_r+0xa4>
 8008714:	465b      	mov	r3, fp
 8008716:	4622      	mov	r2, r4
 8008718:	4629      	mov	r1, r5
 800871a:	4630      	mov	r0, r6
 800871c:	f7ff ffa1 	bl	8008662 <__sfputs_r>
 8008720:	3001      	adds	r0, #1
 8008722:	f000 80a9 	beq.w	8008878 <_vfiprintf_r+0x1f0>
 8008726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008728:	445a      	add	r2, fp
 800872a:	9209      	str	r2, [sp, #36]	; 0x24
 800872c:	f89a 3000 	ldrb.w	r3, [sl]
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 80a1 	beq.w	8008878 <_vfiprintf_r+0x1f0>
 8008736:	2300      	movs	r3, #0
 8008738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800873c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008740:	f10a 0a01 	add.w	sl, sl, #1
 8008744:	9304      	str	r3, [sp, #16]
 8008746:	9307      	str	r3, [sp, #28]
 8008748:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800874c:	931a      	str	r3, [sp, #104]	; 0x68
 800874e:	4654      	mov	r4, sl
 8008750:	2205      	movs	r2, #5
 8008752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008756:	4854      	ldr	r0, [pc, #336]	; (80088a8 <_vfiprintf_r+0x220>)
 8008758:	f7f7 fd62 	bl	8000220 <memchr>
 800875c:	9a04      	ldr	r2, [sp, #16]
 800875e:	b9d8      	cbnz	r0, 8008798 <_vfiprintf_r+0x110>
 8008760:	06d1      	lsls	r1, r2, #27
 8008762:	bf44      	itt	mi
 8008764:	2320      	movmi	r3, #32
 8008766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800876a:	0713      	lsls	r3, r2, #28
 800876c:	bf44      	itt	mi
 800876e:	232b      	movmi	r3, #43	; 0x2b
 8008770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008774:	f89a 3000 	ldrb.w	r3, [sl]
 8008778:	2b2a      	cmp	r3, #42	; 0x2a
 800877a:	d015      	beq.n	80087a8 <_vfiprintf_r+0x120>
 800877c:	9a07      	ldr	r2, [sp, #28]
 800877e:	4654      	mov	r4, sl
 8008780:	2000      	movs	r0, #0
 8008782:	f04f 0c0a 	mov.w	ip, #10
 8008786:	4621      	mov	r1, r4
 8008788:	f811 3b01 	ldrb.w	r3, [r1], #1
 800878c:	3b30      	subs	r3, #48	; 0x30
 800878e:	2b09      	cmp	r3, #9
 8008790:	d94d      	bls.n	800882e <_vfiprintf_r+0x1a6>
 8008792:	b1b0      	cbz	r0, 80087c2 <_vfiprintf_r+0x13a>
 8008794:	9207      	str	r2, [sp, #28]
 8008796:	e014      	b.n	80087c2 <_vfiprintf_r+0x13a>
 8008798:	eba0 0308 	sub.w	r3, r0, r8
 800879c:	fa09 f303 	lsl.w	r3, r9, r3
 80087a0:	4313      	orrs	r3, r2
 80087a2:	9304      	str	r3, [sp, #16]
 80087a4:	46a2      	mov	sl, r4
 80087a6:	e7d2      	b.n	800874e <_vfiprintf_r+0xc6>
 80087a8:	9b03      	ldr	r3, [sp, #12]
 80087aa:	1d19      	adds	r1, r3, #4
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	9103      	str	r1, [sp, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	bfbb      	ittet	lt
 80087b4:	425b      	neglt	r3, r3
 80087b6:	f042 0202 	orrlt.w	r2, r2, #2
 80087ba:	9307      	strge	r3, [sp, #28]
 80087bc:	9307      	strlt	r3, [sp, #28]
 80087be:	bfb8      	it	lt
 80087c0:	9204      	strlt	r2, [sp, #16]
 80087c2:	7823      	ldrb	r3, [r4, #0]
 80087c4:	2b2e      	cmp	r3, #46	; 0x2e
 80087c6:	d10c      	bne.n	80087e2 <_vfiprintf_r+0x15a>
 80087c8:	7863      	ldrb	r3, [r4, #1]
 80087ca:	2b2a      	cmp	r3, #42	; 0x2a
 80087cc:	d134      	bne.n	8008838 <_vfiprintf_r+0x1b0>
 80087ce:	9b03      	ldr	r3, [sp, #12]
 80087d0:	1d1a      	adds	r2, r3, #4
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	9203      	str	r2, [sp, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	bfb8      	it	lt
 80087da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80087de:	3402      	adds	r4, #2
 80087e0:	9305      	str	r3, [sp, #20]
 80087e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80088b8 <_vfiprintf_r+0x230>
 80087e6:	7821      	ldrb	r1, [r4, #0]
 80087e8:	2203      	movs	r2, #3
 80087ea:	4650      	mov	r0, sl
 80087ec:	f7f7 fd18 	bl	8000220 <memchr>
 80087f0:	b138      	cbz	r0, 8008802 <_vfiprintf_r+0x17a>
 80087f2:	9b04      	ldr	r3, [sp, #16]
 80087f4:	eba0 000a 	sub.w	r0, r0, sl
 80087f8:	2240      	movs	r2, #64	; 0x40
 80087fa:	4082      	lsls	r2, r0
 80087fc:	4313      	orrs	r3, r2
 80087fe:	3401      	adds	r4, #1
 8008800:	9304      	str	r3, [sp, #16]
 8008802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008806:	4829      	ldr	r0, [pc, #164]	; (80088ac <_vfiprintf_r+0x224>)
 8008808:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800880c:	2206      	movs	r2, #6
 800880e:	f7f7 fd07 	bl	8000220 <memchr>
 8008812:	2800      	cmp	r0, #0
 8008814:	d03f      	beq.n	8008896 <_vfiprintf_r+0x20e>
 8008816:	4b26      	ldr	r3, [pc, #152]	; (80088b0 <_vfiprintf_r+0x228>)
 8008818:	bb1b      	cbnz	r3, 8008862 <_vfiprintf_r+0x1da>
 800881a:	9b03      	ldr	r3, [sp, #12]
 800881c:	3307      	adds	r3, #7
 800881e:	f023 0307 	bic.w	r3, r3, #7
 8008822:	3308      	adds	r3, #8
 8008824:	9303      	str	r3, [sp, #12]
 8008826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008828:	443b      	add	r3, r7
 800882a:	9309      	str	r3, [sp, #36]	; 0x24
 800882c:	e768      	b.n	8008700 <_vfiprintf_r+0x78>
 800882e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008832:	460c      	mov	r4, r1
 8008834:	2001      	movs	r0, #1
 8008836:	e7a6      	b.n	8008786 <_vfiprintf_r+0xfe>
 8008838:	2300      	movs	r3, #0
 800883a:	3401      	adds	r4, #1
 800883c:	9305      	str	r3, [sp, #20]
 800883e:	4619      	mov	r1, r3
 8008840:	f04f 0c0a 	mov.w	ip, #10
 8008844:	4620      	mov	r0, r4
 8008846:	f810 2b01 	ldrb.w	r2, [r0], #1
 800884a:	3a30      	subs	r2, #48	; 0x30
 800884c:	2a09      	cmp	r2, #9
 800884e:	d903      	bls.n	8008858 <_vfiprintf_r+0x1d0>
 8008850:	2b00      	cmp	r3, #0
 8008852:	d0c6      	beq.n	80087e2 <_vfiprintf_r+0x15a>
 8008854:	9105      	str	r1, [sp, #20]
 8008856:	e7c4      	b.n	80087e2 <_vfiprintf_r+0x15a>
 8008858:	fb0c 2101 	mla	r1, ip, r1, r2
 800885c:	4604      	mov	r4, r0
 800885e:	2301      	movs	r3, #1
 8008860:	e7f0      	b.n	8008844 <_vfiprintf_r+0x1bc>
 8008862:	ab03      	add	r3, sp, #12
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	462a      	mov	r2, r5
 8008868:	4b12      	ldr	r3, [pc, #72]	; (80088b4 <_vfiprintf_r+0x22c>)
 800886a:	a904      	add	r1, sp, #16
 800886c:	4630      	mov	r0, r6
 800886e:	f7fe f949 	bl	8006b04 <_printf_float>
 8008872:	4607      	mov	r7, r0
 8008874:	1c78      	adds	r0, r7, #1
 8008876:	d1d6      	bne.n	8008826 <_vfiprintf_r+0x19e>
 8008878:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800887a:	07d9      	lsls	r1, r3, #31
 800887c:	d405      	bmi.n	800888a <_vfiprintf_r+0x202>
 800887e:	89ab      	ldrh	r3, [r5, #12]
 8008880:	059a      	lsls	r2, r3, #22
 8008882:	d402      	bmi.n	800888a <_vfiprintf_r+0x202>
 8008884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008886:	f7ff f80d 	bl	80078a4 <__retarget_lock_release_recursive>
 800888a:	89ab      	ldrh	r3, [r5, #12]
 800888c:	065b      	lsls	r3, r3, #25
 800888e:	f53f af1d 	bmi.w	80086cc <_vfiprintf_r+0x44>
 8008892:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008894:	e71c      	b.n	80086d0 <_vfiprintf_r+0x48>
 8008896:	ab03      	add	r3, sp, #12
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	462a      	mov	r2, r5
 800889c:	4b05      	ldr	r3, [pc, #20]	; (80088b4 <_vfiprintf_r+0x22c>)
 800889e:	a904      	add	r1, sp, #16
 80088a0:	4630      	mov	r0, r6
 80088a2:	f7fe fc7b 	bl	800719c <_printf_i>
 80088a6:	e7e4      	b.n	8008872 <_vfiprintf_r+0x1ea>
 80088a8:	0800964d 	.word	0x0800964d
 80088ac:	08009657 	.word	0x08009657
 80088b0:	08006b05 	.word	0x08006b05
 80088b4:	08008663 	.word	0x08008663
 80088b8:	08009653 	.word	0x08009653

080088bc <__sflush_r>:
 80088bc:	898a      	ldrh	r2, [r1, #12]
 80088be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c2:	4605      	mov	r5, r0
 80088c4:	0710      	lsls	r0, r2, #28
 80088c6:	460c      	mov	r4, r1
 80088c8:	d458      	bmi.n	800897c <__sflush_r+0xc0>
 80088ca:	684b      	ldr	r3, [r1, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	dc05      	bgt.n	80088dc <__sflush_r+0x20>
 80088d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	dc02      	bgt.n	80088dc <__sflush_r+0x20>
 80088d6:	2000      	movs	r0, #0
 80088d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088de:	2e00      	cmp	r6, #0
 80088e0:	d0f9      	beq.n	80088d6 <__sflush_r+0x1a>
 80088e2:	2300      	movs	r3, #0
 80088e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088e8:	682f      	ldr	r7, [r5, #0]
 80088ea:	6a21      	ldr	r1, [r4, #32]
 80088ec:	602b      	str	r3, [r5, #0]
 80088ee:	d032      	beq.n	8008956 <__sflush_r+0x9a>
 80088f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088f2:	89a3      	ldrh	r3, [r4, #12]
 80088f4:	075a      	lsls	r2, r3, #29
 80088f6:	d505      	bpl.n	8008904 <__sflush_r+0x48>
 80088f8:	6863      	ldr	r3, [r4, #4]
 80088fa:	1ac0      	subs	r0, r0, r3
 80088fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088fe:	b10b      	cbz	r3, 8008904 <__sflush_r+0x48>
 8008900:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008902:	1ac0      	subs	r0, r0, r3
 8008904:	2300      	movs	r3, #0
 8008906:	4602      	mov	r2, r0
 8008908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800890a:	6a21      	ldr	r1, [r4, #32]
 800890c:	4628      	mov	r0, r5
 800890e:	47b0      	blx	r6
 8008910:	1c43      	adds	r3, r0, #1
 8008912:	89a3      	ldrh	r3, [r4, #12]
 8008914:	d106      	bne.n	8008924 <__sflush_r+0x68>
 8008916:	6829      	ldr	r1, [r5, #0]
 8008918:	291d      	cmp	r1, #29
 800891a:	d82b      	bhi.n	8008974 <__sflush_r+0xb8>
 800891c:	4a29      	ldr	r2, [pc, #164]	; (80089c4 <__sflush_r+0x108>)
 800891e:	410a      	asrs	r2, r1
 8008920:	07d6      	lsls	r6, r2, #31
 8008922:	d427      	bmi.n	8008974 <__sflush_r+0xb8>
 8008924:	2200      	movs	r2, #0
 8008926:	6062      	str	r2, [r4, #4]
 8008928:	04d9      	lsls	r1, r3, #19
 800892a:	6922      	ldr	r2, [r4, #16]
 800892c:	6022      	str	r2, [r4, #0]
 800892e:	d504      	bpl.n	800893a <__sflush_r+0x7e>
 8008930:	1c42      	adds	r2, r0, #1
 8008932:	d101      	bne.n	8008938 <__sflush_r+0x7c>
 8008934:	682b      	ldr	r3, [r5, #0]
 8008936:	b903      	cbnz	r3, 800893a <__sflush_r+0x7e>
 8008938:	6560      	str	r0, [r4, #84]	; 0x54
 800893a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800893c:	602f      	str	r7, [r5, #0]
 800893e:	2900      	cmp	r1, #0
 8008940:	d0c9      	beq.n	80088d6 <__sflush_r+0x1a>
 8008942:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008946:	4299      	cmp	r1, r3
 8008948:	d002      	beq.n	8008950 <__sflush_r+0x94>
 800894a:	4628      	mov	r0, r5
 800894c:	f7ff fe26 	bl	800859c <_free_r>
 8008950:	2000      	movs	r0, #0
 8008952:	6360      	str	r0, [r4, #52]	; 0x34
 8008954:	e7c0      	b.n	80088d8 <__sflush_r+0x1c>
 8008956:	2301      	movs	r3, #1
 8008958:	4628      	mov	r0, r5
 800895a:	47b0      	blx	r6
 800895c:	1c41      	adds	r1, r0, #1
 800895e:	d1c8      	bne.n	80088f2 <__sflush_r+0x36>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d0c5      	beq.n	80088f2 <__sflush_r+0x36>
 8008966:	2b1d      	cmp	r3, #29
 8008968:	d001      	beq.n	800896e <__sflush_r+0xb2>
 800896a:	2b16      	cmp	r3, #22
 800896c:	d101      	bne.n	8008972 <__sflush_r+0xb6>
 800896e:	602f      	str	r7, [r5, #0]
 8008970:	e7b1      	b.n	80088d6 <__sflush_r+0x1a>
 8008972:	89a3      	ldrh	r3, [r4, #12]
 8008974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008978:	81a3      	strh	r3, [r4, #12]
 800897a:	e7ad      	b.n	80088d8 <__sflush_r+0x1c>
 800897c:	690f      	ldr	r7, [r1, #16]
 800897e:	2f00      	cmp	r7, #0
 8008980:	d0a9      	beq.n	80088d6 <__sflush_r+0x1a>
 8008982:	0793      	lsls	r3, r2, #30
 8008984:	680e      	ldr	r6, [r1, #0]
 8008986:	bf08      	it	eq
 8008988:	694b      	ldreq	r3, [r1, #20]
 800898a:	600f      	str	r7, [r1, #0]
 800898c:	bf18      	it	ne
 800898e:	2300      	movne	r3, #0
 8008990:	eba6 0807 	sub.w	r8, r6, r7
 8008994:	608b      	str	r3, [r1, #8]
 8008996:	f1b8 0f00 	cmp.w	r8, #0
 800899a:	dd9c      	ble.n	80088d6 <__sflush_r+0x1a>
 800899c:	6a21      	ldr	r1, [r4, #32]
 800899e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089a0:	4643      	mov	r3, r8
 80089a2:	463a      	mov	r2, r7
 80089a4:	4628      	mov	r0, r5
 80089a6:	47b0      	blx	r6
 80089a8:	2800      	cmp	r0, #0
 80089aa:	dc06      	bgt.n	80089ba <__sflush_r+0xfe>
 80089ac:	89a3      	ldrh	r3, [r4, #12]
 80089ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089b2:	81a3      	strh	r3, [r4, #12]
 80089b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089b8:	e78e      	b.n	80088d8 <__sflush_r+0x1c>
 80089ba:	4407      	add	r7, r0
 80089bc:	eba8 0800 	sub.w	r8, r8, r0
 80089c0:	e7e9      	b.n	8008996 <__sflush_r+0xda>
 80089c2:	bf00      	nop
 80089c4:	dfbffffe 	.word	0xdfbffffe

080089c8 <_fflush_r>:
 80089c8:	b538      	push	{r3, r4, r5, lr}
 80089ca:	690b      	ldr	r3, [r1, #16]
 80089cc:	4605      	mov	r5, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	b913      	cbnz	r3, 80089d8 <_fflush_r+0x10>
 80089d2:	2500      	movs	r5, #0
 80089d4:	4628      	mov	r0, r5
 80089d6:	bd38      	pop	{r3, r4, r5, pc}
 80089d8:	b118      	cbz	r0, 80089e2 <_fflush_r+0x1a>
 80089da:	6a03      	ldr	r3, [r0, #32]
 80089dc:	b90b      	cbnz	r3, 80089e2 <_fflush_r+0x1a>
 80089de:	f7fe fe4d 	bl	800767c <__sinit>
 80089e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0f3      	beq.n	80089d2 <_fflush_r+0xa>
 80089ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089ec:	07d0      	lsls	r0, r2, #31
 80089ee:	d404      	bmi.n	80089fa <_fflush_r+0x32>
 80089f0:	0599      	lsls	r1, r3, #22
 80089f2:	d402      	bmi.n	80089fa <_fflush_r+0x32>
 80089f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089f6:	f7fe ff54 	bl	80078a2 <__retarget_lock_acquire_recursive>
 80089fa:	4628      	mov	r0, r5
 80089fc:	4621      	mov	r1, r4
 80089fe:	f7ff ff5d 	bl	80088bc <__sflush_r>
 8008a02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a04:	07da      	lsls	r2, r3, #31
 8008a06:	4605      	mov	r5, r0
 8008a08:	d4e4      	bmi.n	80089d4 <_fflush_r+0xc>
 8008a0a:	89a3      	ldrh	r3, [r4, #12]
 8008a0c:	059b      	lsls	r3, r3, #22
 8008a0e:	d4e1      	bmi.n	80089d4 <_fflush_r+0xc>
 8008a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a12:	f7fe ff47 	bl	80078a4 <__retarget_lock_release_recursive>
 8008a16:	e7dd      	b.n	80089d4 <_fflush_r+0xc>

08008a18 <_Balloc>:
 8008a18:	b570      	push	{r4, r5, r6, lr}
 8008a1a:	69c6      	ldr	r6, [r0, #28]
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	460d      	mov	r5, r1
 8008a20:	b976      	cbnz	r6, 8008a40 <_Balloc+0x28>
 8008a22:	2010      	movs	r0, #16
 8008a24:	f7fe faa4 	bl	8006f70 <malloc>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	61e0      	str	r0, [r4, #28]
 8008a2c:	b920      	cbnz	r0, 8008a38 <_Balloc+0x20>
 8008a2e:	4b18      	ldr	r3, [pc, #96]	; (8008a90 <_Balloc+0x78>)
 8008a30:	4818      	ldr	r0, [pc, #96]	; (8008a94 <_Balloc+0x7c>)
 8008a32:	216b      	movs	r1, #107	; 0x6b
 8008a34:	f000 fc98 	bl	8009368 <__assert_func>
 8008a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a3c:	6006      	str	r6, [r0, #0]
 8008a3e:	60c6      	str	r6, [r0, #12]
 8008a40:	69e6      	ldr	r6, [r4, #28]
 8008a42:	68f3      	ldr	r3, [r6, #12]
 8008a44:	b183      	cbz	r3, 8008a68 <_Balloc+0x50>
 8008a46:	69e3      	ldr	r3, [r4, #28]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a4e:	b9b8      	cbnz	r0, 8008a80 <_Balloc+0x68>
 8008a50:	2101      	movs	r1, #1
 8008a52:	fa01 f605 	lsl.w	r6, r1, r5
 8008a56:	1d72      	adds	r2, r6, #5
 8008a58:	0092      	lsls	r2, r2, #2
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 fca2 	bl	80093a4 <_calloc_r>
 8008a60:	b160      	cbz	r0, 8008a7c <_Balloc+0x64>
 8008a62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a66:	e00e      	b.n	8008a86 <_Balloc+0x6e>
 8008a68:	2221      	movs	r2, #33	; 0x21
 8008a6a:	2104      	movs	r1, #4
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f000 fc99 	bl	80093a4 <_calloc_r>
 8008a72:	69e3      	ldr	r3, [r4, #28]
 8008a74:	60f0      	str	r0, [r6, #12]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1e4      	bne.n	8008a46 <_Balloc+0x2e>
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	bd70      	pop	{r4, r5, r6, pc}
 8008a80:	6802      	ldr	r2, [r0, #0]
 8008a82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a86:	2300      	movs	r3, #0
 8008a88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a8c:	e7f7      	b.n	8008a7e <_Balloc+0x66>
 8008a8e:	bf00      	nop
 8008a90:	080095cd 	.word	0x080095cd
 8008a94:	0800965e 	.word	0x0800965e

08008a98 <_Bfree>:
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	69c6      	ldr	r6, [r0, #28]
 8008a9c:	4605      	mov	r5, r0
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	b976      	cbnz	r6, 8008ac0 <_Bfree+0x28>
 8008aa2:	2010      	movs	r0, #16
 8008aa4:	f7fe fa64 	bl	8006f70 <malloc>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	61e8      	str	r0, [r5, #28]
 8008aac:	b920      	cbnz	r0, 8008ab8 <_Bfree+0x20>
 8008aae:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <_Bfree+0x3c>)
 8008ab0:	4809      	ldr	r0, [pc, #36]	; (8008ad8 <_Bfree+0x40>)
 8008ab2:	218f      	movs	r1, #143	; 0x8f
 8008ab4:	f000 fc58 	bl	8009368 <__assert_func>
 8008ab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008abc:	6006      	str	r6, [r0, #0]
 8008abe:	60c6      	str	r6, [r0, #12]
 8008ac0:	b13c      	cbz	r4, 8008ad2 <_Bfree+0x3a>
 8008ac2:	69eb      	ldr	r3, [r5, #28]
 8008ac4:	6862      	ldr	r2, [r4, #4]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008acc:	6021      	str	r1, [r4, #0]
 8008ace:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}
 8008ad4:	080095cd 	.word	0x080095cd
 8008ad8:	0800965e 	.word	0x0800965e

08008adc <__multadd>:
 8008adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae0:	690d      	ldr	r5, [r1, #16]
 8008ae2:	4607      	mov	r7, r0
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	461e      	mov	r6, r3
 8008ae8:	f101 0c14 	add.w	ip, r1, #20
 8008aec:	2000      	movs	r0, #0
 8008aee:	f8dc 3000 	ldr.w	r3, [ip]
 8008af2:	b299      	uxth	r1, r3
 8008af4:	fb02 6101 	mla	r1, r2, r1, r6
 8008af8:	0c1e      	lsrs	r6, r3, #16
 8008afa:	0c0b      	lsrs	r3, r1, #16
 8008afc:	fb02 3306 	mla	r3, r2, r6, r3
 8008b00:	b289      	uxth	r1, r1
 8008b02:	3001      	adds	r0, #1
 8008b04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b08:	4285      	cmp	r5, r0
 8008b0a:	f84c 1b04 	str.w	r1, [ip], #4
 8008b0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b12:	dcec      	bgt.n	8008aee <__multadd+0x12>
 8008b14:	b30e      	cbz	r6, 8008b5a <__multadd+0x7e>
 8008b16:	68a3      	ldr	r3, [r4, #8]
 8008b18:	42ab      	cmp	r3, r5
 8008b1a:	dc19      	bgt.n	8008b50 <__multadd+0x74>
 8008b1c:	6861      	ldr	r1, [r4, #4]
 8008b1e:	4638      	mov	r0, r7
 8008b20:	3101      	adds	r1, #1
 8008b22:	f7ff ff79 	bl	8008a18 <_Balloc>
 8008b26:	4680      	mov	r8, r0
 8008b28:	b928      	cbnz	r0, 8008b36 <__multadd+0x5a>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	4b0c      	ldr	r3, [pc, #48]	; (8008b60 <__multadd+0x84>)
 8008b2e:	480d      	ldr	r0, [pc, #52]	; (8008b64 <__multadd+0x88>)
 8008b30:	21ba      	movs	r1, #186	; 0xba
 8008b32:	f000 fc19 	bl	8009368 <__assert_func>
 8008b36:	6922      	ldr	r2, [r4, #16]
 8008b38:	3202      	adds	r2, #2
 8008b3a:	f104 010c 	add.w	r1, r4, #12
 8008b3e:	0092      	lsls	r2, r2, #2
 8008b40:	300c      	adds	r0, #12
 8008b42:	f000 fc03 	bl	800934c <memcpy>
 8008b46:	4621      	mov	r1, r4
 8008b48:	4638      	mov	r0, r7
 8008b4a:	f7ff ffa5 	bl	8008a98 <_Bfree>
 8008b4e:	4644      	mov	r4, r8
 8008b50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b54:	3501      	adds	r5, #1
 8008b56:	615e      	str	r6, [r3, #20]
 8008b58:	6125      	str	r5, [r4, #16]
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b60:	0800963c 	.word	0x0800963c
 8008b64:	0800965e 	.word	0x0800965e

08008b68 <__hi0bits>:
 8008b68:	0c03      	lsrs	r3, r0, #16
 8008b6a:	041b      	lsls	r3, r3, #16
 8008b6c:	b9d3      	cbnz	r3, 8008ba4 <__hi0bits+0x3c>
 8008b6e:	0400      	lsls	r0, r0, #16
 8008b70:	2310      	movs	r3, #16
 8008b72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008b76:	bf04      	itt	eq
 8008b78:	0200      	lsleq	r0, r0, #8
 8008b7a:	3308      	addeq	r3, #8
 8008b7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008b80:	bf04      	itt	eq
 8008b82:	0100      	lsleq	r0, r0, #4
 8008b84:	3304      	addeq	r3, #4
 8008b86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008b8a:	bf04      	itt	eq
 8008b8c:	0080      	lsleq	r0, r0, #2
 8008b8e:	3302      	addeq	r3, #2
 8008b90:	2800      	cmp	r0, #0
 8008b92:	db05      	blt.n	8008ba0 <__hi0bits+0x38>
 8008b94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008b98:	f103 0301 	add.w	r3, r3, #1
 8008b9c:	bf08      	it	eq
 8008b9e:	2320      	moveq	r3, #32
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	4770      	bx	lr
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	e7e4      	b.n	8008b72 <__hi0bits+0xa>

08008ba8 <__lo0bits>:
 8008ba8:	6803      	ldr	r3, [r0, #0]
 8008baa:	f013 0207 	ands.w	r2, r3, #7
 8008bae:	d00c      	beq.n	8008bca <__lo0bits+0x22>
 8008bb0:	07d9      	lsls	r1, r3, #31
 8008bb2:	d422      	bmi.n	8008bfa <__lo0bits+0x52>
 8008bb4:	079a      	lsls	r2, r3, #30
 8008bb6:	bf49      	itett	mi
 8008bb8:	085b      	lsrmi	r3, r3, #1
 8008bba:	089b      	lsrpl	r3, r3, #2
 8008bbc:	6003      	strmi	r3, [r0, #0]
 8008bbe:	2201      	movmi	r2, #1
 8008bc0:	bf5c      	itt	pl
 8008bc2:	6003      	strpl	r3, [r0, #0]
 8008bc4:	2202      	movpl	r2, #2
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	4770      	bx	lr
 8008bca:	b299      	uxth	r1, r3
 8008bcc:	b909      	cbnz	r1, 8008bd2 <__lo0bits+0x2a>
 8008bce:	0c1b      	lsrs	r3, r3, #16
 8008bd0:	2210      	movs	r2, #16
 8008bd2:	b2d9      	uxtb	r1, r3
 8008bd4:	b909      	cbnz	r1, 8008bda <__lo0bits+0x32>
 8008bd6:	3208      	adds	r2, #8
 8008bd8:	0a1b      	lsrs	r3, r3, #8
 8008bda:	0719      	lsls	r1, r3, #28
 8008bdc:	bf04      	itt	eq
 8008bde:	091b      	lsreq	r3, r3, #4
 8008be0:	3204      	addeq	r2, #4
 8008be2:	0799      	lsls	r1, r3, #30
 8008be4:	bf04      	itt	eq
 8008be6:	089b      	lsreq	r3, r3, #2
 8008be8:	3202      	addeq	r2, #2
 8008bea:	07d9      	lsls	r1, r3, #31
 8008bec:	d403      	bmi.n	8008bf6 <__lo0bits+0x4e>
 8008bee:	085b      	lsrs	r3, r3, #1
 8008bf0:	f102 0201 	add.w	r2, r2, #1
 8008bf4:	d003      	beq.n	8008bfe <__lo0bits+0x56>
 8008bf6:	6003      	str	r3, [r0, #0]
 8008bf8:	e7e5      	b.n	8008bc6 <__lo0bits+0x1e>
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	e7e3      	b.n	8008bc6 <__lo0bits+0x1e>
 8008bfe:	2220      	movs	r2, #32
 8008c00:	e7e1      	b.n	8008bc6 <__lo0bits+0x1e>
	...

08008c04 <__i2b>:
 8008c04:	b510      	push	{r4, lr}
 8008c06:	460c      	mov	r4, r1
 8008c08:	2101      	movs	r1, #1
 8008c0a:	f7ff ff05 	bl	8008a18 <_Balloc>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	b928      	cbnz	r0, 8008c1e <__i2b+0x1a>
 8008c12:	4b05      	ldr	r3, [pc, #20]	; (8008c28 <__i2b+0x24>)
 8008c14:	4805      	ldr	r0, [pc, #20]	; (8008c2c <__i2b+0x28>)
 8008c16:	f240 1145 	movw	r1, #325	; 0x145
 8008c1a:	f000 fba5 	bl	8009368 <__assert_func>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	6144      	str	r4, [r0, #20]
 8008c22:	6103      	str	r3, [r0, #16]
 8008c24:	bd10      	pop	{r4, pc}
 8008c26:	bf00      	nop
 8008c28:	0800963c 	.word	0x0800963c
 8008c2c:	0800965e 	.word	0x0800965e

08008c30 <__multiply>:
 8008c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c34:	4691      	mov	r9, r2
 8008c36:	690a      	ldr	r2, [r1, #16]
 8008c38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	bfb8      	it	lt
 8008c40:	460b      	movlt	r3, r1
 8008c42:	460c      	mov	r4, r1
 8008c44:	bfbc      	itt	lt
 8008c46:	464c      	movlt	r4, r9
 8008c48:	4699      	movlt	r9, r3
 8008c4a:	6927      	ldr	r7, [r4, #16]
 8008c4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008c50:	68a3      	ldr	r3, [r4, #8]
 8008c52:	6861      	ldr	r1, [r4, #4]
 8008c54:	eb07 060a 	add.w	r6, r7, sl
 8008c58:	42b3      	cmp	r3, r6
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	bfb8      	it	lt
 8008c5e:	3101      	addlt	r1, #1
 8008c60:	f7ff feda 	bl	8008a18 <_Balloc>
 8008c64:	b930      	cbnz	r0, 8008c74 <__multiply+0x44>
 8008c66:	4602      	mov	r2, r0
 8008c68:	4b44      	ldr	r3, [pc, #272]	; (8008d7c <__multiply+0x14c>)
 8008c6a:	4845      	ldr	r0, [pc, #276]	; (8008d80 <__multiply+0x150>)
 8008c6c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008c70:	f000 fb7a 	bl	8009368 <__assert_func>
 8008c74:	f100 0514 	add.w	r5, r0, #20
 8008c78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c7c:	462b      	mov	r3, r5
 8008c7e:	2200      	movs	r2, #0
 8008c80:	4543      	cmp	r3, r8
 8008c82:	d321      	bcc.n	8008cc8 <__multiply+0x98>
 8008c84:	f104 0314 	add.w	r3, r4, #20
 8008c88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008c8c:	f109 0314 	add.w	r3, r9, #20
 8008c90:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008c94:	9202      	str	r2, [sp, #8]
 8008c96:	1b3a      	subs	r2, r7, r4
 8008c98:	3a15      	subs	r2, #21
 8008c9a:	f022 0203 	bic.w	r2, r2, #3
 8008c9e:	3204      	adds	r2, #4
 8008ca0:	f104 0115 	add.w	r1, r4, #21
 8008ca4:	428f      	cmp	r7, r1
 8008ca6:	bf38      	it	cc
 8008ca8:	2204      	movcc	r2, #4
 8008caa:	9201      	str	r2, [sp, #4]
 8008cac:	9a02      	ldr	r2, [sp, #8]
 8008cae:	9303      	str	r3, [sp, #12]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d80c      	bhi.n	8008cce <__multiply+0x9e>
 8008cb4:	2e00      	cmp	r6, #0
 8008cb6:	dd03      	ble.n	8008cc0 <__multiply+0x90>
 8008cb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d05b      	beq.n	8008d78 <__multiply+0x148>
 8008cc0:	6106      	str	r6, [r0, #16]
 8008cc2:	b005      	add	sp, #20
 8008cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc8:	f843 2b04 	str.w	r2, [r3], #4
 8008ccc:	e7d8      	b.n	8008c80 <__multiply+0x50>
 8008cce:	f8b3 a000 	ldrh.w	sl, [r3]
 8008cd2:	f1ba 0f00 	cmp.w	sl, #0
 8008cd6:	d024      	beq.n	8008d22 <__multiply+0xf2>
 8008cd8:	f104 0e14 	add.w	lr, r4, #20
 8008cdc:	46a9      	mov	r9, r5
 8008cde:	f04f 0c00 	mov.w	ip, #0
 8008ce2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008ce6:	f8d9 1000 	ldr.w	r1, [r9]
 8008cea:	fa1f fb82 	uxth.w	fp, r2
 8008cee:	b289      	uxth	r1, r1
 8008cf0:	fb0a 110b 	mla	r1, sl, fp, r1
 8008cf4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008cf8:	f8d9 2000 	ldr.w	r2, [r9]
 8008cfc:	4461      	add	r1, ip
 8008cfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d02:	fb0a c20b 	mla	r2, sl, fp, ip
 8008d06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008d0a:	b289      	uxth	r1, r1
 8008d0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d10:	4577      	cmp	r7, lr
 8008d12:	f849 1b04 	str.w	r1, [r9], #4
 8008d16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d1a:	d8e2      	bhi.n	8008ce2 <__multiply+0xb2>
 8008d1c:	9a01      	ldr	r2, [sp, #4]
 8008d1e:	f845 c002 	str.w	ip, [r5, r2]
 8008d22:	9a03      	ldr	r2, [sp, #12]
 8008d24:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d28:	3304      	adds	r3, #4
 8008d2a:	f1b9 0f00 	cmp.w	r9, #0
 8008d2e:	d021      	beq.n	8008d74 <__multiply+0x144>
 8008d30:	6829      	ldr	r1, [r5, #0]
 8008d32:	f104 0c14 	add.w	ip, r4, #20
 8008d36:	46ae      	mov	lr, r5
 8008d38:	f04f 0a00 	mov.w	sl, #0
 8008d3c:	f8bc b000 	ldrh.w	fp, [ip]
 8008d40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008d44:	fb09 220b 	mla	r2, r9, fp, r2
 8008d48:	4452      	add	r2, sl
 8008d4a:	b289      	uxth	r1, r1
 8008d4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d50:	f84e 1b04 	str.w	r1, [lr], #4
 8008d54:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008d58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d5c:	f8be 1000 	ldrh.w	r1, [lr]
 8008d60:	fb09 110a 	mla	r1, r9, sl, r1
 8008d64:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008d68:	4567      	cmp	r7, ip
 8008d6a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d6e:	d8e5      	bhi.n	8008d3c <__multiply+0x10c>
 8008d70:	9a01      	ldr	r2, [sp, #4]
 8008d72:	50a9      	str	r1, [r5, r2]
 8008d74:	3504      	adds	r5, #4
 8008d76:	e799      	b.n	8008cac <__multiply+0x7c>
 8008d78:	3e01      	subs	r6, #1
 8008d7a:	e79b      	b.n	8008cb4 <__multiply+0x84>
 8008d7c:	0800963c 	.word	0x0800963c
 8008d80:	0800965e 	.word	0x0800965e

08008d84 <__pow5mult>:
 8008d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d88:	4615      	mov	r5, r2
 8008d8a:	f012 0203 	ands.w	r2, r2, #3
 8008d8e:	4606      	mov	r6, r0
 8008d90:	460f      	mov	r7, r1
 8008d92:	d007      	beq.n	8008da4 <__pow5mult+0x20>
 8008d94:	4c25      	ldr	r4, [pc, #148]	; (8008e2c <__pow5mult+0xa8>)
 8008d96:	3a01      	subs	r2, #1
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d9e:	f7ff fe9d 	bl	8008adc <__multadd>
 8008da2:	4607      	mov	r7, r0
 8008da4:	10ad      	asrs	r5, r5, #2
 8008da6:	d03d      	beq.n	8008e24 <__pow5mult+0xa0>
 8008da8:	69f4      	ldr	r4, [r6, #28]
 8008daa:	b97c      	cbnz	r4, 8008dcc <__pow5mult+0x48>
 8008dac:	2010      	movs	r0, #16
 8008dae:	f7fe f8df 	bl	8006f70 <malloc>
 8008db2:	4602      	mov	r2, r0
 8008db4:	61f0      	str	r0, [r6, #28]
 8008db6:	b928      	cbnz	r0, 8008dc4 <__pow5mult+0x40>
 8008db8:	4b1d      	ldr	r3, [pc, #116]	; (8008e30 <__pow5mult+0xac>)
 8008dba:	481e      	ldr	r0, [pc, #120]	; (8008e34 <__pow5mult+0xb0>)
 8008dbc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008dc0:	f000 fad2 	bl	8009368 <__assert_func>
 8008dc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008dc8:	6004      	str	r4, [r0, #0]
 8008dca:	60c4      	str	r4, [r0, #12]
 8008dcc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008dd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008dd4:	b94c      	cbnz	r4, 8008dea <__pow5mult+0x66>
 8008dd6:	f240 2171 	movw	r1, #625	; 0x271
 8008dda:	4630      	mov	r0, r6
 8008ddc:	f7ff ff12 	bl	8008c04 <__i2b>
 8008de0:	2300      	movs	r3, #0
 8008de2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008de6:	4604      	mov	r4, r0
 8008de8:	6003      	str	r3, [r0, #0]
 8008dea:	f04f 0900 	mov.w	r9, #0
 8008dee:	07eb      	lsls	r3, r5, #31
 8008df0:	d50a      	bpl.n	8008e08 <__pow5mult+0x84>
 8008df2:	4639      	mov	r1, r7
 8008df4:	4622      	mov	r2, r4
 8008df6:	4630      	mov	r0, r6
 8008df8:	f7ff ff1a 	bl	8008c30 <__multiply>
 8008dfc:	4639      	mov	r1, r7
 8008dfe:	4680      	mov	r8, r0
 8008e00:	4630      	mov	r0, r6
 8008e02:	f7ff fe49 	bl	8008a98 <_Bfree>
 8008e06:	4647      	mov	r7, r8
 8008e08:	106d      	asrs	r5, r5, #1
 8008e0a:	d00b      	beq.n	8008e24 <__pow5mult+0xa0>
 8008e0c:	6820      	ldr	r0, [r4, #0]
 8008e0e:	b938      	cbnz	r0, 8008e20 <__pow5mult+0x9c>
 8008e10:	4622      	mov	r2, r4
 8008e12:	4621      	mov	r1, r4
 8008e14:	4630      	mov	r0, r6
 8008e16:	f7ff ff0b 	bl	8008c30 <__multiply>
 8008e1a:	6020      	str	r0, [r4, #0]
 8008e1c:	f8c0 9000 	str.w	r9, [r0]
 8008e20:	4604      	mov	r4, r0
 8008e22:	e7e4      	b.n	8008dee <__pow5mult+0x6a>
 8008e24:	4638      	mov	r0, r7
 8008e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e2a:	bf00      	nop
 8008e2c:	080097a8 	.word	0x080097a8
 8008e30:	080095cd 	.word	0x080095cd
 8008e34:	0800965e 	.word	0x0800965e

08008e38 <__lshift>:
 8008e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	6849      	ldr	r1, [r1, #4]
 8008e40:	6923      	ldr	r3, [r4, #16]
 8008e42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e46:	68a3      	ldr	r3, [r4, #8]
 8008e48:	4607      	mov	r7, r0
 8008e4a:	4691      	mov	r9, r2
 8008e4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e50:	f108 0601 	add.w	r6, r8, #1
 8008e54:	42b3      	cmp	r3, r6
 8008e56:	db0b      	blt.n	8008e70 <__lshift+0x38>
 8008e58:	4638      	mov	r0, r7
 8008e5a:	f7ff fddd 	bl	8008a18 <_Balloc>
 8008e5e:	4605      	mov	r5, r0
 8008e60:	b948      	cbnz	r0, 8008e76 <__lshift+0x3e>
 8008e62:	4602      	mov	r2, r0
 8008e64:	4b28      	ldr	r3, [pc, #160]	; (8008f08 <__lshift+0xd0>)
 8008e66:	4829      	ldr	r0, [pc, #164]	; (8008f0c <__lshift+0xd4>)
 8008e68:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008e6c:	f000 fa7c 	bl	8009368 <__assert_func>
 8008e70:	3101      	adds	r1, #1
 8008e72:	005b      	lsls	r3, r3, #1
 8008e74:	e7ee      	b.n	8008e54 <__lshift+0x1c>
 8008e76:	2300      	movs	r3, #0
 8008e78:	f100 0114 	add.w	r1, r0, #20
 8008e7c:	f100 0210 	add.w	r2, r0, #16
 8008e80:	4618      	mov	r0, r3
 8008e82:	4553      	cmp	r3, sl
 8008e84:	db33      	blt.n	8008eee <__lshift+0xb6>
 8008e86:	6920      	ldr	r0, [r4, #16]
 8008e88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e8c:	f104 0314 	add.w	r3, r4, #20
 8008e90:	f019 091f 	ands.w	r9, r9, #31
 8008e94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e9c:	d02b      	beq.n	8008ef6 <__lshift+0xbe>
 8008e9e:	f1c9 0e20 	rsb	lr, r9, #32
 8008ea2:	468a      	mov	sl, r1
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	6818      	ldr	r0, [r3, #0]
 8008ea8:	fa00 f009 	lsl.w	r0, r0, r9
 8008eac:	4310      	orrs	r0, r2
 8008eae:	f84a 0b04 	str.w	r0, [sl], #4
 8008eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eb6:	459c      	cmp	ip, r3
 8008eb8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ebc:	d8f3      	bhi.n	8008ea6 <__lshift+0x6e>
 8008ebe:	ebac 0304 	sub.w	r3, ip, r4
 8008ec2:	3b15      	subs	r3, #21
 8008ec4:	f023 0303 	bic.w	r3, r3, #3
 8008ec8:	3304      	adds	r3, #4
 8008eca:	f104 0015 	add.w	r0, r4, #21
 8008ece:	4584      	cmp	ip, r0
 8008ed0:	bf38      	it	cc
 8008ed2:	2304      	movcc	r3, #4
 8008ed4:	50ca      	str	r2, [r1, r3]
 8008ed6:	b10a      	cbz	r2, 8008edc <__lshift+0xa4>
 8008ed8:	f108 0602 	add.w	r6, r8, #2
 8008edc:	3e01      	subs	r6, #1
 8008ede:	4638      	mov	r0, r7
 8008ee0:	612e      	str	r6, [r5, #16]
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	f7ff fdd8 	bl	8008a98 <_Bfree>
 8008ee8:	4628      	mov	r0, r5
 8008eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eee:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	e7c5      	b.n	8008e82 <__lshift+0x4a>
 8008ef6:	3904      	subs	r1, #4
 8008ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008efc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f00:	459c      	cmp	ip, r3
 8008f02:	d8f9      	bhi.n	8008ef8 <__lshift+0xc0>
 8008f04:	e7ea      	b.n	8008edc <__lshift+0xa4>
 8008f06:	bf00      	nop
 8008f08:	0800963c 	.word	0x0800963c
 8008f0c:	0800965e 	.word	0x0800965e

08008f10 <__mcmp>:
 8008f10:	b530      	push	{r4, r5, lr}
 8008f12:	6902      	ldr	r2, [r0, #16]
 8008f14:	690c      	ldr	r4, [r1, #16]
 8008f16:	1b12      	subs	r2, r2, r4
 8008f18:	d10e      	bne.n	8008f38 <__mcmp+0x28>
 8008f1a:	f100 0314 	add.w	r3, r0, #20
 8008f1e:	3114      	adds	r1, #20
 8008f20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008f24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008f28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008f2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008f30:	42a5      	cmp	r5, r4
 8008f32:	d003      	beq.n	8008f3c <__mcmp+0x2c>
 8008f34:	d305      	bcc.n	8008f42 <__mcmp+0x32>
 8008f36:	2201      	movs	r2, #1
 8008f38:	4610      	mov	r0, r2
 8008f3a:	bd30      	pop	{r4, r5, pc}
 8008f3c:	4283      	cmp	r3, r0
 8008f3e:	d3f3      	bcc.n	8008f28 <__mcmp+0x18>
 8008f40:	e7fa      	b.n	8008f38 <__mcmp+0x28>
 8008f42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f46:	e7f7      	b.n	8008f38 <__mcmp+0x28>

08008f48 <__mdiff>:
 8008f48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4c:	460c      	mov	r4, r1
 8008f4e:	4606      	mov	r6, r0
 8008f50:	4611      	mov	r1, r2
 8008f52:	4620      	mov	r0, r4
 8008f54:	4690      	mov	r8, r2
 8008f56:	f7ff ffdb 	bl	8008f10 <__mcmp>
 8008f5a:	1e05      	subs	r5, r0, #0
 8008f5c:	d110      	bne.n	8008f80 <__mdiff+0x38>
 8008f5e:	4629      	mov	r1, r5
 8008f60:	4630      	mov	r0, r6
 8008f62:	f7ff fd59 	bl	8008a18 <_Balloc>
 8008f66:	b930      	cbnz	r0, 8008f76 <__mdiff+0x2e>
 8008f68:	4b3a      	ldr	r3, [pc, #232]	; (8009054 <__mdiff+0x10c>)
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	f240 2137 	movw	r1, #567	; 0x237
 8008f70:	4839      	ldr	r0, [pc, #228]	; (8009058 <__mdiff+0x110>)
 8008f72:	f000 f9f9 	bl	8009368 <__assert_func>
 8008f76:	2301      	movs	r3, #1
 8008f78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f80:	bfa4      	itt	ge
 8008f82:	4643      	movge	r3, r8
 8008f84:	46a0      	movge	r8, r4
 8008f86:	4630      	mov	r0, r6
 8008f88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f8c:	bfa6      	itte	ge
 8008f8e:	461c      	movge	r4, r3
 8008f90:	2500      	movge	r5, #0
 8008f92:	2501      	movlt	r5, #1
 8008f94:	f7ff fd40 	bl	8008a18 <_Balloc>
 8008f98:	b920      	cbnz	r0, 8008fa4 <__mdiff+0x5c>
 8008f9a:	4b2e      	ldr	r3, [pc, #184]	; (8009054 <__mdiff+0x10c>)
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	f240 2145 	movw	r1, #581	; 0x245
 8008fa2:	e7e5      	b.n	8008f70 <__mdiff+0x28>
 8008fa4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008fa8:	6926      	ldr	r6, [r4, #16]
 8008faa:	60c5      	str	r5, [r0, #12]
 8008fac:	f104 0914 	add.w	r9, r4, #20
 8008fb0:	f108 0514 	add.w	r5, r8, #20
 8008fb4:	f100 0e14 	add.w	lr, r0, #20
 8008fb8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008fbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008fc0:	f108 0210 	add.w	r2, r8, #16
 8008fc4:	46f2      	mov	sl, lr
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	f859 3b04 	ldr.w	r3, [r9], #4
 8008fcc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008fd0:	fa11 f88b 	uxtah	r8, r1, fp
 8008fd4:	b299      	uxth	r1, r3
 8008fd6:	0c1b      	lsrs	r3, r3, #16
 8008fd8:	eba8 0801 	sub.w	r8, r8, r1
 8008fdc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008fe0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008fe4:	fa1f f888 	uxth.w	r8, r8
 8008fe8:	1419      	asrs	r1, r3, #16
 8008fea:	454e      	cmp	r6, r9
 8008fec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ff0:	f84a 3b04 	str.w	r3, [sl], #4
 8008ff4:	d8e8      	bhi.n	8008fc8 <__mdiff+0x80>
 8008ff6:	1b33      	subs	r3, r6, r4
 8008ff8:	3b15      	subs	r3, #21
 8008ffa:	f023 0303 	bic.w	r3, r3, #3
 8008ffe:	3304      	adds	r3, #4
 8009000:	3415      	adds	r4, #21
 8009002:	42a6      	cmp	r6, r4
 8009004:	bf38      	it	cc
 8009006:	2304      	movcc	r3, #4
 8009008:	441d      	add	r5, r3
 800900a:	4473      	add	r3, lr
 800900c:	469e      	mov	lr, r3
 800900e:	462e      	mov	r6, r5
 8009010:	4566      	cmp	r6, ip
 8009012:	d30e      	bcc.n	8009032 <__mdiff+0xea>
 8009014:	f10c 0203 	add.w	r2, ip, #3
 8009018:	1b52      	subs	r2, r2, r5
 800901a:	f022 0203 	bic.w	r2, r2, #3
 800901e:	3d03      	subs	r5, #3
 8009020:	45ac      	cmp	ip, r5
 8009022:	bf38      	it	cc
 8009024:	2200      	movcc	r2, #0
 8009026:	4413      	add	r3, r2
 8009028:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800902c:	b17a      	cbz	r2, 800904e <__mdiff+0x106>
 800902e:	6107      	str	r7, [r0, #16]
 8009030:	e7a4      	b.n	8008f7c <__mdiff+0x34>
 8009032:	f856 8b04 	ldr.w	r8, [r6], #4
 8009036:	fa11 f288 	uxtah	r2, r1, r8
 800903a:	1414      	asrs	r4, r2, #16
 800903c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009040:	b292      	uxth	r2, r2
 8009042:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009046:	f84e 2b04 	str.w	r2, [lr], #4
 800904a:	1421      	asrs	r1, r4, #16
 800904c:	e7e0      	b.n	8009010 <__mdiff+0xc8>
 800904e:	3f01      	subs	r7, #1
 8009050:	e7ea      	b.n	8009028 <__mdiff+0xe0>
 8009052:	bf00      	nop
 8009054:	0800963c 	.word	0x0800963c
 8009058:	0800965e 	.word	0x0800965e

0800905c <__d2b>:
 800905c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009060:	460f      	mov	r7, r1
 8009062:	2101      	movs	r1, #1
 8009064:	ec59 8b10 	vmov	r8, r9, d0
 8009068:	4616      	mov	r6, r2
 800906a:	f7ff fcd5 	bl	8008a18 <_Balloc>
 800906e:	4604      	mov	r4, r0
 8009070:	b930      	cbnz	r0, 8009080 <__d2b+0x24>
 8009072:	4602      	mov	r2, r0
 8009074:	4b24      	ldr	r3, [pc, #144]	; (8009108 <__d2b+0xac>)
 8009076:	4825      	ldr	r0, [pc, #148]	; (800910c <__d2b+0xb0>)
 8009078:	f240 310f 	movw	r1, #783	; 0x30f
 800907c:	f000 f974 	bl	8009368 <__assert_func>
 8009080:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009084:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009088:	bb2d      	cbnz	r5, 80090d6 <__d2b+0x7a>
 800908a:	9301      	str	r3, [sp, #4]
 800908c:	f1b8 0300 	subs.w	r3, r8, #0
 8009090:	d026      	beq.n	80090e0 <__d2b+0x84>
 8009092:	4668      	mov	r0, sp
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	f7ff fd87 	bl	8008ba8 <__lo0bits>
 800909a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800909e:	b1e8      	cbz	r0, 80090dc <__d2b+0x80>
 80090a0:	f1c0 0320 	rsb	r3, r0, #32
 80090a4:	fa02 f303 	lsl.w	r3, r2, r3
 80090a8:	430b      	orrs	r3, r1
 80090aa:	40c2      	lsrs	r2, r0
 80090ac:	6163      	str	r3, [r4, #20]
 80090ae:	9201      	str	r2, [sp, #4]
 80090b0:	9b01      	ldr	r3, [sp, #4]
 80090b2:	61a3      	str	r3, [r4, #24]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	bf14      	ite	ne
 80090b8:	2202      	movne	r2, #2
 80090ba:	2201      	moveq	r2, #1
 80090bc:	6122      	str	r2, [r4, #16]
 80090be:	b1bd      	cbz	r5, 80090f0 <__d2b+0x94>
 80090c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80090c4:	4405      	add	r5, r0
 80090c6:	603d      	str	r5, [r7, #0]
 80090c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80090cc:	6030      	str	r0, [r6, #0]
 80090ce:	4620      	mov	r0, r4
 80090d0:	b003      	add	sp, #12
 80090d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090da:	e7d6      	b.n	800908a <__d2b+0x2e>
 80090dc:	6161      	str	r1, [r4, #20]
 80090de:	e7e7      	b.n	80090b0 <__d2b+0x54>
 80090e0:	a801      	add	r0, sp, #4
 80090e2:	f7ff fd61 	bl	8008ba8 <__lo0bits>
 80090e6:	9b01      	ldr	r3, [sp, #4]
 80090e8:	6163      	str	r3, [r4, #20]
 80090ea:	3020      	adds	r0, #32
 80090ec:	2201      	movs	r2, #1
 80090ee:	e7e5      	b.n	80090bc <__d2b+0x60>
 80090f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80090f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80090f8:	6038      	str	r0, [r7, #0]
 80090fa:	6918      	ldr	r0, [r3, #16]
 80090fc:	f7ff fd34 	bl	8008b68 <__hi0bits>
 8009100:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009104:	e7e2      	b.n	80090cc <__d2b+0x70>
 8009106:	bf00      	nop
 8009108:	0800963c 	.word	0x0800963c
 800910c:	0800965e 	.word	0x0800965e

08009110 <__sread>:
 8009110:	b510      	push	{r4, lr}
 8009112:	460c      	mov	r4, r1
 8009114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009118:	f000 f8f4 	bl	8009304 <_read_r>
 800911c:	2800      	cmp	r0, #0
 800911e:	bfab      	itete	ge
 8009120:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009122:	89a3      	ldrhlt	r3, [r4, #12]
 8009124:	181b      	addge	r3, r3, r0
 8009126:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800912a:	bfac      	ite	ge
 800912c:	6563      	strge	r3, [r4, #84]	; 0x54
 800912e:	81a3      	strhlt	r3, [r4, #12]
 8009130:	bd10      	pop	{r4, pc}

08009132 <__swrite>:
 8009132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009136:	461f      	mov	r7, r3
 8009138:	898b      	ldrh	r3, [r1, #12]
 800913a:	05db      	lsls	r3, r3, #23
 800913c:	4605      	mov	r5, r0
 800913e:	460c      	mov	r4, r1
 8009140:	4616      	mov	r6, r2
 8009142:	d505      	bpl.n	8009150 <__swrite+0x1e>
 8009144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009148:	2302      	movs	r3, #2
 800914a:	2200      	movs	r2, #0
 800914c:	f000 f8c8 	bl	80092e0 <_lseek_r>
 8009150:	89a3      	ldrh	r3, [r4, #12]
 8009152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800915a:	81a3      	strh	r3, [r4, #12]
 800915c:	4632      	mov	r2, r6
 800915e:	463b      	mov	r3, r7
 8009160:	4628      	mov	r0, r5
 8009162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009166:	f000 b8df 	b.w	8009328 <_write_r>

0800916a <__sseek>:
 800916a:	b510      	push	{r4, lr}
 800916c:	460c      	mov	r4, r1
 800916e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009172:	f000 f8b5 	bl	80092e0 <_lseek_r>
 8009176:	1c43      	adds	r3, r0, #1
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	bf15      	itete	ne
 800917c:	6560      	strne	r0, [r4, #84]	; 0x54
 800917e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009186:	81a3      	strheq	r3, [r4, #12]
 8009188:	bf18      	it	ne
 800918a:	81a3      	strhne	r3, [r4, #12]
 800918c:	bd10      	pop	{r4, pc}

0800918e <__sclose>:
 800918e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009192:	f000 b895 	b.w	80092c0 <_close_r>

08009196 <__swbuf_r>:
 8009196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009198:	460e      	mov	r6, r1
 800919a:	4614      	mov	r4, r2
 800919c:	4605      	mov	r5, r0
 800919e:	b118      	cbz	r0, 80091a8 <__swbuf_r+0x12>
 80091a0:	6a03      	ldr	r3, [r0, #32]
 80091a2:	b90b      	cbnz	r3, 80091a8 <__swbuf_r+0x12>
 80091a4:	f7fe fa6a 	bl	800767c <__sinit>
 80091a8:	69a3      	ldr	r3, [r4, #24]
 80091aa:	60a3      	str	r3, [r4, #8]
 80091ac:	89a3      	ldrh	r3, [r4, #12]
 80091ae:	071a      	lsls	r2, r3, #28
 80091b0:	d525      	bpl.n	80091fe <__swbuf_r+0x68>
 80091b2:	6923      	ldr	r3, [r4, #16]
 80091b4:	b31b      	cbz	r3, 80091fe <__swbuf_r+0x68>
 80091b6:	6823      	ldr	r3, [r4, #0]
 80091b8:	6922      	ldr	r2, [r4, #16]
 80091ba:	1a98      	subs	r0, r3, r2
 80091bc:	6963      	ldr	r3, [r4, #20]
 80091be:	b2f6      	uxtb	r6, r6
 80091c0:	4283      	cmp	r3, r0
 80091c2:	4637      	mov	r7, r6
 80091c4:	dc04      	bgt.n	80091d0 <__swbuf_r+0x3a>
 80091c6:	4621      	mov	r1, r4
 80091c8:	4628      	mov	r0, r5
 80091ca:	f7ff fbfd 	bl	80089c8 <_fflush_r>
 80091ce:	b9e0      	cbnz	r0, 800920a <__swbuf_r+0x74>
 80091d0:	68a3      	ldr	r3, [r4, #8]
 80091d2:	3b01      	subs	r3, #1
 80091d4:	60a3      	str	r3, [r4, #8]
 80091d6:	6823      	ldr	r3, [r4, #0]
 80091d8:	1c5a      	adds	r2, r3, #1
 80091da:	6022      	str	r2, [r4, #0]
 80091dc:	701e      	strb	r6, [r3, #0]
 80091de:	6962      	ldr	r2, [r4, #20]
 80091e0:	1c43      	adds	r3, r0, #1
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d004      	beq.n	80091f0 <__swbuf_r+0x5a>
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	07db      	lsls	r3, r3, #31
 80091ea:	d506      	bpl.n	80091fa <__swbuf_r+0x64>
 80091ec:	2e0a      	cmp	r6, #10
 80091ee:	d104      	bne.n	80091fa <__swbuf_r+0x64>
 80091f0:	4621      	mov	r1, r4
 80091f2:	4628      	mov	r0, r5
 80091f4:	f7ff fbe8 	bl	80089c8 <_fflush_r>
 80091f8:	b938      	cbnz	r0, 800920a <__swbuf_r+0x74>
 80091fa:	4638      	mov	r0, r7
 80091fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091fe:	4621      	mov	r1, r4
 8009200:	4628      	mov	r0, r5
 8009202:	f000 f805 	bl	8009210 <__swsetup_r>
 8009206:	2800      	cmp	r0, #0
 8009208:	d0d5      	beq.n	80091b6 <__swbuf_r+0x20>
 800920a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800920e:	e7f4      	b.n	80091fa <__swbuf_r+0x64>

08009210 <__swsetup_r>:
 8009210:	b538      	push	{r3, r4, r5, lr}
 8009212:	4b2a      	ldr	r3, [pc, #168]	; (80092bc <__swsetup_r+0xac>)
 8009214:	4605      	mov	r5, r0
 8009216:	6818      	ldr	r0, [r3, #0]
 8009218:	460c      	mov	r4, r1
 800921a:	b118      	cbz	r0, 8009224 <__swsetup_r+0x14>
 800921c:	6a03      	ldr	r3, [r0, #32]
 800921e:	b90b      	cbnz	r3, 8009224 <__swsetup_r+0x14>
 8009220:	f7fe fa2c 	bl	800767c <__sinit>
 8009224:	89a3      	ldrh	r3, [r4, #12]
 8009226:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800922a:	0718      	lsls	r0, r3, #28
 800922c:	d422      	bmi.n	8009274 <__swsetup_r+0x64>
 800922e:	06d9      	lsls	r1, r3, #27
 8009230:	d407      	bmi.n	8009242 <__swsetup_r+0x32>
 8009232:	2309      	movs	r3, #9
 8009234:	602b      	str	r3, [r5, #0]
 8009236:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800923a:	81a3      	strh	r3, [r4, #12]
 800923c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009240:	e034      	b.n	80092ac <__swsetup_r+0x9c>
 8009242:	0758      	lsls	r0, r3, #29
 8009244:	d512      	bpl.n	800926c <__swsetup_r+0x5c>
 8009246:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009248:	b141      	cbz	r1, 800925c <__swsetup_r+0x4c>
 800924a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800924e:	4299      	cmp	r1, r3
 8009250:	d002      	beq.n	8009258 <__swsetup_r+0x48>
 8009252:	4628      	mov	r0, r5
 8009254:	f7ff f9a2 	bl	800859c <_free_r>
 8009258:	2300      	movs	r3, #0
 800925a:	6363      	str	r3, [r4, #52]	; 0x34
 800925c:	89a3      	ldrh	r3, [r4, #12]
 800925e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009262:	81a3      	strh	r3, [r4, #12]
 8009264:	2300      	movs	r3, #0
 8009266:	6063      	str	r3, [r4, #4]
 8009268:	6923      	ldr	r3, [r4, #16]
 800926a:	6023      	str	r3, [r4, #0]
 800926c:	89a3      	ldrh	r3, [r4, #12]
 800926e:	f043 0308 	orr.w	r3, r3, #8
 8009272:	81a3      	strh	r3, [r4, #12]
 8009274:	6923      	ldr	r3, [r4, #16]
 8009276:	b94b      	cbnz	r3, 800928c <__swsetup_r+0x7c>
 8009278:	89a3      	ldrh	r3, [r4, #12]
 800927a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800927e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009282:	d003      	beq.n	800928c <__swsetup_r+0x7c>
 8009284:	4621      	mov	r1, r4
 8009286:	4628      	mov	r0, r5
 8009288:	f7fe fa54 	bl	8007734 <__smakebuf_r>
 800928c:	89a0      	ldrh	r0, [r4, #12]
 800928e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009292:	f010 0301 	ands.w	r3, r0, #1
 8009296:	d00a      	beq.n	80092ae <__swsetup_r+0x9e>
 8009298:	2300      	movs	r3, #0
 800929a:	60a3      	str	r3, [r4, #8]
 800929c:	6963      	ldr	r3, [r4, #20]
 800929e:	425b      	negs	r3, r3
 80092a0:	61a3      	str	r3, [r4, #24]
 80092a2:	6923      	ldr	r3, [r4, #16]
 80092a4:	b943      	cbnz	r3, 80092b8 <__swsetup_r+0xa8>
 80092a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80092aa:	d1c4      	bne.n	8009236 <__swsetup_r+0x26>
 80092ac:	bd38      	pop	{r3, r4, r5, pc}
 80092ae:	0781      	lsls	r1, r0, #30
 80092b0:	bf58      	it	pl
 80092b2:	6963      	ldrpl	r3, [r4, #20]
 80092b4:	60a3      	str	r3, [r4, #8]
 80092b6:	e7f4      	b.n	80092a2 <__swsetup_r+0x92>
 80092b8:	2000      	movs	r0, #0
 80092ba:	e7f7      	b.n	80092ac <__swsetup_r+0x9c>
 80092bc:	20000064 	.word	0x20000064

080092c0 <_close_r>:
 80092c0:	b538      	push	{r3, r4, r5, lr}
 80092c2:	4d06      	ldr	r5, [pc, #24]	; (80092dc <_close_r+0x1c>)
 80092c4:	2300      	movs	r3, #0
 80092c6:	4604      	mov	r4, r0
 80092c8:	4608      	mov	r0, r1
 80092ca:	602b      	str	r3, [r5, #0]
 80092cc:	f7f8 fe0f 	bl	8001eee <_close>
 80092d0:	1c43      	adds	r3, r0, #1
 80092d2:	d102      	bne.n	80092da <_close_r+0x1a>
 80092d4:	682b      	ldr	r3, [r5, #0]
 80092d6:	b103      	cbz	r3, 80092da <_close_r+0x1a>
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	bd38      	pop	{r3, r4, r5, pc}
 80092dc:	2000063c 	.word	0x2000063c

080092e0 <_lseek_r>:
 80092e0:	b538      	push	{r3, r4, r5, lr}
 80092e2:	4d07      	ldr	r5, [pc, #28]	; (8009300 <_lseek_r+0x20>)
 80092e4:	4604      	mov	r4, r0
 80092e6:	4608      	mov	r0, r1
 80092e8:	4611      	mov	r1, r2
 80092ea:	2200      	movs	r2, #0
 80092ec:	602a      	str	r2, [r5, #0]
 80092ee:	461a      	mov	r2, r3
 80092f0:	f7f8 fe24 	bl	8001f3c <_lseek>
 80092f4:	1c43      	adds	r3, r0, #1
 80092f6:	d102      	bne.n	80092fe <_lseek_r+0x1e>
 80092f8:	682b      	ldr	r3, [r5, #0]
 80092fa:	b103      	cbz	r3, 80092fe <_lseek_r+0x1e>
 80092fc:	6023      	str	r3, [r4, #0]
 80092fe:	bd38      	pop	{r3, r4, r5, pc}
 8009300:	2000063c 	.word	0x2000063c

08009304 <_read_r>:
 8009304:	b538      	push	{r3, r4, r5, lr}
 8009306:	4d07      	ldr	r5, [pc, #28]	; (8009324 <_read_r+0x20>)
 8009308:	4604      	mov	r4, r0
 800930a:	4608      	mov	r0, r1
 800930c:	4611      	mov	r1, r2
 800930e:	2200      	movs	r2, #0
 8009310:	602a      	str	r2, [r5, #0]
 8009312:	461a      	mov	r2, r3
 8009314:	f7f8 fdce 	bl	8001eb4 <_read>
 8009318:	1c43      	adds	r3, r0, #1
 800931a:	d102      	bne.n	8009322 <_read_r+0x1e>
 800931c:	682b      	ldr	r3, [r5, #0]
 800931e:	b103      	cbz	r3, 8009322 <_read_r+0x1e>
 8009320:	6023      	str	r3, [r4, #0]
 8009322:	bd38      	pop	{r3, r4, r5, pc}
 8009324:	2000063c 	.word	0x2000063c

08009328 <_write_r>:
 8009328:	b538      	push	{r3, r4, r5, lr}
 800932a:	4d07      	ldr	r5, [pc, #28]	; (8009348 <_write_r+0x20>)
 800932c:	4604      	mov	r4, r0
 800932e:	4608      	mov	r0, r1
 8009330:	4611      	mov	r1, r2
 8009332:	2200      	movs	r2, #0
 8009334:	602a      	str	r2, [r5, #0]
 8009336:	461a      	mov	r2, r3
 8009338:	f7f8 f822 	bl	8001380 <_write>
 800933c:	1c43      	adds	r3, r0, #1
 800933e:	d102      	bne.n	8009346 <_write_r+0x1e>
 8009340:	682b      	ldr	r3, [r5, #0]
 8009342:	b103      	cbz	r3, 8009346 <_write_r+0x1e>
 8009344:	6023      	str	r3, [r4, #0]
 8009346:	bd38      	pop	{r3, r4, r5, pc}
 8009348:	2000063c 	.word	0x2000063c

0800934c <memcpy>:
 800934c:	440a      	add	r2, r1
 800934e:	4291      	cmp	r1, r2
 8009350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009354:	d100      	bne.n	8009358 <memcpy+0xc>
 8009356:	4770      	bx	lr
 8009358:	b510      	push	{r4, lr}
 800935a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800935e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009362:	4291      	cmp	r1, r2
 8009364:	d1f9      	bne.n	800935a <memcpy+0xe>
 8009366:	bd10      	pop	{r4, pc}

08009368 <__assert_func>:
 8009368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800936a:	4614      	mov	r4, r2
 800936c:	461a      	mov	r2, r3
 800936e:	4b09      	ldr	r3, [pc, #36]	; (8009394 <__assert_func+0x2c>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4605      	mov	r5, r0
 8009374:	68d8      	ldr	r0, [r3, #12]
 8009376:	b14c      	cbz	r4, 800938c <__assert_func+0x24>
 8009378:	4b07      	ldr	r3, [pc, #28]	; (8009398 <__assert_func+0x30>)
 800937a:	9100      	str	r1, [sp, #0]
 800937c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009380:	4906      	ldr	r1, [pc, #24]	; (800939c <__assert_func+0x34>)
 8009382:	462b      	mov	r3, r5
 8009384:	f000 f836 	bl	80093f4 <fiprintf>
 8009388:	f000 f853 	bl	8009432 <abort>
 800938c:	4b04      	ldr	r3, [pc, #16]	; (80093a0 <__assert_func+0x38>)
 800938e:	461c      	mov	r4, r3
 8009390:	e7f3      	b.n	800937a <__assert_func+0x12>
 8009392:	bf00      	nop
 8009394:	20000064 	.word	0x20000064
 8009398:	080098bf 	.word	0x080098bf
 800939c:	080098cc 	.word	0x080098cc
 80093a0:	080098fa 	.word	0x080098fa

080093a4 <_calloc_r>:
 80093a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093a6:	fba1 2402 	umull	r2, r4, r1, r2
 80093aa:	b94c      	cbnz	r4, 80093c0 <_calloc_r+0x1c>
 80093ac:	4611      	mov	r1, r2
 80093ae:	9201      	str	r2, [sp, #4]
 80093b0:	f7fd fe06 	bl	8006fc0 <_malloc_r>
 80093b4:	9a01      	ldr	r2, [sp, #4]
 80093b6:	4605      	mov	r5, r0
 80093b8:	b930      	cbnz	r0, 80093c8 <_calloc_r+0x24>
 80093ba:	4628      	mov	r0, r5
 80093bc:	b003      	add	sp, #12
 80093be:	bd30      	pop	{r4, r5, pc}
 80093c0:	220c      	movs	r2, #12
 80093c2:	6002      	str	r2, [r0, #0]
 80093c4:	2500      	movs	r5, #0
 80093c6:	e7f8      	b.n	80093ba <_calloc_r+0x16>
 80093c8:	4621      	mov	r1, r4
 80093ca:	f7fe fa01 	bl	80077d0 <memset>
 80093ce:	e7f4      	b.n	80093ba <_calloc_r+0x16>

080093d0 <__ascii_mbtowc>:
 80093d0:	b082      	sub	sp, #8
 80093d2:	b901      	cbnz	r1, 80093d6 <__ascii_mbtowc+0x6>
 80093d4:	a901      	add	r1, sp, #4
 80093d6:	b142      	cbz	r2, 80093ea <__ascii_mbtowc+0x1a>
 80093d8:	b14b      	cbz	r3, 80093ee <__ascii_mbtowc+0x1e>
 80093da:	7813      	ldrb	r3, [r2, #0]
 80093dc:	600b      	str	r3, [r1, #0]
 80093de:	7812      	ldrb	r2, [r2, #0]
 80093e0:	1e10      	subs	r0, r2, #0
 80093e2:	bf18      	it	ne
 80093e4:	2001      	movne	r0, #1
 80093e6:	b002      	add	sp, #8
 80093e8:	4770      	bx	lr
 80093ea:	4610      	mov	r0, r2
 80093ec:	e7fb      	b.n	80093e6 <__ascii_mbtowc+0x16>
 80093ee:	f06f 0001 	mvn.w	r0, #1
 80093f2:	e7f8      	b.n	80093e6 <__ascii_mbtowc+0x16>

080093f4 <fiprintf>:
 80093f4:	b40e      	push	{r1, r2, r3}
 80093f6:	b503      	push	{r0, r1, lr}
 80093f8:	4601      	mov	r1, r0
 80093fa:	ab03      	add	r3, sp, #12
 80093fc:	4805      	ldr	r0, [pc, #20]	; (8009414 <fiprintf+0x20>)
 80093fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009402:	6800      	ldr	r0, [r0, #0]
 8009404:	9301      	str	r3, [sp, #4]
 8009406:	f7ff f93f 	bl	8008688 <_vfiprintf_r>
 800940a:	b002      	add	sp, #8
 800940c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009410:	b003      	add	sp, #12
 8009412:	4770      	bx	lr
 8009414:	20000064 	.word	0x20000064

08009418 <__ascii_wctomb>:
 8009418:	b149      	cbz	r1, 800942e <__ascii_wctomb+0x16>
 800941a:	2aff      	cmp	r2, #255	; 0xff
 800941c:	bf85      	ittet	hi
 800941e:	238a      	movhi	r3, #138	; 0x8a
 8009420:	6003      	strhi	r3, [r0, #0]
 8009422:	700a      	strbls	r2, [r1, #0]
 8009424:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009428:	bf98      	it	ls
 800942a:	2001      	movls	r0, #1
 800942c:	4770      	bx	lr
 800942e:	4608      	mov	r0, r1
 8009430:	4770      	bx	lr

08009432 <abort>:
 8009432:	b508      	push	{r3, lr}
 8009434:	2006      	movs	r0, #6
 8009436:	f000 f82b 	bl	8009490 <raise>
 800943a:	2001      	movs	r0, #1
 800943c:	f7f8 fd30 	bl	8001ea0 <_exit>

08009440 <_raise_r>:
 8009440:	291f      	cmp	r1, #31
 8009442:	b538      	push	{r3, r4, r5, lr}
 8009444:	4604      	mov	r4, r0
 8009446:	460d      	mov	r5, r1
 8009448:	d904      	bls.n	8009454 <_raise_r+0x14>
 800944a:	2316      	movs	r3, #22
 800944c:	6003      	str	r3, [r0, #0]
 800944e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009452:	bd38      	pop	{r3, r4, r5, pc}
 8009454:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009456:	b112      	cbz	r2, 800945e <_raise_r+0x1e>
 8009458:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800945c:	b94b      	cbnz	r3, 8009472 <_raise_r+0x32>
 800945e:	4620      	mov	r0, r4
 8009460:	f000 f830 	bl	80094c4 <_getpid_r>
 8009464:	462a      	mov	r2, r5
 8009466:	4601      	mov	r1, r0
 8009468:	4620      	mov	r0, r4
 800946a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800946e:	f000 b817 	b.w	80094a0 <_kill_r>
 8009472:	2b01      	cmp	r3, #1
 8009474:	d00a      	beq.n	800948c <_raise_r+0x4c>
 8009476:	1c59      	adds	r1, r3, #1
 8009478:	d103      	bne.n	8009482 <_raise_r+0x42>
 800947a:	2316      	movs	r3, #22
 800947c:	6003      	str	r3, [r0, #0]
 800947e:	2001      	movs	r0, #1
 8009480:	e7e7      	b.n	8009452 <_raise_r+0x12>
 8009482:	2400      	movs	r4, #0
 8009484:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009488:	4628      	mov	r0, r5
 800948a:	4798      	blx	r3
 800948c:	2000      	movs	r0, #0
 800948e:	e7e0      	b.n	8009452 <_raise_r+0x12>

08009490 <raise>:
 8009490:	4b02      	ldr	r3, [pc, #8]	; (800949c <raise+0xc>)
 8009492:	4601      	mov	r1, r0
 8009494:	6818      	ldr	r0, [r3, #0]
 8009496:	f7ff bfd3 	b.w	8009440 <_raise_r>
 800949a:	bf00      	nop
 800949c:	20000064 	.word	0x20000064

080094a0 <_kill_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	4d07      	ldr	r5, [pc, #28]	; (80094c0 <_kill_r+0x20>)
 80094a4:	2300      	movs	r3, #0
 80094a6:	4604      	mov	r4, r0
 80094a8:	4608      	mov	r0, r1
 80094aa:	4611      	mov	r1, r2
 80094ac:	602b      	str	r3, [r5, #0]
 80094ae:	f7f8 fce7 	bl	8001e80 <_kill>
 80094b2:	1c43      	adds	r3, r0, #1
 80094b4:	d102      	bne.n	80094bc <_kill_r+0x1c>
 80094b6:	682b      	ldr	r3, [r5, #0]
 80094b8:	b103      	cbz	r3, 80094bc <_kill_r+0x1c>
 80094ba:	6023      	str	r3, [r4, #0]
 80094bc:	bd38      	pop	{r3, r4, r5, pc}
 80094be:	bf00      	nop
 80094c0:	2000063c 	.word	0x2000063c

080094c4 <_getpid_r>:
 80094c4:	f7f8 bcd4 	b.w	8001e70 <_getpid>

080094c8 <_init>:
 80094c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ca:	bf00      	nop
 80094cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ce:	bc08      	pop	{r3}
 80094d0:	469e      	mov	lr, r3
 80094d2:	4770      	bx	lr

080094d4 <_fini>:
 80094d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d6:	bf00      	nop
 80094d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094da:	bc08      	pop	{r3}
 80094dc:	469e      	mov	lr, r3
 80094de:	4770      	bx	lr
