
NHK2024_Temp_Line_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008688  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08008868  08008868  00018868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c24  08008c24  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008c24  08008c24  00018c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c2c  08008c2c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c2c  08008c2c  00018c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c30  08008c30  00018c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  200001d4  08008e08  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08008e08  000205d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001448a  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002862  00000000  00000000  000346d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  00036f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d13  00000000  00000000  00038048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020842  00000000  00000000  00038d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b23  00000000  00000000  0005959d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d32a0  00000000  00000000  0006c0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005958  00000000  00000000  0013f360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00144cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008850 	.word	0x08008850

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08008850 	.word	0x08008850

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	230a      	movs	r3, #10
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <_write+0x24>)
 8000f0a:	f004 f8a1 	bl	8005050 <HAL_UART_Transmit>
	return len;
 8000f0e:	687b      	ldr	r3, [r7, #4]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200003ec 	.word	0x200003ec

08000f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  setbuf(stdout, NULL);
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <main+0x70>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f005 fb72 	bl	8006614 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f30:	f000 fde3 	bl	8001afa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f34:	f000 f830 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f38:	f000 fa76 	bl	8001428 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f3c:	f000 fa42 	bl	80013c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f40:	f000 f9f4 	bl	800132c <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000f44:	f000 f9ac 	bl	80012a0 <MX_FDCAN1_Init>
  MX_ADC1_Init();
 8000f48:	f000 f872 	bl	8001030 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f4c:	f000 f8e8 	bl	8001120 <MX_ADC2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  int val;
//  char sval[100];
  uint16_t result1[8] = {0};
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
  uint16_t result2[8] = {0};
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000f6a:	217f      	movs	r1, #127	; 0x7f
 8000f6c:	4808      	ldr	r0, [pc, #32]	; (8000f90 <main+0x74>)
 8000f6e:	f002 f88b 	bl	8003088 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *)&result2, 7);
 8000f72:	463b      	mov	r3, r7
 8000f74:	2207      	movs	r2, #7
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <main+0x74>)
 8000f7a:	f001 f9f7 	bl	800236c <HAL_ADC_Start_DMA>

//	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)&result2, 8);
//	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);

//	printf("%d\r\n", result[0]);
	printf("0 is %d\r\n", result2[4]);
 8000f7e:	893b      	ldrh	r3, [r7, #8]
 8000f80:	4619      	mov	r1, r3
 8000f82:	4804      	ldr	r0, [pc, #16]	; (8000f94 <main+0x78>)
 8000f84:	f005 fd20 	bl	80069c8 <iprintf>
 8000f88:	e7f9      	b.n	8000f7e <main+0x62>
 8000f8a:	bf00      	nop
 8000f8c:	20000064 	.word	0x20000064
 8000f90:	2000025c 	.word	0x2000025c
 8000f94:	08008868 	.word	0x08008868

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	; 0x50
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 0318 	add.w	r3, r7, #24
 8000fa2:	2238      	movs	r2, #56	; 0x38
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f005 fd20 	bl	80069ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f003 f836 	bl	800402c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fca:	2340      	movs	r3, #64	; 0x40
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fda:	2355      	movs	r3, #85	; 0x55
 8000fdc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fea:	f107 0318 	add.w	r3, r7, #24
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 f8c0 	bl	8004174 <HAL_RCC_OscConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ffa:	f000 fa61 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffe:	230f      	movs	r3, #15
 8001000:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001002:	2303      	movs	r3, #3
 8001004:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2104      	movs	r1, #4
 8001016:	4618      	mov	r0, r3
 8001018:	f003 fbbe 	bl	8004798 <HAL_RCC_ClockConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001022:	f000 fa4d 	bl	80014c0 <Error_Handler>
  }
}
 8001026:	bf00      	nop
 8001028:	3750      	adds	r7, #80	; 0x50
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2220      	movs	r2, #32
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f005 fccf 	bl	80069ec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800104e:	4b32      	ldr	r3, [pc, #200]	; (8001118 <MX_ADC1_Init+0xe8>)
 8001050:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001054:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001056:	4b30      	ldr	r3, [pc, #192]	; (8001118 <MX_ADC1_Init+0xe8>)
 8001058:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800105c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800105e:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <MX_ADC1_Init+0xe8>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001064:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <MX_ADC1_Init+0xe8>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800106a:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <MX_ADC1_Init+0xe8>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001070:	4b29      	ldr	r3, [pc, #164]	; (8001118 <MX_ADC1_Init+0xe8>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001076:	4b28      	ldr	r3, [pc, #160]	; (8001118 <MX_ADC1_Init+0xe8>)
 8001078:	2204      	movs	r2, #4
 800107a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <MX_ADC1_Init+0xe8>)
 800107e:	2200      	movs	r2, #0
 8001080:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001082:	4b25      	ldr	r3, [pc, #148]	; (8001118 <MX_ADC1_Init+0xe8>)
 8001084:	2200      	movs	r2, #0
 8001086:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001088:	4b23      	ldr	r3, [pc, #140]	; (8001118 <MX_ADC1_Init+0xe8>)
 800108a:	2201      	movs	r2, #1
 800108c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800108e:	4b22      	ldr	r3, [pc, #136]	; (8001118 <MX_ADC1_Init+0xe8>)
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <MX_ADC1_Init+0xe8>)
 8001098:	2200      	movs	r2, #0
 800109a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800109c:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <MX_ADC1_Init+0xe8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <MX_ADC1_Init+0xe8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <MX_ADC1_Init+0xe8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <MX_ADC1_Init+0xe8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b8:	4817      	ldr	r0, [pc, #92]	; (8001118 <MX_ADC1_Init+0xe8>)
 80010ba:	f000 ffd3 	bl	8002064 <HAL_ADC_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010c4:	f000 f9fc 	bl	80014c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d0:	4619      	mov	r1, r3
 80010d2:	4811      	ldr	r0, [pc, #68]	; (8001118 <MX_ADC1_Init+0xe8>)
 80010d4:	f002 f83a 	bl	800314c <HAL_ADCEx_MultiModeConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010de:	f000 f9ef 	bl	80014c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_ADC1_Init+0xec>)
 80010e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e6:	2306      	movs	r3, #6
 80010e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ee:	237f      	movs	r3, #127	; 0x7f
 80010f0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f2:	2304      	movs	r3, #4
 80010f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	4806      	ldr	r0, [pc, #24]	; (8001118 <MX_ADC1_Init+0xe8>)
 8001100:	f001 fa06 	bl	8002510 <HAL_ADC_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800110a:	f000 f9d9 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	3730      	adds	r7, #48	; 0x30
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200001f0 	.word	0x200001f0
 800111c:	3ef08000 	.word	0x3ef08000

08001120 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001126:	463b      	mov	r3, r7
 8001128:	2220      	movs	r2, #32
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f005 fc5d 	bl	80069ec <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001132:	4b55      	ldr	r3, [pc, #340]	; (8001288 <MX_ADC2_Init+0x168>)
 8001134:	4a55      	ldr	r2, [pc, #340]	; (800128c <MX_ADC2_Init+0x16c>)
 8001136:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001138:	4b53      	ldr	r3, [pc, #332]	; (8001288 <MX_ADC2_Init+0x168>)
 800113a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800113e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001140:	4b51      	ldr	r3, [pc, #324]	; (8001288 <MX_ADC2_Init+0x168>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001146:	4b50      	ldr	r3, [pc, #320]	; (8001288 <MX_ADC2_Init+0x168>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800114c:	4b4e      	ldr	r3, [pc, #312]	; (8001288 <MX_ADC2_Init+0x168>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001152:	4b4d      	ldr	r3, [pc, #308]	; (8001288 <MX_ADC2_Init+0x168>)
 8001154:	2201      	movs	r2, #1
 8001156:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001158:	4b4b      	ldr	r3, [pc, #300]	; (8001288 <MX_ADC2_Init+0x168>)
 800115a:	2204      	movs	r2, #4
 800115c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800115e:	4b4a      	ldr	r3, [pc, #296]	; (8001288 <MX_ADC2_Init+0x168>)
 8001160:	2200      	movs	r2, #0
 8001162:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001164:	4b48      	ldr	r3, [pc, #288]	; (8001288 <MX_ADC2_Init+0x168>)
 8001166:	2201      	movs	r2, #1
 8001168:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 7;
 800116a:	4b47      	ldr	r3, [pc, #284]	; (8001288 <MX_ADC2_Init+0x168>)
 800116c:	2207      	movs	r2, #7
 800116e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001170:	4b45      	ldr	r3, [pc, #276]	; (8001288 <MX_ADC2_Init+0x168>)
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001178:	4b43      	ldr	r3, [pc, #268]	; (8001288 <MX_ADC2_Init+0x168>)
 800117a:	2200      	movs	r2, #0
 800117c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800117e:	4b42      	ldr	r3, [pc, #264]	; (8001288 <MX_ADC2_Init+0x168>)
 8001180:	2200      	movs	r2, #0
 8001182:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001184:	4b40      	ldr	r3, [pc, #256]	; (8001288 <MX_ADC2_Init+0x168>)
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800118c:	4b3e      	ldr	r3, [pc, #248]	; (8001288 <MX_ADC2_Init+0x168>)
 800118e:	2200      	movs	r2, #0
 8001190:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001192:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <MX_ADC2_Init+0x168>)
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800119a:	483b      	ldr	r0, [pc, #236]	; (8001288 <MX_ADC2_Init+0x168>)
 800119c:	f000 ff62 	bl	8002064 <HAL_ADC_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011a6:	f000 f98b 	bl	80014c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80011aa:	4b39      	ldr	r3, [pc, #228]	; (8001290 <MX_ADC2_Init+0x170>)
 80011ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ae:	2306      	movs	r3, #6
 80011b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011b6:	237f      	movs	r3, #127	; 0x7f
 80011b8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011ba:	2304      	movs	r3, #4
 80011bc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011c2:	463b      	mov	r3, r7
 80011c4:	4619      	mov	r1, r3
 80011c6:	4830      	ldr	r0, [pc, #192]	; (8001288 <MX_ADC2_Init+0x168>)
 80011c8:	f001 f9a2 	bl	8002510 <HAL_ADC_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011d2:	f000 f975 	bl	80014c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011d6:	4b2f      	ldr	r3, [pc, #188]	; (8001294 <MX_ADC2_Init+0x174>)
 80011d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011da:	230c      	movs	r3, #12
 80011dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011de:	463b      	mov	r3, r7
 80011e0:	4619      	mov	r1, r3
 80011e2:	4829      	ldr	r0, [pc, #164]	; (8001288 <MX_ADC2_Init+0x168>)
 80011e4:	f001 f994 	bl	8002510 <HAL_ADC_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 80011ee:	f000 f967 	bl	80014c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011f2:	2312      	movs	r3, #18
 80011f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80011f6:	2307      	movs	r3, #7
 80011f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	4619      	mov	r1, r3
 80011fe:	4822      	ldr	r0, [pc, #136]	; (8001288 <MX_ADC2_Init+0x168>)
 8001200:	f001 f986 	bl	8002510 <HAL_ADC_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 800120a:	f000 f959 	bl	80014c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800120e:	2318      	movs	r3, #24
 8001210:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001212:	463b      	mov	r3, r7
 8001214:	4619      	mov	r1, r3
 8001216:	481c      	ldr	r0, [pc, #112]	; (8001288 <MX_ADC2_Init+0x168>)
 8001218:	f001 f97a 	bl	8002510 <HAL_ADC_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ADC2_Init+0x106>
  {
    Error_Handler();
 8001222:	f000 f94d 	bl	80014c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001226:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_ADC2_Init+0x178>)
 8001228:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800122a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800122e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001230:	463b      	mov	r3, r7
 8001232:	4619      	mov	r1, r3
 8001234:	4814      	ldr	r0, [pc, #80]	; (8001288 <MX_ADC2_Init+0x168>)
 8001236:	f001 f96b 	bl	8002510 <HAL_ADC_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_ADC2_Init+0x124>
  {
    Error_Handler();
 8001240:	f000 f93e 	bl	80014c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <MX_ADC2_Init+0x17c>)
 8001246:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001248:	f44f 7383 	mov.w	r3, #262	; 0x106
 800124c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	4619      	mov	r1, r3
 8001252:	480d      	ldr	r0, [pc, #52]	; (8001288 <MX_ADC2_Init+0x168>)
 8001254:	f001 f95c 	bl	8002510 <HAL_ADC_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_ADC2_Init+0x142>
  {
    Error_Handler();
 800125e:	f000 f92f 	bl	80014c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_ADC2_Init+0x170>)
 8001264:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001266:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800126a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_ADC2_Init+0x168>)
 8001272:	f001 f94d 	bl	8002510 <HAL_ADC_ConfigChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_ADC2_Init+0x160>
  {
    Error_Handler();
 800127c:	f000 f920 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	3720      	adds	r7, #32
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2000025c 	.word	0x2000025c
 800128c:	50000100 	.word	0x50000100
 8001290:	47520000 	.word	0x47520000
 8001294:	04300002 	.word	0x04300002
 8001298:	2a000400 	.word	0x2a000400
 800129c:	36902000 	.word	0x36902000

080012a0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80012a4:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <MX_FDCAN1_Init+0x84>)
 80012a6:	4a20      	ldr	r2, [pc, #128]	; (8001328 <MX_FDCAN1_Init+0x88>)
 80012a8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <MX_FDCAN1_Init+0x84>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80012b0:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <MX_FDCAN1_Init+0x84>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80012b6:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <MX_FDCAN1_Init+0x84>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <MX_FDCAN1_Init+0x84>)
 80012be:	2200      	movs	r2, #0
 80012c0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <MX_FDCAN1_Init+0x84>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80012c8:	4b16      	ldr	r3, [pc, #88]	; (8001324 <MX_FDCAN1_Init+0x84>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <MX_FDCAN1_Init+0x84>)
 80012d0:	2210      	movs	r2, #16
 80012d2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <MX_FDCAN1_Init+0x84>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80012da:	4b12      	ldr	r3, [pc, #72]	; (8001324 <MX_FDCAN1_Init+0x84>)
 80012dc:	2202      	movs	r2, #2
 80012de:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <MX_FDCAN1_Init+0x84>)
 80012e2:	2202      	movs	r2, #2
 80012e4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_FDCAN1_Init+0x84>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <MX_FDCAN1_Init+0x84>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_FDCAN1_Init+0x84>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <MX_FDCAN1_Init+0x84>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_FDCAN1_Init+0x84>)
 8001300:	2200      	movs	r2, #0
 8001302:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <MX_FDCAN1_Init+0x84>)
 8001306:	2200      	movs	r2, #0
 8001308:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_FDCAN1_Init+0x84>)
 800130c:	2200      	movs	r2, #0
 800130e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <MX_FDCAN1_Init+0x84>)
 8001312:	f002 fb41 	bl	8003998 <HAL_FDCAN_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800131c:	f000 f8d0 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000388 	.word	0x20000388
 8001328:	40006400 	.word	0x40006400

0800132c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001330:	4b22      	ldr	r3, [pc, #136]	; (80013bc <MX_USART2_UART_Init+0x90>)
 8001332:	4a23      	ldr	r2, [pc, #140]	; (80013c0 <MX_USART2_UART_Init+0x94>)
 8001334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001336:	4b21      	ldr	r3, [pc, #132]	; (80013bc <MX_USART2_UART_Init+0x90>)
 8001338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800133c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <MX_USART2_UART_Init+0x90>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <MX_USART2_UART_Init+0x90>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800134a:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <MX_USART2_UART_Init+0x90>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <MX_USART2_UART_Init+0x90>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <MX_USART2_UART_Init+0x90>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <MX_USART2_UART_Init+0x90>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <MX_USART2_UART_Init+0x90>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <MX_USART2_UART_Init+0x90>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <MX_USART2_UART_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001374:	4811      	ldr	r0, [pc, #68]	; (80013bc <MX_USART2_UART_Init+0x90>)
 8001376:	f003 fe1b 	bl	8004fb0 <HAL_UART_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001380:	f000 f89e 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001384:	2100      	movs	r1, #0
 8001386:	480d      	ldr	r0, [pc, #52]	; (80013bc <MX_USART2_UART_Init+0x90>)
 8001388:	f004 fc14 	bl	8005bb4 <HAL_UARTEx_SetTxFifoThreshold>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001392:	f000 f895 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001396:	2100      	movs	r1, #0
 8001398:	4808      	ldr	r0, [pc, #32]	; (80013bc <MX_USART2_UART_Init+0x90>)
 800139a:	f004 fc49 	bl	8005c30 <HAL_UARTEx_SetRxFifoThreshold>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013a4:	f000 f88c 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013a8:	4804      	ldr	r0, [pc, #16]	; (80013bc <MX_USART2_UART_Init+0x90>)
 80013aa:	f004 fbca 	bl	8005b42 <HAL_UARTEx_DisableFifoMode>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013b4:	f000 f884 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200003ec 	.word	0x200003ec
 80013c0:	40004400 	.word	0x40004400

080013c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MX_DMA_Init+0x60>)
 80013cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ce:	4a15      	ldr	r2, [pc, #84]	; (8001424 <MX_DMA_Init+0x60>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6493      	str	r3, [r2, #72]	; 0x48
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MX_DMA_Init+0x60>)
 80013d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <MX_DMA_Init+0x60>)
 80013e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e6:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <MX_DMA_Init+0x60>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6493      	str	r3, [r2, #72]	; 0x48
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <MX_DMA_Init+0x60>)
 80013f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	200b      	movs	r0, #11
 8001400:	f002 f823 	bl	800344a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001404:	200b      	movs	r0, #11
 8001406:	f002 f83a 	bl	800347e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	200c      	movs	r0, #12
 8001410:	f002 f81b 	bl	800344a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001414:	200c      	movs	r0, #12
 8001416:	f002 f832 	bl	800347e <HAL_NVIC_EnableIRQ>

}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000

08001428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MX_GPIO_Init+0x90>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <MX_GPIO_Init+0x90>)
 8001444:	f043 0320 	orr.w	r3, r3, #32
 8001448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144a:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <MX_GPIO_Init+0x90>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	f003 0320 	and.w	r3, r3, #32
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <MX_GPIO_Init+0x90>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <MX_GPIO_Init+0x90>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <MX_GPIO_Init+0x90>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <MX_GPIO_Init+0x90>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	4a11      	ldr	r2, [pc, #68]	; (80014b8 <MX_GPIO_Init+0x90>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_GPIO_Init+0x90>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148c:	480b      	ldr	r0, [pc, #44]	; (80014bc <MX_GPIO_Init+0x94>)
 800148e:	f002 fdb5 	bl	8003ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	4619      	mov	r1, r3
 80014aa:	4804      	ldr	r0, [pc, #16]	; (80014bc <MX_GPIO_Init+0x94>)
 80014ac:	f002 fc24 	bl	8003cf8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014b0:	bf00      	nop
 80014b2:	3720      	adds	r7, #32
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40021000 	.word	0x40021000
 80014bc:	48000400 	.word	0x48000400

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <Error_Handler+0x8>
	...

080014cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_MspInit+0x44>)
 80014d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d6:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <HAL_MspInit+0x44>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6613      	str	r3, [r2, #96]	; 0x60
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_MspInit+0x44>)
 80014e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_MspInit+0x44>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_MspInit+0x44>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	6593      	str	r3, [r2, #88]	; 0x58
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_MspInit+0x44>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b09e      	sub	sp, #120	; 0x78
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800152c:	f107 0320 	add.w	r3, r7, #32
 8001530:	2244      	movs	r2, #68	; 0x44
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f005 fa59 	bl	80069ec <memset>
  if(hadc->Instance==ADC1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001542:	d168      	bne.n	8001616 <HAL_ADC_MspInit+0x102>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001544:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001548:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800154a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800154e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001550:	f107 0320 	add.w	r3, r7, #32
 8001554:	4618      	mov	r0, r3
 8001556:	f003 fb3b 	bl	8004bd0 <HAL_RCCEx_PeriphCLKConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001560:	f7ff ffae 	bl	80014c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001564:	4b71      	ldr	r3, [pc, #452]	; (800172c <HAL_ADC_MspInit+0x218>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	4a70      	ldr	r2, [pc, #448]	; (800172c <HAL_ADC_MspInit+0x218>)
 800156c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800156e:	4b6f      	ldr	r3, [pc, #444]	; (800172c <HAL_ADC_MspInit+0x218>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d10b      	bne.n	800158e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001576:	4b6e      	ldr	r3, [pc, #440]	; (8001730 <HAL_ADC_MspInit+0x21c>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	4a6d      	ldr	r2, [pc, #436]	; (8001730 <HAL_ADC_MspInit+0x21c>)
 800157c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001582:	4b6b      	ldr	r3, [pc, #428]	; (8001730 <HAL_ADC_MspInit+0x21c>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800158a:	61fb      	str	r3, [r7, #28]
 800158c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	4b68      	ldr	r3, [pc, #416]	; (8001730 <HAL_ADC_MspInit+0x21c>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	4a67      	ldr	r2, [pc, #412]	; (8001730 <HAL_ADC_MspInit+0x21c>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159a:	4b65      	ldr	r3, [pc, #404]	; (8001730 <HAL_ADC_MspInit+0x21c>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	61bb      	str	r3, [r7, #24]
 80015a4:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015a6:	2301      	movs	r3, #1
 80015a8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015aa:	2303      	movs	r3, #3
 80015ac:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015b6:	4619      	mov	r1, r3
 80015b8:	485e      	ldr	r0, [pc, #376]	; (8001734 <HAL_ADC_MspInit+0x220>)
 80015ba:	f002 fb9d 	bl	8003cf8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015be:	4b5e      	ldr	r3, [pc, #376]	; (8001738 <HAL_ADC_MspInit+0x224>)
 80015c0:	4a5e      	ldr	r2, [pc, #376]	; (800173c <HAL_ADC_MspInit+0x228>)
 80015c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80015c4:	4b5c      	ldr	r3, [pc, #368]	; (8001738 <HAL_ADC_MspInit+0x224>)
 80015c6:	2205      	movs	r2, #5
 80015c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ca:	4b5b      	ldr	r3, [pc, #364]	; (8001738 <HAL_ADC_MspInit+0x224>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d0:	4b59      	ldr	r3, [pc, #356]	; (8001738 <HAL_ADC_MspInit+0x224>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015d6:	4b58      	ldr	r3, [pc, #352]	; (8001738 <HAL_ADC_MspInit+0x224>)
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015dc:	4b56      	ldr	r3, [pc, #344]	; (8001738 <HAL_ADC_MspInit+0x224>)
 80015de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015e4:	4b54      	ldr	r3, [pc, #336]	; (8001738 <HAL_ADC_MspInit+0x224>)
 80015e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80015ec:	4b52      	ldr	r3, [pc, #328]	; (8001738 <HAL_ADC_MspInit+0x224>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015f2:	4b51      	ldr	r3, [pc, #324]	; (8001738 <HAL_ADC_MspInit+0x224>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015f8:	484f      	ldr	r0, [pc, #316]	; (8001738 <HAL_ADC_MspInit+0x224>)
 80015fa:	f001 ff5b 	bl	80034b4 <HAL_DMA_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_ADC_MspInit+0xf4>
    {
      Error_Handler();
 8001604:	f7ff ff5c 	bl	80014c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a4b      	ldr	r2, [pc, #300]	; (8001738 <HAL_ADC_MspInit+0x224>)
 800160c:	655a      	str	r2, [r3, #84]	; 0x54
 800160e:	4a4a      	ldr	r2, [pc, #296]	; (8001738 <HAL_ADC_MspInit+0x224>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001614:	e086      	b.n	8001724 <HAL_ADC_MspInit+0x210>
  else if(hadc->Instance==ADC2)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a49      	ldr	r2, [pc, #292]	; (8001740 <HAL_ADC_MspInit+0x22c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	f040 8081 	bne.w	8001724 <HAL_ADC_MspInit+0x210>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001626:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001628:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800162c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800162e:	f107 0320 	add.w	r3, r7, #32
 8001632:	4618      	mov	r0, r3
 8001634:	f003 facc 	bl	8004bd0 <HAL_RCCEx_PeriphCLKConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 800163e:	f7ff ff3f 	bl	80014c0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001642:	4b3a      	ldr	r3, [pc, #232]	; (800172c <HAL_ADC_MspInit+0x218>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	4a38      	ldr	r2, [pc, #224]	; (800172c <HAL_ADC_MspInit+0x218>)
 800164a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800164c:	4b37      	ldr	r3, [pc, #220]	; (800172c <HAL_ADC_MspInit+0x218>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d10b      	bne.n	800166c <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001654:	4b36      	ldr	r3, [pc, #216]	; (8001730 <HAL_ADC_MspInit+0x21c>)
 8001656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001658:	4a35      	ldr	r2, [pc, #212]	; (8001730 <HAL_ADC_MspInit+0x21c>)
 800165a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800165e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001660:	4b33      	ldr	r3, [pc, #204]	; (8001730 <HAL_ADC_MspInit+0x21c>)
 8001662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800166c:	4b30      	ldr	r3, [pc, #192]	; (8001730 <HAL_ADC_MspInit+0x21c>)
 800166e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001670:	4a2f      	ldr	r2, [pc, #188]	; (8001730 <HAL_ADC_MspInit+0x21c>)
 8001672:	f043 0320 	orr.w	r3, r3, #32
 8001676:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001678:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <HAL_ADC_MspInit+0x21c>)
 800167a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167c:	f003 0320 	and.w	r3, r3, #32
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001684:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <HAL_ADC_MspInit+0x21c>)
 8001686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001688:	4a29      	ldr	r2, [pc, #164]	; (8001730 <HAL_ADC_MspInit+0x21c>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001690:	4b27      	ldr	r3, [pc, #156]	; (8001730 <HAL_ADC_MspInit+0x21c>)
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800169c:	2302      	movs	r3, #2
 800169e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a0:	2303      	movs	r3, #3
 80016a2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016ac:	4619      	mov	r1, r3
 80016ae:	4825      	ldr	r0, [pc, #148]	; (8001744 <HAL_ADC_MspInit+0x230>)
 80016b0:	f002 fb22 	bl	8003cf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80016b4:	23f3      	movs	r3, #243	; 0xf3
 80016b6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b8:	2303      	movs	r3, #3
 80016ba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016c4:	4619      	mov	r1, r3
 80016c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ca:	f002 fb15 	bl	8003cf8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <HAL_ADC_MspInit+0x234>)
 80016d0:	4a1e      	ldr	r2, [pc, #120]	; (800174c <HAL_ADC_MspInit+0x238>)
 80016d2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_ADC_MspInit+0x234>)
 80016d6:	2224      	movs	r2, #36	; 0x24
 80016d8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_ADC_MspInit+0x234>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_ADC_MspInit+0x234>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_ADC_MspInit+0x234>)
 80016e8:	2280      	movs	r2, #128	; 0x80
 80016ea:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <HAL_ADC_MspInit+0x234>)
 80016ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_ADC_MspInit+0x234>)
 80016f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016fa:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_ADC_MspInit+0x234>)
 80016fe:	2220      	movs	r2, #32
 8001700:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_ADC_MspInit+0x234>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001708:	480f      	ldr	r0, [pc, #60]	; (8001748 <HAL_ADC_MspInit+0x234>)
 800170a:	f001 fed3 	bl	80034b4 <HAL_DMA_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_ADC_MspInit+0x204>
      Error_Handler();
 8001714:	f7ff fed4 	bl	80014c0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <HAL_ADC_MspInit+0x234>)
 800171c:	655a      	str	r2, [r3, #84]	; 0x54
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <HAL_ADC_MspInit+0x234>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001724:	bf00      	nop
 8001726:	3778      	adds	r7, #120	; 0x78
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000480 	.word	0x20000480
 8001730:	40021000 	.word	0x40021000
 8001734:	48000400 	.word	0x48000400
 8001738:	200002c8 	.word	0x200002c8
 800173c:	40020008 	.word	0x40020008
 8001740:	50000100 	.word	0x50000100
 8001744:	48001400 	.word	0x48001400
 8001748:	20000328 	.word	0x20000328
 800174c:	4002001c 	.word	0x4002001c

08001750 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b09a      	sub	sp, #104	; 0x68
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	2244      	movs	r2, #68	; 0x44
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f005 f93b 	bl	80069ec <memset>
  if(hfdcan->Instance==FDCAN1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a20      	ldr	r2, [pc, #128]	; (80017fc <HAL_FDCAN_MspInit+0xac>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d139      	bne.n	80017f4 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001784:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001786:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800178a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	4618      	mov	r0, r3
 8001792:	f003 fa1d 	bl	8004bd0 <HAL_RCCEx_PeriphCLKConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800179c:	f7ff fe90 	bl	80014c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <HAL_FDCAN_MspInit+0xb0>)
 80017a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a4:	4a16      	ldr	r2, [pc, #88]	; (8001800 <HAL_FDCAN_MspInit+0xb0>)
 80017a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017aa:	6593      	str	r3, [r2, #88]	; 0x58
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <HAL_FDCAN_MspInit+0xb0>)
 80017ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_FDCAN_MspInit+0xb0>)
 80017ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017bc:	4a10      	ldr	r2, [pc, #64]	; (8001800 <HAL_FDCAN_MspInit+0xb0>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_FDCAN_MspInit+0xb0>)
 80017c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80017d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017d4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80017e2:	2309      	movs	r3, #9
 80017e4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017ea:	4619      	mov	r1, r3
 80017ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f0:	f002 fa82 	bl	8003cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80017f4:	bf00      	nop
 80017f6:	3768      	adds	r7, #104	; 0x68
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40006400 	.word	0x40006400
 8001800:	40021000 	.word	0x40021000

08001804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b09a      	sub	sp, #104	; 0x68
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	2244      	movs	r2, #68	; 0x44
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f005 f8e1 	bl	80069ec <memset>
  if(huart->Instance==USART2)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a1f      	ldr	r2, [pc, #124]	; (80018ac <HAL_UART_MspInit+0xa8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d136      	bne.n	80018a2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001834:	2302      	movs	r3, #2
 8001836:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001838:	2300      	movs	r3, #0
 800183a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	4618      	mov	r0, r3
 8001842:	f003 f9c5 	bl	8004bd0 <HAL_RCCEx_PeriphCLKConfig>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800184c:	f7ff fe38 	bl	80014c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <HAL_UART_MspInit+0xac>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <HAL_UART_MspInit+0xac>)
 8001856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185a:	6593      	str	r3, [r2, #88]	; 0x58
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_UART_MspInit+0xac>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_UART_MspInit+0xac>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	4a10      	ldr	r2, [pc, #64]	; (80018b0 <HAL_UART_MspInit+0xac>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <HAL_UART_MspInit+0xac>)
 8001876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001880:	230c      	movs	r3, #12
 8001882:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001890:	2307      	movs	r3, #7
 8001892:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001898:	4619      	mov	r1, r3
 800189a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189e:	f002 fa2b 	bl	8003cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018a2:	bf00      	nop
 80018a4:	3768      	adds	r7, #104	; 0x68
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40004400 	.word	0x40004400
 80018b0:	40021000 	.word	0x40021000

080018b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <NMI_Handler+0x4>

080018ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <HardFault_Handler+0x4>

080018c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <MemManage_Handler+0x4>

080018c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <BusFault_Handler+0x4>

080018cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <UsageFault_Handler+0x4>

080018d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001900:	f000 f94e 	bl	8001ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <DMA1_Channel1_IRQHandler+0x10>)
 800190e:	f001 fef4 	bl	80036fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200002c8 	.word	0x200002c8

0800191c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <DMA1_Channel2_IRQHandler+0x10>)
 8001922:	f001 feea 	bl	80036fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000328 	.word	0x20000328

08001930 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return 1;
 8001934:	2301      	movs	r3, #1
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <_kill>:

int _kill(int pid, int sig)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800194a:	f005 f87d 	bl	8006a48 <__errno>
 800194e:	4603      	mov	r3, r0
 8001950:	2216      	movs	r2, #22
 8001952:	601a      	str	r2, [r3, #0]
  return -1;
 8001954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <_exit>:

void _exit (int status)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001968:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ffe7 	bl	8001940 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001972:	e7fe      	b.n	8001972 <_exit+0x12>

08001974 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	e00a      	b.n	800199c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001986:	f3af 8000 	nop.w
 800198a:	4601      	mov	r1, r0
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	60ba      	str	r2, [r7, #8]
 8001992:	b2ca      	uxtb	r2, r1
 8001994:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	3301      	adds	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	dbf0      	blt.n	8001986 <_read+0x12>
  }

  return len;
 80019a4:	687b      	ldr	r3, [r7, #4]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <_close>:
  }
  return len;
}

int _close(int file)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019d6:	605a      	str	r2, [r3, #4]
  return 0;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <_isatty>:

int _isatty(int file)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a20:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <_sbrk+0x5c>)
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <_sbrk+0x60>)
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d102      	bne.n	8001a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <_sbrk+0x64>)
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <_sbrk+0x68>)
 8001a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d207      	bcs.n	8001a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a48:	f004 fffe 	bl	8006a48 <__errno>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	220c      	movs	r2, #12
 8001a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a56:	e009      	b.n	8001a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <_sbrk+0x64>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <_sbrk+0x64>)
 8001a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20008000 	.word	0x20008000
 8001a78:	00000400 	.word	0x00000400
 8001a7c:	20000484 	.word	0x20000484
 8001a80:	200005d8 	.word	0x200005d8

08001a84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <SystemInit+0x20>)
 8001a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <SystemInit+0x20>)
 8001a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001aa8:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aaa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aac:	f7ff ffea 	bl	8001a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab0:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ab2:	490d      	ldr	r1, [pc, #52]	; (8001ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <LoopForever+0xe>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ab8:	e002      	b.n	8001ac0 <LoopCopyDataInit>

08001aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001abe:	3304      	adds	r3, #4

08001ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac4:	d3f9      	bcc.n	8001aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ac8:	4c0a      	ldr	r4, [pc, #40]	; (8001af4 <LoopForever+0x16>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001acc:	e001      	b.n	8001ad2 <LoopFillZerobss>

08001ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad0:	3204      	adds	r2, #4

08001ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad4:	d3fb      	bcc.n	8001ace <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001ad6:	f004 ffbd 	bl	8006a54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ada:	f7ff fa1f 	bl	8000f1c <main>

08001ade <LoopForever>:

LoopForever:
    b LoopForever
 8001ade:	e7fe      	b.n	8001ade <LoopForever>
  ldr   r0, =_estack
 8001ae0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001aec:	08008c34 	.word	0x08008c34
  ldr r2, =_sbss
 8001af0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001af4:	200005d8 	.word	0x200005d8

08001af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001af8:	e7fe      	b.n	8001af8 <ADC1_2_IRQHandler>

08001afa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b04:	2003      	movs	r0, #3
 8001b06:	f001 fc95 	bl	8003434 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f000 f80e 	bl	8001b2c <HAL_InitTick>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d002      	beq.n	8001b1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	71fb      	strb	r3, [r7, #7]
 8001b1a:	e001      	b.n	8001b20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b1c:	f7ff fcd6 	bl	80014cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b20:	79fb      	ldrb	r3, [r7, #7]

}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b38:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <HAL_InitTick+0x68>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d022      	beq.n	8001b86 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_InitTick+0x6c>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <HAL_InitTick+0x68>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b54:	4618      	mov	r0, r3
 8001b56:	f001 fca0 	bl	800349a <HAL_SYSTICK_Config>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10f      	bne.n	8001b80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b0f      	cmp	r3, #15
 8001b64:	d809      	bhi.n	8001b7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b66:	2200      	movs	r2, #0
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b6e:	f001 fc6c 	bl	800344a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <HAL_InitTick+0x70>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	e007      	b.n	8001b8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	73fb      	strb	r3, [r7, #15]
 8001b7e:	e004      	b.n	8001b8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
 8001b84:	e001      	b.n	8001b8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000008 	.word	0x20000008
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	20000004 	.word	0x20000004

08001ba0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_IncTick+0x1c>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_IncTick+0x20>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4413      	add	r3, r2
 8001bae:	4a03      	ldr	r2, [pc, #12]	; (8001bbc <HAL_IncTick+0x1c>)
 8001bb0:	6013      	str	r3, [r2, #0]
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	20000488 	.word	0x20000488
 8001bc0:	20000008 	.word	0x20000008

08001bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_GetTick+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000488 	.word	0x20000488

08001bdc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3360      	adds	r3, #96	; 0x60
 8001c56:	461a      	mov	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <LL_ADC_SetOffset+0x44>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	4313      	orrs	r3, r2
 8001c74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c7c:	bf00      	nop
 8001c7e:	371c      	adds	r7, #28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	03fff000 	.word	0x03fff000

08001c8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3360      	adds	r3, #96	; 0x60
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3360      	adds	r3, #96	; 0x60
 8001cc8:	461a      	mov	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ce2:	bf00      	nop
 8001ce4:	371c      	adds	r7, #28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b087      	sub	sp, #28
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3360      	adds	r3, #96	; 0x60
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	431a      	orrs	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d18:	bf00      	nop
 8001d1a:	371c      	adds	r7, #28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b087      	sub	sp, #28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3360      	adds	r3, #96	; 0x60
 8001d34:	461a      	mov	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001d4e:	bf00      	nop
 8001d50:	371c      	adds	r7, #28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	615a      	str	r2, [r3, #20]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b087      	sub	sp, #28
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	3330      	adds	r3, #48	; 0x30
 8001db6:	461a      	mov	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	0a1b      	lsrs	r3, r3, #8
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	4413      	add	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	211f      	movs	r1, #31
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	401a      	ands	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	0e9b      	lsrs	r3, r3, #26
 8001dde:	f003 011f 	and.w	r1, r3, #31
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	431a      	orrs	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001df2:	bf00      	nop
 8001df4:	371c      	adds	r7, #28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b087      	sub	sp, #28
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3314      	adds	r3, #20
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	0e5b      	lsrs	r3, r3, #25
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	4413      	add	r3, r2
 8001e1c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	0d1b      	lsrs	r3, r3, #20
 8001e26:	f003 031f 	and.w	r3, r3, #31
 8001e2a:	2107      	movs	r1, #7
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	401a      	ands	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	0d1b      	lsrs	r3, r3, #20
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	431a      	orrs	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e48:	bf00      	nop
 8001e4a:	371c      	adds	r7, #28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	401a      	ands	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f003 0318 	and.w	r3, r3, #24
 8001e76:	4908      	ldr	r1, [pc, #32]	; (8001e98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e78:	40d9      	lsrs	r1, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	400b      	ands	r3, r1
 8001e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e82:	431a      	orrs	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	0007ffff 	.word	0x0007ffff

08001e9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 031f 	and.w	r3, r3, #31
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ec8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6093      	str	r3, [r2, #8]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ef0:	d101      	bne.n	8001ef6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f40:	d101      	bne.n	8001f46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f68:	f043 0201 	orr.w	r2, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f90:	f043 0202 	orr.w	r2, r3, #2
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <LL_ADC_IsEnabled+0x18>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <LL_ADC_IsEnabled+0x1a>
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d101      	bne.n	8001fe2 <LL_ADC_IsDisableOngoing+0x18>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <LL_ADC_IsDisableOngoing+0x1a>
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002000:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002004:	f043 0204 	orr.w	r2, r3, #4
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b04      	cmp	r3, #4
 800202a:	d101      	bne.n	8002030 <LL_ADC_REG_IsConversionOngoing+0x18>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b08      	cmp	r3, #8
 8002050:	d101      	bne.n	8002056 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002064:	b590      	push	{r4, r7, lr}
 8002066:	b089      	sub	sp, #36	; 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e167      	b.n	800234e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	2b00      	cmp	r3, #0
 800208a:	d109      	bne.n	80020a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff fa41 	bl	8001514 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff19 	bl	8001edc <LL_ADC_IsDeepPowerDownEnabled>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d004      	beq.n	80020ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff feff 	bl	8001eb8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff ff34 	bl	8001f2c <LL_ADC_IsInternalRegulatorEnabled>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d115      	bne.n	80020f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ff18 	bl	8001f04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020d4:	4ba0      	ldr	r3, [pc, #640]	; (8002358 <HAL_ADC_Init+0x2f4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	099b      	lsrs	r3, r3, #6
 80020da:	4aa0      	ldr	r2, [pc, #640]	; (800235c <HAL_ADC_Init+0x2f8>)
 80020dc:	fba2 2303 	umull	r2, r3, r2, r3
 80020e0:	099b      	lsrs	r3, r3, #6
 80020e2:	3301      	adds	r3, #1
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020e8:	e002      	b.n	80020f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3b01      	subs	r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f9      	bne.n	80020ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ff16 	bl	8001f2c <LL_ADC_IsInternalRegulatorEnabled>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10d      	bne.n	8002122 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	f043 0210 	orr.w	r2, r3, #16
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002116:	f043 0201 	orr.w	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ff76 	bl	8002018 <LL_ADC_REG_IsConversionOngoing>
 800212c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	2b00      	cmp	r3, #0
 8002138:	f040 8100 	bne.w	800233c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2b00      	cmp	r3, #0
 8002140:	f040 80fc 	bne.w	800233c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002148:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800214c:	f043 0202 	orr.w	r2, r3, #2
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff23 	bl	8001fa4 <LL_ADC_IsEnabled>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d111      	bne.n	8002188 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002164:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002168:	f7ff ff1c 	bl	8001fa4 <LL_ADC_IsEnabled>
 800216c:	4604      	mov	r4, r0
 800216e:	487c      	ldr	r0, [pc, #496]	; (8002360 <HAL_ADC_Init+0x2fc>)
 8002170:	f7ff ff18 	bl	8001fa4 <LL_ADC_IsEnabled>
 8002174:	4603      	mov	r3, r0
 8002176:	4323      	orrs	r3, r4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d105      	bne.n	8002188 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4619      	mov	r1, r3
 8002182:	4878      	ldr	r0, [pc, #480]	; (8002364 <HAL_ADC_Init+0x300>)
 8002184:	f7ff fd2a 	bl	8001bdc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7f5b      	ldrb	r3, [r3, #29]
 800218c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002192:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002198:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800219e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021a6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d106      	bne.n	80021c4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	3b01      	subs	r3, #1
 80021bc:	045b      	lsls	r3, r3, #17
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d009      	beq.n	80021e0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	4b60      	ldr	r3, [pc, #384]	; (8002368 <HAL_ADC_Init+0x304>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	69b9      	ldr	r1, [r7, #24]
 80021f0:	430b      	orrs	r3, r1
 80021f2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff15 	bl	800203e <LL_ADC_INJ_IsConversionOngoing>
 8002214:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d16d      	bne.n	80022f8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d16a      	bne.n	80022f8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002226:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800222e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800223e:	f023 0302 	bic.w	r3, r3, #2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	69b9      	ldr	r1, [r7, #24]
 8002248:	430b      	orrs	r3, r1
 800224a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d017      	beq.n	8002284 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002262:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800226c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002270:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6911      	ldr	r1, [r2, #16]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	430b      	orrs	r3, r1
 800227e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002282:	e013      	b.n	80022ac <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002292:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80022a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022a8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d118      	bne.n	80022e8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022c0:	f023 0304 	bic.w	r3, r3, #4
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022cc:	4311      	orrs	r1, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022d2:	4311      	orrs	r1, r2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022d8:	430a      	orrs	r2, r1
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0201 	orr.w	r2, r2, #1
 80022e4:	611a      	str	r2, [r3, #16]
 80022e6:	e007      	b.n	80022f8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d10c      	bne.n	800231a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f023 010f 	bic.w	r1, r3, #15
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	1e5a      	subs	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
 8002318:	e007      	b.n	800232a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 020f 	bic.w	r2, r2, #15
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	f043 0201 	orr.w	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	65da      	str	r2, [r3, #92]	; 0x5c
 800233a:	e007      	b.n	800234c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002340:	f043 0210 	orr.w	r2, r3, #16
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800234c:	7ffb      	ldrb	r3, [r7, #31]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3724      	adds	r7, #36	; 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd90      	pop	{r4, r7, pc}
 8002356:	bf00      	nop
 8002358:	20000000 	.word	0x20000000
 800235c:	053e2d63 	.word	0x053e2d63
 8002360:	50000100 	.word	0x50000100
 8002364:	50000300 	.word	0x50000300
 8002368:	fff04007 	.word	0xfff04007

0800236c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002378:	4851      	ldr	r0, [pc, #324]	; (80024c0 <HAL_ADC_Start_DMA+0x154>)
 800237a:	f7ff fd8f 	bl	8001e9c <LL_ADC_GetMultimode>
 800237e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fe47 	bl	8002018 <LL_ADC_REG_IsConversionOngoing>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	f040 808f 	bne.w	80024b0 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_ADC_Start_DMA+0x34>
 800239c:	2302      	movs	r3, #2
 800239e:	e08a      	b.n	80024b6 <HAL_ADC_Start_DMA+0x14a>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b05      	cmp	r3, #5
 80023b2:	d002      	beq.n	80023ba <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	2b09      	cmp	r3, #9
 80023b8:	d173      	bne.n	80024a2 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 fc98 	bl	8002cf0 <ADC_Enable>
 80023c0:	4603      	mov	r3, r0
 80023c2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023c4:	7dfb      	ldrb	r3, [r7, #23]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d166      	bne.n	8002498 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a38      	ldr	r2, [pc, #224]	; (80024c4 <HAL_ADC_Start_DMA+0x158>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d002      	beq.n	80023ee <HAL_ADC_Start_DMA+0x82>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	e001      	b.n	80023f2 <HAL_ADC_Start_DMA+0x86>
 80023ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d002      	beq.n	8002400 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d105      	bne.n	800240c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002404:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d006      	beq.n	8002426 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241c:	f023 0206 	bic.w	r2, r3, #6
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	661a      	str	r2, [r3, #96]	; 0x60
 8002424:	e002      	b.n	800242c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002430:	4a25      	ldr	r2, [pc, #148]	; (80024c8 <HAL_ADC_Start_DMA+0x15c>)
 8002432:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002438:	4a24      	ldr	r2, [pc, #144]	; (80024cc <HAL_ADC_Start_DMA+0x160>)
 800243a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002440:	4a23      	ldr	r2, [pc, #140]	; (80024d0 <HAL_ADC_Start_DMA+0x164>)
 8002442:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	221c      	movs	r2, #28
 800244a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0210 	orr.w	r2, r2, #16
 8002462:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3340      	adds	r3, #64	; 0x40
 800247e:	4619      	mov	r1, r3
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f001 f8be 	bl	8003604 <HAL_DMA_Start_IT>
 8002488:	4603      	mov	r3, r0
 800248a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fdad 	bl	8001ff0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002496:	e00d      	b.n	80024b4 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80024a0:	e008      	b.n	80024b4 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80024ae:	e001      	b.n	80024b4 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024b0:	2302      	movs	r3, #2
 80024b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	50000300 	.word	0x50000300
 80024c4:	50000100 	.word	0x50000100
 80024c8:	08002ebb 	.word	0x08002ebb
 80024cc:	08002f93 	.word	0x08002f93
 80024d0:	08002faf 	.word	0x08002faf

080024d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b0b6      	sub	sp, #216	; 0xd8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x22>
 800252e:	2302      	movs	r3, #2
 8002530:	e3c8      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x7b4>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fd6a 	bl	8002018 <LL_ADC_REG_IsConversionOngoing>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	f040 83ad 	bne.w	8002ca6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	f7ff fc24 	bl	8001da6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fd58 	bl	8002018 <LL_ADC_REG_IsConversionOngoing>
 8002568:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fd64 	bl	800203e <LL_ADC_INJ_IsConversionOngoing>
 8002576:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800257a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800257e:	2b00      	cmp	r3, #0
 8002580:	f040 81d9 	bne.w	8002936 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002584:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002588:	2b00      	cmp	r3, #0
 800258a:	f040 81d4 	bne.w	8002936 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002596:	d10f      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2200      	movs	r2, #0
 80025a2:	4619      	mov	r1, r3
 80025a4:	f7ff fc2b 	bl	8001dfe <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fbd2 	bl	8001d5a <LL_ADC_SetSamplingTimeCommonConfig>
 80025b6:	e00e      	b.n	80025d6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6819      	ldr	r1, [r3, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	461a      	mov	r2, r3
 80025c6:	f7ff fc1a 	bl	8001dfe <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2100      	movs	r1, #0
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fbc2 	bl	8001d5a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	08db      	lsrs	r3, r3, #3
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d022      	beq.n	800263e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	6919      	ldr	r1, [r3, #16]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002608:	f7ff fb1c 	bl	8001c44 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	6919      	ldr	r1, [r3, #16]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	461a      	mov	r2, r3
 800261a:	f7ff fb68 	bl	8001cee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800262a:	2b01      	cmp	r3, #1
 800262c:	d102      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x124>
 800262e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002632:	e000      	b.n	8002636 <HAL_ADC_ConfigChannel+0x126>
 8002634:	2300      	movs	r3, #0
 8002636:	461a      	mov	r2, r3
 8002638:	f7ff fb74 	bl	8001d24 <LL_ADC_SetOffsetSaturation>
 800263c:	e17b      	b.n	8002936 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fb21 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 800264a:	4603      	mov	r3, r0
 800264c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10a      	bne.n	800266a <HAL_ADC_ConfigChannel+0x15a>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fb16 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	0e9b      	lsrs	r3, r3, #26
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	e01e      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x198>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fb0b 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 8002676:	4603      	mov	r3, r0
 8002678:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002688:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800268c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002690:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002698:	2320      	movs	r3, #32
 800269a:	e004      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800269c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d105      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1b0>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	0e9b      	lsrs	r3, r3, #26
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	e018      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x1e2>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80026d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80026dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80026e4:	2320      	movs	r3, #32
 80026e6:	e004      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80026e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d106      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2200      	movs	r2, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fada 	bl	8001cb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2101      	movs	r1, #1
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fabe 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 8002710:	4603      	mov	r3, r0
 8002712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10a      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x220>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2101      	movs	r1, #1
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fab3 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 8002726:	4603      	mov	r3, r0
 8002728:	0e9b      	lsrs	r3, r3, #26
 800272a:	f003 021f 	and.w	r2, r3, #31
 800272e:	e01e      	b.n	800276e <HAL_ADC_ConfigChannel+0x25e>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2101      	movs	r1, #1
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff faa8 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 800273c:	4603      	mov	r3, r0
 800273e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800274e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002752:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002756:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800275e:	2320      	movs	r3, #32
 8002760:	e004      	b.n	800276c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002762:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002776:	2b00      	cmp	r3, #0
 8002778:	d105      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x276>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	0e9b      	lsrs	r3, r3, #26
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	e018      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x2a8>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800279a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800279e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80027a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80027aa:	2320      	movs	r3, #32
 80027ac:	e004      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80027ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d106      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2200      	movs	r2, #0
 80027c2:	2101      	movs	r1, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fa77 	bl	8001cb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2102      	movs	r1, #2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fa5b 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10a      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x2e6>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2102      	movs	r1, #2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fa50 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 80027ec:	4603      	mov	r3, r0
 80027ee:	0e9b      	lsrs	r3, r3, #26
 80027f0:	f003 021f 	and.w	r2, r3, #31
 80027f4:	e01e      	b.n	8002834 <HAL_ADC_ConfigChannel+0x324>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2102      	movs	r1, #2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fa45 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 8002802:	4603      	mov	r3, r0
 8002804:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002814:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002818:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800281c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	e004      	b.n	8002832 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002828:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800282c:	fab3 f383 	clz	r3, r3
 8002830:	b2db      	uxtb	r3, r3
 8002832:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <HAL_ADC_ConfigChannel+0x33c>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	0e9b      	lsrs	r3, r3, #26
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	e016      	b.n	800287a <HAL_ADC_ConfigChannel+0x36a>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800285e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002864:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800286c:	2320      	movs	r3, #32
 800286e:	e004      	b.n	800287a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002870:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002874:	fab3 f383 	clz	r3, r3
 8002878:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800287a:	429a      	cmp	r2, r3
 800287c:	d106      	bne.n	800288c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2200      	movs	r2, #0
 8002884:	2102      	movs	r1, #2
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fa16 	bl	8001cb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2103      	movs	r1, #3
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff f9fa 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 8002898:	4603      	mov	r3, r0
 800289a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10a      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x3a8>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2103      	movs	r1, #3
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff f9ef 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 80028ae:	4603      	mov	r3, r0
 80028b0:	0e9b      	lsrs	r3, r3, #26
 80028b2:	f003 021f 	and.w	r2, r3, #31
 80028b6:	e017      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x3d8>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2103      	movs	r1, #3
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff f9e4 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 80028c4:	4603      	mov	r3, r0
 80028c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80028d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028d2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80028d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80028da:	2320      	movs	r3, #32
 80028dc:	e003      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80028de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x3f0>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	0e9b      	lsrs	r3, r3, #26
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	e011      	b.n	8002924 <HAL_ADC_ConfigChannel+0x414>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002908:	fa93 f3a3 	rbit	r3, r3
 800290c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800290e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002910:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002918:	2320      	movs	r3, #32
 800291a:	e003      	b.n	8002924 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800291c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002924:	429a      	cmp	r2, r3
 8002926:	d106      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2200      	movs	r2, #0
 800292e:	2103      	movs	r1, #3
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff f9c1 	bl	8001cb8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fb32 	bl	8001fa4 <LL_ADC_IsEnabled>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	f040 8140 	bne.w	8002bc8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	6819      	ldr	r1, [r3, #0]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	461a      	mov	r2, r3
 8002956:	f7ff fa7d 	bl	8001e54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	4a8f      	ldr	r2, [pc, #572]	; (8002b9c <HAL_ADC_ConfigChannel+0x68c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	f040 8131 	bne.w	8002bc8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10b      	bne.n	800298e <HAL_ADC_ConfigChannel+0x47e>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	0e9b      	lsrs	r3, r3, #26
 800297c:	3301      	adds	r3, #1
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	2b09      	cmp	r3, #9
 8002984:	bf94      	ite	ls
 8002986:	2301      	movls	r3, #1
 8002988:	2300      	movhi	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	e019      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x4b2>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800299c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800299e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80029a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80029a6:	2320      	movs	r3, #32
 80029a8:	e003      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80029aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	2b09      	cmp	r3, #9
 80029ba:	bf94      	ite	ls
 80029bc:	2301      	movls	r3, #1
 80029be:	2300      	movhi	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d079      	beq.n	8002aba <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d107      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x4d2>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	0e9b      	lsrs	r3, r3, #26
 80029d8:	3301      	adds	r3, #1
 80029da:	069b      	lsls	r3, r3, #26
 80029dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029e0:	e015      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x4fe>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80029f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80029fa:	2320      	movs	r3, #32
 80029fc:	e003      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80029fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a00:	fab3 f383 	clz	r3, r3
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	3301      	adds	r3, #1
 8002a08:	069b      	lsls	r3, r3, #26
 8002a0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x51e>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	0e9b      	lsrs	r3, r3, #26
 8002a20:	3301      	adds	r3, #1
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	2101      	movs	r1, #1
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2c:	e017      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x54e>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002a46:	2320      	movs	r3, #32
 8002a48:	e003      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a4c:	fab3 f383 	clz	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	2101      	movs	r1, #1
 8002a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5e:	ea42 0103 	orr.w	r1, r2, r3
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10a      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x574>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	0e9b      	lsrs	r3, r3, #26
 8002a74:	3301      	adds	r3, #1
 8002a76:	f003 021f 	and.w	r2, r3, #31
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4413      	add	r3, r2
 8002a80:	051b      	lsls	r3, r3, #20
 8002a82:	e018      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x5a6>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8c:	fa93 f3a3 	rbit	r3, r3
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a94:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002a9c:	2320      	movs	r3, #32
 8002a9e:	e003      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f003 021f 	and.w	r2, r3, #31
 8002aae:	4613      	mov	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	4413      	add	r3, r2
 8002ab4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab6:	430b      	orrs	r3, r1
 8002ab8:	e081      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d107      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x5c6>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	0e9b      	lsrs	r3, r3, #26
 8002acc:	3301      	adds	r3, #1
 8002ace:	069b      	lsls	r3, r3, #26
 8002ad0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ad4:	e015      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x5f2>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002aee:	2320      	movs	r3, #32
 8002af0:	e003      	b.n	8002afa <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	fab3 f383 	clz	r3, r3
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	3301      	adds	r3, #1
 8002afc:	069b      	lsls	r3, r3, #26
 8002afe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x612>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	0e9b      	lsrs	r3, r3, #26
 8002b14:	3301      	adds	r3, #1
 8002b16:	f003 031f 	and.w	r3, r3, #31
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	e017      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x642>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	61fb      	str	r3, [r7, #28]
  return result;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002b3a:	2320      	movs	r3, #32
 8002b3c:	e003      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	3301      	adds	r3, #1
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	ea42 0103 	orr.w	r1, r2, r3
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10d      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x66e>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	0e9b      	lsrs	r3, r3, #26
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f003 021f 	and.w	r2, r3, #31
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	3b1e      	subs	r3, #30
 8002b76:	051b      	lsls	r3, r3, #20
 8002b78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b7c:	e01e      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x6ac>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	613b      	str	r3, [r7, #16]
  return result;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d104      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002b96:	2320      	movs	r3, #32
 8002b98:	e006      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x698>
 8002b9a:	bf00      	nop
 8002b9c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	3301      	adds	r3, #1
 8002baa:	f003 021f 	and.w	r2, r3, #31
 8002bae:	4613      	mov	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3b1e      	subs	r3, #30
 8002bb6:	051b      	lsls	r3, r3, #20
 8002bb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bbc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	f7ff f91b 	bl	8001dfe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ccc <HAL_ADC_ConfigChannel+0x7bc>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d071      	beq.n	8002cb8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bd4:	483e      	ldr	r0, [pc, #248]	; (8002cd0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002bd6:	f7ff f827 	bl	8001c28 <LL_ADC_GetCommonPathInternalCh>
 8002bda:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a3c      	ldr	r2, [pc, #240]	; (8002cd4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d004      	beq.n	8002bf2 <HAL_ADC_ConfigChannel+0x6e2>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a3a      	ldr	r2, [pc, #232]	; (8002cd8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d127      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d121      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c06:	d157      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c10:	4619      	mov	r1, r3
 8002c12:	482f      	ldr	r0, [pc, #188]	; (8002cd0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c14:	f7fe fff5 	bl	8001c02 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c18:	4b30      	ldr	r3, [pc, #192]	; (8002cdc <HAL_ADC_ConfigChannel+0x7cc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	099b      	lsrs	r3, r3, #6
 8002c1e:	4a30      	ldr	r2, [pc, #192]	; (8002ce0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002c20:	fba2 2303 	umull	r2, r3, r2, r3
 8002c24:	099b      	lsrs	r3, r3, #6
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c32:	e002      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f9      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c40:	e03a      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a27      	ldr	r2, [pc, #156]	; (8002ce4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d113      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10d      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a22      	ldr	r2, [pc, #136]	; (8002ce8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d02a      	beq.n	8002cb8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4818      	ldr	r0, [pc, #96]	; (8002cd0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c6e:	f7fe ffc8 	bl	8001c02 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c72:	e021      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <HAL_ADC_ConfigChannel+0x7dc>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d11c      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d116      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d011      	beq.n	8002cb8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	480c      	ldr	r0, [pc, #48]	; (8002cd0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ca0:	f7fe ffaf 	bl	8001c02 <LL_ADC_SetCommonPathInternalCh>
 8002ca4:	e008      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002caa:	f043 0220 	orr.w	r2, r3, #32
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002cc0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	37d8      	adds	r7, #216	; 0xd8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	80080000 	.word	0x80080000
 8002cd0:	50000300 	.word	0x50000300
 8002cd4:	c3210000 	.word	0xc3210000
 8002cd8:	90c00010 	.word	0x90c00010
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	053e2d63 	.word	0x053e2d63
 8002ce4:	c7520000 	.word	0xc7520000
 8002ce8:	50000100 	.word	0x50000100
 8002cec:	cb840000 	.word	0xcb840000

08002cf0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff f94f 	bl	8001fa4 <LL_ADC_IsEnabled>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d169      	bne.n	8002de0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	4b36      	ldr	r3, [pc, #216]	; (8002dec <ADC_Enable+0xfc>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00d      	beq.n	8002d36 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1e:	f043 0210 	orr.w	r2, r3, #16
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2a:	f043 0201 	orr.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e055      	b.n	8002de2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff f90a 	bl	8001f54 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d40:	482b      	ldr	r0, [pc, #172]	; (8002df0 <ADC_Enable+0x100>)
 8002d42:	f7fe ff71 	bl	8001c28 <LL_ADC_GetCommonPathInternalCh>
 8002d46:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002d48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d013      	beq.n	8002d78 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d50:	4b28      	ldr	r3, [pc, #160]	; (8002df4 <ADC_Enable+0x104>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	4a28      	ldr	r2, [pc, #160]	; (8002df8 <ADC_Enable+0x108>)
 8002d58:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5c:	099b      	lsrs	r3, r3, #6
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	4613      	mov	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d6a:	e002      	b.n	8002d72 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f9      	bne.n	8002d6c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d78:	f7fe ff24 	bl	8001bc4 <HAL_GetTick>
 8002d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d7e:	e028      	b.n	8002dd2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff f90d 	bl	8001fa4 <LL_ADC_IsEnabled>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d104      	bne.n	8002d9a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff f8dd 	bl	8001f54 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d9a:	f7fe ff13 	bl	8001bc4 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d914      	bls.n	8002dd2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d00d      	beq.n	8002dd2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dba:	f043 0210 	orr.w	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc6:	f043 0201 	orr.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e007      	b.n	8002de2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d1cf      	bne.n	8002d80 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	8000003f 	.word	0x8000003f
 8002df0:	50000300 	.word	0x50000300
 8002df4:	20000000 	.word	0x20000000
 8002df8:	053e2d63 	.word	0x053e2d63

08002dfc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff f8de 	bl	8001fca <LL_ADC_IsDisableOngoing>
 8002e0e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff f8c5 	bl	8001fa4 <LL_ADC_IsEnabled>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d047      	beq.n	8002eb0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d144      	bne.n	8002eb0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 030d 	and.w	r3, r3, #13
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d10c      	bne.n	8002e4e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff f89f 	bl	8001f7c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2203      	movs	r2, #3
 8002e44:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e46:	f7fe febd 	bl	8001bc4 <HAL_GetTick>
 8002e4a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e4c:	e029      	b.n	8002ea2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e52:	f043 0210 	orr.w	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e5e:	f043 0201 	orr.w	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e023      	b.n	8002eb2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e6a:	f7fe feab 	bl	8001bc4 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d914      	bls.n	8002ea2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00d      	beq.n	8002ea2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8a:	f043 0210 	orr.w	r2, r3, #16
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e96:	f043 0201 	orr.w	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e007      	b.n	8002eb2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1dc      	bne.n	8002e6a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ecc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d14b      	bne.n	8002f6c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d021      	beq.n	8002f32 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe ff44 	bl	8001d80 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d032      	beq.n	8002f64 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d12b      	bne.n	8002f64 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d11f      	bne.n	8002f64 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f28:	f043 0201 	orr.w	r2, r3, #1
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f30:	e018      	b.n	8002f64 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d111      	bne.n	8002f64 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d105      	bne.n	8002f64 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5c:	f043 0201 	orr.w	r2, r3, #1
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f7ff fab5 	bl	80024d4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f6a:	e00e      	b.n	8002f8a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f7ff fabf 	bl	80024fc <HAL_ADC_ErrorCallback>
}
 8002f7e:	e004      	b.n	8002f8a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
}
 8002f8a:	bf00      	nop
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f7ff faa1 	bl	80024e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fcc:	f043 0204 	orr.w	r2, r3, #4
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f7ff fa91 	bl	80024fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <LL_ADC_IsEnabled>:
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <LL_ADC_IsEnabled+0x18>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <LL_ADC_IsEnabled+0x1a>
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_ADC_StartCalibration>:
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800301a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003024:	4313      	orrs	r3, r2
 8003026:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	609a      	str	r2, [r3, #8]
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <LL_ADC_IsCalibrationOnGoing>:
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800304a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800304e:	d101      	bne.n	8003054 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <LL_ADC_REG_IsConversionOngoing>:
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b04      	cmp	r3, #4
 8003074:	d101      	bne.n	800307a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_ADCEx_Calibration_Start+0x1c>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e04d      	b.n	8003140 <HAL_ADCEx_Calibration_Start+0xb8>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff fea5 	bl	8002dfc <ADC_Disable>
 80030b2:	4603      	mov	r3, r0
 80030b4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d136      	bne.n	800312a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030c4:	f023 0302 	bic.w	r3, r3, #2
 80030c8:	f043 0202 	orr.w	r2, r3, #2
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6839      	ldr	r1, [r7, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff ff96 	bl	8003008 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80030dc:	e014      	b.n	8003108 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	3301      	adds	r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	4a18      	ldr	r2, [pc, #96]	; (8003148 <HAL_ADCEx_Calibration_Start+0xc0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d90d      	bls.n	8003108 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f0:	f023 0312 	bic.w	r3, r3, #18
 80030f4:	f043 0210 	orr.w	r2, r3, #16
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e01b      	b.n	8003140 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff ff94 	bl	800303a <LL_ADC_IsCalibrationOnGoing>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1e2      	bne.n	80030de <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311c:	f023 0303 	bic.w	r3, r3, #3
 8003120:	f043 0201 	orr.w	r2, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	65da      	str	r2, [r3, #92]	; 0x5c
 8003128:	e005      	b.n	8003136 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312e:	f043 0210 	orr.w	r2, r3, #16
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800313e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	0004de01 	.word	0x0004de01

0800314c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	b0a1      	sub	sp, #132	; 0x84
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003166:	2302      	movs	r3, #2
 8003168:	e08b      	b.n	8003282 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003172:	2300      	movs	r3, #0
 8003174:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003176:	2300      	movs	r3, #0
 8003178:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003182:	d102      	bne.n	800318a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003184:	4b41      	ldr	r3, [pc, #260]	; (800328c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	e001      	b.n	800318e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800318a:	2300      	movs	r3, #0
 800318c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10b      	bne.n	80031ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003198:	f043 0220 	orr.w	r2, r3, #32
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e06a      	b.n	8003282 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff ff57 	bl	8003062 <LL_ADC_REG_IsConversionOngoing>
 80031b4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff ff51 	bl	8003062 <LL_ADC_REG_IsConversionOngoing>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d14c      	bne.n	8003260 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80031c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d149      	bne.n	8003260 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80031cc:	4b30      	ldr	r3, [pc, #192]	; (8003290 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80031ce:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d028      	beq.n	800322a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80031d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031ea:	035b      	lsls	r3, r3, #13
 80031ec:	430b      	orrs	r3, r1
 80031ee:	431a      	orrs	r2, r3
 80031f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80031f8:	f7ff fef3 	bl	8002fe2 <LL_ADC_IsEnabled>
 80031fc:	4604      	mov	r4, r0
 80031fe:	4823      	ldr	r0, [pc, #140]	; (800328c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003200:	f7ff feef 	bl	8002fe2 <LL_ADC_IsEnabled>
 8003204:	4603      	mov	r3, r0
 8003206:	4323      	orrs	r3, r4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d133      	bne.n	8003274 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800320c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003214:	f023 030f 	bic.w	r3, r3, #15
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	6811      	ldr	r1, [r2, #0]
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	6892      	ldr	r2, [r2, #8]
 8003220:	430a      	orrs	r2, r1
 8003222:	431a      	orrs	r2, r3
 8003224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003226:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003228:	e024      	b.n	8003274 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800322a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003234:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003236:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800323a:	f7ff fed2 	bl	8002fe2 <LL_ADC_IsEnabled>
 800323e:	4604      	mov	r4, r0
 8003240:	4812      	ldr	r0, [pc, #72]	; (800328c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003242:	f7ff fece 	bl	8002fe2 <LL_ADC_IsEnabled>
 8003246:	4603      	mov	r3, r0
 8003248:	4323      	orrs	r3, r4
 800324a:	2b00      	cmp	r3, #0
 800324c:	d112      	bne.n	8003274 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800324e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003256:	f023 030f 	bic.w	r3, r3, #15
 800325a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800325c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800325e:	e009      	b.n	8003274 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	f043 0220 	orr.w	r2, r3, #32
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003272:	e000      	b.n	8003276 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003274:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800327e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003282:	4618      	mov	r0, r3
 8003284:	3784      	adds	r7, #132	; 0x84
 8003286:	46bd      	mov	sp, r7
 8003288:	bd90      	pop	{r4, r7, pc}
 800328a:	bf00      	nop
 800328c:	50000100 	.word	0x50000100
 8003290:	50000300 	.word	0x50000300

08003294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <__NVIC_SetPriorityGrouping+0x44>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032b0:	4013      	ands	r3, r2
 80032b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032c6:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <__NVIC_SetPriorityGrouping+0x44>)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	60d3      	str	r3, [r2, #12]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e0:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <__NVIC_GetPriorityGrouping+0x18>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	0a1b      	lsrs	r3, r3, #8
 80032e6:	f003 0307 	and.w	r3, r3, #7
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	2b00      	cmp	r3, #0
 8003308:	db0b      	blt.n	8003322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	f003 021f 	and.w	r2, r3, #31
 8003310:	4907      	ldr	r1, [pc, #28]	; (8003330 <__NVIC_EnableIRQ+0x38>)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	2001      	movs	r0, #1
 800331a:	fa00 f202 	lsl.w	r2, r0, r2
 800331e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	e000e100 	.word	0xe000e100

08003334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	6039      	str	r1, [r7, #0]
 800333e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003344:	2b00      	cmp	r3, #0
 8003346:	db0a      	blt.n	800335e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	b2da      	uxtb	r2, r3
 800334c:	490c      	ldr	r1, [pc, #48]	; (8003380 <__NVIC_SetPriority+0x4c>)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	0112      	lsls	r2, r2, #4
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	440b      	add	r3, r1
 8003358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800335c:	e00a      	b.n	8003374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	4908      	ldr	r1, [pc, #32]	; (8003384 <__NVIC_SetPriority+0x50>)
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	3b04      	subs	r3, #4
 800336c:	0112      	lsls	r2, r2, #4
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	440b      	add	r3, r1
 8003372:	761a      	strb	r2, [r3, #24]
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000e100 	.word	0xe000e100
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	; 0x24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f1c3 0307 	rsb	r3, r3, #7
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	bf28      	it	cs
 80033a6:	2304      	movcs	r3, #4
 80033a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	3304      	adds	r3, #4
 80033ae:	2b06      	cmp	r3, #6
 80033b0:	d902      	bls.n	80033b8 <NVIC_EncodePriority+0x30>
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3b03      	subs	r3, #3
 80033b6:	e000      	b.n	80033ba <NVIC_EncodePriority+0x32>
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43da      	mvns	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	401a      	ands	r2, r3
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	fa01 f303 	lsl.w	r3, r1, r3
 80033da:	43d9      	mvns	r1, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e0:	4313      	orrs	r3, r2
         );
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3724      	adds	r7, #36	; 0x24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003400:	d301      	bcc.n	8003406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003402:	2301      	movs	r3, #1
 8003404:	e00f      	b.n	8003426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003406:	4a0a      	ldr	r2, [pc, #40]	; (8003430 <SysTick_Config+0x40>)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3b01      	subs	r3, #1
 800340c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800340e:	210f      	movs	r1, #15
 8003410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003414:	f7ff ff8e 	bl	8003334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003418:	4b05      	ldr	r3, [pc, #20]	; (8003430 <SysTick_Config+0x40>)
 800341a:	2200      	movs	r2, #0
 800341c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800341e:	4b04      	ldr	r3, [pc, #16]	; (8003430 <SysTick_Config+0x40>)
 8003420:	2207      	movs	r2, #7
 8003422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	e000e010 	.word	0xe000e010

08003434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff ff29 	bl	8003294 <__NVIC_SetPriorityGrouping>
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b086      	sub	sp, #24
 800344e:	af00      	add	r7, sp, #0
 8003450:	4603      	mov	r3, r0
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003458:	f7ff ff40 	bl	80032dc <__NVIC_GetPriorityGrouping>
 800345c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	6978      	ldr	r0, [r7, #20]
 8003464:	f7ff ff90 	bl	8003388 <NVIC_EncodePriority>
 8003468:	4602      	mov	r2, r0
 800346a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800346e:	4611      	mov	r1, r2
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ff5f 	bl	8003334 <__NVIC_SetPriority>
}
 8003476:	bf00      	nop
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	4603      	mov	r3, r0
 8003486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff ff33 	bl	80032f8 <__NVIC_EnableIRQ>
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff ffa4 	bl	80033f0 <SysTick_Config>
 80034a8:	4603      	mov	r3, r0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e08d      	b.n	80035e2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	4b47      	ldr	r3, [pc, #284]	; (80035ec <HAL_DMA_Init+0x138>)
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d80f      	bhi.n	80034f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	4b45      	ldr	r3, [pc, #276]	; (80035f0 <HAL_DMA_Init+0x13c>)
 80034da:	4413      	add	r3, r2
 80034dc:	4a45      	ldr	r2, [pc, #276]	; (80035f4 <HAL_DMA_Init+0x140>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	091b      	lsrs	r3, r3, #4
 80034e4:	009a      	lsls	r2, r3, #2
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a42      	ldr	r2, [pc, #264]	; (80035f8 <HAL_DMA_Init+0x144>)
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40
 80034f0:	e00e      	b.n	8003510 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	4b40      	ldr	r3, [pc, #256]	; (80035fc <HAL_DMA_Init+0x148>)
 80034fa:	4413      	add	r3, r2
 80034fc:	4a3d      	ldr	r2, [pc, #244]	; (80035f4 <HAL_DMA_Init+0x140>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	009a      	lsls	r2, r3, #2
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a3c      	ldr	r2, [pc, #240]	; (8003600 <HAL_DMA_Init+0x14c>)
 800350e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003534:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003540:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800354c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f9b6 	bl	80038d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003570:	d102      	bne.n	8003578 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800358c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d010      	beq.n	80035b8 <HAL_DMA_Init+0x104>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b04      	cmp	r3, #4
 800359c:	d80c      	bhi.n	80035b8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f9d6 	bl	8003950 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	e008      	b.n	80035ca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40020407 	.word	0x40020407
 80035f0:	bffdfff8 	.word	0xbffdfff8
 80035f4:	cccccccd 	.word	0xcccccccd
 80035f8:	40020000 	.word	0x40020000
 80035fc:	bffdfbf8 	.word	0xbffdfbf8
 8003600:	40020400 	.word	0x40020400

08003604 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_DMA_Start_IT+0x20>
 8003620:	2302      	movs	r3, #2
 8003622:	e066      	b.n	80036f2 <HAL_DMA_Start_IT+0xee>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d155      	bne.n	80036e4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0201 	bic.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	68b9      	ldr	r1, [r7, #8]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f8fb 	bl	8003858 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	2b00      	cmp	r3, #0
 8003668:	d008      	beq.n	800367c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f042 020e 	orr.w	r2, r2, #14
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	e00f      	b.n	800369c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0204 	bic.w	r2, r2, #4
 800368a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 020a 	orr.w	r2, r2, #10
 800369a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d007      	beq.n	80036ba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d007      	beq.n	80036d2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036d0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	e005      	b.n	80036f0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80036ec:	2302      	movs	r3, #2
 80036ee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80036f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	f003 031f 	and.w	r3, r3, #31
 800371a:	2204      	movs	r2, #4
 800371c:	409a      	lsls	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4013      	ands	r3, r2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d026      	beq.n	8003774 <HAL_DMA_IRQHandler+0x7a>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d021      	beq.n	8003774 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d107      	bne.n	800374e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0204 	bic.w	r2, r2, #4
 800374c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	f003 021f 	and.w	r2, r3, #31
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	2104      	movs	r1, #4
 800375c:	fa01 f202 	lsl.w	r2, r1, r2
 8003760:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	2b00      	cmp	r3, #0
 8003768:	d071      	beq.n	800384e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003772:	e06c      	b.n	800384e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	2202      	movs	r2, #2
 800377e:	409a      	lsls	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4013      	ands	r3, r2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d02e      	beq.n	80037e6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d029      	beq.n	80037e6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10b      	bne.n	80037b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 020a 	bic.w	r2, r2, #10
 80037ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037bc:	f003 021f 	and.w	r2, r3, #31
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	2102      	movs	r1, #2
 80037c6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d038      	beq.n	800384e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80037e4:	e033      	b.n	800384e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	2208      	movs	r2, #8
 80037f0:	409a      	lsls	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d02a      	beq.n	8003850 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b00      	cmp	r3, #0
 8003802:	d025      	beq.n	8003850 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 020e 	bic.w	r2, r2, #14
 8003812:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003818:	f003 021f 	and.w	r2, r3, #31
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	2101      	movs	r1, #1
 8003822:	fa01 f202 	lsl.w	r2, r1, r2
 8003826:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003842:	2b00      	cmp	r3, #0
 8003844:	d004      	beq.n	8003850 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800384e:	bf00      	nop
 8003850:	bf00      	nop
}
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800386e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003874:	2b00      	cmp	r3, #0
 8003876:	d004      	beq.n	8003882 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003880:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f003 021f 	and.w	r2, r3, #31
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	2101      	movs	r1, #1
 8003890:	fa01 f202 	lsl.w	r2, r1, r2
 8003894:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b10      	cmp	r3, #16
 80038a4:	d108      	bne.n	80038b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038b6:	e007      	b.n	80038c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	60da      	str	r2, [r3, #12]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	461a      	mov	r2, r3
 80038e2:	4b16      	ldr	r3, [pc, #88]	; (800393c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d802      	bhi.n	80038ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80038e8:	4b15      	ldr	r3, [pc, #84]	; (8003940 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	e001      	b.n	80038f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80038ee:	4b15      	ldr	r3, [pc, #84]	; (8003944 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80038f0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	3b08      	subs	r3, #8
 80038fe:	4a12      	ldr	r2, [pc, #72]	; (8003948 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003900:	fba2 2303 	umull	r2, r3, r2, r3
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390c:	089b      	lsrs	r3, r3, #2
 800390e:	009a      	lsls	r2, r3, #2
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	4413      	add	r3, r2
 8003914:	461a      	mov	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a0b      	ldr	r2, [pc, #44]	; (800394c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800391e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	2201      	movs	r2, #1
 8003928:	409a      	lsls	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800392e:	bf00      	nop
 8003930:	371c      	adds	r7, #28
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40020407 	.word	0x40020407
 8003940:	40020800 	.word	0x40020800
 8003944:	40020820 	.word	0x40020820
 8003948:	cccccccd 	.word	0xcccccccd
 800394c:	40020880 	.word	0x40020880

08003950 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	461a      	mov	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a08      	ldr	r2, [pc, #32]	; (8003994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003972:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	3b01      	subs	r3, #1
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	2201      	movs	r2, #1
 800397e:	409a      	lsls	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	1000823f 	.word	0x1000823f
 8003994:	40020940 	.word	0x40020940

08003998 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e147      	b.n	8003c3a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fd fec6 	bl	8001750 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0210 	bic.w	r2, r2, #16
 80039d2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039d4:	f7fe f8f6 	bl	8001bc4 <HAL_GetTick>
 80039d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80039da:	e012      	b.n	8003a02 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80039dc:	f7fe f8f2 	bl	8001bc4 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b0a      	cmp	r3, #10
 80039e8:	d90b      	bls.n	8003a02 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ee:	f043 0201 	orr.w	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2203      	movs	r2, #3
 80039fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e11b      	b.n	8003c3a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d0e5      	beq.n	80039dc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a20:	f7fe f8d0 	bl	8001bc4 <HAL_GetTick>
 8003a24:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a26:	e012      	b.n	8003a4e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a28:	f7fe f8cc 	bl	8001bc4 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b0a      	cmp	r3, #10
 8003a34:	d90b      	bls.n	8003a4e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3a:	f043 0201 	orr.w	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2203      	movs	r2, #3
 8003a46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e0f5      	b.n	8003c3a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0e5      	beq.n	8003a28 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699a      	ldr	r2, [r3, #24]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0202 	orr.w	r2, r2, #2
 8003a6a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a74      	ldr	r2, [pc, #464]	; (8003c44 <HAL_FDCAN_Init+0x2ac>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d103      	bne.n	8003a7e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003a76:	4a74      	ldr	r2, [pc, #464]	; (8003c48 <HAL_FDCAN_Init+0x2b0>)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	7c1b      	ldrb	r3, [r3, #16]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d108      	bne.n	8003a98 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699a      	ldr	r2, [r3, #24]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a94:	619a      	str	r2, [r3, #24]
 8003a96:	e007      	b.n	8003aa8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aa6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	7c5b      	ldrb	r3, [r3, #17]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d108      	bne.n	8003ac2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003abe:	619a      	str	r2, [r3, #24]
 8003ac0:	e007      	b.n	8003ad2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	699a      	ldr	r2, [r3, #24]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ad0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	7c9b      	ldrb	r3, [r3, #18]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d108      	bne.n	8003aec <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699a      	ldr	r2, [r3, #24]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ae8:	619a      	str	r2, [r3, #24]
 8003aea:	e007      	b.n	8003afc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003afa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	699a      	ldr	r2, [r3, #24]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003b20:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0210 	bic.w	r2, r2, #16
 8003b30:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d108      	bne.n	8003b4c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0204 	orr.w	r2, r2, #4
 8003b48:	619a      	str	r2, [r3, #24]
 8003b4a:	e02c      	b.n	8003ba6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d028      	beq.n	8003ba6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d01c      	beq.n	8003b96 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699a      	ldr	r2, [r3, #24]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b6a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691a      	ldr	r2, [r3, #16]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0210 	orr.w	r2, r2, #16
 8003b7a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d110      	bne.n	8003ba6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0220 	orr.w	r2, r2, #32
 8003b92:	619a      	str	r2, [r3, #24]
 8003b94:	e007      	b.n	8003ba6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699a      	ldr	r2, [r3, #24]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0220 	orr.w	r2, r2, #32
 8003ba4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bb6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003bbe:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003bce:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bd0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bda:	d115      	bne.n	8003c08 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	3b01      	subs	r3, #1
 8003be8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bea:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003bf4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c04:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c06:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f814 	bl	8003c4c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40006400 	.word	0x40006400
 8003c48:	40006500 	.word	0x40006500

08003c4c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003c54:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003c56:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c66:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6e:	041a      	lsls	r2, r3, #16
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c8c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	061a      	lsls	r2, r3, #24
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	e005      	b.n	8003cda <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d3f3      	bcc.n	8003cce <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003ce6:	bf00      	nop
 8003ce8:	bf00      	nop
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	4000a400 	.word	0x4000a400

08003cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d06:	e15a      	b.n	8003fbe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	fa01 f303 	lsl.w	r3, r1, r3
 8003d14:	4013      	ands	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 814c 	beq.w	8003fb8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d005      	beq.n	8003d38 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d130      	bne.n	8003d9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	2203      	movs	r2, #3
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d6e:	2201      	movs	r2, #1
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	43db      	mvns	r3, r3
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	091b      	lsrs	r3, r3, #4
 8003d84:	f003 0201 	and.w	r2, r3, #1
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d017      	beq.n	8003dd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	2203      	movs	r2, #3
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	43db      	mvns	r3, r3
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d123      	bne.n	8003e2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	08da      	lsrs	r2, r3, #3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3208      	adds	r2, #8
 8003dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	220f      	movs	r2, #15
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4013      	ands	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	08da      	lsrs	r2, r3, #3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3208      	adds	r2, #8
 8003e24:	6939      	ldr	r1, [r7, #16]
 8003e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	2203      	movs	r2, #3
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 0203 	and.w	r2, r3, #3
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 80a6 	beq.w	8003fb8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e6c:	4b5b      	ldr	r3, [pc, #364]	; (8003fdc <HAL_GPIO_Init+0x2e4>)
 8003e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e70:	4a5a      	ldr	r2, [pc, #360]	; (8003fdc <HAL_GPIO_Init+0x2e4>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6613      	str	r3, [r2, #96]	; 0x60
 8003e78:	4b58      	ldr	r3, [pc, #352]	; (8003fdc <HAL_GPIO_Init+0x2e4>)
 8003e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e84:	4a56      	ldr	r2, [pc, #344]	; (8003fe0 <HAL_GPIO_Init+0x2e8>)
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	089b      	lsrs	r3, r3, #2
 8003e8a:	3302      	adds	r3, #2
 8003e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	220f      	movs	r2, #15
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003eae:	d01f      	beq.n	8003ef0 <HAL_GPIO_Init+0x1f8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a4c      	ldr	r2, [pc, #304]	; (8003fe4 <HAL_GPIO_Init+0x2ec>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d019      	beq.n	8003eec <HAL_GPIO_Init+0x1f4>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a4b      	ldr	r2, [pc, #300]	; (8003fe8 <HAL_GPIO_Init+0x2f0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d013      	beq.n	8003ee8 <HAL_GPIO_Init+0x1f0>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a4a      	ldr	r2, [pc, #296]	; (8003fec <HAL_GPIO_Init+0x2f4>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00d      	beq.n	8003ee4 <HAL_GPIO_Init+0x1ec>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a49      	ldr	r2, [pc, #292]	; (8003ff0 <HAL_GPIO_Init+0x2f8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d007      	beq.n	8003ee0 <HAL_GPIO_Init+0x1e8>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a48      	ldr	r2, [pc, #288]	; (8003ff4 <HAL_GPIO_Init+0x2fc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d101      	bne.n	8003edc <HAL_GPIO_Init+0x1e4>
 8003ed8:	2305      	movs	r3, #5
 8003eda:	e00a      	b.n	8003ef2 <HAL_GPIO_Init+0x1fa>
 8003edc:	2306      	movs	r3, #6
 8003ede:	e008      	b.n	8003ef2 <HAL_GPIO_Init+0x1fa>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	e006      	b.n	8003ef2 <HAL_GPIO_Init+0x1fa>
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e004      	b.n	8003ef2 <HAL_GPIO_Init+0x1fa>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e002      	b.n	8003ef2 <HAL_GPIO_Init+0x1fa>
 8003eec:	2301      	movs	r3, #1
 8003eee:	e000      	b.n	8003ef2 <HAL_GPIO_Init+0x1fa>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	f002 0203 	and.w	r2, r2, #3
 8003ef8:	0092      	lsls	r2, r2, #2
 8003efa:	4093      	lsls	r3, r2
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f02:	4937      	ldr	r1, [pc, #220]	; (8003fe0 <HAL_GPIO_Init+0x2e8>)
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	089b      	lsrs	r3, r3, #2
 8003f08:	3302      	adds	r3, #2
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f10:	4b39      	ldr	r3, [pc, #228]	; (8003ff8 <HAL_GPIO_Init+0x300>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f34:	4a30      	ldr	r2, [pc, #192]	; (8003ff8 <HAL_GPIO_Init+0x300>)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f3a:	4b2f      	ldr	r3, [pc, #188]	; (8003ff8 <HAL_GPIO_Init+0x300>)
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	43db      	mvns	r3, r3
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4013      	ands	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f5e:	4a26      	ldr	r2, [pc, #152]	; (8003ff8 <HAL_GPIO_Init+0x300>)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003f64:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <HAL_GPIO_Init+0x300>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4013      	ands	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f88:	4a1b      	ldr	r2, [pc, #108]	; (8003ff8 <HAL_GPIO_Init+0x300>)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ff8 <HAL_GPIO_Init+0x300>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	43db      	mvns	r3, r3
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fb2:	4a11      	ldr	r2, [pc, #68]	; (8003ff8 <HAL_GPIO_Init+0x300>)
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f47f ae9d 	bne.w	8003d08 <HAL_GPIO_Init+0x10>
  }
}
 8003fce:	bf00      	nop
 8003fd0:	bf00      	nop
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40010000 	.word	0x40010000
 8003fe4:	48000400 	.word	0x48000400
 8003fe8:	48000800 	.word	0x48000800
 8003fec:	48000c00 	.word	0x48000c00
 8003ff0:	48001000 	.word	0x48001000
 8003ff4:	48001400 	.word	0x48001400
 8003ff8:	40010400 	.word	0x40010400

08003ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	807b      	strh	r3, [r7, #2]
 8004008:	4613      	mov	r3, r2
 800400a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800400c:	787b      	ldrb	r3, [r7, #1]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004012:	887a      	ldrh	r2, [r7, #2]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004018:	e002      	b.n	8004020 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800401a:	887a      	ldrh	r2, [r7, #2]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d141      	bne.n	80040be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800403a:	4b4b      	ldr	r3, [pc, #300]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004046:	d131      	bne.n	80040ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004048:	4b47      	ldr	r3, [pc, #284]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800404a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800404e:	4a46      	ldr	r2, [pc, #280]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004054:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004058:	4b43      	ldr	r3, [pc, #268]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004060:	4a41      	ldr	r2, [pc, #260]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004066:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004068:	4b40      	ldr	r3, [pc, #256]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2232      	movs	r2, #50	; 0x32
 800406e:	fb02 f303 	mul.w	r3, r2, r3
 8004072:	4a3f      	ldr	r2, [pc, #252]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004074:	fba2 2303 	umull	r2, r3, r2, r3
 8004078:	0c9b      	lsrs	r3, r3, #18
 800407a:	3301      	adds	r3, #1
 800407c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800407e:	e002      	b.n	8004086 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3b01      	subs	r3, #1
 8004084:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004086:	4b38      	ldr	r3, [pc, #224]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004092:	d102      	bne.n	800409a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f2      	bne.n	8004080 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800409a:	4b33      	ldr	r3, [pc, #204]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a6:	d158      	bne.n	800415a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e057      	b.n	800415c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040ac:	4b2e      	ldr	r3, [pc, #184]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040b2:	4a2d      	ldr	r2, [pc, #180]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040bc:	e04d      	b.n	800415a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c4:	d141      	bne.n	800414a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040c6:	4b28      	ldr	r3, [pc, #160]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d2:	d131      	bne.n	8004138 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040d4:	4b24      	ldr	r3, [pc, #144]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040da:	4a23      	ldr	r2, [pc, #140]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040e4:	4b20      	ldr	r3, [pc, #128]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040ec:	4a1e      	ldr	r2, [pc, #120]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040f4:	4b1d      	ldr	r3, [pc, #116]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2232      	movs	r2, #50	; 0x32
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	4a1c      	ldr	r2, [pc, #112]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004100:	fba2 2303 	umull	r2, r3, r2, r3
 8004104:	0c9b      	lsrs	r3, r3, #18
 8004106:	3301      	adds	r3, #1
 8004108:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800410a:	e002      	b.n	8004112 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3b01      	subs	r3, #1
 8004110:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004112:	4b15      	ldr	r3, [pc, #84]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411e:	d102      	bne.n	8004126 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f2      	bne.n	800410c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004126:	4b10      	ldr	r3, [pc, #64]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004132:	d112      	bne.n	800415a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e011      	b.n	800415c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004138:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800413e:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004144:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004148:	e007      	b.n	800415a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800414a:	4b07      	ldr	r3, [pc, #28]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004152:	4a05      	ldr	r2, [pc, #20]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004154:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004158:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	40007000 	.word	0x40007000
 800416c:	20000000 	.word	0x20000000
 8004170:	431bde83 	.word	0x431bde83

08004174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e2fe      	b.n	8004784 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d075      	beq.n	800427e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004192:	4b97      	ldr	r3, [pc, #604]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800419c:	4b94      	ldr	r3, [pc, #592]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f003 0303 	and.w	r3, r3, #3
 80041a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	2b0c      	cmp	r3, #12
 80041aa:	d102      	bne.n	80041b2 <HAL_RCC_OscConfig+0x3e>
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d002      	beq.n	80041b8 <HAL_RCC_OscConfig+0x44>
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d10b      	bne.n	80041d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b8:	4b8d      	ldr	r3, [pc, #564]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d05b      	beq.n	800427c <HAL_RCC_OscConfig+0x108>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d157      	bne.n	800427c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e2d9      	b.n	8004784 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d8:	d106      	bne.n	80041e8 <HAL_RCC_OscConfig+0x74>
 80041da:	4b85      	ldr	r3, [pc, #532]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a84      	ldr	r2, [pc, #528]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 80041e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	e01d      	b.n	8004224 <HAL_RCC_OscConfig+0xb0>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041f0:	d10c      	bne.n	800420c <HAL_RCC_OscConfig+0x98>
 80041f2:	4b7f      	ldr	r3, [pc, #508]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a7e      	ldr	r2, [pc, #504]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 80041f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	4b7c      	ldr	r3, [pc, #496]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a7b      	ldr	r2, [pc, #492]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 8004204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	e00b      	b.n	8004224 <HAL_RCC_OscConfig+0xb0>
 800420c:	4b78      	ldr	r3, [pc, #480]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a77      	ldr	r2, [pc, #476]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 8004212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	4b75      	ldr	r3, [pc, #468]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a74      	ldr	r2, [pc, #464]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 800421e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d013      	beq.n	8004254 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fd fcca 	bl	8001bc4 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004234:	f7fd fcc6 	bl	8001bc4 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	; 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e29e      	b.n	8004784 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004246:	4b6a      	ldr	r3, [pc, #424]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0xc0>
 8004252:	e014      	b.n	800427e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fd fcb6 	bl	8001bc4 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800425c:	f7fd fcb2 	bl	8001bc4 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	; 0x64
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e28a      	b.n	8004784 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800426e:	4b60      	ldr	r3, [pc, #384]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0xe8>
 800427a:	e000      	b.n	800427e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800427c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d075      	beq.n	8004376 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800428a:	4b59      	ldr	r3, [pc, #356]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
 8004292:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004294:	4b56      	ldr	r3, [pc, #344]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	2b0c      	cmp	r3, #12
 80042a2:	d102      	bne.n	80042aa <HAL_RCC_OscConfig+0x136>
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d002      	beq.n	80042b0 <HAL_RCC_OscConfig+0x13c>
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d11f      	bne.n	80042f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042b0:	4b4f      	ldr	r3, [pc, #316]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_RCC_OscConfig+0x154>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e25d      	b.n	8004784 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c8:	4b49      	ldr	r3, [pc, #292]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	061b      	lsls	r3, r3, #24
 80042d6:	4946      	ldr	r1, [pc, #280]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042dc:	4b45      	ldr	r3, [pc, #276]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fd fc23 	bl	8001b2c <HAL_InitTick>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d043      	beq.n	8004374 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e249      	b.n	8004784 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d023      	beq.n	8004340 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042f8:	4b3d      	ldr	r3, [pc, #244]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a3c      	ldr	r2, [pc, #240]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 80042fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7fd fc5e 	bl	8001bc4 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800430c:	f7fd fc5a 	bl	8001bc4 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e232      	b.n	8004784 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800431e:	4b34      	ldr	r3, [pc, #208]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f0      	beq.n	800430c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432a:	4b31      	ldr	r3, [pc, #196]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	061b      	lsls	r3, r3, #24
 8004338:	492d      	ldr	r1, [pc, #180]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 800433a:	4313      	orrs	r3, r2
 800433c:	604b      	str	r3, [r1, #4]
 800433e:	e01a      	b.n	8004376 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004340:	4b2b      	ldr	r3, [pc, #172]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a2a      	ldr	r2, [pc, #168]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 8004346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800434a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fd fc3a 	bl	8001bc4 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004354:	f7fd fc36 	bl	8001bc4 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e20e      	b.n	8004784 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004366:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f0      	bne.n	8004354 <HAL_RCC_OscConfig+0x1e0>
 8004372:	e000      	b.n	8004376 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004374:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d041      	beq.n	8004406 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d01c      	beq.n	80043c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800438a:	4b19      	ldr	r3, [pc, #100]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 800438c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004390:	4a17      	ldr	r2, [pc, #92]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 8004392:	f043 0301 	orr.w	r3, r3, #1
 8004396:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439a:	f7fd fc13 	bl	8001bc4 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a2:	f7fd fc0f 	bl	8001bc4 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e1e7      	b.n	8004784 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043b4:	4b0e      	ldr	r3, [pc, #56]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 80043b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0ef      	beq.n	80043a2 <HAL_RCC_OscConfig+0x22e>
 80043c2:	e020      	b.n	8004406 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c4:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 80043c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ca:	4a09      	ldr	r2, [pc, #36]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d4:	f7fd fbf6 	bl	8001bc4 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043da:	e00d      	b.n	80043f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043dc:	f7fd fbf2 	bl	8001bc4 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d906      	bls.n	80043f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e1ca      	b.n	8004784 <HAL_RCC_OscConfig+0x610>
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000
 80043f4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043f8:	4b8c      	ldr	r3, [pc, #560]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 80043fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1ea      	bne.n	80043dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 80a6 	beq.w	8004560 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004414:	2300      	movs	r3, #0
 8004416:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004418:	4b84      	ldr	r3, [pc, #528]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 800441a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_RCC_OscConfig+0x2b4>
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <HAL_RCC_OscConfig+0x2b6>
 8004428:	2300      	movs	r3, #0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00d      	beq.n	800444a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800442e:	4b7f      	ldr	r3, [pc, #508]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 8004430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004432:	4a7e      	ldr	r2, [pc, #504]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 8004434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004438:	6593      	str	r3, [r2, #88]	; 0x58
 800443a:	4b7c      	ldr	r3, [pc, #496]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 800443c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004446:	2301      	movs	r3, #1
 8004448:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800444a:	4b79      	ldr	r3, [pc, #484]	; (8004630 <HAL_RCC_OscConfig+0x4bc>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004452:	2b00      	cmp	r3, #0
 8004454:	d118      	bne.n	8004488 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004456:	4b76      	ldr	r3, [pc, #472]	; (8004630 <HAL_RCC_OscConfig+0x4bc>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a75      	ldr	r2, [pc, #468]	; (8004630 <HAL_RCC_OscConfig+0x4bc>)
 800445c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004462:	f7fd fbaf 	bl	8001bc4 <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800446a:	f7fd fbab 	bl	8001bc4 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e183      	b.n	8004784 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800447c:	4b6c      	ldr	r3, [pc, #432]	; (8004630 <HAL_RCC_OscConfig+0x4bc>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0f0      	beq.n	800446a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d108      	bne.n	80044a2 <HAL_RCC_OscConfig+0x32e>
 8004490:	4b66      	ldr	r3, [pc, #408]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 8004492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004496:	4a65      	ldr	r2, [pc, #404]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044a0:	e024      	b.n	80044ec <HAL_RCC_OscConfig+0x378>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b05      	cmp	r3, #5
 80044a8:	d110      	bne.n	80044cc <HAL_RCC_OscConfig+0x358>
 80044aa:	4b60      	ldr	r3, [pc, #384]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	4a5e      	ldr	r2, [pc, #376]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 80044b2:	f043 0304 	orr.w	r3, r3, #4
 80044b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044ba:	4b5c      	ldr	r3, [pc, #368]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c0:	4a5a      	ldr	r2, [pc, #360]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044ca:	e00f      	b.n	80044ec <HAL_RCC_OscConfig+0x378>
 80044cc:	4b57      	ldr	r3, [pc, #348]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	4a56      	ldr	r2, [pc, #344]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 80044d4:	f023 0301 	bic.w	r3, r3, #1
 80044d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044dc:	4b53      	ldr	r3, [pc, #332]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	4a52      	ldr	r2, [pc, #328]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 80044e4:	f023 0304 	bic.w	r3, r3, #4
 80044e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d016      	beq.n	8004522 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f4:	f7fd fb66 	bl	8001bc4 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044fa:	e00a      	b.n	8004512 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044fc:	f7fd fb62 	bl	8001bc4 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	f241 3288 	movw	r2, #5000	; 0x1388
 800450a:	4293      	cmp	r3, r2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e138      	b.n	8004784 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004512:	4b46      	ldr	r3, [pc, #280]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0ed      	beq.n	80044fc <HAL_RCC_OscConfig+0x388>
 8004520:	e015      	b.n	800454e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004522:	f7fd fb4f 	bl	8001bc4 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004528:	e00a      	b.n	8004540 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452a:	f7fd fb4b 	bl	8001bc4 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	f241 3288 	movw	r2, #5000	; 0x1388
 8004538:	4293      	cmp	r3, r2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e121      	b.n	8004784 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004540:	4b3a      	ldr	r3, [pc, #232]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1ed      	bne.n	800452a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800454e:	7ffb      	ldrb	r3, [r7, #31]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d105      	bne.n	8004560 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004554:	4b35      	ldr	r3, [pc, #212]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 8004556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004558:	4a34      	ldr	r2, [pc, #208]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 800455a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800455e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	d03c      	beq.n	80045e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01c      	beq.n	80045ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004574:	4b2d      	ldr	r3, [pc, #180]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 8004576:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800457a:	4a2c      	ldr	r2, [pc, #176]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 800457c:	f043 0301 	orr.w	r3, r3, #1
 8004580:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004584:	f7fd fb1e 	bl	8001bc4 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800458c:	f7fd fb1a 	bl	8001bc4 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e0f2      	b.n	8004784 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800459e:	4b23      	ldr	r3, [pc, #140]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 80045a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0ef      	beq.n	800458c <HAL_RCC_OscConfig+0x418>
 80045ac:	e01b      	b.n	80045e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045ae:	4b1f      	ldr	r3, [pc, #124]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 80045b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045b4:	4a1d      	ldr	r2, [pc, #116]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 80045b6:	f023 0301 	bic.w	r3, r3, #1
 80045ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045be:	f7fd fb01 	bl	8001bc4 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045c6:	f7fd fafd 	bl	8001bc4 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e0d5      	b.n	8004784 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045d8:	4b14      	ldr	r3, [pc, #80]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 80045da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1ef      	bne.n	80045c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 80c9 	beq.w	8004782 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045f0:	4b0e      	ldr	r3, [pc, #56]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f003 030c 	and.w	r3, r3, #12
 80045f8:	2b0c      	cmp	r3, #12
 80045fa:	f000 8083 	beq.w	8004704 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d15e      	bne.n	80046c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004606:	4b09      	ldr	r3, [pc, #36]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a08      	ldr	r2, [pc, #32]	; (800462c <HAL_RCC_OscConfig+0x4b8>)
 800460c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004612:	f7fd fad7 	bl	8001bc4 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004618:	e00c      	b.n	8004634 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461a:	f7fd fad3 	bl	8001bc4 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d905      	bls.n	8004634 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e0ab      	b.n	8004784 <HAL_RCC_OscConfig+0x610>
 800462c:	40021000 	.word	0x40021000
 8004630:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004634:	4b55      	ldr	r3, [pc, #340]	; (800478c <HAL_RCC_OscConfig+0x618>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1ec      	bne.n	800461a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004640:	4b52      	ldr	r3, [pc, #328]	; (800478c <HAL_RCC_OscConfig+0x618>)
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	4b52      	ldr	r3, [pc, #328]	; (8004790 <HAL_RCC_OscConfig+0x61c>)
 8004646:	4013      	ands	r3, r2
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6a11      	ldr	r1, [r2, #32]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004650:	3a01      	subs	r2, #1
 8004652:	0112      	lsls	r2, r2, #4
 8004654:	4311      	orrs	r1, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800465a:	0212      	lsls	r2, r2, #8
 800465c:	4311      	orrs	r1, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004662:	0852      	lsrs	r2, r2, #1
 8004664:	3a01      	subs	r2, #1
 8004666:	0552      	lsls	r2, r2, #21
 8004668:	4311      	orrs	r1, r2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800466e:	0852      	lsrs	r2, r2, #1
 8004670:	3a01      	subs	r2, #1
 8004672:	0652      	lsls	r2, r2, #25
 8004674:	4311      	orrs	r1, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800467a:	06d2      	lsls	r2, r2, #27
 800467c:	430a      	orrs	r2, r1
 800467e:	4943      	ldr	r1, [pc, #268]	; (800478c <HAL_RCC_OscConfig+0x618>)
 8004680:	4313      	orrs	r3, r2
 8004682:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004684:	4b41      	ldr	r3, [pc, #260]	; (800478c <HAL_RCC_OscConfig+0x618>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a40      	ldr	r2, [pc, #256]	; (800478c <HAL_RCC_OscConfig+0x618>)
 800468a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800468e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004690:	4b3e      	ldr	r3, [pc, #248]	; (800478c <HAL_RCC_OscConfig+0x618>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	4a3d      	ldr	r2, [pc, #244]	; (800478c <HAL_RCC_OscConfig+0x618>)
 8004696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800469a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469c:	f7fd fa92 	bl	8001bc4 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a4:	f7fd fa8e 	bl	8001bc4 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e066      	b.n	8004784 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046b6:	4b35      	ldr	r3, [pc, #212]	; (800478c <HAL_RCC_OscConfig+0x618>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <HAL_RCC_OscConfig+0x530>
 80046c2:	e05e      	b.n	8004782 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c4:	4b31      	ldr	r3, [pc, #196]	; (800478c <HAL_RCC_OscConfig+0x618>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a30      	ldr	r2, [pc, #192]	; (800478c <HAL_RCC_OscConfig+0x618>)
 80046ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d0:	f7fd fa78 	bl	8001bc4 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d8:	f7fd fa74 	bl	8001bc4 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e04c      	b.n	8004784 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ea:	4b28      	ldr	r3, [pc, #160]	; (800478c <HAL_RCC_OscConfig+0x618>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80046f6:	4b25      	ldr	r3, [pc, #148]	; (800478c <HAL_RCC_OscConfig+0x618>)
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	4924      	ldr	r1, [pc, #144]	; (800478c <HAL_RCC_OscConfig+0x618>)
 80046fc:	4b25      	ldr	r3, [pc, #148]	; (8004794 <HAL_RCC_OscConfig+0x620>)
 80046fe:	4013      	ands	r3, r2
 8004700:	60cb      	str	r3, [r1, #12]
 8004702:	e03e      	b.n	8004782 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e039      	b.n	8004784 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004710:	4b1e      	ldr	r3, [pc, #120]	; (800478c <HAL_RCC_OscConfig+0x618>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f003 0203 	and.w	r2, r3, #3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	429a      	cmp	r2, r3
 8004722:	d12c      	bne.n	800477e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	3b01      	subs	r3, #1
 8004730:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d123      	bne.n	800477e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004742:	429a      	cmp	r2, r3
 8004744:	d11b      	bne.n	800477e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004752:	429a      	cmp	r2, r3
 8004754:	d113      	bne.n	800477e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	085b      	lsrs	r3, r3, #1
 8004762:	3b01      	subs	r3, #1
 8004764:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004766:	429a      	cmp	r2, r3
 8004768:	d109      	bne.n	800477e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004774:	085b      	lsrs	r3, r3, #1
 8004776:	3b01      	subs	r3, #1
 8004778:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800477a:	429a      	cmp	r2, r3
 800477c:	d001      	beq.n	8004782 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3720      	adds	r7, #32
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40021000 	.word	0x40021000
 8004790:	019f800c 	.word	0x019f800c
 8004794:	feeefffc 	.word	0xfeeefffc

08004798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047a2:	2300      	movs	r3, #0
 80047a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e11e      	b.n	80049ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047b0:	4b91      	ldr	r3, [pc, #580]	; (80049f8 <HAL_RCC_ClockConfig+0x260>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d910      	bls.n	80047e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047be:	4b8e      	ldr	r3, [pc, #568]	; (80049f8 <HAL_RCC_ClockConfig+0x260>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 020f 	bic.w	r2, r3, #15
 80047c6:	498c      	ldr	r1, [pc, #560]	; (80049f8 <HAL_RCC_ClockConfig+0x260>)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b8a      	ldr	r3, [pc, #552]	; (80049f8 <HAL_RCC_ClockConfig+0x260>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e106      	b.n	80049ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d073      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d129      	bne.n	8004848 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047f4:	4b81      	ldr	r3, [pc, #516]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0f4      	b.n	80049ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004804:	f000 f99e 	bl	8004b44 <RCC_GetSysClockFreqFromPLLSource>
 8004808:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4a7c      	ldr	r2, [pc, #496]	; (8004a00 <HAL_RCC_ClockConfig+0x268>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d93f      	bls.n	8004892 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004812:	4b7a      	ldr	r3, [pc, #488]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d009      	beq.n	8004832 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004826:	2b00      	cmp	r3, #0
 8004828:	d033      	beq.n	8004892 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800482e:	2b00      	cmp	r3, #0
 8004830:	d12f      	bne.n	8004892 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004832:	4b72      	ldr	r3, [pc, #456]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800483a:	4a70      	ldr	r2, [pc, #448]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 800483c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004840:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	e024      	b.n	8004892 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	2b02      	cmp	r3, #2
 800484e:	d107      	bne.n	8004860 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004850:	4b6a      	ldr	r3, [pc, #424]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d109      	bne.n	8004870 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0c6      	b.n	80049ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004860:	4b66      	ldr	r3, [pc, #408]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0be      	b.n	80049ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004870:	f000 f8ce 	bl	8004a10 <HAL_RCC_GetSysClockFreq>
 8004874:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	4a61      	ldr	r2, [pc, #388]	; (8004a00 <HAL_RCC_ClockConfig+0x268>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d909      	bls.n	8004892 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800487e:	4b5f      	ldr	r3, [pc, #380]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004886:	4a5d      	ldr	r2, [pc, #372]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 8004888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800488c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800488e:	2380      	movs	r3, #128	; 0x80
 8004890:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004892:	4b5a      	ldr	r3, [pc, #360]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f023 0203 	bic.w	r2, r3, #3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4957      	ldr	r1, [pc, #348]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a4:	f7fd f98e 	bl	8001bc4 <HAL_GetTick>
 80048a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048aa:	e00a      	b.n	80048c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ac:	f7fd f98a 	bl	8001bc4 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e095      	b.n	80049ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c2:	4b4e      	ldr	r3, [pc, #312]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 020c 	and.w	r2, r3, #12
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d1eb      	bne.n	80048ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d023      	beq.n	8004928 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048ec:	4b43      	ldr	r3, [pc, #268]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4a42      	ldr	r2, [pc, #264]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 80048f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d007      	beq.n	8004914 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004904:	4b3d      	ldr	r3, [pc, #244]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800490c:	4a3b      	ldr	r2, [pc, #236]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 800490e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004912:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004914:	4b39      	ldr	r3, [pc, #228]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	4936      	ldr	r1, [pc, #216]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 8004922:	4313      	orrs	r3, r2
 8004924:	608b      	str	r3, [r1, #8]
 8004926:	e008      	b.n	800493a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	2b80      	cmp	r3, #128	; 0x80
 800492c:	d105      	bne.n	800493a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800492e:	4b33      	ldr	r3, [pc, #204]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	4a32      	ldr	r2, [pc, #200]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 8004934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004938:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800493a:	4b2f      	ldr	r3, [pc, #188]	; (80049f8 <HAL_RCC_ClockConfig+0x260>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d21d      	bcs.n	8004984 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004948:	4b2b      	ldr	r3, [pc, #172]	; (80049f8 <HAL_RCC_ClockConfig+0x260>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f023 020f 	bic.w	r2, r3, #15
 8004950:	4929      	ldr	r1, [pc, #164]	; (80049f8 <HAL_RCC_ClockConfig+0x260>)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	4313      	orrs	r3, r2
 8004956:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004958:	f7fd f934 	bl	8001bc4 <HAL_GetTick>
 800495c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800495e:	e00a      	b.n	8004976 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004960:	f7fd f930 	bl	8001bc4 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	f241 3288 	movw	r2, #5000	; 0x1388
 800496e:	4293      	cmp	r3, r2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e03b      	b.n	80049ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004976:	4b20      	ldr	r3, [pc, #128]	; (80049f8 <HAL_RCC_ClockConfig+0x260>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d1ed      	bne.n	8004960 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004990:	4b1a      	ldr	r3, [pc, #104]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4917      	ldr	r1, [pc, #92]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d009      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ae:	4b13      	ldr	r3, [pc, #76]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	490f      	ldr	r1, [pc, #60]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049c2:	f000 f825 	bl	8004a10 <HAL_RCC_GetSysClockFreq>
 80049c6:	4602      	mov	r2, r0
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <HAL_RCC_ClockConfig+0x264>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	091b      	lsrs	r3, r3, #4
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	490c      	ldr	r1, [pc, #48]	; (8004a04 <HAL_RCC_ClockConfig+0x26c>)
 80049d4:	5ccb      	ldrb	r3, [r1, r3]
 80049d6:	f003 031f 	and.w	r3, r3, #31
 80049da:	fa22 f303 	lsr.w	r3, r2, r3
 80049de:	4a0a      	ldr	r2, [pc, #40]	; (8004a08 <HAL_RCC_ClockConfig+0x270>)
 80049e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049e2:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <HAL_RCC_ClockConfig+0x274>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fd f8a0 	bl	8001b2c <HAL_InitTick>
 80049ec:	4603      	mov	r3, r0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40022000 	.word	0x40022000
 80049fc:	40021000 	.word	0x40021000
 8004a00:	04c4b400 	.word	0x04c4b400
 8004a04:	08008874 	.word	0x08008874
 8004a08:	20000000 	.word	0x20000000
 8004a0c:	20000004 	.word	0x20000004

08004a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a16:	4b2c      	ldr	r3, [pc, #176]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d102      	bne.n	8004a28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a22:	4b2a      	ldr	r3, [pc, #168]	; (8004acc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	e047      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a28:	4b27      	ldr	r3, [pc, #156]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 030c 	and.w	r3, r3, #12
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d102      	bne.n	8004a3a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a34:	4b26      	ldr	r3, [pc, #152]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	e03e      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a3a:	4b23      	ldr	r3, [pc, #140]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d136      	bne.n	8004ab4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a46:	4b20      	ldr	r3, [pc, #128]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a50:	4b1d      	ldr	r3, [pc, #116]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	091b      	lsrs	r3, r3, #4
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d10c      	bne.n	8004a7e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a64:	4a1a      	ldr	r2, [pc, #104]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6c:	4a16      	ldr	r2, [pc, #88]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a6e:	68d2      	ldr	r2, [r2, #12]
 8004a70:	0a12      	lsrs	r2, r2, #8
 8004a72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a76:	fb02 f303 	mul.w	r3, r2, r3
 8004a7a:	617b      	str	r3, [r7, #20]
      break;
 8004a7c:	e00c      	b.n	8004a98 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a7e:	4a13      	ldr	r2, [pc, #76]	; (8004acc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a86:	4a10      	ldr	r2, [pc, #64]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a88:	68d2      	ldr	r2, [r2, #12]
 8004a8a:	0a12      	lsrs	r2, r2, #8
 8004a8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a90:	fb02 f303 	mul.w	r3, r2, r3
 8004a94:	617b      	str	r3, [r7, #20]
      break;
 8004a96:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	0e5b      	lsrs	r3, r3, #25
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab0:	613b      	str	r3, [r7, #16]
 8004ab2:	e001      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ab8:	693b      	ldr	r3, [r7, #16]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	00f42400 	.word	0x00f42400
 8004ad0:	007a1200 	.word	0x007a1200

08004ad4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad8:	4b03      	ldr	r3, [pc, #12]	; (8004ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ada:	681b      	ldr	r3, [r3, #0]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	20000000 	.word	0x20000000

08004aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004af0:	f7ff fff0 	bl	8004ad4 <HAL_RCC_GetHCLKFreq>
 8004af4:	4602      	mov	r2, r0
 8004af6:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	0a1b      	lsrs	r3, r3, #8
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	4904      	ldr	r1, [pc, #16]	; (8004b14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b02:	5ccb      	ldrb	r3, [r1, r3]
 8004b04:	f003 031f 	and.w	r3, r3, #31
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40021000 	.word	0x40021000
 8004b14:	08008884 	.word	0x08008884

08004b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b1c:	f7ff ffda 	bl	8004ad4 <HAL_RCC_GetHCLKFreq>
 8004b20:	4602      	mov	r2, r0
 8004b22:	4b06      	ldr	r3, [pc, #24]	; (8004b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	0adb      	lsrs	r3, r3, #11
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	4904      	ldr	r1, [pc, #16]	; (8004b40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b2e:	5ccb      	ldrb	r3, [r1, r3]
 8004b30:	f003 031f 	and.w	r3, r3, #31
 8004b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	08008884 	.word	0x08008884

08004b44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b4a:	4b1e      	ldr	r3, [pc, #120]	; (8004bc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b54:	4b1b      	ldr	r3, [pc, #108]	; (8004bc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	091b      	lsrs	r3, r3, #4
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	3301      	adds	r3, #1
 8004b60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	2b03      	cmp	r3, #3
 8004b66:	d10c      	bne.n	8004b82 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b68:	4a17      	ldr	r2, [pc, #92]	; (8004bc8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b70:	4a14      	ldr	r2, [pc, #80]	; (8004bc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b72:	68d2      	ldr	r2, [r2, #12]
 8004b74:	0a12      	lsrs	r2, r2, #8
 8004b76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b7a:	fb02 f303 	mul.w	r3, r2, r3
 8004b7e:	617b      	str	r3, [r7, #20]
    break;
 8004b80:	e00c      	b.n	8004b9c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b82:	4a12      	ldr	r2, [pc, #72]	; (8004bcc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8a:	4a0e      	ldr	r2, [pc, #56]	; (8004bc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b8c:	68d2      	ldr	r2, [r2, #12]
 8004b8e:	0a12      	lsrs	r2, r2, #8
 8004b90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b94:	fb02 f303 	mul.w	r3, r2, r3
 8004b98:	617b      	str	r3, [r7, #20]
    break;
 8004b9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b9c:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	0e5b      	lsrs	r3, r3, #25
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004bb6:	687b      	ldr	r3, [r7, #4]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	371c      	adds	r7, #28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	007a1200 	.word	0x007a1200
 8004bcc:	00f42400 	.word	0x00f42400

08004bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bd8:	2300      	movs	r3, #0
 8004bda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bdc:	2300      	movs	r3, #0
 8004bde:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8098 	beq.w	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bf2:	4b43      	ldr	r3, [pc, #268]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10d      	bne.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bfe:	4b40      	ldr	r3, [pc, #256]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c02:	4a3f      	ldr	r2, [pc, #252]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c08:	6593      	str	r3, [r2, #88]	; 0x58
 8004c0a:	4b3d      	ldr	r3, [pc, #244]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c12:	60bb      	str	r3, [r7, #8]
 8004c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c16:	2301      	movs	r3, #1
 8004c18:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c1a:	4b3a      	ldr	r3, [pc, #232]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a39      	ldr	r2, [pc, #228]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c26:	f7fc ffcd 	bl	8001bc4 <HAL_GetTick>
 8004c2a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c2c:	e009      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c2e:	f7fc ffc9 	bl	8001bc4 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d902      	bls.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	74fb      	strb	r3, [r7, #19]
        break;
 8004c40:	e005      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c42:	4b30      	ldr	r3, [pc, #192]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0ef      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c4e:	7cfb      	ldrb	r3, [r7, #19]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d159      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c54:	4b2a      	ldr	r3, [pc, #168]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d01e      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d019      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c70:	4b23      	ldr	r3, [pc, #140]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c7c:	4b20      	ldr	r3, [pc, #128]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c82:	4a1f      	ldr	r2, [pc, #124]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c8c:	4b1c      	ldr	r3, [pc, #112]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c92:	4a1b      	ldr	r2, [pc, #108]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c9c:	4a18      	ldr	r2, [pc, #96]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d016      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cae:	f7fc ff89 	bl	8001bc4 <HAL_GetTick>
 8004cb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cb4:	e00b      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb6:	f7fc ff85 	bl	8001bc4 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d902      	bls.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	74fb      	strb	r3, [r7, #19]
            break;
 8004ccc:	e006      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cce:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0ec      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004cdc:	7cfb      	ldrb	r3, [r7, #19]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10b      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ce2:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	4903      	ldr	r1, [pc, #12]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cf8:	e008      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cfa:	7cfb      	ldrb	r3, [r7, #19]
 8004cfc:	74bb      	strb	r3, [r7, #18]
 8004cfe:	e005      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d00:	40021000 	.word	0x40021000
 8004d04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d08:	7cfb      	ldrb	r3, [r7, #19]
 8004d0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d0c:	7c7b      	ldrb	r3, [r7, #17]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d105      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d12:	4ba6      	ldr	r3, [pc, #664]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d16:	4aa5      	ldr	r2, [pc, #660]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d2a:	4ba0      	ldr	r3, [pc, #640]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	f023 0203 	bic.w	r2, r3, #3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	499c      	ldr	r1, [pc, #624]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d4c:	4b97      	ldr	r3, [pc, #604]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d52:	f023 020c 	bic.w	r2, r3, #12
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	4994      	ldr	r1, [pc, #592]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0304 	and.w	r3, r3, #4
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d6e:	4b8f      	ldr	r3, [pc, #572]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	498b      	ldr	r1, [pc, #556]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d90:	4b86      	ldr	r3, [pc, #536]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	4983      	ldr	r1, [pc, #524]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004db2:	4b7e      	ldr	r3, [pc, #504]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	497a      	ldr	r1, [pc, #488]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dd4:	4b75      	ldr	r3, [pc, #468]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	4972      	ldr	r1, [pc, #456]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004df6:	4b6d      	ldr	r3, [pc, #436]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	4969      	ldr	r1, [pc, #420]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e18:	4b64      	ldr	r3, [pc, #400]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	4961      	ldr	r1, [pc, #388]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e3a:	4b5c      	ldr	r3, [pc, #368]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	4958      	ldr	r1, [pc, #352]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d015      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e5c:	4b53      	ldr	r3, [pc, #332]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6a:	4950      	ldr	r1, [pc, #320]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e7a:	d105      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e7c:	4b4b      	ldr	r3, [pc, #300]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	4a4a      	ldr	r2, [pc, #296]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d015      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e94:	4b45      	ldr	r3, [pc, #276]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea2:	4942      	ldr	r1, [pc, #264]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eb2:	d105      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb4:	4b3d      	ldr	r3, [pc, #244]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	4a3c      	ldr	r2, [pc, #240]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ebe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d015      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ecc:	4b37      	ldr	r3, [pc, #220]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	4934      	ldr	r1, [pc, #208]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004eea:	d105      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eec:	4b2f      	ldr	r3, [pc, #188]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	4a2e      	ldr	r2, [pc, #184]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ef6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d015      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f04:	4b29      	ldr	r3, [pc, #164]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f12:	4926      	ldr	r1, [pc, #152]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f22:	d105      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f24:	4b21      	ldr	r3, [pc, #132]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	4a20      	ldr	r2, [pc, #128]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f2e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d015      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f3c:	4b1b      	ldr	r3, [pc, #108]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4a:	4918      	ldr	r1, [pc, #96]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f5a:	d105      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f5c:	4b13      	ldr	r3, [pc, #76]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	4a12      	ldr	r2, [pc, #72]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f66:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d015      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f74:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f82:	490a      	ldr	r1, [pc, #40]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f92:	d105      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f94:	4b05      	ldr	r3, [pc, #20]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	4a04      	ldr	r2, [pc, #16]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f9e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004fa0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	40021000 	.word	0x40021000

08004fb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e042      	b.n	8005048 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d106      	bne.n	8004fda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7fc fc15 	bl	8001804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2224      	movs	r2, #36	; 0x24
 8004fde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0201 	bic.w	r2, r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fb82 	bl	8005704 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f8b3 	bl	800516c <UART_SetConfig>
 8005006:	4603      	mov	r3, r0
 8005008:	2b01      	cmp	r3, #1
 800500a:	d101      	bne.n	8005010 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e01b      	b.n	8005048 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800501e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800502e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0201 	orr.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fc01 	bl	8005848 <UART_CheckIdleState>
 8005046:	4603      	mov	r3, r0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08a      	sub	sp, #40	; 0x28
 8005054:	af02      	add	r7, sp, #8
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	4613      	mov	r3, r2
 800505e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005066:	2b20      	cmp	r3, #32
 8005068:	d17b      	bne.n	8005162 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <HAL_UART_Transmit+0x26>
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e074      	b.n	8005164 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2221      	movs	r2, #33	; 0x21
 8005086:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800508a:	f7fc fd9b 	bl	8001bc4 <HAL_GetTick>
 800508e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	88fa      	ldrh	r2, [r7, #6]
 8005094:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	88fa      	ldrh	r2, [r7, #6]
 800509c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a8:	d108      	bne.n	80050bc <HAL_UART_Transmit+0x6c>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d104      	bne.n	80050bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	61bb      	str	r3, [r7, #24]
 80050ba:	e003      	b.n	80050c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050c4:	e030      	b.n	8005128 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2200      	movs	r2, #0
 80050ce:	2180      	movs	r1, #128	; 0x80
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 fc63 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2220      	movs	r2, #32
 80050e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e03d      	b.n	8005164 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10b      	bne.n	8005106 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	3302      	adds	r3, #2
 8005102:	61bb      	str	r3, [r7, #24]
 8005104:	e007      	b.n	8005116 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	781a      	ldrb	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	3301      	adds	r3, #1
 8005114:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800512e:	b29b      	uxth	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1c8      	bne.n	80050c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2200      	movs	r2, #0
 800513c:	2140      	movs	r1, #64	; 0x40
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 fc2c 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2220      	movs	r2, #32
 800514e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e006      	b.n	8005164 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2220      	movs	r2, #32
 800515a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	e000      	b.n	8005164 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005162:	2302      	movs	r3, #2
  }
}
 8005164:	4618      	mov	r0, r3
 8005166:	3720      	adds	r7, #32
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800516c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005170:	b08c      	sub	sp, #48	; 0x30
 8005172:	af00      	add	r7, sp, #0
 8005174:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	431a      	orrs	r2, r3
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	431a      	orrs	r2, r3
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	4313      	orrs	r3, r2
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	4bab      	ldr	r3, [pc, #684]	; (8005448 <UART_SetConfig+0x2dc>)
 800519c:	4013      	ands	r3, r2
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051a4:	430b      	orrs	r3, r1
 80051a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4aa0      	ldr	r2, [pc, #640]	; (800544c <UART_SetConfig+0x2e0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d004      	beq.n	80051d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051d4:	4313      	orrs	r3, r2
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80051e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051ec:	430b      	orrs	r3, r1
 80051ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f6:	f023 010f 	bic.w	r1, r3, #15
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a91      	ldr	r2, [pc, #580]	; (8005450 <UART_SetConfig+0x2e4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d125      	bne.n	800525c <UART_SetConfig+0xf0>
 8005210:	4b90      	ldr	r3, [pc, #576]	; (8005454 <UART_SetConfig+0x2e8>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	2b03      	cmp	r3, #3
 800521c:	d81a      	bhi.n	8005254 <UART_SetConfig+0xe8>
 800521e:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <UART_SetConfig+0xb8>)
 8005220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005224:	08005235 	.word	0x08005235
 8005228:	08005245 	.word	0x08005245
 800522c:	0800523d 	.word	0x0800523d
 8005230:	0800524d 	.word	0x0800524d
 8005234:	2301      	movs	r3, #1
 8005236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800523a:	e0d6      	b.n	80053ea <UART_SetConfig+0x27e>
 800523c:	2302      	movs	r3, #2
 800523e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005242:	e0d2      	b.n	80053ea <UART_SetConfig+0x27e>
 8005244:	2304      	movs	r3, #4
 8005246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800524a:	e0ce      	b.n	80053ea <UART_SetConfig+0x27e>
 800524c:	2308      	movs	r3, #8
 800524e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005252:	e0ca      	b.n	80053ea <UART_SetConfig+0x27e>
 8005254:	2310      	movs	r3, #16
 8005256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800525a:	e0c6      	b.n	80053ea <UART_SetConfig+0x27e>
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a7d      	ldr	r2, [pc, #500]	; (8005458 <UART_SetConfig+0x2ec>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d138      	bne.n	80052d8 <UART_SetConfig+0x16c>
 8005266:	4b7b      	ldr	r3, [pc, #492]	; (8005454 <UART_SetConfig+0x2e8>)
 8005268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526c:	f003 030c 	and.w	r3, r3, #12
 8005270:	2b0c      	cmp	r3, #12
 8005272:	d82d      	bhi.n	80052d0 <UART_SetConfig+0x164>
 8005274:	a201      	add	r2, pc, #4	; (adr r2, 800527c <UART_SetConfig+0x110>)
 8005276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527a:	bf00      	nop
 800527c:	080052b1 	.word	0x080052b1
 8005280:	080052d1 	.word	0x080052d1
 8005284:	080052d1 	.word	0x080052d1
 8005288:	080052d1 	.word	0x080052d1
 800528c:	080052c1 	.word	0x080052c1
 8005290:	080052d1 	.word	0x080052d1
 8005294:	080052d1 	.word	0x080052d1
 8005298:	080052d1 	.word	0x080052d1
 800529c:	080052b9 	.word	0x080052b9
 80052a0:	080052d1 	.word	0x080052d1
 80052a4:	080052d1 	.word	0x080052d1
 80052a8:	080052d1 	.word	0x080052d1
 80052ac:	080052c9 	.word	0x080052c9
 80052b0:	2300      	movs	r3, #0
 80052b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052b6:	e098      	b.n	80053ea <UART_SetConfig+0x27e>
 80052b8:	2302      	movs	r3, #2
 80052ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052be:	e094      	b.n	80053ea <UART_SetConfig+0x27e>
 80052c0:	2304      	movs	r3, #4
 80052c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052c6:	e090      	b.n	80053ea <UART_SetConfig+0x27e>
 80052c8:	2308      	movs	r3, #8
 80052ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ce:	e08c      	b.n	80053ea <UART_SetConfig+0x27e>
 80052d0:	2310      	movs	r3, #16
 80052d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052d6:	e088      	b.n	80053ea <UART_SetConfig+0x27e>
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a5f      	ldr	r2, [pc, #380]	; (800545c <UART_SetConfig+0x2f0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d125      	bne.n	800532e <UART_SetConfig+0x1c2>
 80052e2:	4b5c      	ldr	r3, [pc, #368]	; (8005454 <UART_SetConfig+0x2e8>)
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052ec:	2b30      	cmp	r3, #48	; 0x30
 80052ee:	d016      	beq.n	800531e <UART_SetConfig+0x1b2>
 80052f0:	2b30      	cmp	r3, #48	; 0x30
 80052f2:	d818      	bhi.n	8005326 <UART_SetConfig+0x1ba>
 80052f4:	2b20      	cmp	r3, #32
 80052f6:	d00a      	beq.n	800530e <UART_SetConfig+0x1a2>
 80052f8:	2b20      	cmp	r3, #32
 80052fa:	d814      	bhi.n	8005326 <UART_SetConfig+0x1ba>
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <UART_SetConfig+0x19a>
 8005300:	2b10      	cmp	r3, #16
 8005302:	d008      	beq.n	8005316 <UART_SetConfig+0x1aa>
 8005304:	e00f      	b.n	8005326 <UART_SetConfig+0x1ba>
 8005306:	2300      	movs	r3, #0
 8005308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800530c:	e06d      	b.n	80053ea <UART_SetConfig+0x27e>
 800530e:	2302      	movs	r3, #2
 8005310:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005314:	e069      	b.n	80053ea <UART_SetConfig+0x27e>
 8005316:	2304      	movs	r3, #4
 8005318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800531c:	e065      	b.n	80053ea <UART_SetConfig+0x27e>
 800531e:	2308      	movs	r3, #8
 8005320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005324:	e061      	b.n	80053ea <UART_SetConfig+0x27e>
 8005326:	2310      	movs	r3, #16
 8005328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800532c:	e05d      	b.n	80053ea <UART_SetConfig+0x27e>
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a4b      	ldr	r2, [pc, #300]	; (8005460 <UART_SetConfig+0x2f4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d125      	bne.n	8005384 <UART_SetConfig+0x218>
 8005338:	4b46      	ldr	r3, [pc, #280]	; (8005454 <UART_SetConfig+0x2e8>)
 800533a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005342:	2bc0      	cmp	r3, #192	; 0xc0
 8005344:	d016      	beq.n	8005374 <UART_SetConfig+0x208>
 8005346:	2bc0      	cmp	r3, #192	; 0xc0
 8005348:	d818      	bhi.n	800537c <UART_SetConfig+0x210>
 800534a:	2b80      	cmp	r3, #128	; 0x80
 800534c:	d00a      	beq.n	8005364 <UART_SetConfig+0x1f8>
 800534e:	2b80      	cmp	r3, #128	; 0x80
 8005350:	d814      	bhi.n	800537c <UART_SetConfig+0x210>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <UART_SetConfig+0x1f0>
 8005356:	2b40      	cmp	r3, #64	; 0x40
 8005358:	d008      	beq.n	800536c <UART_SetConfig+0x200>
 800535a:	e00f      	b.n	800537c <UART_SetConfig+0x210>
 800535c:	2300      	movs	r3, #0
 800535e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005362:	e042      	b.n	80053ea <UART_SetConfig+0x27e>
 8005364:	2302      	movs	r3, #2
 8005366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800536a:	e03e      	b.n	80053ea <UART_SetConfig+0x27e>
 800536c:	2304      	movs	r3, #4
 800536e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005372:	e03a      	b.n	80053ea <UART_SetConfig+0x27e>
 8005374:	2308      	movs	r3, #8
 8005376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800537a:	e036      	b.n	80053ea <UART_SetConfig+0x27e>
 800537c:	2310      	movs	r3, #16
 800537e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005382:	e032      	b.n	80053ea <UART_SetConfig+0x27e>
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a30      	ldr	r2, [pc, #192]	; (800544c <UART_SetConfig+0x2e0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d12a      	bne.n	80053e4 <UART_SetConfig+0x278>
 800538e:	4b31      	ldr	r3, [pc, #196]	; (8005454 <UART_SetConfig+0x2e8>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005394:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005398:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800539c:	d01a      	beq.n	80053d4 <UART_SetConfig+0x268>
 800539e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053a2:	d81b      	bhi.n	80053dc <UART_SetConfig+0x270>
 80053a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053a8:	d00c      	beq.n	80053c4 <UART_SetConfig+0x258>
 80053aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ae:	d815      	bhi.n	80053dc <UART_SetConfig+0x270>
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <UART_SetConfig+0x250>
 80053b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b8:	d008      	beq.n	80053cc <UART_SetConfig+0x260>
 80053ba:	e00f      	b.n	80053dc <UART_SetConfig+0x270>
 80053bc:	2300      	movs	r3, #0
 80053be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053c2:	e012      	b.n	80053ea <UART_SetConfig+0x27e>
 80053c4:	2302      	movs	r3, #2
 80053c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ca:	e00e      	b.n	80053ea <UART_SetConfig+0x27e>
 80053cc:	2304      	movs	r3, #4
 80053ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053d2:	e00a      	b.n	80053ea <UART_SetConfig+0x27e>
 80053d4:	2308      	movs	r3, #8
 80053d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053da:	e006      	b.n	80053ea <UART_SetConfig+0x27e>
 80053dc:	2310      	movs	r3, #16
 80053de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053e2:	e002      	b.n	80053ea <UART_SetConfig+0x27e>
 80053e4:	2310      	movs	r3, #16
 80053e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a17      	ldr	r2, [pc, #92]	; (800544c <UART_SetConfig+0x2e0>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	f040 80a8 	bne.w	8005546 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d834      	bhi.n	8005468 <UART_SetConfig+0x2fc>
 80053fe:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <UART_SetConfig+0x298>)
 8005400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005404:	08005429 	.word	0x08005429
 8005408:	08005469 	.word	0x08005469
 800540c:	08005431 	.word	0x08005431
 8005410:	08005469 	.word	0x08005469
 8005414:	08005437 	.word	0x08005437
 8005418:	08005469 	.word	0x08005469
 800541c:	08005469 	.word	0x08005469
 8005420:	08005469 	.word	0x08005469
 8005424:	0800543f 	.word	0x0800543f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005428:	f7ff fb60 	bl	8004aec <HAL_RCC_GetPCLK1Freq>
 800542c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800542e:	e021      	b.n	8005474 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005430:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <UART_SetConfig+0x2f8>)
 8005432:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005434:	e01e      	b.n	8005474 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005436:	f7ff faeb 	bl	8004a10 <HAL_RCC_GetSysClockFreq>
 800543a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800543c:	e01a      	b.n	8005474 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800543e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005444:	e016      	b.n	8005474 <UART_SetConfig+0x308>
 8005446:	bf00      	nop
 8005448:	cfff69f3 	.word	0xcfff69f3
 800544c:	40008000 	.word	0x40008000
 8005450:	40013800 	.word	0x40013800
 8005454:	40021000 	.word	0x40021000
 8005458:	40004400 	.word	0x40004400
 800545c:	40004800 	.word	0x40004800
 8005460:	40004c00 	.word	0x40004c00
 8005464:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005472:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 812a 	beq.w	80056d0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	4a9e      	ldr	r2, [pc, #632]	; (80056fc <UART_SetConfig+0x590>)
 8005482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005486:	461a      	mov	r2, r3
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	fbb3 f3f2 	udiv	r3, r3, r2
 800548e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	4613      	mov	r3, r2
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	4413      	add	r3, r2
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	429a      	cmp	r2, r3
 800549e:	d305      	bcc.n	80054ac <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d903      	bls.n	80054b4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80054b2:	e10d      	b.n	80056d0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	2200      	movs	r2, #0
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	60fa      	str	r2, [r7, #12]
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	4a8e      	ldr	r2, [pc, #568]	; (80056fc <UART_SetConfig+0x590>)
 80054c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	2200      	movs	r2, #0
 80054ca:	603b      	str	r3, [r7, #0]
 80054cc:	607a      	str	r2, [r7, #4]
 80054ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054d6:	f7fb fb8f 	bl	8000bf8 <__aeabi_uldivmod>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	4610      	mov	r0, r2
 80054e0:	4619      	mov	r1, r3
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	020b      	lsls	r3, r1, #8
 80054ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054f0:	0202      	lsls	r2, r0, #8
 80054f2:	6979      	ldr	r1, [r7, #20]
 80054f4:	6849      	ldr	r1, [r1, #4]
 80054f6:	0849      	lsrs	r1, r1, #1
 80054f8:	2000      	movs	r0, #0
 80054fa:	460c      	mov	r4, r1
 80054fc:	4605      	mov	r5, r0
 80054fe:	eb12 0804 	adds.w	r8, r2, r4
 8005502:	eb43 0905 	adc.w	r9, r3, r5
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	469a      	mov	sl, r3
 800550e:	4693      	mov	fp, r2
 8005510:	4652      	mov	r2, sl
 8005512:	465b      	mov	r3, fp
 8005514:	4640      	mov	r0, r8
 8005516:	4649      	mov	r1, r9
 8005518:	f7fb fb6e 	bl	8000bf8 <__aeabi_uldivmod>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4613      	mov	r3, r2
 8005522:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800552a:	d308      	bcc.n	800553e <UART_SetConfig+0x3d2>
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005532:	d204      	bcs.n	800553e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6a3a      	ldr	r2, [r7, #32]
 800553a:	60da      	str	r2, [r3, #12]
 800553c:	e0c8      	b.n	80056d0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005544:	e0c4      	b.n	80056d0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800554e:	d167      	bne.n	8005620 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005550:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005554:	2b08      	cmp	r3, #8
 8005556:	d828      	bhi.n	80055aa <UART_SetConfig+0x43e>
 8005558:	a201      	add	r2, pc, #4	; (adr r2, 8005560 <UART_SetConfig+0x3f4>)
 800555a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555e:	bf00      	nop
 8005560:	08005585 	.word	0x08005585
 8005564:	0800558d 	.word	0x0800558d
 8005568:	08005595 	.word	0x08005595
 800556c:	080055ab 	.word	0x080055ab
 8005570:	0800559b 	.word	0x0800559b
 8005574:	080055ab 	.word	0x080055ab
 8005578:	080055ab 	.word	0x080055ab
 800557c:	080055ab 	.word	0x080055ab
 8005580:	080055a3 	.word	0x080055a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005584:	f7ff fab2 	bl	8004aec <HAL_RCC_GetPCLK1Freq>
 8005588:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800558a:	e014      	b.n	80055b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800558c:	f7ff fac4 	bl	8004b18 <HAL_RCC_GetPCLK2Freq>
 8005590:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005592:	e010      	b.n	80055b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005594:	4b5a      	ldr	r3, [pc, #360]	; (8005700 <UART_SetConfig+0x594>)
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005598:	e00d      	b.n	80055b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800559a:	f7ff fa39 	bl	8004a10 <HAL_RCC_GetSysClockFreq>
 800559e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055a0:	e009      	b.n	80055b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055a8:	e005      	b.n	80055b6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80055b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 8089 	beq.w	80056d0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	4a4e      	ldr	r2, [pc, #312]	; (80056fc <UART_SetConfig+0x590>)
 80055c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055c8:	461a      	mov	r2, r3
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80055d0:	005a      	lsls	r2, r3, #1
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	085b      	lsrs	r3, r3, #1
 80055d8:	441a      	add	r2, r3
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	2b0f      	cmp	r3, #15
 80055e8:	d916      	bls.n	8005618 <UART_SetConfig+0x4ac>
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f0:	d212      	bcs.n	8005618 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	f023 030f 	bic.w	r3, r3, #15
 80055fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	085b      	lsrs	r3, r3, #1
 8005600:	b29b      	uxth	r3, r3
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	b29a      	uxth	r2, r3
 8005608:	8bfb      	ldrh	r3, [r7, #30]
 800560a:	4313      	orrs	r3, r2
 800560c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	8bfa      	ldrh	r2, [r7, #30]
 8005614:	60da      	str	r2, [r3, #12]
 8005616:	e05b      	b.n	80056d0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800561e:	e057      	b.n	80056d0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005620:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005624:	2b08      	cmp	r3, #8
 8005626:	d828      	bhi.n	800567a <UART_SetConfig+0x50e>
 8005628:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <UART_SetConfig+0x4c4>)
 800562a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562e:	bf00      	nop
 8005630:	08005655 	.word	0x08005655
 8005634:	0800565d 	.word	0x0800565d
 8005638:	08005665 	.word	0x08005665
 800563c:	0800567b 	.word	0x0800567b
 8005640:	0800566b 	.word	0x0800566b
 8005644:	0800567b 	.word	0x0800567b
 8005648:	0800567b 	.word	0x0800567b
 800564c:	0800567b 	.word	0x0800567b
 8005650:	08005673 	.word	0x08005673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005654:	f7ff fa4a 	bl	8004aec <HAL_RCC_GetPCLK1Freq>
 8005658:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800565a:	e014      	b.n	8005686 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800565c:	f7ff fa5c 	bl	8004b18 <HAL_RCC_GetPCLK2Freq>
 8005660:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005662:	e010      	b.n	8005686 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005664:	4b26      	ldr	r3, [pc, #152]	; (8005700 <UART_SetConfig+0x594>)
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005668:	e00d      	b.n	8005686 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800566a:	f7ff f9d1 	bl	8004a10 <HAL_RCC_GetSysClockFreq>
 800566e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005670:	e009      	b.n	8005686 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005676:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005678:	e005      	b.n	8005686 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005684:	bf00      	nop
    }

    if (pclk != 0U)
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	2b00      	cmp	r3, #0
 800568a:	d021      	beq.n	80056d0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	4a1a      	ldr	r2, [pc, #104]	; (80056fc <UART_SetConfig+0x590>)
 8005692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005696:	461a      	mov	r2, r3
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	fbb3 f2f2 	udiv	r2, r3, r2
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	085b      	lsrs	r3, r3, #1
 80056a4:	441a      	add	r2, r3
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	2b0f      	cmp	r3, #15
 80056b4:	d909      	bls.n	80056ca <UART_SetConfig+0x55e>
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056bc:	d205      	bcs.n	80056ca <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60da      	str	r2, [r3, #12]
 80056c8:	e002      	b.n	80056d0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	2201      	movs	r2, #1
 80056dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2200      	movs	r2, #0
 80056e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2200      	movs	r2, #0
 80056ea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80056ec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3730      	adds	r7, #48	; 0x30
 80056f4:	46bd      	mov	sp, r7
 80056f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056fa:	bf00      	nop
 80056fc:	0800888c 	.word	0x0800888c
 8005700:	00f42400 	.word	0x00f42400

08005704 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00a      	beq.n	800572e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00a      	beq.n	8005772 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	f003 0304 	and.w	r3, r3, #4
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	f003 0310 	and.w	r3, r3, #16
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d01a      	beq.n	800581a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005802:	d10a      	bne.n	800581a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	605a      	str	r2, [r3, #4]
  }
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b098      	sub	sp, #96	; 0x60
 800584c:	af02      	add	r7, sp, #8
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005858:	f7fc f9b4 	bl	8001bc4 <HAL_GetTick>
 800585c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0308 	and.w	r3, r3, #8
 8005868:	2b08      	cmp	r3, #8
 800586a:	d12f      	bne.n	80058cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800586c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005874:	2200      	movs	r2, #0
 8005876:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f88e 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d022      	beq.n	80058cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800589a:	653b      	str	r3, [r7, #80]	; 0x50
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	461a      	mov	r2, r3
 80058a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058a4:	647b      	str	r3, [r7, #68]	; 0x44
 80058a6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058ac:	e841 2300 	strex	r3, r2, [r1]
 80058b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e6      	bne.n	8005886 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e063      	b.n	8005994 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0304 	and.w	r3, r3, #4
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d149      	bne.n	800596e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058e2:	2200      	movs	r2, #0
 80058e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f857 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d03c      	beq.n	800596e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	623b      	str	r3, [r7, #32]
   return(result);
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005908:	64fb      	str	r3, [r7, #76]	; 0x4c
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	461a      	mov	r2, r3
 8005910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005912:	633b      	str	r3, [r7, #48]	; 0x30
 8005914:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e6      	bne.n	80058f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3308      	adds	r3, #8
 800592c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	60fb      	str	r3, [r7, #12]
   return(result);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	64bb      	str	r3, [r7, #72]	; 0x48
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3308      	adds	r3, #8
 8005944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005946:	61fa      	str	r2, [r7, #28]
 8005948:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	69b9      	ldr	r1, [r7, #24]
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	617b      	str	r3, [r7, #20]
   return(result);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e5      	bne.n	8005926 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e012      	b.n	8005994 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3758      	adds	r7, #88	; 0x58
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	4613      	mov	r3, r2
 80059aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ac:	e04f      	b.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059b4:	d04b      	beq.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b6:	f7fc f905 	bl	8001bc4 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d302      	bcc.n	80059cc <UART_WaitOnFlagUntilTimeout+0x30>
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e04e      	b.n	8005a6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d037      	beq.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xb2>
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b80      	cmp	r3, #128	; 0x80
 80059e2:	d034      	beq.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xb2>
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b40      	cmp	r3, #64	; 0x40
 80059e8:	d031      	beq.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d110      	bne.n	8005a1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2208      	movs	r2, #8
 80059fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 f838 	bl	8005a76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2208      	movs	r2, #8
 8005a0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e029      	b.n	8005a6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a28:	d111      	bne.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 f81e 	bl	8005a76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e00f      	b.n	8005a6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69da      	ldr	r2, [r3, #28]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4013      	ands	r3, r2
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	bf0c      	ite	eq
 8005a5e:	2301      	moveq	r3, #1
 8005a60:	2300      	movne	r3, #0
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	461a      	mov	r2, r3
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d0a0      	beq.n	80059ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b095      	sub	sp, #84	; 0x54
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a9e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005aa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005aa4:	e841 2300 	strex	r3, r2, [r1]
 8005aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e6      	bne.n	8005a7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ac6:	f023 0301 	bic.w	r3, r3, #1
 8005aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ad4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005adc:	e841 2300 	strex	r3, r2, [r1]
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1e3      	bne.n	8005ab0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d118      	bne.n	8005b22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f023 0310 	bic.w	r3, r3, #16
 8005b04:	647b      	str	r3, [r7, #68]	; 0x44
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b0e:	61bb      	str	r3, [r7, #24]
 8005b10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b12:	6979      	ldr	r1, [r7, #20]
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1e6      	bne.n	8005af0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005b36:	bf00      	nop
 8005b38:	3754      	adds	r7, #84	; 0x54
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b085      	sub	sp, #20
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e027      	b.n	8005ba8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2224      	movs	r2, #36	; 0x24
 8005b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0201 	bic.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d101      	bne.n	8005bcc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e02d      	b.n	8005c28 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2224      	movs	r2, #36	; 0x24
 8005bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0201 	bic.w	r2, r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f84f 	bl	8005cac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e02d      	b.n	8005ca4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2224      	movs	r2, #36	; 0x24
 8005c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0201 	bic.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f811 	bl	8005cac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d108      	bne.n	8005cce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ccc:	e031      	b.n	8005d32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005cce:	2308      	movs	r3, #8
 8005cd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005cd2:	2308      	movs	r3, #8
 8005cd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	0e5b      	lsrs	r3, r3, #25
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	0f5b      	lsrs	r3, r3, #29
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	f003 0307 	and.w	r3, r3, #7
 8005cf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cf6:	7bbb      	ldrb	r3, [r7, #14]
 8005cf8:	7b3a      	ldrb	r2, [r7, #12]
 8005cfa:	4911      	ldr	r1, [pc, #68]	; (8005d40 <UARTEx_SetNbDataToProcess+0x94>)
 8005cfc:	5c8a      	ldrb	r2, [r1, r2]
 8005cfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d02:	7b3a      	ldrb	r2, [r7, #12]
 8005d04:	490f      	ldr	r1, [pc, #60]	; (8005d44 <UARTEx_SetNbDataToProcess+0x98>)
 8005d06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d08:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	7b7a      	ldrb	r2, [r7, #13]
 8005d18:	4909      	ldr	r1, [pc, #36]	; (8005d40 <UARTEx_SetNbDataToProcess+0x94>)
 8005d1a:	5c8a      	ldrb	r2, [r1, r2]
 8005d1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d20:	7b7a      	ldrb	r2, [r7, #13]
 8005d22:	4908      	ldr	r1, [pc, #32]	; (8005d44 <UARTEx_SetNbDataToProcess+0x98>)
 8005d24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d26:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005d32:	bf00      	nop
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	080088a4 	.word	0x080088a4
 8005d44:	080088ac 	.word	0x080088ac

08005d48 <__cvt>:
 8005d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d4c:	ec55 4b10 	vmov	r4, r5, d0
 8005d50:	2d00      	cmp	r5, #0
 8005d52:	460e      	mov	r6, r1
 8005d54:	4619      	mov	r1, r3
 8005d56:	462b      	mov	r3, r5
 8005d58:	bfbb      	ittet	lt
 8005d5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005d5e:	461d      	movlt	r5, r3
 8005d60:	2300      	movge	r3, #0
 8005d62:	232d      	movlt	r3, #45	; 0x2d
 8005d64:	700b      	strb	r3, [r1, #0]
 8005d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d6c:	4691      	mov	r9, r2
 8005d6e:	f023 0820 	bic.w	r8, r3, #32
 8005d72:	bfbc      	itt	lt
 8005d74:	4622      	movlt	r2, r4
 8005d76:	4614      	movlt	r4, r2
 8005d78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d7c:	d005      	beq.n	8005d8a <__cvt+0x42>
 8005d7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d82:	d100      	bne.n	8005d86 <__cvt+0x3e>
 8005d84:	3601      	adds	r6, #1
 8005d86:	2102      	movs	r1, #2
 8005d88:	e000      	b.n	8005d8c <__cvt+0x44>
 8005d8a:	2103      	movs	r1, #3
 8005d8c:	ab03      	add	r3, sp, #12
 8005d8e:	9301      	str	r3, [sp, #4]
 8005d90:	ab02      	add	r3, sp, #8
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	ec45 4b10 	vmov	d0, r4, r5
 8005d98:	4653      	mov	r3, sl
 8005d9a:	4632      	mov	r2, r6
 8005d9c:	f000 ff0c 	bl	8006bb8 <_dtoa_r>
 8005da0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005da4:	4607      	mov	r7, r0
 8005da6:	d102      	bne.n	8005dae <__cvt+0x66>
 8005da8:	f019 0f01 	tst.w	r9, #1
 8005dac:	d022      	beq.n	8005df4 <__cvt+0xac>
 8005dae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005db2:	eb07 0906 	add.w	r9, r7, r6
 8005db6:	d110      	bne.n	8005dda <__cvt+0x92>
 8005db8:	783b      	ldrb	r3, [r7, #0]
 8005dba:	2b30      	cmp	r3, #48	; 0x30
 8005dbc:	d10a      	bne.n	8005dd4 <__cvt+0x8c>
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	f7fa fea7 	bl	8000b18 <__aeabi_dcmpeq>
 8005dca:	b918      	cbnz	r0, 8005dd4 <__cvt+0x8c>
 8005dcc:	f1c6 0601 	rsb	r6, r6, #1
 8005dd0:	f8ca 6000 	str.w	r6, [sl]
 8005dd4:	f8da 3000 	ldr.w	r3, [sl]
 8005dd8:	4499      	add	r9, r3
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2300      	movs	r3, #0
 8005dde:	4620      	mov	r0, r4
 8005de0:	4629      	mov	r1, r5
 8005de2:	f7fa fe99 	bl	8000b18 <__aeabi_dcmpeq>
 8005de6:	b108      	cbz	r0, 8005dec <__cvt+0xa4>
 8005de8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005dec:	2230      	movs	r2, #48	; 0x30
 8005dee:	9b03      	ldr	r3, [sp, #12]
 8005df0:	454b      	cmp	r3, r9
 8005df2:	d307      	bcc.n	8005e04 <__cvt+0xbc>
 8005df4:	9b03      	ldr	r3, [sp, #12]
 8005df6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005df8:	1bdb      	subs	r3, r3, r7
 8005dfa:	4638      	mov	r0, r7
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	b004      	add	sp, #16
 8005e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e04:	1c59      	adds	r1, r3, #1
 8005e06:	9103      	str	r1, [sp, #12]
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	e7f0      	b.n	8005dee <__cvt+0xa6>

08005e0c <__exponent>:
 8005e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2900      	cmp	r1, #0
 8005e12:	bfb8      	it	lt
 8005e14:	4249      	neglt	r1, r1
 8005e16:	f803 2b02 	strb.w	r2, [r3], #2
 8005e1a:	bfb4      	ite	lt
 8005e1c:	222d      	movlt	r2, #45	; 0x2d
 8005e1e:	222b      	movge	r2, #43	; 0x2b
 8005e20:	2909      	cmp	r1, #9
 8005e22:	7042      	strb	r2, [r0, #1]
 8005e24:	dd2a      	ble.n	8005e7c <__exponent+0x70>
 8005e26:	f10d 0207 	add.w	r2, sp, #7
 8005e2a:	4617      	mov	r7, r2
 8005e2c:	260a      	movs	r6, #10
 8005e2e:	4694      	mov	ip, r2
 8005e30:	fb91 f5f6 	sdiv	r5, r1, r6
 8005e34:	fb06 1415 	mls	r4, r6, r5, r1
 8005e38:	3430      	adds	r4, #48	; 0x30
 8005e3a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005e3e:	460c      	mov	r4, r1
 8005e40:	2c63      	cmp	r4, #99	; 0x63
 8005e42:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005e46:	4629      	mov	r1, r5
 8005e48:	dcf1      	bgt.n	8005e2e <__exponent+0x22>
 8005e4a:	3130      	adds	r1, #48	; 0x30
 8005e4c:	f1ac 0402 	sub.w	r4, ip, #2
 8005e50:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005e54:	1c41      	adds	r1, r0, #1
 8005e56:	4622      	mov	r2, r4
 8005e58:	42ba      	cmp	r2, r7
 8005e5a:	d30a      	bcc.n	8005e72 <__exponent+0x66>
 8005e5c:	f10d 0209 	add.w	r2, sp, #9
 8005e60:	eba2 020c 	sub.w	r2, r2, ip
 8005e64:	42bc      	cmp	r4, r7
 8005e66:	bf88      	it	hi
 8005e68:	2200      	movhi	r2, #0
 8005e6a:	4413      	add	r3, r2
 8005e6c:	1a18      	subs	r0, r3, r0
 8005e6e:	b003      	add	sp, #12
 8005e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e72:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005e76:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005e7a:	e7ed      	b.n	8005e58 <__exponent+0x4c>
 8005e7c:	2330      	movs	r3, #48	; 0x30
 8005e7e:	3130      	adds	r1, #48	; 0x30
 8005e80:	7083      	strb	r3, [r0, #2]
 8005e82:	70c1      	strb	r1, [r0, #3]
 8005e84:	1d03      	adds	r3, r0, #4
 8005e86:	e7f1      	b.n	8005e6c <__exponent+0x60>

08005e88 <_printf_float>:
 8005e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8c:	ed2d 8b02 	vpush	{d8}
 8005e90:	b08d      	sub	sp, #52	; 0x34
 8005e92:	460c      	mov	r4, r1
 8005e94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e98:	4616      	mov	r6, r2
 8005e9a:	461f      	mov	r7, r3
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	f000 fdad 	bl	80069fc <_localeconv_r>
 8005ea2:	f8d0 a000 	ldr.w	sl, [r0]
 8005ea6:	4650      	mov	r0, sl
 8005ea8:	f7fa fa0a 	bl	80002c0 <strlen>
 8005eac:	2300      	movs	r3, #0
 8005eae:	930a      	str	r3, [sp, #40]	; 0x28
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	9305      	str	r3, [sp, #20]
 8005eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8005eb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005ebc:	3307      	adds	r3, #7
 8005ebe:	f023 0307 	bic.w	r3, r3, #7
 8005ec2:	f103 0208 	add.w	r2, r3, #8
 8005ec6:	f8c8 2000 	str.w	r2, [r8]
 8005eca:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ece:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ed2:	9307      	str	r3, [sp, #28]
 8005ed4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ed8:	ee08 0a10 	vmov	s16, r0
 8005edc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005ee0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ee4:	4b9e      	ldr	r3, [pc, #632]	; (8006160 <_printf_float+0x2d8>)
 8005ee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eea:	f7fa fe47 	bl	8000b7c <__aeabi_dcmpun>
 8005eee:	bb88      	cbnz	r0, 8005f54 <_printf_float+0xcc>
 8005ef0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ef4:	4b9a      	ldr	r3, [pc, #616]	; (8006160 <_printf_float+0x2d8>)
 8005ef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005efa:	f7fa fe21 	bl	8000b40 <__aeabi_dcmple>
 8005efe:	bb48      	cbnz	r0, 8005f54 <_printf_float+0xcc>
 8005f00:	2200      	movs	r2, #0
 8005f02:	2300      	movs	r3, #0
 8005f04:	4640      	mov	r0, r8
 8005f06:	4649      	mov	r1, r9
 8005f08:	f7fa fe10 	bl	8000b2c <__aeabi_dcmplt>
 8005f0c:	b110      	cbz	r0, 8005f14 <_printf_float+0x8c>
 8005f0e:	232d      	movs	r3, #45	; 0x2d
 8005f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f14:	4a93      	ldr	r2, [pc, #588]	; (8006164 <_printf_float+0x2dc>)
 8005f16:	4b94      	ldr	r3, [pc, #592]	; (8006168 <_printf_float+0x2e0>)
 8005f18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005f1c:	bf94      	ite	ls
 8005f1e:	4690      	movls	r8, r2
 8005f20:	4698      	movhi	r8, r3
 8005f22:	2303      	movs	r3, #3
 8005f24:	6123      	str	r3, [r4, #16]
 8005f26:	9b05      	ldr	r3, [sp, #20]
 8005f28:	f023 0304 	bic.w	r3, r3, #4
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	f04f 0900 	mov.w	r9, #0
 8005f32:	9700      	str	r7, [sp, #0]
 8005f34:	4633      	mov	r3, r6
 8005f36:	aa0b      	add	r2, sp, #44	; 0x2c
 8005f38:	4621      	mov	r1, r4
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f000 f9da 	bl	80062f4 <_printf_common>
 8005f40:	3001      	adds	r0, #1
 8005f42:	f040 8090 	bne.w	8006066 <_printf_float+0x1de>
 8005f46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f4a:	b00d      	add	sp, #52	; 0x34
 8005f4c:	ecbd 8b02 	vpop	{d8}
 8005f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f54:	4642      	mov	r2, r8
 8005f56:	464b      	mov	r3, r9
 8005f58:	4640      	mov	r0, r8
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	f7fa fe0e 	bl	8000b7c <__aeabi_dcmpun>
 8005f60:	b140      	cbz	r0, 8005f74 <_printf_float+0xec>
 8005f62:	464b      	mov	r3, r9
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	bfbc      	itt	lt
 8005f68:	232d      	movlt	r3, #45	; 0x2d
 8005f6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f6e:	4a7f      	ldr	r2, [pc, #508]	; (800616c <_printf_float+0x2e4>)
 8005f70:	4b7f      	ldr	r3, [pc, #508]	; (8006170 <_printf_float+0x2e8>)
 8005f72:	e7d1      	b.n	8005f18 <_printf_float+0x90>
 8005f74:	6863      	ldr	r3, [r4, #4]
 8005f76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f7a:	9206      	str	r2, [sp, #24]
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	d13f      	bne.n	8006000 <_printf_float+0x178>
 8005f80:	2306      	movs	r3, #6
 8005f82:	6063      	str	r3, [r4, #4]
 8005f84:	9b05      	ldr	r3, [sp, #20]
 8005f86:	6861      	ldr	r1, [r4, #4]
 8005f88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	9303      	str	r3, [sp, #12]
 8005f90:	ab0a      	add	r3, sp, #40	; 0x28
 8005f92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f96:	ab09      	add	r3, sp, #36	; 0x24
 8005f98:	ec49 8b10 	vmov	d0, r8, r9
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	6022      	str	r2, [r4, #0]
 8005fa0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	f7ff fecf 	bl	8005d48 <__cvt>
 8005faa:	9b06      	ldr	r3, [sp, #24]
 8005fac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fae:	2b47      	cmp	r3, #71	; 0x47
 8005fb0:	4680      	mov	r8, r0
 8005fb2:	d108      	bne.n	8005fc6 <_printf_float+0x13e>
 8005fb4:	1cc8      	adds	r0, r1, #3
 8005fb6:	db02      	blt.n	8005fbe <_printf_float+0x136>
 8005fb8:	6863      	ldr	r3, [r4, #4]
 8005fba:	4299      	cmp	r1, r3
 8005fbc:	dd41      	ble.n	8006042 <_printf_float+0x1ba>
 8005fbe:	f1ab 0302 	sub.w	r3, fp, #2
 8005fc2:	fa5f fb83 	uxtb.w	fp, r3
 8005fc6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fca:	d820      	bhi.n	800600e <_printf_float+0x186>
 8005fcc:	3901      	subs	r1, #1
 8005fce:	465a      	mov	r2, fp
 8005fd0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005fd4:	9109      	str	r1, [sp, #36]	; 0x24
 8005fd6:	f7ff ff19 	bl	8005e0c <__exponent>
 8005fda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fdc:	1813      	adds	r3, r2, r0
 8005fde:	2a01      	cmp	r2, #1
 8005fe0:	4681      	mov	r9, r0
 8005fe2:	6123      	str	r3, [r4, #16]
 8005fe4:	dc02      	bgt.n	8005fec <_printf_float+0x164>
 8005fe6:	6822      	ldr	r2, [r4, #0]
 8005fe8:	07d2      	lsls	r2, r2, #31
 8005fea:	d501      	bpl.n	8005ff0 <_printf_float+0x168>
 8005fec:	3301      	adds	r3, #1
 8005fee:	6123      	str	r3, [r4, #16]
 8005ff0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d09c      	beq.n	8005f32 <_printf_float+0xaa>
 8005ff8:	232d      	movs	r3, #45	; 0x2d
 8005ffa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ffe:	e798      	b.n	8005f32 <_printf_float+0xaa>
 8006000:	9a06      	ldr	r2, [sp, #24]
 8006002:	2a47      	cmp	r2, #71	; 0x47
 8006004:	d1be      	bne.n	8005f84 <_printf_float+0xfc>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1bc      	bne.n	8005f84 <_printf_float+0xfc>
 800600a:	2301      	movs	r3, #1
 800600c:	e7b9      	b.n	8005f82 <_printf_float+0xfa>
 800600e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006012:	d118      	bne.n	8006046 <_printf_float+0x1be>
 8006014:	2900      	cmp	r1, #0
 8006016:	6863      	ldr	r3, [r4, #4]
 8006018:	dd0b      	ble.n	8006032 <_printf_float+0x1aa>
 800601a:	6121      	str	r1, [r4, #16]
 800601c:	b913      	cbnz	r3, 8006024 <_printf_float+0x19c>
 800601e:	6822      	ldr	r2, [r4, #0]
 8006020:	07d0      	lsls	r0, r2, #31
 8006022:	d502      	bpl.n	800602a <_printf_float+0x1a2>
 8006024:	3301      	adds	r3, #1
 8006026:	440b      	add	r3, r1
 8006028:	6123      	str	r3, [r4, #16]
 800602a:	65a1      	str	r1, [r4, #88]	; 0x58
 800602c:	f04f 0900 	mov.w	r9, #0
 8006030:	e7de      	b.n	8005ff0 <_printf_float+0x168>
 8006032:	b913      	cbnz	r3, 800603a <_printf_float+0x1b2>
 8006034:	6822      	ldr	r2, [r4, #0]
 8006036:	07d2      	lsls	r2, r2, #31
 8006038:	d501      	bpl.n	800603e <_printf_float+0x1b6>
 800603a:	3302      	adds	r3, #2
 800603c:	e7f4      	b.n	8006028 <_printf_float+0x1a0>
 800603e:	2301      	movs	r3, #1
 8006040:	e7f2      	b.n	8006028 <_printf_float+0x1a0>
 8006042:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006048:	4299      	cmp	r1, r3
 800604a:	db05      	blt.n	8006058 <_printf_float+0x1d0>
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	6121      	str	r1, [r4, #16]
 8006050:	07d8      	lsls	r0, r3, #31
 8006052:	d5ea      	bpl.n	800602a <_printf_float+0x1a2>
 8006054:	1c4b      	adds	r3, r1, #1
 8006056:	e7e7      	b.n	8006028 <_printf_float+0x1a0>
 8006058:	2900      	cmp	r1, #0
 800605a:	bfd4      	ite	le
 800605c:	f1c1 0202 	rsble	r2, r1, #2
 8006060:	2201      	movgt	r2, #1
 8006062:	4413      	add	r3, r2
 8006064:	e7e0      	b.n	8006028 <_printf_float+0x1a0>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	055a      	lsls	r2, r3, #21
 800606a:	d407      	bmi.n	800607c <_printf_float+0x1f4>
 800606c:	6923      	ldr	r3, [r4, #16]
 800606e:	4642      	mov	r2, r8
 8006070:	4631      	mov	r1, r6
 8006072:	4628      	mov	r0, r5
 8006074:	47b8      	blx	r7
 8006076:	3001      	adds	r0, #1
 8006078:	d12c      	bne.n	80060d4 <_printf_float+0x24c>
 800607a:	e764      	b.n	8005f46 <_printf_float+0xbe>
 800607c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006080:	f240 80e0 	bls.w	8006244 <_printf_float+0x3bc>
 8006084:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006088:	2200      	movs	r2, #0
 800608a:	2300      	movs	r3, #0
 800608c:	f7fa fd44 	bl	8000b18 <__aeabi_dcmpeq>
 8006090:	2800      	cmp	r0, #0
 8006092:	d034      	beq.n	80060fe <_printf_float+0x276>
 8006094:	4a37      	ldr	r2, [pc, #220]	; (8006174 <_printf_float+0x2ec>)
 8006096:	2301      	movs	r3, #1
 8006098:	4631      	mov	r1, r6
 800609a:	4628      	mov	r0, r5
 800609c:	47b8      	blx	r7
 800609e:	3001      	adds	r0, #1
 80060a0:	f43f af51 	beq.w	8005f46 <_printf_float+0xbe>
 80060a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060a8:	429a      	cmp	r2, r3
 80060aa:	db02      	blt.n	80060b2 <_printf_float+0x22a>
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	07d8      	lsls	r0, r3, #31
 80060b0:	d510      	bpl.n	80060d4 <_printf_float+0x24c>
 80060b2:	ee18 3a10 	vmov	r3, s16
 80060b6:	4652      	mov	r2, sl
 80060b8:	4631      	mov	r1, r6
 80060ba:	4628      	mov	r0, r5
 80060bc:	47b8      	blx	r7
 80060be:	3001      	adds	r0, #1
 80060c0:	f43f af41 	beq.w	8005f46 <_printf_float+0xbe>
 80060c4:	f04f 0800 	mov.w	r8, #0
 80060c8:	f104 091a 	add.w	r9, r4, #26
 80060cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ce:	3b01      	subs	r3, #1
 80060d0:	4543      	cmp	r3, r8
 80060d2:	dc09      	bgt.n	80060e8 <_printf_float+0x260>
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	079b      	lsls	r3, r3, #30
 80060d8:	f100 8107 	bmi.w	80062ea <_printf_float+0x462>
 80060dc:	68e0      	ldr	r0, [r4, #12]
 80060de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060e0:	4298      	cmp	r0, r3
 80060e2:	bfb8      	it	lt
 80060e4:	4618      	movlt	r0, r3
 80060e6:	e730      	b.n	8005f4a <_printf_float+0xc2>
 80060e8:	2301      	movs	r3, #1
 80060ea:	464a      	mov	r2, r9
 80060ec:	4631      	mov	r1, r6
 80060ee:	4628      	mov	r0, r5
 80060f0:	47b8      	blx	r7
 80060f2:	3001      	adds	r0, #1
 80060f4:	f43f af27 	beq.w	8005f46 <_printf_float+0xbe>
 80060f8:	f108 0801 	add.w	r8, r8, #1
 80060fc:	e7e6      	b.n	80060cc <_printf_float+0x244>
 80060fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006100:	2b00      	cmp	r3, #0
 8006102:	dc39      	bgt.n	8006178 <_printf_float+0x2f0>
 8006104:	4a1b      	ldr	r2, [pc, #108]	; (8006174 <_printf_float+0x2ec>)
 8006106:	2301      	movs	r3, #1
 8006108:	4631      	mov	r1, r6
 800610a:	4628      	mov	r0, r5
 800610c:	47b8      	blx	r7
 800610e:	3001      	adds	r0, #1
 8006110:	f43f af19 	beq.w	8005f46 <_printf_float+0xbe>
 8006114:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006118:	4313      	orrs	r3, r2
 800611a:	d102      	bne.n	8006122 <_printf_float+0x29a>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	07d9      	lsls	r1, r3, #31
 8006120:	d5d8      	bpl.n	80060d4 <_printf_float+0x24c>
 8006122:	ee18 3a10 	vmov	r3, s16
 8006126:	4652      	mov	r2, sl
 8006128:	4631      	mov	r1, r6
 800612a:	4628      	mov	r0, r5
 800612c:	47b8      	blx	r7
 800612e:	3001      	adds	r0, #1
 8006130:	f43f af09 	beq.w	8005f46 <_printf_float+0xbe>
 8006134:	f04f 0900 	mov.w	r9, #0
 8006138:	f104 0a1a 	add.w	sl, r4, #26
 800613c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800613e:	425b      	negs	r3, r3
 8006140:	454b      	cmp	r3, r9
 8006142:	dc01      	bgt.n	8006148 <_printf_float+0x2c0>
 8006144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006146:	e792      	b.n	800606e <_printf_float+0x1e6>
 8006148:	2301      	movs	r3, #1
 800614a:	4652      	mov	r2, sl
 800614c:	4631      	mov	r1, r6
 800614e:	4628      	mov	r0, r5
 8006150:	47b8      	blx	r7
 8006152:	3001      	adds	r0, #1
 8006154:	f43f aef7 	beq.w	8005f46 <_printf_float+0xbe>
 8006158:	f109 0901 	add.w	r9, r9, #1
 800615c:	e7ee      	b.n	800613c <_printf_float+0x2b4>
 800615e:	bf00      	nop
 8006160:	7fefffff 	.word	0x7fefffff
 8006164:	080088b4 	.word	0x080088b4
 8006168:	080088b8 	.word	0x080088b8
 800616c:	080088bc 	.word	0x080088bc
 8006170:	080088c0 	.word	0x080088c0
 8006174:	080088c4 	.word	0x080088c4
 8006178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800617a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800617c:	429a      	cmp	r2, r3
 800617e:	bfa8      	it	ge
 8006180:	461a      	movge	r2, r3
 8006182:	2a00      	cmp	r2, #0
 8006184:	4691      	mov	r9, r2
 8006186:	dc37      	bgt.n	80061f8 <_printf_float+0x370>
 8006188:	f04f 0b00 	mov.w	fp, #0
 800618c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006190:	f104 021a 	add.w	r2, r4, #26
 8006194:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006196:	9305      	str	r3, [sp, #20]
 8006198:	eba3 0309 	sub.w	r3, r3, r9
 800619c:	455b      	cmp	r3, fp
 800619e:	dc33      	bgt.n	8006208 <_printf_float+0x380>
 80061a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061a4:	429a      	cmp	r2, r3
 80061a6:	db3b      	blt.n	8006220 <_printf_float+0x398>
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	07da      	lsls	r2, r3, #31
 80061ac:	d438      	bmi.n	8006220 <_printf_float+0x398>
 80061ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80061b2:	eba2 0903 	sub.w	r9, r2, r3
 80061b6:	9b05      	ldr	r3, [sp, #20]
 80061b8:	1ad2      	subs	r2, r2, r3
 80061ba:	4591      	cmp	r9, r2
 80061bc:	bfa8      	it	ge
 80061be:	4691      	movge	r9, r2
 80061c0:	f1b9 0f00 	cmp.w	r9, #0
 80061c4:	dc35      	bgt.n	8006232 <_printf_float+0x3aa>
 80061c6:	f04f 0800 	mov.w	r8, #0
 80061ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061ce:	f104 0a1a 	add.w	sl, r4, #26
 80061d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061d6:	1a9b      	subs	r3, r3, r2
 80061d8:	eba3 0309 	sub.w	r3, r3, r9
 80061dc:	4543      	cmp	r3, r8
 80061de:	f77f af79 	ble.w	80060d4 <_printf_float+0x24c>
 80061e2:	2301      	movs	r3, #1
 80061e4:	4652      	mov	r2, sl
 80061e6:	4631      	mov	r1, r6
 80061e8:	4628      	mov	r0, r5
 80061ea:	47b8      	blx	r7
 80061ec:	3001      	adds	r0, #1
 80061ee:	f43f aeaa 	beq.w	8005f46 <_printf_float+0xbe>
 80061f2:	f108 0801 	add.w	r8, r8, #1
 80061f6:	e7ec      	b.n	80061d2 <_printf_float+0x34a>
 80061f8:	4613      	mov	r3, r2
 80061fa:	4631      	mov	r1, r6
 80061fc:	4642      	mov	r2, r8
 80061fe:	4628      	mov	r0, r5
 8006200:	47b8      	blx	r7
 8006202:	3001      	adds	r0, #1
 8006204:	d1c0      	bne.n	8006188 <_printf_float+0x300>
 8006206:	e69e      	b.n	8005f46 <_printf_float+0xbe>
 8006208:	2301      	movs	r3, #1
 800620a:	4631      	mov	r1, r6
 800620c:	4628      	mov	r0, r5
 800620e:	9205      	str	r2, [sp, #20]
 8006210:	47b8      	blx	r7
 8006212:	3001      	adds	r0, #1
 8006214:	f43f ae97 	beq.w	8005f46 <_printf_float+0xbe>
 8006218:	9a05      	ldr	r2, [sp, #20]
 800621a:	f10b 0b01 	add.w	fp, fp, #1
 800621e:	e7b9      	b.n	8006194 <_printf_float+0x30c>
 8006220:	ee18 3a10 	vmov	r3, s16
 8006224:	4652      	mov	r2, sl
 8006226:	4631      	mov	r1, r6
 8006228:	4628      	mov	r0, r5
 800622a:	47b8      	blx	r7
 800622c:	3001      	adds	r0, #1
 800622e:	d1be      	bne.n	80061ae <_printf_float+0x326>
 8006230:	e689      	b.n	8005f46 <_printf_float+0xbe>
 8006232:	9a05      	ldr	r2, [sp, #20]
 8006234:	464b      	mov	r3, r9
 8006236:	4442      	add	r2, r8
 8006238:	4631      	mov	r1, r6
 800623a:	4628      	mov	r0, r5
 800623c:	47b8      	blx	r7
 800623e:	3001      	adds	r0, #1
 8006240:	d1c1      	bne.n	80061c6 <_printf_float+0x33e>
 8006242:	e680      	b.n	8005f46 <_printf_float+0xbe>
 8006244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006246:	2a01      	cmp	r2, #1
 8006248:	dc01      	bgt.n	800624e <_printf_float+0x3c6>
 800624a:	07db      	lsls	r3, r3, #31
 800624c:	d53a      	bpl.n	80062c4 <_printf_float+0x43c>
 800624e:	2301      	movs	r3, #1
 8006250:	4642      	mov	r2, r8
 8006252:	4631      	mov	r1, r6
 8006254:	4628      	mov	r0, r5
 8006256:	47b8      	blx	r7
 8006258:	3001      	adds	r0, #1
 800625a:	f43f ae74 	beq.w	8005f46 <_printf_float+0xbe>
 800625e:	ee18 3a10 	vmov	r3, s16
 8006262:	4652      	mov	r2, sl
 8006264:	4631      	mov	r1, r6
 8006266:	4628      	mov	r0, r5
 8006268:	47b8      	blx	r7
 800626a:	3001      	adds	r0, #1
 800626c:	f43f ae6b 	beq.w	8005f46 <_printf_float+0xbe>
 8006270:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006274:	2200      	movs	r2, #0
 8006276:	2300      	movs	r3, #0
 8006278:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800627c:	f7fa fc4c 	bl	8000b18 <__aeabi_dcmpeq>
 8006280:	b9d8      	cbnz	r0, 80062ba <_printf_float+0x432>
 8006282:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006286:	f108 0201 	add.w	r2, r8, #1
 800628a:	4631      	mov	r1, r6
 800628c:	4628      	mov	r0, r5
 800628e:	47b8      	blx	r7
 8006290:	3001      	adds	r0, #1
 8006292:	d10e      	bne.n	80062b2 <_printf_float+0x42a>
 8006294:	e657      	b.n	8005f46 <_printf_float+0xbe>
 8006296:	2301      	movs	r3, #1
 8006298:	4652      	mov	r2, sl
 800629a:	4631      	mov	r1, r6
 800629c:	4628      	mov	r0, r5
 800629e:	47b8      	blx	r7
 80062a0:	3001      	adds	r0, #1
 80062a2:	f43f ae50 	beq.w	8005f46 <_printf_float+0xbe>
 80062a6:	f108 0801 	add.w	r8, r8, #1
 80062aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ac:	3b01      	subs	r3, #1
 80062ae:	4543      	cmp	r3, r8
 80062b0:	dcf1      	bgt.n	8006296 <_printf_float+0x40e>
 80062b2:	464b      	mov	r3, r9
 80062b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80062b8:	e6da      	b.n	8006070 <_printf_float+0x1e8>
 80062ba:	f04f 0800 	mov.w	r8, #0
 80062be:	f104 0a1a 	add.w	sl, r4, #26
 80062c2:	e7f2      	b.n	80062aa <_printf_float+0x422>
 80062c4:	2301      	movs	r3, #1
 80062c6:	4642      	mov	r2, r8
 80062c8:	e7df      	b.n	800628a <_printf_float+0x402>
 80062ca:	2301      	movs	r3, #1
 80062cc:	464a      	mov	r2, r9
 80062ce:	4631      	mov	r1, r6
 80062d0:	4628      	mov	r0, r5
 80062d2:	47b8      	blx	r7
 80062d4:	3001      	adds	r0, #1
 80062d6:	f43f ae36 	beq.w	8005f46 <_printf_float+0xbe>
 80062da:	f108 0801 	add.w	r8, r8, #1
 80062de:	68e3      	ldr	r3, [r4, #12]
 80062e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062e2:	1a5b      	subs	r3, r3, r1
 80062e4:	4543      	cmp	r3, r8
 80062e6:	dcf0      	bgt.n	80062ca <_printf_float+0x442>
 80062e8:	e6f8      	b.n	80060dc <_printf_float+0x254>
 80062ea:	f04f 0800 	mov.w	r8, #0
 80062ee:	f104 0919 	add.w	r9, r4, #25
 80062f2:	e7f4      	b.n	80062de <_printf_float+0x456>

080062f4 <_printf_common>:
 80062f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062f8:	4616      	mov	r6, r2
 80062fa:	4699      	mov	r9, r3
 80062fc:	688a      	ldr	r2, [r1, #8]
 80062fe:	690b      	ldr	r3, [r1, #16]
 8006300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006304:	4293      	cmp	r3, r2
 8006306:	bfb8      	it	lt
 8006308:	4613      	movlt	r3, r2
 800630a:	6033      	str	r3, [r6, #0]
 800630c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006310:	4607      	mov	r7, r0
 8006312:	460c      	mov	r4, r1
 8006314:	b10a      	cbz	r2, 800631a <_printf_common+0x26>
 8006316:	3301      	adds	r3, #1
 8006318:	6033      	str	r3, [r6, #0]
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	0699      	lsls	r1, r3, #26
 800631e:	bf42      	ittt	mi
 8006320:	6833      	ldrmi	r3, [r6, #0]
 8006322:	3302      	addmi	r3, #2
 8006324:	6033      	strmi	r3, [r6, #0]
 8006326:	6825      	ldr	r5, [r4, #0]
 8006328:	f015 0506 	ands.w	r5, r5, #6
 800632c:	d106      	bne.n	800633c <_printf_common+0x48>
 800632e:	f104 0a19 	add.w	sl, r4, #25
 8006332:	68e3      	ldr	r3, [r4, #12]
 8006334:	6832      	ldr	r2, [r6, #0]
 8006336:	1a9b      	subs	r3, r3, r2
 8006338:	42ab      	cmp	r3, r5
 800633a:	dc26      	bgt.n	800638a <_printf_common+0x96>
 800633c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006340:	1e13      	subs	r3, r2, #0
 8006342:	6822      	ldr	r2, [r4, #0]
 8006344:	bf18      	it	ne
 8006346:	2301      	movne	r3, #1
 8006348:	0692      	lsls	r2, r2, #26
 800634a:	d42b      	bmi.n	80063a4 <_printf_common+0xb0>
 800634c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006350:	4649      	mov	r1, r9
 8006352:	4638      	mov	r0, r7
 8006354:	47c0      	blx	r8
 8006356:	3001      	adds	r0, #1
 8006358:	d01e      	beq.n	8006398 <_printf_common+0xa4>
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	6922      	ldr	r2, [r4, #16]
 800635e:	f003 0306 	and.w	r3, r3, #6
 8006362:	2b04      	cmp	r3, #4
 8006364:	bf02      	ittt	eq
 8006366:	68e5      	ldreq	r5, [r4, #12]
 8006368:	6833      	ldreq	r3, [r6, #0]
 800636a:	1aed      	subeq	r5, r5, r3
 800636c:	68a3      	ldr	r3, [r4, #8]
 800636e:	bf0c      	ite	eq
 8006370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006374:	2500      	movne	r5, #0
 8006376:	4293      	cmp	r3, r2
 8006378:	bfc4      	itt	gt
 800637a:	1a9b      	subgt	r3, r3, r2
 800637c:	18ed      	addgt	r5, r5, r3
 800637e:	2600      	movs	r6, #0
 8006380:	341a      	adds	r4, #26
 8006382:	42b5      	cmp	r5, r6
 8006384:	d11a      	bne.n	80063bc <_printf_common+0xc8>
 8006386:	2000      	movs	r0, #0
 8006388:	e008      	b.n	800639c <_printf_common+0xa8>
 800638a:	2301      	movs	r3, #1
 800638c:	4652      	mov	r2, sl
 800638e:	4649      	mov	r1, r9
 8006390:	4638      	mov	r0, r7
 8006392:	47c0      	blx	r8
 8006394:	3001      	adds	r0, #1
 8006396:	d103      	bne.n	80063a0 <_printf_common+0xac>
 8006398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800639c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a0:	3501      	adds	r5, #1
 80063a2:	e7c6      	b.n	8006332 <_printf_common+0x3e>
 80063a4:	18e1      	adds	r1, r4, r3
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	2030      	movs	r0, #48	; 0x30
 80063aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063ae:	4422      	add	r2, r4
 80063b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063b8:	3302      	adds	r3, #2
 80063ba:	e7c7      	b.n	800634c <_printf_common+0x58>
 80063bc:	2301      	movs	r3, #1
 80063be:	4622      	mov	r2, r4
 80063c0:	4649      	mov	r1, r9
 80063c2:	4638      	mov	r0, r7
 80063c4:	47c0      	blx	r8
 80063c6:	3001      	adds	r0, #1
 80063c8:	d0e6      	beq.n	8006398 <_printf_common+0xa4>
 80063ca:	3601      	adds	r6, #1
 80063cc:	e7d9      	b.n	8006382 <_printf_common+0x8e>
	...

080063d0 <_printf_i>:
 80063d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063d4:	7e0f      	ldrb	r7, [r1, #24]
 80063d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063d8:	2f78      	cmp	r7, #120	; 0x78
 80063da:	4691      	mov	r9, r2
 80063dc:	4680      	mov	r8, r0
 80063de:	460c      	mov	r4, r1
 80063e0:	469a      	mov	sl, r3
 80063e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063e6:	d807      	bhi.n	80063f8 <_printf_i+0x28>
 80063e8:	2f62      	cmp	r7, #98	; 0x62
 80063ea:	d80a      	bhi.n	8006402 <_printf_i+0x32>
 80063ec:	2f00      	cmp	r7, #0
 80063ee:	f000 80d4 	beq.w	800659a <_printf_i+0x1ca>
 80063f2:	2f58      	cmp	r7, #88	; 0x58
 80063f4:	f000 80c0 	beq.w	8006578 <_printf_i+0x1a8>
 80063f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006400:	e03a      	b.n	8006478 <_printf_i+0xa8>
 8006402:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006406:	2b15      	cmp	r3, #21
 8006408:	d8f6      	bhi.n	80063f8 <_printf_i+0x28>
 800640a:	a101      	add	r1, pc, #4	; (adr r1, 8006410 <_printf_i+0x40>)
 800640c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006410:	08006469 	.word	0x08006469
 8006414:	0800647d 	.word	0x0800647d
 8006418:	080063f9 	.word	0x080063f9
 800641c:	080063f9 	.word	0x080063f9
 8006420:	080063f9 	.word	0x080063f9
 8006424:	080063f9 	.word	0x080063f9
 8006428:	0800647d 	.word	0x0800647d
 800642c:	080063f9 	.word	0x080063f9
 8006430:	080063f9 	.word	0x080063f9
 8006434:	080063f9 	.word	0x080063f9
 8006438:	080063f9 	.word	0x080063f9
 800643c:	08006581 	.word	0x08006581
 8006440:	080064a9 	.word	0x080064a9
 8006444:	0800653b 	.word	0x0800653b
 8006448:	080063f9 	.word	0x080063f9
 800644c:	080063f9 	.word	0x080063f9
 8006450:	080065a3 	.word	0x080065a3
 8006454:	080063f9 	.word	0x080063f9
 8006458:	080064a9 	.word	0x080064a9
 800645c:	080063f9 	.word	0x080063f9
 8006460:	080063f9 	.word	0x080063f9
 8006464:	08006543 	.word	0x08006543
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	1d1a      	adds	r2, r3, #4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	602a      	str	r2, [r5, #0]
 8006470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006478:	2301      	movs	r3, #1
 800647a:	e09f      	b.n	80065bc <_printf_i+0x1ec>
 800647c:	6820      	ldr	r0, [r4, #0]
 800647e:	682b      	ldr	r3, [r5, #0]
 8006480:	0607      	lsls	r7, r0, #24
 8006482:	f103 0104 	add.w	r1, r3, #4
 8006486:	6029      	str	r1, [r5, #0]
 8006488:	d501      	bpl.n	800648e <_printf_i+0xbe>
 800648a:	681e      	ldr	r6, [r3, #0]
 800648c:	e003      	b.n	8006496 <_printf_i+0xc6>
 800648e:	0646      	lsls	r6, r0, #25
 8006490:	d5fb      	bpl.n	800648a <_printf_i+0xba>
 8006492:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006496:	2e00      	cmp	r6, #0
 8006498:	da03      	bge.n	80064a2 <_printf_i+0xd2>
 800649a:	232d      	movs	r3, #45	; 0x2d
 800649c:	4276      	negs	r6, r6
 800649e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064a2:	485a      	ldr	r0, [pc, #360]	; (800660c <_printf_i+0x23c>)
 80064a4:	230a      	movs	r3, #10
 80064a6:	e012      	b.n	80064ce <_printf_i+0xfe>
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	6820      	ldr	r0, [r4, #0]
 80064ac:	1d19      	adds	r1, r3, #4
 80064ae:	6029      	str	r1, [r5, #0]
 80064b0:	0605      	lsls	r5, r0, #24
 80064b2:	d501      	bpl.n	80064b8 <_printf_i+0xe8>
 80064b4:	681e      	ldr	r6, [r3, #0]
 80064b6:	e002      	b.n	80064be <_printf_i+0xee>
 80064b8:	0641      	lsls	r1, r0, #25
 80064ba:	d5fb      	bpl.n	80064b4 <_printf_i+0xe4>
 80064bc:	881e      	ldrh	r6, [r3, #0]
 80064be:	4853      	ldr	r0, [pc, #332]	; (800660c <_printf_i+0x23c>)
 80064c0:	2f6f      	cmp	r7, #111	; 0x6f
 80064c2:	bf0c      	ite	eq
 80064c4:	2308      	moveq	r3, #8
 80064c6:	230a      	movne	r3, #10
 80064c8:	2100      	movs	r1, #0
 80064ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064ce:	6865      	ldr	r5, [r4, #4]
 80064d0:	60a5      	str	r5, [r4, #8]
 80064d2:	2d00      	cmp	r5, #0
 80064d4:	bfa2      	ittt	ge
 80064d6:	6821      	ldrge	r1, [r4, #0]
 80064d8:	f021 0104 	bicge.w	r1, r1, #4
 80064dc:	6021      	strge	r1, [r4, #0]
 80064de:	b90e      	cbnz	r6, 80064e4 <_printf_i+0x114>
 80064e0:	2d00      	cmp	r5, #0
 80064e2:	d04b      	beq.n	800657c <_printf_i+0x1ac>
 80064e4:	4615      	mov	r5, r2
 80064e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80064ea:	fb03 6711 	mls	r7, r3, r1, r6
 80064ee:	5dc7      	ldrb	r7, [r0, r7]
 80064f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064f4:	4637      	mov	r7, r6
 80064f6:	42bb      	cmp	r3, r7
 80064f8:	460e      	mov	r6, r1
 80064fa:	d9f4      	bls.n	80064e6 <_printf_i+0x116>
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d10b      	bne.n	8006518 <_printf_i+0x148>
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	07de      	lsls	r6, r3, #31
 8006504:	d508      	bpl.n	8006518 <_printf_i+0x148>
 8006506:	6923      	ldr	r3, [r4, #16]
 8006508:	6861      	ldr	r1, [r4, #4]
 800650a:	4299      	cmp	r1, r3
 800650c:	bfde      	ittt	le
 800650e:	2330      	movle	r3, #48	; 0x30
 8006510:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006514:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006518:	1b52      	subs	r2, r2, r5
 800651a:	6122      	str	r2, [r4, #16]
 800651c:	f8cd a000 	str.w	sl, [sp]
 8006520:	464b      	mov	r3, r9
 8006522:	aa03      	add	r2, sp, #12
 8006524:	4621      	mov	r1, r4
 8006526:	4640      	mov	r0, r8
 8006528:	f7ff fee4 	bl	80062f4 <_printf_common>
 800652c:	3001      	adds	r0, #1
 800652e:	d14a      	bne.n	80065c6 <_printf_i+0x1f6>
 8006530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006534:	b004      	add	sp, #16
 8006536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	f043 0320 	orr.w	r3, r3, #32
 8006540:	6023      	str	r3, [r4, #0]
 8006542:	4833      	ldr	r0, [pc, #204]	; (8006610 <_printf_i+0x240>)
 8006544:	2778      	movs	r7, #120	; 0x78
 8006546:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	6829      	ldr	r1, [r5, #0]
 800654e:	061f      	lsls	r7, r3, #24
 8006550:	f851 6b04 	ldr.w	r6, [r1], #4
 8006554:	d402      	bmi.n	800655c <_printf_i+0x18c>
 8006556:	065f      	lsls	r7, r3, #25
 8006558:	bf48      	it	mi
 800655a:	b2b6      	uxthmi	r6, r6
 800655c:	07df      	lsls	r7, r3, #31
 800655e:	bf48      	it	mi
 8006560:	f043 0320 	orrmi.w	r3, r3, #32
 8006564:	6029      	str	r1, [r5, #0]
 8006566:	bf48      	it	mi
 8006568:	6023      	strmi	r3, [r4, #0]
 800656a:	b91e      	cbnz	r6, 8006574 <_printf_i+0x1a4>
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	f023 0320 	bic.w	r3, r3, #32
 8006572:	6023      	str	r3, [r4, #0]
 8006574:	2310      	movs	r3, #16
 8006576:	e7a7      	b.n	80064c8 <_printf_i+0xf8>
 8006578:	4824      	ldr	r0, [pc, #144]	; (800660c <_printf_i+0x23c>)
 800657a:	e7e4      	b.n	8006546 <_printf_i+0x176>
 800657c:	4615      	mov	r5, r2
 800657e:	e7bd      	b.n	80064fc <_printf_i+0x12c>
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	6826      	ldr	r6, [r4, #0]
 8006584:	6961      	ldr	r1, [r4, #20]
 8006586:	1d18      	adds	r0, r3, #4
 8006588:	6028      	str	r0, [r5, #0]
 800658a:	0635      	lsls	r5, r6, #24
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	d501      	bpl.n	8006594 <_printf_i+0x1c4>
 8006590:	6019      	str	r1, [r3, #0]
 8006592:	e002      	b.n	800659a <_printf_i+0x1ca>
 8006594:	0670      	lsls	r0, r6, #25
 8006596:	d5fb      	bpl.n	8006590 <_printf_i+0x1c0>
 8006598:	8019      	strh	r1, [r3, #0]
 800659a:	2300      	movs	r3, #0
 800659c:	6123      	str	r3, [r4, #16]
 800659e:	4615      	mov	r5, r2
 80065a0:	e7bc      	b.n	800651c <_printf_i+0x14c>
 80065a2:	682b      	ldr	r3, [r5, #0]
 80065a4:	1d1a      	adds	r2, r3, #4
 80065a6:	602a      	str	r2, [r5, #0]
 80065a8:	681d      	ldr	r5, [r3, #0]
 80065aa:	6862      	ldr	r2, [r4, #4]
 80065ac:	2100      	movs	r1, #0
 80065ae:	4628      	mov	r0, r5
 80065b0:	f7f9 fe36 	bl	8000220 <memchr>
 80065b4:	b108      	cbz	r0, 80065ba <_printf_i+0x1ea>
 80065b6:	1b40      	subs	r0, r0, r5
 80065b8:	6060      	str	r0, [r4, #4]
 80065ba:	6863      	ldr	r3, [r4, #4]
 80065bc:	6123      	str	r3, [r4, #16]
 80065be:	2300      	movs	r3, #0
 80065c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065c4:	e7aa      	b.n	800651c <_printf_i+0x14c>
 80065c6:	6923      	ldr	r3, [r4, #16]
 80065c8:	462a      	mov	r2, r5
 80065ca:	4649      	mov	r1, r9
 80065cc:	4640      	mov	r0, r8
 80065ce:	47d0      	blx	sl
 80065d0:	3001      	adds	r0, #1
 80065d2:	d0ad      	beq.n	8006530 <_printf_i+0x160>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	079b      	lsls	r3, r3, #30
 80065d8:	d413      	bmi.n	8006602 <_printf_i+0x232>
 80065da:	68e0      	ldr	r0, [r4, #12]
 80065dc:	9b03      	ldr	r3, [sp, #12]
 80065de:	4298      	cmp	r0, r3
 80065e0:	bfb8      	it	lt
 80065e2:	4618      	movlt	r0, r3
 80065e4:	e7a6      	b.n	8006534 <_printf_i+0x164>
 80065e6:	2301      	movs	r3, #1
 80065e8:	4632      	mov	r2, r6
 80065ea:	4649      	mov	r1, r9
 80065ec:	4640      	mov	r0, r8
 80065ee:	47d0      	blx	sl
 80065f0:	3001      	adds	r0, #1
 80065f2:	d09d      	beq.n	8006530 <_printf_i+0x160>
 80065f4:	3501      	adds	r5, #1
 80065f6:	68e3      	ldr	r3, [r4, #12]
 80065f8:	9903      	ldr	r1, [sp, #12]
 80065fa:	1a5b      	subs	r3, r3, r1
 80065fc:	42ab      	cmp	r3, r5
 80065fe:	dcf2      	bgt.n	80065e6 <_printf_i+0x216>
 8006600:	e7eb      	b.n	80065da <_printf_i+0x20a>
 8006602:	2500      	movs	r5, #0
 8006604:	f104 0619 	add.w	r6, r4, #25
 8006608:	e7f5      	b.n	80065f6 <_printf_i+0x226>
 800660a:	bf00      	nop
 800660c:	080088c6 	.word	0x080088c6
 8006610:	080088d7 	.word	0x080088d7

08006614 <setbuf>:
 8006614:	fab1 f281 	clz	r2, r1
 8006618:	0952      	lsrs	r2, r2, #5
 800661a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800661e:	0052      	lsls	r2, r2, #1
 8006620:	f000 b800 	b.w	8006624 <setvbuf>

08006624 <setvbuf>:
 8006624:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006628:	461d      	mov	r5, r3
 800662a:	4b54      	ldr	r3, [pc, #336]	; (800677c <setvbuf+0x158>)
 800662c:	681f      	ldr	r7, [r3, #0]
 800662e:	4604      	mov	r4, r0
 8006630:	460e      	mov	r6, r1
 8006632:	4690      	mov	r8, r2
 8006634:	b127      	cbz	r7, 8006640 <setvbuf+0x1c>
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	b913      	cbnz	r3, 8006640 <setvbuf+0x1c>
 800663a:	4638      	mov	r0, r7
 800663c:	f000 f92c 	bl	8006898 <__sinit>
 8006640:	f1b8 0f02 	cmp.w	r8, #2
 8006644:	d006      	beq.n	8006654 <setvbuf+0x30>
 8006646:	f1b8 0f01 	cmp.w	r8, #1
 800664a:	f200 8094 	bhi.w	8006776 <setvbuf+0x152>
 800664e:	2d00      	cmp	r5, #0
 8006650:	f2c0 8091 	blt.w	8006776 <setvbuf+0x152>
 8006654:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006656:	07da      	lsls	r2, r3, #31
 8006658:	d405      	bmi.n	8006666 <setvbuf+0x42>
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	059b      	lsls	r3, r3, #22
 800665e:	d402      	bmi.n	8006666 <setvbuf+0x42>
 8006660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006662:	f000 fa1c 	bl	8006a9e <__retarget_lock_acquire_recursive>
 8006666:	4621      	mov	r1, r4
 8006668:	4638      	mov	r0, r7
 800666a:	f001 fb55 	bl	8007d18 <_fflush_r>
 800666e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006670:	b141      	cbz	r1, 8006684 <setvbuf+0x60>
 8006672:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006676:	4299      	cmp	r1, r3
 8006678:	d002      	beq.n	8006680 <setvbuf+0x5c>
 800667a:	4638      	mov	r0, r7
 800667c:	f001 f88e 	bl	800779c <_free_r>
 8006680:	2300      	movs	r3, #0
 8006682:	6363      	str	r3, [r4, #52]	; 0x34
 8006684:	2300      	movs	r3, #0
 8006686:	61a3      	str	r3, [r4, #24]
 8006688:	6063      	str	r3, [r4, #4]
 800668a:	89a3      	ldrh	r3, [r4, #12]
 800668c:	0618      	lsls	r0, r3, #24
 800668e:	d503      	bpl.n	8006698 <setvbuf+0x74>
 8006690:	6921      	ldr	r1, [r4, #16]
 8006692:	4638      	mov	r0, r7
 8006694:	f001 f882 	bl	800779c <_free_r>
 8006698:	89a3      	ldrh	r3, [r4, #12]
 800669a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800669e:	f023 0303 	bic.w	r3, r3, #3
 80066a2:	f1b8 0f02 	cmp.w	r8, #2
 80066a6:	81a3      	strh	r3, [r4, #12]
 80066a8:	d05f      	beq.n	800676a <setvbuf+0x146>
 80066aa:	ab01      	add	r3, sp, #4
 80066ac:	466a      	mov	r2, sp
 80066ae:	4621      	mov	r1, r4
 80066b0:	4638      	mov	r0, r7
 80066b2:	f000 f927 	bl	8006904 <__swhatbuf_r>
 80066b6:	89a3      	ldrh	r3, [r4, #12]
 80066b8:	4318      	orrs	r0, r3
 80066ba:	81a0      	strh	r0, [r4, #12]
 80066bc:	bb2d      	cbnz	r5, 800670a <setvbuf+0xe6>
 80066be:	9d00      	ldr	r5, [sp, #0]
 80066c0:	4628      	mov	r0, r5
 80066c2:	f001 f9fb 	bl	8007abc <malloc>
 80066c6:	4606      	mov	r6, r0
 80066c8:	2800      	cmp	r0, #0
 80066ca:	d150      	bne.n	800676e <setvbuf+0x14a>
 80066cc:	f8dd 9000 	ldr.w	r9, [sp]
 80066d0:	45a9      	cmp	r9, r5
 80066d2:	d13e      	bne.n	8006752 <setvbuf+0x12e>
 80066d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80066d8:	2200      	movs	r2, #0
 80066da:	60a2      	str	r2, [r4, #8]
 80066dc:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80066e0:	6022      	str	r2, [r4, #0]
 80066e2:	6122      	str	r2, [r4, #16]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ea:	6162      	str	r2, [r4, #20]
 80066ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066ee:	f043 0302 	orr.w	r3, r3, #2
 80066f2:	07d1      	lsls	r1, r2, #31
 80066f4:	81a3      	strh	r3, [r4, #12]
 80066f6:	d404      	bmi.n	8006702 <setvbuf+0xde>
 80066f8:	059b      	lsls	r3, r3, #22
 80066fa:	d402      	bmi.n	8006702 <setvbuf+0xde>
 80066fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066fe:	f000 f9cf 	bl	8006aa0 <__retarget_lock_release_recursive>
 8006702:	4628      	mov	r0, r5
 8006704:	b003      	add	sp, #12
 8006706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800670a:	2e00      	cmp	r6, #0
 800670c:	d0d8      	beq.n	80066c0 <setvbuf+0x9c>
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	b913      	cbnz	r3, 8006718 <setvbuf+0xf4>
 8006712:	4638      	mov	r0, r7
 8006714:	f000 f8c0 	bl	8006898 <__sinit>
 8006718:	f1b8 0f01 	cmp.w	r8, #1
 800671c:	bf08      	it	eq
 800671e:	89a3      	ldrheq	r3, [r4, #12]
 8006720:	6026      	str	r6, [r4, #0]
 8006722:	bf04      	itt	eq
 8006724:	f043 0301 	orreq.w	r3, r3, #1
 8006728:	81a3      	strheq	r3, [r4, #12]
 800672a:	89a3      	ldrh	r3, [r4, #12]
 800672c:	f013 0208 	ands.w	r2, r3, #8
 8006730:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006734:	d01d      	beq.n	8006772 <setvbuf+0x14e>
 8006736:	07da      	lsls	r2, r3, #31
 8006738:	bf41      	itttt	mi
 800673a:	2200      	movmi	r2, #0
 800673c:	426d      	negmi	r5, r5
 800673e:	60a2      	strmi	r2, [r4, #8]
 8006740:	61a5      	strmi	r5, [r4, #24]
 8006742:	bf58      	it	pl
 8006744:	60a5      	strpl	r5, [r4, #8]
 8006746:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006748:	f015 0501 	ands.w	r5, r5, #1
 800674c:	d0d4      	beq.n	80066f8 <setvbuf+0xd4>
 800674e:	2500      	movs	r5, #0
 8006750:	e7d7      	b.n	8006702 <setvbuf+0xde>
 8006752:	4648      	mov	r0, r9
 8006754:	f001 f9b2 	bl	8007abc <malloc>
 8006758:	4606      	mov	r6, r0
 800675a:	2800      	cmp	r0, #0
 800675c:	d0ba      	beq.n	80066d4 <setvbuf+0xb0>
 800675e:	89a3      	ldrh	r3, [r4, #12]
 8006760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006764:	81a3      	strh	r3, [r4, #12]
 8006766:	464d      	mov	r5, r9
 8006768:	e7d1      	b.n	800670e <setvbuf+0xea>
 800676a:	2500      	movs	r5, #0
 800676c:	e7b4      	b.n	80066d8 <setvbuf+0xb4>
 800676e:	46a9      	mov	r9, r5
 8006770:	e7f5      	b.n	800675e <setvbuf+0x13a>
 8006772:	60a2      	str	r2, [r4, #8]
 8006774:	e7e7      	b.n	8006746 <setvbuf+0x122>
 8006776:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800677a:	e7c2      	b.n	8006702 <setvbuf+0xde>
 800677c:	20000064 	.word	0x20000064

08006780 <std>:
 8006780:	2300      	movs	r3, #0
 8006782:	b510      	push	{r4, lr}
 8006784:	4604      	mov	r4, r0
 8006786:	e9c0 3300 	strd	r3, r3, [r0]
 800678a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800678e:	6083      	str	r3, [r0, #8]
 8006790:	8181      	strh	r1, [r0, #12]
 8006792:	6643      	str	r3, [r0, #100]	; 0x64
 8006794:	81c2      	strh	r2, [r0, #14]
 8006796:	6183      	str	r3, [r0, #24]
 8006798:	4619      	mov	r1, r3
 800679a:	2208      	movs	r2, #8
 800679c:	305c      	adds	r0, #92	; 0x5c
 800679e:	f000 f925 	bl	80069ec <memset>
 80067a2:	4b0d      	ldr	r3, [pc, #52]	; (80067d8 <std+0x58>)
 80067a4:	6263      	str	r3, [r4, #36]	; 0x24
 80067a6:	4b0d      	ldr	r3, [pc, #52]	; (80067dc <std+0x5c>)
 80067a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80067aa:	4b0d      	ldr	r3, [pc, #52]	; (80067e0 <std+0x60>)
 80067ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067ae:	4b0d      	ldr	r3, [pc, #52]	; (80067e4 <std+0x64>)
 80067b0:	6323      	str	r3, [r4, #48]	; 0x30
 80067b2:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <std+0x68>)
 80067b4:	6224      	str	r4, [r4, #32]
 80067b6:	429c      	cmp	r4, r3
 80067b8:	d006      	beq.n	80067c8 <std+0x48>
 80067ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80067be:	4294      	cmp	r4, r2
 80067c0:	d002      	beq.n	80067c8 <std+0x48>
 80067c2:	33d0      	adds	r3, #208	; 0xd0
 80067c4:	429c      	cmp	r4, r3
 80067c6:	d105      	bne.n	80067d4 <std+0x54>
 80067c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d0:	f000 b964 	b.w	8006a9c <__retarget_lock_init_recursive>
 80067d4:	bd10      	pop	{r4, pc}
 80067d6:	bf00      	nop
 80067d8:	08008479 	.word	0x08008479
 80067dc:	0800849b 	.word	0x0800849b
 80067e0:	080084d3 	.word	0x080084d3
 80067e4:	080084f7 	.word	0x080084f7
 80067e8:	2000048c 	.word	0x2000048c

080067ec <stdio_exit_handler>:
 80067ec:	4a02      	ldr	r2, [pc, #8]	; (80067f8 <stdio_exit_handler+0xc>)
 80067ee:	4903      	ldr	r1, [pc, #12]	; (80067fc <stdio_exit_handler+0x10>)
 80067f0:	4803      	ldr	r0, [pc, #12]	; (8006800 <stdio_exit_handler+0x14>)
 80067f2:	f000 b869 	b.w	80068c8 <_fwalk_sglue>
 80067f6:	bf00      	nop
 80067f8:	2000000c 	.word	0x2000000c
 80067fc:	08007d19 	.word	0x08007d19
 8006800:	20000018 	.word	0x20000018

08006804 <cleanup_stdio>:
 8006804:	6841      	ldr	r1, [r0, #4]
 8006806:	4b0c      	ldr	r3, [pc, #48]	; (8006838 <cleanup_stdio+0x34>)
 8006808:	4299      	cmp	r1, r3
 800680a:	b510      	push	{r4, lr}
 800680c:	4604      	mov	r4, r0
 800680e:	d001      	beq.n	8006814 <cleanup_stdio+0x10>
 8006810:	f001 fa82 	bl	8007d18 <_fflush_r>
 8006814:	68a1      	ldr	r1, [r4, #8]
 8006816:	4b09      	ldr	r3, [pc, #36]	; (800683c <cleanup_stdio+0x38>)
 8006818:	4299      	cmp	r1, r3
 800681a:	d002      	beq.n	8006822 <cleanup_stdio+0x1e>
 800681c:	4620      	mov	r0, r4
 800681e:	f001 fa7b 	bl	8007d18 <_fflush_r>
 8006822:	68e1      	ldr	r1, [r4, #12]
 8006824:	4b06      	ldr	r3, [pc, #24]	; (8006840 <cleanup_stdio+0x3c>)
 8006826:	4299      	cmp	r1, r3
 8006828:	d004      	beq.n	8006834 <cleanup_stdio+0x30>
 800682a:	4620      	mov	r0, r4
 800682c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006830:	f001 ba72 	b.w	8007d18 <_fflush_r>
 8006834:	bd10      	pop	{r4, pc}
 8006836:	bf00      	nop
 8006838:	2000048c 	.word	0x2000048c
 800683c:	200004f4 	.word	0x200004f4
 8006840:	2000055c 	.word	0x2000055c

08006844 <global_stdio_init.part.0>:
 8006844:	b510      	push	{r4, lr}
 8006846:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <global_stdio_init.part.0+0x30>)
 8006848:	4c0b      	ldr	r4, [pc, #44]	; (8006878 <global_stdio_init.part.0+0x34>)
 800684a:	4a0c      	ldr	r2, [pc, #48]	; (800687c <global_stdio_init.part.0+0x38>)
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	4620      	mov	r0, r4
 8006850:	2200      	movs	r2, #0
 8006852:	2104      	movs	r1, #4
 8006854:	f7ff ff94 	bl	8006780 <std>
 8006858:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800685c:	2201      	movs	r2, #1
 800685e:	2109      	movs	r1, #9
 8006860:	f7ff ff8e 	bl	8006780 <std>
 8006864:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006868:	2202      	movs	r2, #2
 800686a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800686e:	2112      	movs	r1, #18
 8006870:	f7ff bf86 	b.w	8006780 <std>
 8006874:	200005c4 	.word	0x200005c4
 8006878:	2000048c 	.word	0x2000048c
 800687c:	080067ed 	.word	0x080067ed

08006880 <__sfp_lock_acquire>:
 8006880:	4801      	ldr	r0, [pc, #4]	; (8006888 <__sfp_lock_acquire+0x8>)
 8006882:	f000 b90c 	b.w	8006a9e <__retarget_lock_acquire_recursive>
 8006886:	bf00      	nop
 8006888:	200005c9 	.word	0x200005c9

0800688c <__sfp_lock_release>:
 800688c:	4801      	ldr	r0, [pc, #4]	; (8006894 <__sfp_lock_release+0x8>)
 800688e:	f000 b907 	b.w	8006aa0 <__retarget_lock_release_recursive>
 8006892:	bf00      	nop
 8006894:	200005c9 	.word	0x200005c9

08006898 <__sinit>:
 8006898:	b510      	push	{r4, lr}
 800689a:	4604      	mov	r4, r0
 800689c:	f7ff fff0 	bl	8006880 <__sfp_lock_acquire>
 80068a0:	6a23      	ldr	r3, [r4, #32]
 80068a2:	b11b      	cbz	r3, 80068ac <__sinit+0x14>
 80068a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068a8:	f7ff bff0 	b.w	800688c <__sfp_lock_release>
 80068ac:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <__sinit+0x28>)
 80068ae:	6223      	str	r3, [r4, #32]
 80068b0:	4b04      	ldr	r3, [pc, #16]	; (80068c4 <__sinit+0x2c>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1f5      	bne.n	80068a4 <__sinit+0xc>
 80068b8:	f7ff ffc4 	bl	8006844 <global_stdio_init.part.0>
 80068bc:	e7f2      	b.n	80068a4 <__sinit+0xc>
 80068be:	bf00      	nop
 80068c0:	08006805 	.word	0x08006805
 80068c4:	200005c4 	.word	0x200005c4

080068c8 <_fwalk_sglue>:
 80068c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068cc:	4607      	mov	r7, r0
 80068ce:	4688      	mov	r8, r1
 80068d0:	4614      	mov	r4, r2
 80068d2:	2600      	movs	r6, #0
 80068d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068d8:	f1b9 0901 	subs.w	r9, r9, #1
 80068dc:	d505      	bpl.n	80068ea <_fwalk_sglue+0x22>
 80068de:	6824      	ldr	r4, [r4, #0]
 80068e0:	2c00      	cmp	r4, #0
 80068e2:	d1f7      	bne.n	80068d4 <_fwalk_sglue+0xc>
 80068e4:	4630      	mov	r0, r6
 80068e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ea:	89ab      	ldrh	r3, [r5, #12]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d907      	bls.n	8006900 <_fwalk_sglue+0x38>
 80068f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068f4:	3301      	adds	r3, #1
 80068f6:	d003      	beq.n	8006900 <_fwalk_sglue+0x38>
 80068f8:	4629      	mov	r1, r5
 80068fa:	4638      	mov	r0, r7
 80068fc:	47c0      	blx	r8
 80068fe:	4306      	orrs	r6, r0
 8006900:	3568      	adds	r5, #104	; 0x68
 8006902:	e7e9      	b.n	80068d8 <_fwalk_sglue+0x10>

08006904 <__swhatbuf_r>:
 8006904:	b570      	push	{r4, r5, r6, lr}
 8006906:	460c      	mov	r4, r1
 8006908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800690c:	2900      	cmp	r1, #0
 800690e:	b096      	sub	sp, #88	; 0x58
 8006910:	4615      	mov	r5, r2
 8006912:	461e      	mov	r6, r3
 8006914:	da0d      	bge.n	8006932 <__swhatbuf_r+0x2e>
 8006916:	89a3      	ldrh	r3, [r4, #12]
 8006918:	f013 0f80 	tst.w	r3, #128	; 0x80
 800691c:	f04f 0100 	mov.w	r1, #0
 8006920:	bf0c      	ite	eq
 8006922:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006926:	2340      	movne	r3, #64	; 0x40
 8006928:	2000      	movs	r0, #0
 800692a:	6031      	str	r1, [r6, #0]
 800692c:	602b      	str	r3, [r5, #0]
 800692e:	b016      	add	sp, #88	; 0x58
 8006930:	bd70      	pop	{r4, r5, r6, pc}
 8006932:	466a      	mov	r2, sp
 8006934:	f000 f866 	bl	8006a04 <_fstat_r>
 8006938:	2800      	cmp	r0, #0
 800693a:	dbec      	blt.n	8006916 <__swhatbuf_r+0x12>
 800693c:	9901      	ldr	r1, [sp, #4]
 800693e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006942:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006946:	4259      	negs	r1, r3
 8006948:	4159      	adcs	r1, r3
 800694a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800694e:	e7eb      	b.n	8006928 <__swhatbuf_r+0x24>

08006950 <__smakebuf_r>:
 8006950:	898b      	ldrh	r3, [r1, #12]
 8006952:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006954:	079d      	lsls	r5, r3, #30
 8006956:	4606      	mov	r6, r0
 8006958:	460c      	mov	r4, r1
 800695a:	d507      	bpl.n	800696c <__smakebuf_r+0x1c>
 800695c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006960:	6023      	str	r3, [r4, #0]
 8006962:	6123      	str	r3, [r4, #16]
 8006964:	2301      	movs	r3, #1
 8006966:	6163      	str	r3, [r4, #20]
 8006968:	b002      	add	sp, #8
 800696a:	bd70      	pop	{r4, r5, r6, pc}
 800696c:	ab01      	add	r3, sp, #4
 800696e:	466a      	mov	r2, sp
 8006970:	f7ff ffc8 	bl	8006904 <__swhatbuf_r>
 8006974:	9900      	ldr	r1, [sp, #0]
 8006976:	4605      	mov	r5, r0
 8006978:	4630      	mov	r0, r6
 800697a:	f001 f8c7 	bl	8007b0c <_malloc_r>
 800697e:	b948      	cbnz	r0, 8006994 <__smakebuf_r+0x44>
 8006980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006984:	059a      	lsls	r2, r3, #22
 8006986:	d4ef      	bmi.n	8006968 <__smakebuf_r+0x18>
 8006988:	f023 0303 	bic.w	r3, r3, #3
 800698c:	f043 0302 	orr.w	r3, r3, #2
 8006990:	81a3      	strh	r3, [r4, #12]
 8006992:	e7e3      	b.n	800695c <__smakebuf_r+0xc>
 8006994:	89a3      	ldrh	r3, [r4, #12]
 8006996:	6020      	str	r0, [r4, #0]
 8006998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800699c:	81a3      	strh	r3, [r4, #12]
 800699e:	9b00      	ldr	r3, [sp, #0]
 80069a0:	6163      	str	r3, [r4, #20]
 80069a2:	9b01      	ldr	r3, [sp, #4]
 80069a4:	6120      	str	r0, [r4, #16]
 80069a6:	b15b      	cbz	r3, 80069c0 <__smakebuf_r+0x70>
 80069a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069ac:	4630      	mov	r0, r6
 80069ae:	f000 f83b 	bl	8006a28 <_isatty_r>
 80069b2:	b128      	cbz	r0, 80069c0 <__smakebuf_r+0x70>
 80069b4:	89a3      	ldrh	r3, [r4, #12]
 80069b6:	f023 0303 	bic.w	r3, r3, #3
 80069ba:	f043 0301 	orr.w	r3, r3, #1
 80069be:	81a3      	strh	r3, [r4, #12]
 80069c0:	89a3      	ldrh	r3, [r4, #12]
 80069c2:	431d      	orrs	r5, r3
 80069c4:	81a5      	strh	r5, [r4, #12]
 80069c6:	e7cf      	b.n	8006968 <__smakebuf_r+0x18>

080069c8 <iprintf>:
 80069c8:	b40f      	push	{r0, r1, r2, r3}
 80069ca:	b507      	push	{r0, r1, r2, lr}
 80069cc:	4906      	ldr	r1, [pc, #24]	; (80069e8 <iprintf+0x20>)
 80069ce:	ab04      	add	r3, sp, #16
 80069d0:	6808      	ldr	r0, [r1, #0]
 80069d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069d6:	6881      	ldr	r1, [r0, #8]
 80069d8:	9301      	str	r3, [sp, #4]
 80069da:	f000 ff55 	bl	8007888 <_vfiprintf_r>
 80069de:	b003      	add	sp, #12
 80069e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80069e4:	b004      	add	sp, #16
 80069e6:	4770      	bx	lr
 80069e8:	20000064 	.word	0x20000064

080069ec <memset>:
 80069ec:	4402      	add	r2, r0
 80069ee:	4603      	mov	r3, r0
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d100      	bne.n	80069f6 <memset+0xa>
 80069f4:	4770      	bx	lr
 80069f6:	f803 1b01 	strb.w	r1, [r3], #1
 80069fa:	e7f9      	b.n	80069f0 <memset+0x4>

080069fc <_localeconv_r>:
 80069fc:	4800      	ldr	r0, [pc, #0]	; (8006a00 <_localeconv_r+0x4>)
 80069fe:	4770      	bx	lr
 8006a00:	20000158 	.word	0x20000158

08006a04 <_fstat_r>:
 8006a04:	b538      	push	{r3, r4, r5, lr}
 8006a06:	4d07      	ldr	r5, [pc, #28]	; (8006a24 <_fstat_r+0x20>)
 8006a08:	2300      	movs	r3, #0
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	4608      	mov	r0, r1
 8006a0e:	4611      	mov	r1, r2
 8006a10:	602b      	str	r3, [r5, #0]
 8006a12:	f7fa ffd8 	bl	80019c6 <_fstat>
 8006a16:	1c43      	adds	r3, r0, #1
 8006a18:	d102      	bne.n	8006a20 <_fstat_r+0x1c>
 8006a1a:	682b      	ldr	r3, [r5, #0]
 8006a1c:	b103      	cbz	r3, 8006a20 <_fstat_r+0x1c>
 8006a1e:	6023      	str	r3, [r4, #0]
 8006a20:	bd38      	pop	{r3, r4, r5, pc}
 8006a22:	bf00      	nop
 8006a24:	200005d4 	.word	0x200005d4

08006a28 <_isatty_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4d06      	ldr	r5, [pc, #24]	; (8006a44 <_isatty_r+0x1c>)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	4604      	mov	r4, r0
 8006a30:	4608      	mov	r0, r1
 8006a32:	602b      	str	r3, [r5, #0]
 8006a34:	f7fa ffd7 	bl	80019e6 <_isatty>
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	d102      	bne.n	8006a42 <_isatty_r+0x1a>
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	b103      	cbz	r3, 8006a42 <_isatty_r+0x1a>
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	bd38      	pop	{r3, r4, r5, pc}
 8006a44:	200005d4 	.word	0x200005d4

08006a48 <__errno>:
 8006a48:	4b01      	ldr	r3, [pc, #4]	; (8006a50 <__errno+0x8>)
 8006a4a:	6818      	ldr	r0, [r3, #0]
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	20000064 	.word	0x20000064

08006a54 <__libc_init_array>:
 8006a54:	b570      	push	{r4, r5, r6, lr}
 8006a56:	4d0d      	ldr	r5, [pc, #52]	; (8006a8c <__libc_init_array+0x38>)
 8006a58:	4c0d      	ldr	r4, [pc, #52]	; (8006a90 <__libc_init_array+0x3c>)
 8006a5a:	1b64      	subs	r4, r4, r5
 8006a5c:	10a4      	asrs	r4, r4, #2
 8006a5e:	2600      	movs	r6, #0
 8006a60:	42a6      	cmp	r6, r4
 8006a62:	d109      	bne.n	8006a78 <__libc_init_array+0x24>
 8006a64:	4d0b      	ldr	r5, [pc, #44]	; (8006a94 <__libc_init_array+0x40>)
 8006a66:	4c0c      	ldr	r4, [pc, #48]	; (8006a98 <__libc_init_array+0x44>)
 8006a68:	f001 fef2 	bl	8008850 <_init>
 8006a6c:	1b64      	subs	r4, r4, r5
 8006a6e:	10a4      	asrs	r4, r4, #2
 8006a70:	2600      	movs	r6, #0
 8006a72:	42a6      	cmp	r6, r4
 8006a74:	d105      	bne.n	8006a82 <__libc_init_array+0x2e>
 8006a76:	bd70      	pop	{r4, r5, r6, pc}
 8006a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a7c:	4798      	blx	r3
 8006a7e:	3601      	adds	r6, #1
 8006a80:	e7ee      	b.n	8006a60 <__libc_init_array+0xc>
 8006a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a86:	4798      	blx	r3
 8006a88:	3601      	adds	r6, #1
 8006a8a:	e7f2      	b.n	8006a72 <__libc_init_array+0x1e>
 8006a8c:	08008c2c 	.word	0x08008c2c
 8006a90:	08008c2c 	.word	0x08008c2c
 8006a94:	08008c2c 	.word	0x08008c2c
 8006a98:	08008c30 	.word	0x08008c30

08006a9c <__retarget_lock_init_recursive>:
 8006a9c:	4770      	bx	lr

08006a9e <__retarget_lock_acquire_recursive>:
 8006a9e:	4770      	bx	lr

08006aa0 <__retarget_lock_release_recursive>:
 8006aa0:	4770      	bx	lr

08006aa2 <quorem>:
 8006aa2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa6:	6903      	ldr	r3, [r0, #16]
 8006aa8:	690c      	ldr	r4, [r1, #16]
 8006aaa:	42a3      	cmp	r3, r4
 8006aac:	4607      	mov	r7, r0
 8006aae:	db7e      	blt.n	8006bae <quorem+0x10c>
 8006ab0:	3c01      	subs	r4, #1
 8006ab2:	f101 0814 	add.w	r8, r1, #20
 8006ab6:	f100 0514 	add.w	r5, r0, #20
 8006aba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006abe:	9301      	str	r3, [sp, #4]
 8006ac0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ac4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	429a      	cmp	r2, r3
 8006acc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ad0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ad4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ad8:	d331      	bcc.n	8006b3e <quorem+0x9c>
 8006ada:	f04f 0e00 	mov.w	lr, #0
 8006ade:	4640      	mov	r0, r8
 8006ae0:	46ac      	mov	ip, r5
 8006ae2:	46f2      	mov	sl, lr
 8006ae4:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ae8:	b293      	uxth	r3, r2
 8006aea:	fb06 e303 	mla	r3, r6, r3, lr
 8006aee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006af2:	0c1a      	lsrs	r2, r3, #16
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	ebaa 0303 	sub.w	r3, sl, r3
 8006afa:	f8dc a000 	ldr.w	sl, [ip]
 8006afe:	fa13 f38a 	uxtah	r3, r3, sl
 8006b02:	fb06 220e 	mla	r2, r6, lr, r2
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	9b00      	ldr	r3, [sp, #0]
 8006b0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b0e:	b292      	uxth	r2, r2
 8006b10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006b14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b18:	f8bd 3000 	ldrh.w	r3, [sp]
 8006b1c:	4581      	cmp	r9, r0
 8006b1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b22:	f84c 3b04 	str.w	r3, [ip], #4
 8006b26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b2a:	d2db      	bcs.n	8006ae4 <quorem+0x42>
 8006b2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b30:	b92b      	cbnz	r3, 8006b3e <quorem+0x9c>
 8006b32:	9b01      	ldr	r3, [sp, #4]
 8006b34:	3b04      	subs	r3, #4
 8006b36:	429d      	cmp	r5, r3
 8006b38:	461a      	mov	r2, r3
 8006b3a:	d32c      	bcc.n	8006b96 <quorem+0xf4>
 8006b3c:	613c      	str	r4, [r7, #16]
 8006b3e:	4638      	mov	r0, r7
 8006b40:	f001 fb9a 	bl	8008278 <__mcmp>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	db22      	blt.n	8006b8e <quorem+0xec>
 8006b48:	3601      	adds	r6, #1
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b52:	f8d1 c000 	ldr.w	ip, [r1]
 8006b56:	b293      	uxth	r3, r2
 8006b58:	1ac3      	subs	r3, r0, r3
 8006b5a:	0c12      	lsrs	r2, r2, #16
 8006b5c:	fa13 f38c 	uxtah	r3, r3, ip
 8006b60:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006b64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b6e:	45c1      	cmp	r9, r8
 8006b70:	f841 3b04 	str.w	r3, [r1], #4
 8006b74:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b78:	d2e9      	bcs.n	8006b4e <quorem+0xac>
 8006b7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b82:	b922      	cbnz	r2, 8006b8e <quorem+0xec>
 8006b84:	3b04      	subs	r3, #4
 8006b86:	429d      	cmp	r5, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	d30a      	bcc.n	8006ba2 <quorem+0x100>
 8006b8c:	613c      	str	r4, [r7, #16]
 8006b8e:	4630      	mov	r0, r6
 8006b90:	b003      	add	sp, #12
 8006b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b96:	6812      	ldr	r2, [r2, #0]
 8006b98:	3b04      	subs	r3, #4
 8006b9a:	2a00      	cmp	r2, #0
 8006b9c:	d1ce      	bne.n	8006b3c <quorem+0x9a>
 8006b9e:	3c01      	subs	r4, #1
 8006ba0:	e7c9      	b.n	8006b36 <quorem+0x94>
 8006ba2:	6812      	ldr	r2, [r2, #0]
 8006ba4:	3b04      	subs	r3, #4
 8006ba6:	2a00      	cmp	r2, #0
 8006ba8:	d1f0      	bne.n	8006b8c <quorem+0xea>
 8006baa:	3c01      	subs	r4, #1
 8006bac:	e7eb      	b.n	8006b86 <quorem+0xe4>
 8006bae:	2000      	movs	r0, #0
 8006bb0:	e7ee      	b.n	8006b90 <quorem+0xee>
 8006bb2:	0000      	movs	r0, r0
 8006bb4:	0000      	movs	r0, r0
	...

08006bb8 <_dtoa_r>:
 8006bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	ed2d 8b04 	vpush	{d8-d9}
 8006bc0:	69c5      	ldr	r5, [r0, #28]
 8006bc2:	b093      	sub	sp, #76	; 0x4c
 8006bc4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006bc8:	ec57 6b10 	vmov	r6, r7, d0
 8006bcc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006bd0:	9107      	str	r1, [sp, #28]
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	920a      	str	r2, [sp, #40]	; 0x28
 8006bd6:	930d      	str	r3, [sp, #52]	; 0x34
 8006bd8:	b975      	cbnz	r5, 8006bf8 <_dtoa_r+0x40>
 8006bda:	2010      	movs	r0, #16
 8006bdc:	f000 ff6e 	bl	8007abc <malloc>
 8006be0:	4602      	mov	r2, r0
 8006be2:	61e0      	str	r0, [r4, #28]
 8006be4:	b920      	cbnz	r0, 8006bf0 <_dtoa_r+0x38>
 8006be6:	4bae      	ldr	r3, [pc, #696]	; (8006ea0 <_dtoa_r+0x2e8>)
 8006be8:	21ef      	movs	r1, #239	; 0xef
 8006bea:	48ae      	ldr	r0, [pc, #696]	; (8006ea4 <_dtoa_r+0x2ec>)
 8006bec:	f001 fd80 	bl	80086f0 <__assert_func>
 8006bf0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006bf4:	6005      	str	r5, [r0, #0]
 8006bf6:	60c5      	str	r5, [r0, #12]
 8006bf8:	69e3      	ldr	r3, [r4, #28]
 8006bfa:	6819      	ldr	r1, [r3, #0]
 8006bfc:	b151      	cbz	r1, 8006c14 <_dtoa_r+0x5c>
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	604a      	str	r2, [r1, #4]
 8006c02:	2301      	movs	r3, #1
 8006c04:	4093      	lsls	r3, r2
 8006c06:	608b      	str	r3, [r1, #8]
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f001 f8f9 	bl	8007e00 <_Bfree>
 8006c0e:	69e3      	ldr	r3, [r4, #28]
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	1e3b      	subs	r3, r7, #0
 8006c16:	bfbb      	ittet	lt
 8006c18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c1c:	9303      	strlt	r3, [sp, #12]
 8006c1e:	2300      	movge	r3, #0
 8006c20:	2201      	movlt	r2, #1
 8006c22:	bfac      	ite	ge
 8006c24:	f8c8 3000 	strge.w	r3, [r8]
 8006c28:	f8c8 2000 	strlt.w	r2, [r8]
 8006c2c:	4b9e      	ldr	r3, [pc, #632]	; (8006ea8 <_dtoa_r+0x2f0>)
 8006c2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006c32:	ea33 0308 	bics.w	r3, r3, r8
 8006c36:	d11b      	bne.n	8006c70 <_dtoa_r+0xb8>
 8006c38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c3e:	6013      	str	r3, [r2, #0]
 8006c40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006c44:	4333      	orrs	r3, r6
 8006c46:	f000 8593 	beq.w	8007770 <_dtoa_r+0xbb8>
 8006c4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c4c:	b963      	cbnz	r3, 8006c68 <_dtoa_r+0xb0>
 8006c4e:	4b97      	ldr	r3, [pc, #604]	; (8006eac <_dtoa_r+0x2f4>)
 8006c50:	e027      	b.n	8006ca2 <_dtoa_r+0xea>
 8006c52:	4b97      	ldr	r3, [pc, #604]	; (8006eb0 <_dtoa_r+0x2f8>)
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	3308      	adds	r3, #8
 8006c58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	9800      	ldr	r0, [sp, #0]
 8006c5e:	b013      	add	sp, #76	; 0x4c
 8006c60:	ecbd 8b04 	vpop	{d8-d9}
 8006c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c68:	4b90      	ldr	r3, [pc, #576]	; (8006eac <_dtoa_r+0x2f4>)
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	3303      	adds	r3, #3
 8006c6e:	e7f3      	b.n	8006c58 <_dtoa_r+0xa0>
 8006c70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c74:	2200      	movs	r2, #0
 8006c76:	ec51 0b17 	vmov	r0, r1, d7
 8006c7a:	eeb0 8a47 	vmov.f32	s16, s14
 8006c7e:	eef0 8a67 	vmov.f32	s17, s15
 8006c82:	2300      	movs	r3, #0
 8006c84:	f7f9 ff48 	bl	8000b18 <__aeabi_dcmpeq>
 8006c88:	4681      	mov	r9, r0
 8006c8a:	b160      	cbz	r0, 8006ca6 <_dtoa_r+0xee>
 8006c8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c8e:	2301      	movs	r3, #1
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 8568 	beq.w	800776a <_dtoa_r+0xbb2>
 8006c9a:	4b86      	ldr	r3, [pc, #536]	; (8006eb4 <_dtoa_r+0x2fc>)
 8006c9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	e7da      	b.n	8006c5c <_dtoa_r+0xa4>
 8006ca6:	aa10      	add	r2, sp, #64	; 0x40
 8006ca8:	a911      	add	r1, sp, #68	; 0x44
 8006caa:	4620      	mov	r0, r4
 8006cac:	eeb0 0a48 	vmov.f32	s0, s16
 8006cb0:	eef0 0a68 	vmov.f32	s1, s17
 8006cb4:	f001 fb86 	bl	80083c4 <__d2b>
 8006cb8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006cbc:	4682      	mov	sl, r0
 8006cbe:	2d00      	cmp	r5, #0
 8006cc0:	d07f      	beq.n	8006dc2 <_dtoa_r+0x20a>
 8006cc2:	ee18 3a90 	vmov	r3, s17
 8006cc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006cce:	ec51 0b18 	vmov	r0, r1, d8
 8006cd2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006cd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006cda:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006cde:	4619      	mov	r1, r3
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	4b75      	ldr	r3, [pc, #468]	; (8006eb8 <_dtoa_r+0x300>)
 8006ce4:	f7f9 faf8 	bl	80002d8 <__aeabi_dsub>
 8006ce8:	a367      	add	r3, pc, #412	; (adr r3, 8006e88 <_dtoa_r+0x2d0>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f7f9 fcab 	bl	8000648 <__aeabi_dmul>
 8006cf2:	a367      	add	r3, pc, #412	; (adr r3, 8006e90 <_dtoa_r+0x2d8>)
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	f7f9 faf0 	bl	80002dc <__adddf3>
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	4628      	mov	r0, r5
 8006d00:	460f      	mov	r7, r1
 8006d02:	f7f9 fc37 	bl	8000574 <__aeabi_i2d>
 8006d06:	a364      	add	r3, pc, #400	; (adr r3, 8006e98 <_dtoa_r+0x2e0>)
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f7f9 fc9c 	bl	8000648 <__aeabi_dmul>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4630      	mov	r0, r6
 8006d16:	4639      	mov	r1, r7
 8006d18:	f7f9 fae0 	bl	80002dc <__adddf3>
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	460f      	mov	r7, r1
 8006d20:	f7f9 ff42 	bl	8000ba8 <__aeabi_d2iz>
 8006d24:	2200      	movs	r2, #0
 8006d26:	4683      	mov	fp, r0
 8006d28:	2300      	movs	r3, #0
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	4639      	mov	r1, r7
 8006d2e:	f7f9 fefd 	bl	8000b2c <__aeabi_dcmplt>
 8006d32:	b148      	cbz	r0, 8006d48 <_dtoa_r+0x190>
 8006d34:	4658      	mov	r0, fp
 8006d36:	f7f9 fc1d 	bl	8000574 <__aeabi_i2d>
 8006d3a:	4632      	mov	r2, r6
 8006d3c:	463b      	mov	r3, r7
 8006d3e:	f7f9 feeb 	bl	8000b18 <__aeabi_dcmpeq>
 8006d42:	b908      	cbnz	r0, 8006d48 <_dtoa_r+0x190>
 8006d44:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006d48:	f1bb 0f16 	cmp.w	fp, #22
 8006d4c:	d857      	bhi.n	8006dfe <_dtoa_r+0x246>
 8006d4e:	4b5b      	ldr	r3, [pc, #364]	; (8006ebc <_dtoa_r+0x304>)
 8006d50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d58:	ec51 0b18 	vmov	r0, r1, d8
 8006d5c:	f7f9 fee6 	bl	8000b2c <__aeabi_dcmplt>
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d04e      	beq.n	8006e02 <_dtoa_r+0x24a>
 8006d64:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006d68:	2300      	movs	r3, #0
 8006d6a:	930c      	str	r3, [sp, #48]	; 0x30
 8006d6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d6e:	1b5b      	subs	r3, r3, r5
 8006d70:	1e5a      	subs	r2, r3, #1
 8006d72:	bf45      	ittet	mi
 8006d74:	f1c3 0301 	rsbmi	r3, r3, #1
 8006d78:	9305      	strmi	r3, [sp, #20]
 8006d7a:	2300      	movpl	r3, #0
 8006d7c:	2300      	movmi	r3, #0
 8006d7e:	9206      	str	r2, [sp, #24]
 8006d80:	bf54      	ite	pl
 8006d82:	9305      	strpl	r3, [sp, #20]
 8006d84:	9306      	strmi	r3, [sp, #24]
 8006d86:	f1bb 0f00 	cmp.w	fp, #0
 8006d8a:	db3c      	blt.n	8006e06 <_dtoa_r+0x24e>
 8006d8c:	9b06      	ldr	r3, [sp, #24]
 8006d8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006d92:	445b      	add	r3, fp
 8006d94:	9306      	str	r3, [sp, #24]
 8006d96:	2300      	movs	r3, #0
 8006d98:	9308      	str	r3, [sp, #32]
 8006d9a:	9b07      	ldr	r3, [sp, #28]
 8006d9c:	2b09      	cmp	r3, #9
 8006d9e:	d868      	bhi.n	8006e72 <_dtoa_r+0x2ba>
 8006da0:	2b05      	cmp	r3, #5
 8006da2:	bfc4      	itt	gt
 8006da4:	3b04      	subgt	r3, #4
 8006da6:	9307      	strgt	r3, [sp, #28]
 8006da8:	9b07      	ldr	r3, [sp, #28]
 8006daa:	f1a3 0302 	sub.w	r3, r3, #2
 8006dae:	bfcc      	ite	gt
 8006db0:	2500      	movgt	r5, #0
 8006db2:	2501      	movle	r5, #1
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	f200 8085 	bhi.w	8006ec4 <_dtoa_r+0x30c>
 8006dba:	e8df f003 	tbb	[pc, r3]
 8006dbe:	3b2e      	.short	0x3b2e
 8006dc0:	5839      	.short	0x5839
 8006dc2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006dc6:	441d      	add	r5, r3
 8006dc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006dcc:	2b20      	cmp	r3, #32
 8006dce:	bfc1      	itttt	gt
 8006dd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006dd4:	fa08 f803 	lslgt.w	r8, r8, r3
 8006dd8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006ddc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006de0:	bfd6      	itet	le
 8006de2:	f1c3 0320 	rsble	r3, r3, #32
 8006de6:	ea48 0003 	orrgt.w	r0, r8, r3
 8006dea:	fa06 f003 	lslle.w	r0, r6, r3
 8006dee:	f7f9 fbb1 	bl	8000554 <__aeabi_ui2d>
 8006df2:	2201      	movs	r2, #1
 8006df4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006df8:	3d01      	subs	r5, #1
 8006dfa:	920e      	str	r2, [sp, #56]	; 0x38
 8006dfc:	e76f      	b.n	8006cde <_dtoa_r+0x126>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e7b3      	b.n	8006d6a <_dtoa_r+0x1b2>
 8006e02:	900c      	str	r0, [sp, #48]	; 0x30
 8006e04:	e7b2      	b.n	8006d6c <_dtoa_r+0x1b4>
 8006e06:	9b05      	ldr	r3, [sp, #20]
 8006e08:	eba3 030b 	sub.w	r3, r3, fp
 8006e0c:	9305      	str	r3, [sp, #20]
 8006e0e:	f1cb 0300 	rsb	r3, fp, #0
 8006e12:	9308      	str	r3, [sp, #32]
 8006e14:	2300      	movs	r3, #0
 8006e16:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e18:	e7bf      	b.n	8006d9a <_dtoa_r+0x1e2>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	dc52      	bgt.n	8006eca <_dtoa_r+0x312>
 8006e24:	2301      	movs	r3, #1
 8006e26:	9301      	str	r3, [sp, #4]
 8006e28:	9304      	str	r3, [sp, #16]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	920a      	str	r2, [sp, #40]	; 0x28
 8006e2e:	e00b      	b.n	8006e48 <_dtoa_r+0x290>
 8006e30:	2301      	movs	r3, #1
 8006e32:	e7f3      	b.n	8006e1c <_dtoa_r+0x264>
 8006e34:	2300      	movs	r3, #0
 8006e36:	9309      	str	r3, [sp, #36]	; 0x24
 8006e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e3a:	445b      	add	r3, fp
 8006e3c:	9301      	str	r3, [sp, #4]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	9304      	str	r3, [sp, #16]
 8006e44:	bfb8      	it	lt
 8006e46:	2301      	movlt	r3, #1
 8006e48:	69e0      	ldr	r0, [r4, #28]
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	2204      	movs	r2, #4
 8006e4e:	f102 0614 	add.w	r6, r2, #20
 8006e52:	429e      	cmp	r6, r3
 8006e54:	d93d      	bls.n	8006ed2 <_dtoa_r+0x31a>
 8006e56:	6041      	str	r1, [r0, #4]
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f000 ff91 	bl	8007d80 <_Balloc>
 8006e5e:	9000      	str	r0, [sp, #0]
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d139      	bne.n	8006ed8 <_dtoa_r+0x320>
 8006e64:	4b16      	ldr	r3, [pc, #88]	; (8006ec0 <_dtoa_r+0x308>)
 8006e66:	4602      	mov	r2, r0
 8006e68:	f240 11af 	movw	r1, #431	; 0x1af
 8006e6c:	e6bd      	b.n	8006bea <_dtoa_r+0x32>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e7e1      	b.n	8006e36 <_dtoa_r+0x27e>
 8006e72:	2501      	movs	r5, #1
 8006e74:	2300      	movs	r3, #0
 8006e76:	9307      	str	r3, [sp, #28]
 8006e78:	9509      	str	r5, [sp, #36]	; 0x24
 8006e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e7e:	9301      	str	r3, [sp, #4]
 8006e80:	9304      	str	r3, [sp, #16]
 8006e82:	2200      	movs	r2, #0
 8006e84:	2312      	movs	r3, #18
 8006e86:	e7d1      	b.n	8006e2c <_dtoa_r+0x274>
 8006e88:	636f4361 	.word	0x636f4361
 8006e8c:	3fd287a7 	.word	0x3fd287a7
 8006e90:	8b60c8b3 	.word	0x8b60c8b3
 8006e94:	3fc68a28 	.word	0x3fc68a28
 8006e98:	509f79fb 	.word	0x509f79fb
 8006e9c:	3fd34413 	.word	0x3fd34413
 8006ea0:	080088f5 	.word	0x080088f5
 8006ea4:	0800890c 	.word	0x0800890c
 8006ea8:	7ff00000 	.word	0x7ff00000
 8006eac:	080088f1 	.word	0x080088f1
 8006eb0:	080088e8 	.word	0x080088e8
 8006eb4:	080088c5 	.word	0x080088c5
 8006eb8:	3ff80000 	.word	0x3ff80000
 8006ebc:	08008a08 	.word	0x08008a08
 8006ec0:	08008964 	.word	0x08008964
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ec8:	e7d7      	b.n	8006e7a <_dtoa_r+0x2c2>
 8006eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ecc:	9301      	str	r3, [sp, #4]
 8006ece:	9304      	str	r3, [sp, #16]
 8006ed0:	e7ba      	b.n	8006e48 <_dtoa_r+0x290>
 8006ed2:	3101      	adds	r1, #1
 8006ed4:	0052      	lsls	r2, r2, #1
 8006ed6:	e7ba      	b.n	8006e4e <_dtoa_r+0x296>
 8006ed8:	69e3      	ldr	r3, [r4, #28]
 8006eda:	9a00      	ldr	r2, [sp, #0]
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	9b04      	ldr	r3, [sp, #16]
 8006ee0:	2b0e      	cmp	r3, #14
 8006ee2:	f200 80a8 	bhi.w	8007036 <_dtoa_r+0x47e>
 8006ee6:	2d00      	cmp	r5, #0
 8006ee8:	f000 80a5 	beq.w	8007036 <_dtoa_r+0x47e>
 8006eec:	f1bb 0f00 	cmp.w	fp, #0
 8006ef0:	dd38      	ble.n	8006f64 <_dtoa_r+0x3ac>
 8006ef2:	4bc0      	ldr	r3, [pc, #768]	; (80071f4 <_dtoa_r+0x63c>)
 8006ef4:	f00b 020f 	and.w	r2, fp, #15
 8006ef8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006efc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006f00:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006f04:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006f08:	d019      	beq.n	8006f3e <_dtoa_r+0x386>
 8006f0a:	4bbb      	ldr	r3, [pc, #748]	; (80071f8 <_dtoa_r+0x640>)
 8006f0c:	ec51 0b18 	vmov	r0, r1, d8
 8006f10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f14:	f7f9 fcc2 	bl	800089c <__aeabi_ddiv>
 8006f18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f1c:	f008 080f 	and.w	r8, r8, #15
 8006f20:	2503      	movs	r5, #3
 8006f22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80071f8 <_dtoa_r+0x640>
 8006f26:	f1b8 0f00 	cmp.w	r8, #0
 8006f2a:	d10a      	bne.n	8006f42 <_dtoa_r+0x38a>
 8006f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f30:	4632      	mov	r2, r6
 8006f32:	463b      	mov	r3, r7
 8006f34:	f7f9 fcb2 	bl	800089c <__aeabi_ddiv>
 8006f38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f3c:	e02b      	b.n	8006f96 <_dtoa_r+0x3de>
 8006f3e:	2502      	movs	r5, #2
 8006f40:	e7ef      	b.n	8006f22 <_dtoa_r+0x36a>
 8006f42:	f018 0f01 	tst.w	r8, #1
 8006f46:	d008      	beq.n	8006f5a <_dtoa_r+0x3a2>
 8006f48:	4630      	mov	r0, r6
 8006f4a:	4639      	mov	r1, r7
 8006f4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006f50:	f7f9 fb7a 	bl	8000648 <__aeabi_dmul>
 8006f54:	3501      	adds	r5, #1
 8006f56:	4606      	mov	r6, r0
 8006f58:	460f      	mov	r7, r1
 8006f5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006f5e:	f109 0908 	add.w	r9, r9, #8
 8006f62:	e7e0      	b.n	8006f26 <_dtoa_r+0x36e>
 8006f64:	f000 809f 	beq.w	80070a6 <_dtoa_r+0x4ee>
 8006f68:	f1cb 0600 	rsb	r6, fp, #0
 8006f6c:	4ba1      	ldr	r3, [pc, #644]	; (80071f4 <_dtoa_r+0x63c>)
 8006f6e:	4fa2      	ldr	r7, [pc, #648]	; (80071f8 <_dtoa_r+0x640>)
 8006f70:	f006 020f 	and.w	r2, r6, #15
 8006f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7c:	ec51 0b18 	vmov	r0, r1, d8
 8006f80:	f7f9 fb62 	bl	8000648 <__aeabi_dmul>
 8006f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f88:	1136      	asrs	r6, r6, #4
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	2502      	movs	r5, #2
 8006f8e:	2e00      	cmp	r6, #0
 8006f90:	d17e      	bne.n	8007090 <_dtoa_r+0x4d8>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1d0      	bne.n	8006f38 <_dtoa_r+0x380>
 8006f96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 8084 	beq.w	80070aa <_dtoa_r+0x4f2>
 8006fa2:	4b96      	ldr	r3, [pc, #600]	; (80071fc <_dtoa_r+0x644>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	4640      	mov	r0, r8
 8006fa8:	4649      	mov	r1, r9
 8006faa:	f7f9 fdbf 	bl	8000b2c <__aeabi_dcmplt>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d07b      	beq.n	80070aa <_dtoa_r+0x4f2>
 8006fb2:	9b04      	ldr	r3, [sp, #16]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d078      	beq.n	80070aa <_dtoa_r+0x4f2>
 8006fb8:	9b01      	ldr	r3, [sp, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	dd39      	ble.n	8007032 <_dtoa_r+0x47a>
 8006fbe:	4b90      	ldr	r3, [pc, #576]	; (8007200 <_dtoa_r+0x648>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	4640      	mov	r0, r8
 8006fc4:	4649      	mov	r1, r9
 8006fc6:	f7f9 fb3f 	bl	8000648 <__aeabi_dmul>
 8006fca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fce:	9e01      	ldr	r6, [sp, #4]
 8006fd0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006fd4:	3501      	adds	r5, #1
 8006fd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006fda:	4628      	mov	r0, r5
 8006fdc:	f7f9 faca 	bl	8000574 <__aeabi_i2d>
 8006fe0:	4642      	mov	r2, r8
 8006fe2:	464b      	mov	r3, r9
 8006fe4:	f7f9 fb30 	bl	8000648 <__aeabi_dmul>
 8006fe8:	4b86      	ldr	r3, [pc, #536]	; (8007204 <_dtoa_r+0x64c>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	f7f9 f976 	bl	80002dc <__adddf3>
 8006ff0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ff8:	9303      	str	r3, [sp, #12]
 8006ffa:	2e00      	cmp	r6, #0
 8006ffc:	d158      	bne.n	80070b0 <_dtoa_r+0x4f8>
 8006ffe:	4b82      	ldr	r3, [pc, #520]	; (8007208 <_dtoa_r+0x650>)
 8007000:	2200      	movs	r2, #0
 8007002:	4640      	mov	r0, r8
 8007004:	4649      	mov	r1, r9
 8007006:	f7f9 f967 	bl	80002d8 <__aeabi_dsub>
 800700a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800700e:	4680      	mov	r8, r0
 8007010:	4689      	mov	r9, r1
 8007012:	f7f9 fda9 	bl	8000b68 <__aeabi_dcmpgt>
 8007016:	2800      	cmp	r0, #0
 8007018:	f040 8296 	bne.w	8007548 <_dtoa_r+0x990>
 800701c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007020:	4640      	mov	r0, r8
 8007022:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007026:	4649      	mov	r1, r9
 8007028:	f7f9 fd80 	bl	8000b2c <__aeabi_dcmplt>
 800702c:	2800      	cmp	r0, #0
 800702e:	f040 8289 	bne.w	8007544 <_dtoa_r+0x98c>
 8007032:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007038:	2b00      	cmp	r3, #0
 800703a:	f2c0 814e 	blt.w	80072da <_dtoa_r+0x722>
 800703e:	f1bb 0f0e 	cmp.w	fp, #14
 8007042:	f300 814a 	bgt.w	80072da <_dtoa_r+0x722>
 8007046:	4b6b      	ldr	r3, [pc, #428]	; (80071f4 <_dtoa_r+0x63c>)
 8007048:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800704c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007052:	2b00      	cmp	r3, #0
 8007054:	f280 80dc 	bge.w	8007210 <_dtoa_r+0x658>
 8007058:	9b04      	ldr	r3, [sp, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	f300 80d8 	bgt.w	8007210 <_dtoa_r+0x658>
 8007060:	f040 826f 	bne.w	8007542 <_dtoa_r+0x98a>
 8007064:	4b68      	ldr	r3, [pc, #416]	; (8007208 <_dtoa_r+0x650>)
 8007066:	2200      	movs	r2, #0
 8007068:	4640      	mov	r0, r8
 800706a:	4649      	mov	r1, r9
 800706c:	f7f9 faec 	bl	8000648 <__aeabi_dmul>
 8007070:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007074:	f7f9 fd6e 	bl	8000b54 <__aeabi_dcmpge>
 8007078:	9e04      	ldr	r6, [sp, #16]
 800707a:	4637      	mov	r7, r6
 800707c:	2800      	cmp	r0, #0
 800707e:	f040 8245 	bne.w	800750c <_dtoa_r+0x954>
 8007082:	9d00      	ldr	r5, [sp, #0]
 8007084:	2331      	movs	r3, #49	; 0x31
 8007086:	f805 3b01 	strb.w	r3, [r5], #1
 800708a:	f10b 0b01 	add.w	fp, fp, #1
 800708e:	e241      	b.n	8007514 <_dtoa_r+0x95c>
 8007090:	07f2      	lsls	r2, r6, #31
 8007092:	d505      	bpl.n	80070a0 <_dtoa_r+0x4e8>
 8007094:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007098:	f7f9 fad6 	bl	8000648 <__aeabi_dmul>
 800709c:	3501      	adds	r5, #1
 800709e:	2301      	movs	r3, #1
 80070a0:	1076      	asrs	r6, r6, #1
 80070a2:	3708      	adds	r7, #8
 80070a4:	e773      	b.n	8006f8e <_dtoa_r+0x3d6>
 80070a6:	2502      	movs	r5, #2
 80070a8:	e775      	b.n	8006f96 <_dtoa_r+0x3de>
 80070aa:	9e04      	ldr	r6, [sp, #16]
 80070ac:	465f      	mov	r7, fp
 80070ae:	e792      	b.n	8006fd6 <_dtoa_r+0x41e>
 80070b0:	9900      	ldr	r1, [sp, #0]
 80070b2:	4b50      	ldr	r3, [pc, #320]	; (80071f4 <_dtoa_r+0x63c>)
 80070b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070b8:	4431      	add	r1, r6
 80070ba:	9102      	str	r1, [sp, #8]
 80070bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070be:	eeb0 9a47 	vmov.f32	s18, s14
 80070c2:	eef0 9a67 	vmov.f32	s19, s15
 80070c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80070ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070ce:	2900      	cmp	r1, #0
 80070d0:	d044      	beq.n	800715c <_dtoa_r+0x5a4>
 80070d2:	494e      	ldr	r1, [pc, #312]	; (800720c <_dtoa_r+0x654>)
 80070d4:	2000      	movs	r0, #0
 80070d6:	f7f9 fbe1 	bl	800089c <__aeabi_ddiv>
 80070da:	ec53 2b19 	vmov	r2, r3, d9
 80070de:	f7f9 f8fb 	bl	80002d8 <__aeabi_dsub>
 80070e2:	9d00      	ldr	r5, [sp, #0]
 80070e4:	ec41 0b19 	vmov	d9, r0, r1
 80070e8:	4649      	mov	r1, r9
 80070ea:	4640      	mov	r0, r8
 80070ec:	f7f9 fd5c 	bl	8000ba8 <__aeabi_d2iz>
 80070f0:	4606      	mov	r6, r0
 80070f2:	f7f9 fa3f 	bl	8000574 <__aeabi_i2d>
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	4640      	mov	r0, r8
 80070fc:	4649      	mov	r1, r9
 80070fe:	f7f9 f8eb 	bl	80002d8 <__aeabi_dsub>
 8007102:	3630      	adds	r6, #48	; 0x30
 8007104:	f805 6b01 	strb.w	r6, [r5], #1
 8007108:	ec53 2b19 	vmov	r2, r3, d9
 800710c:	4680      	mov	r8, r0
 800710e:	4689      	mov	r9, r1
 8007110:	f7f9 fd0c 	bl	8000b2c <__aeabi_dcmplt>
 8007114:	2800      	cmp	r0, #0
 8007116:	d164      	bne.n	80071e2 <_dtoa_r+0x62a>
 8007118:	4642      	mov	r2, r8
 800711a:	464b      	mov	r3, r9
 800711c:	4937      	ldr	r1, [pc, #220]	; (80071fc <_dtoa_r+0x644>)
 800711e:	2000      	movs	r0, #0
 8007120:	f7f9 f8da 	bl	80002d8 <__aeabi_dsub>
 8007124:	ec53 2b19 	vmov	r2, r3, d9
 8007128:	f7f9 fd00 	bl	8000b2c <__aeabi_dcmplt>
 800712c:	2800      	cmp	r0, #0
 800712e:	f040 80b6 	bne.w	800729e <_dtoa_r+0x6e6>
 8007132:	9b02      	ldr	r3, [sp, #8]
 8007134:	429d      	cmp	r5, r3
 8007136:	f43f af7c 	beq.w	8007032 <_dtoa_r+0x47a>
 800713a:	4b31      	ldr	r3, [pc, #196]	; (8007200 <_dtoa_r+0x648>)
 800713c:	ec51 0b19 	vmov	r0, r1, d9
 8007140:	2200      	movs	r2, #0
 8007142:	f7f9 fa81 	bl	8000648 <__aeabi_dmul>
 8007146:	4b2e      	ldr	r3, [pc, #184]	; (8007200 <_dtoa_r+0x648>)
 8007148:	ec41 0b19 	vmov	d9, r0, r1
 800714c:	2200      	movs	r2, #0
 800714e:	4640      	mov	r0, r8
 8007150:	4649      	mov	r1, r9
 8007152:	f7f9 fa79 	bl	8000648 <__aeabi_dmul>
 8007156:	4680      	mov	r8, r0
 8007158:	4689      	mov	r9, r1
 800715a:	e7c5      	b.n	80070e8 <_dtoa_r+0x530>
 800715c:	ec51 0b17 	vmov	r0, r1, d7
 8007160:	f7f9 fa72 	bl	8000648 <__aeabi_dmul>
 8007164:	9b02      	ldr	r3, [sp, #8]
 8007166:	9d00      	ldr	r5, [sp, #0]
 8007168:	930f      	str	r3, [sp, #60]	; 0x3c
 800716a:	ec41 0b19 	vmov	d9, r0, r1
 800716e:	4649      	mov	r1, r9
 8007170:	4640      	mov	r0, r8
 8007172:	f7f9 fd19 	bl	8000ba8 <__aeabi_d2iz>
 8007176:	4606      	mov	r6, r0
 8007178:	f7f9 f9fc 	bl	8000574 <__aeabi_i2d>
 800717c:	3630      	adds	r6, #48	; 0x30
 800717e:	4602      	mov	r2, r0
 8007180:	460b      	mov	r3, r1
 8007182:	4640      	mov	r0, r8
 8007184:	4649      	mov	r1, r9
 8007186:	f7f9 f8a7 	bl	80002d8 <__aeabi_dsub>
 800718a:	f805 6b01 	strb.w	r6, [r5], #1
 800718e:	9b02      	ldr	r3, [sp, #8]
 8007190:	429d      	cmp	r5, r3
 8007192:	4680      	mov	r8, r0
 8007194:	4689      	mov	r9, r1
 8007196:	f04f 0200 	mov.w	r2, #0
 800719a:	d124      	bne.n	80071e6 <_dtoa_r+0x62e>
 800719c:	4b1b      	ldr	r3, [pc, #108]	; (800720c <_dtoa_r+0x654>)
 800719e:	ec51 0b19 	vmov	r0, r1, d9
 80071a2:	f7f9 f89b 	bl	80002dc <__adddf3>
 80071a6:	4602      	mov	r2, r0
 80071a8:	460b      	mov	r3, r1
 80071aa:	4640      	mov	r0, r8
 80071ac:	4649      	mov	r1, r9
 80071ae:	f7f9 fcdb 	bl	8000b68 <__aeabi_dcmpgt>
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d173      	bne.n	800729e <_dtoa_r+0x6e6>
 80071b6:	ec53 2b19 	vmov	r2, r3, d9
 80071ba:	4914      	ldr	r1, [pc, #80]	; (800720c <_dtoa_r+0x654>)
 80071bc:	2000      	movs	r0, #0
 80071be:	f7f9 f88b 	bl	80002d8 <__aeabi_dsub>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4640      	mov	r0, r8
 80071c8:	4649      	mov	r1, r9
 80071ca:	f7f9 fcaf 	bl	8000b2c <__aeabi_dcmplt>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	f43f af2f 	beq.w	8007032 <_dtoa_r+0x47a>
 80071d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80071d6:	1e6b      	subs	r3, r5, #1
 80071d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80071da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071de:	2b30      	cmp	r3, #48	; 0x30
 80071e0:	d0f8      	beq.n	80071d4 <_dtoa_r+0x61c>
 80071e2:	46bb      	mov	fp, r7
 80071e4:	e04a      	b.n	800727c <_dtoa_r+0x6c4>
 80071e6:	4b06      	ldr	r3, [pc, #24]	; (8007200 <_dtoa_r+0x648>)
 80071e8:	f7f9 fa2e 	bl	8000648 <__aeabi_dmul>
 80071ec:	4680      	mov	r8, r0
 80071ee:	4689      	mov	r9, r1
 80071f0:	e7bd      	b.n	800716e <_dtoa_r+0x5b6>
 80071f2:	bf00      	nop
 80071f4:	08008a08 	.word	0x08008a08
 80071f8:	080089e0 	.word	0x080089e0
 80071fc:	3ff00000 	.word	0x3ff00000
 8007200:	40240000 	.word	0x40240000
 8007204:	401c0000 	.word	0x401c0000
 8007208:	40140000 	.word	0x40140000
 800720c:	3fe00000 	.word	0x3fe00000
 8007210:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007214:	9d00      	ldr	r5, [sp, #0]
 8007216:	4642      	mov	r2, r8
 8007218:	464b      	mov	r3, r9
 800721a:	4630      	mov	r0, r6
 800721c:	4639      	mov	r1, r7
 800721e:	f7f9 fb3d 	bl	800089c <__aeabi_ddiv>
 8007222:	f7f9 fcc1 	bl	8000ba8 <__aeabi_d2iz>
 8007226:	9001      	str	r0, [sp, #4]
 8007228:	f7f9 f9a4 	bl	8000574 <__aeabi_i2d>
 800722c:	4642      	mov	r2, r8
 800722e:	464b      	mov	r3, r9
 8007230:	f7f9 fa0a 	bl	8000648 <__aeabi_dmul>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	4630      	mov	r0, r6
 800723a:	4639      	mov	r1, r7
 800723c:	f7f9 f84c 	bl	80002d8 <__aeabi_dsub>
 8007240:	9e01      	ldr	r6, [sp, #4]
 8007242:	9f04      	ldr	r7, [sp, #16]
 8007244:	3630      	adds	r6, #48	; 0x30
 8007246:	f805 6b01 	strb.w	r6, [r5], #1
 800724a:	9e00      	ldr	r6, [sp, #0]
 800724c:	1bae      	subs	r6, r5, r6
 800724e:	42b7      	cmp	r7, r6
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	d134      	bne.n	80072c0 <_dtoa_r+0x708>
 8007256:	f7f9 f841 	bl	80002dc <__adddf3>
 800725a:	4642      	mov	r2, r8
 800725c:	464b      	mov	r3, r9
 800725e:	4606      	mov	r6, r0
 8007260:	460f      	mov	r7, r1
 8007262:	f7f9 fc81 	bl	8000b68 <__aeabi_dcmpgt>
 8007266:	b9c8      	cbnz	r0, 800729c <_dtoa_r+0x6e4>
 8007268:	4642      	mov	r2, r8
 800726a:	464b      	mov	r3, r9
 800726c:	4630      	mov	r0, r6
 800726e:	4639      	mov	r1, r7
 8007270:	f7f9 fc52 	bl	8000b18 <__aeabi_dcmpeq>
 8007274:	b110      	cbz	r0, 800727c <_dtoa_r+0x6c4>
 8007276:	9b01      	ldr	r3, [sp, #4]
 8007278:	07db      	lsls	r3, r3, #31
 800727a:	d40f      	bmi.n	800729c <_dtoa_r+0x6e4>
 800727c:	4651      	mov	r1, sl
 800727e:	4620      	mov	r0, r4
 8007280:	f000 fdbe 	bl	8007e00 <_Bfree>
 8007284:	2300      	movs	r3, #0
 8007286:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007288:	702b      	strb	r3, [r5, #0]
 800728a:	f10b 0301 	add.w	r3, fp, #1
 800728e:	6013      	str	r3, [r2, #0]
 8007290:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007292:	2b00      	cmp	r3, #0
 8007294:	f43f ace2 	beq.w	8006c5c <_dtoa_r+0xa4>
 8007298:	601d      	str	r5, [r3, #0]
 800729a:	e4df      	b.n	8006c5c <_dtoa_r+0xa4>
 800729c:	465f      	mov	r7, fp
 800729e:	462b      	mov	r3, r5
 80072a0:	461d      	mov	r5, r3
 80072a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072a6:	2a39      	cmp	r2, #57	; 0x39
 80072a8:	d106      	bne.n	80072b8 <_dtoa_r+0x700>
 80072aa:	9a00      	ldr	r2, [sp, #0]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d1f7      	bne.n	80072a0 <_dtoa_r+0x6e8>
 80072b0:	9900      	ldr	r1, [sp, #0]
 80072b2:	2230      	movs	r2, #48	; 0x30
 80072b4:	3701      	adds	r7, #1
 80072b6:	700a      	strb	r2, [r1, #0]
 80072b8:	781a      	ldrb	r2, [r3, #0]
 80072ba:	3201      	adds	r2, #1
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	e790      	b.n	80071e2 <_dtoa_r+0x62a>
 80072c0:	4ba3      	ldr	r3, [pc, #652]	; (8007550 <_dtoa_r+0x998>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	f7f9 f9c0 	bl	8000648 <__aeabi_dmul>
 80072c8:	2200      	movs	r2, #0
 80072ca:	2300      	movs	r3, #0
 80072cc:	4606      	mov	r6, r0
 80072ce:	460f      	mov	r7, r1
 80072d0:	f7f9 fc22 	bl	8000b18 <__aeabi_dcmpeq>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d09e      	beq.n	8007216 <_dtoa_r+0x65e>
 80072d8:	e7d0      	b.n	800727c <_dtoa_r+0x6c4>
 80072da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072dc:	2a00      	cmp	r2, #0
 80072de:	f000 80ca 	beq.w	8007476 <_dtoa_r+0x8be>
 80072e2:	9a07      	ldr	r2, [sp, #28]
 80072e4:	2a01      	cmp	r2, #1
 80072e6:	f300 80ad 	bgt.w	8007444 <_dtoa_r+0x88c>
 80072ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072ec:	2a00      	cmp	r2, #0
 80072ee:	f000 80a5 	beq.w	800743c <_dtoa_r+0x884>
 80072f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072f6:	9e08      	ldr	r6, [sp, #32]
 80072f8:	9d05      	ldr	r5, [sp, #20]
 80072fa:	9a05      	ldr	r2, [sp, #20]
 80072fc:	441a      	add	r2, r3
 80072fe:	9205      	str	r2, [sp, #20]
 8007300:	9a06      	ldr	r2, [sp, #24]
 8007302:	2101      	movs	r1, #1
 8007304:	441a      	add	r2, r3
 8007306:	4620      	mov	r0, r4
 8007308:	9206      	str	r2, [sp, #24]
 800730a:	f000 fe2f 	bl	8007f6c <__i2b>
 800730e:	4607      	mov	r7, r0
 8007310:	b165      	cbz	r5, 800732c <_dtoa_r+0x774>
 8007312:	9b06      	ldr	r3, [sp, #24]
 8007314:	2b00      	cmp	r3, #0
 8007316:	dd09      	ble.n	800732c <_dtoa_r+0x774>
 8007318:	42ab      	cmp	r3, r5
 800731a:	9a05      	ldr	r2, [sp, #20]
 800731c:	bfa8      	it	ge
 800731e:	462b      	movge	r3, r5
 8007320:	1ad2      	subs	r2, r2, r3
 8007322:	9205      	str	r2, [sp, #20]
 8007324:	9a06      	ldr	r2, [sp, #24]
 8007326:	1aed      	subs	r5, r5, r3
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	9306      	str	r3, [sp, #24]
 800732c:	9b08      	ldr	r3, [sp, #32]
 800732e:	b1f3      	cbz	r3, 800736e <_dtoa_r+0x7b6>
 8007330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 80a3 	beq.w	800747e <_dtoa_r+0x8c6>
 8007338:	2e00      	cmp	r6, #0
 800733a:	dd10      	ble.n	800735e <_dtoa_r+0x7a6>
 800733c:	4639      	mov	r1, r7
 800733e:	4632      	mov	r2, r6
 8007340:	4620      	mov	r0, r4
 8007342:	f000 fed3 	bl	80080ec <__pow5mult>
 8007346:	4652      	mov	r2, sl
 8007348:	4601      	mov	r1, r0
 800734a:	4607      	mov	r7, r0
 800734c:	4620      	mov	r0, r4
 800734e:	f000 fe23 	bl	8007f98 <__multiply>
 8007352:	4651      	mov	r1, sl
 8007354:	4680      	mov	r8, r0
 8007356:	4620      	mov	r0, r4
 8007358:	f000 fd52 	bl	8007e00 <_Bfree>
 800735c:	46c2      	mov	sl, r8
 800735e:	9b08      	ldr	r3, [sp, #32]
 8007360:	1b9a      	subs	r2, r3, r6
 8007362:	d004      	beq.n	800736e <_dtoa_r+0x7b6>
 8007364:	4651      	mov	r1, sl
 8007366:	4620      	mov	r0, r4
 8007368:	f000 fec0 	bl	80080ec <__pow5mult>
 800736c:	4682      	mov	sl, r0
 800736e:	2101      	movs	r1, #1
 8007370:	4620      	mov	r0, r4
 8007372:	f000 fdfb 	bl	8007f6c <__i2b>
 8007376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007378:	2b00      	cmp	r3, #0
 800737a:	4606      	mov	r6, r0
 800737c:	f340 8081 	ble.w	8007482 <_dtoa_r+0x8ca>
 8007380:	461a      	mov	r2, r3
 8007382:	4601      	mov	r1, r0
 8007384:	4620      	mov	r0, r4
 8007386:	f000 feb1 	bl	80080ec <__pow5mult>
 800738a:	9b07      	ldr	r3, [sp, #28]
 800738c:	2b01      	cmp	r3, #1
 800738e:	4606      	mov	r6, r0
 8007390:	dd7a      	ble.n	8007488 <_dtoa_r+0x8d0>
 8007392:	f04f 0800 	mov.w	r8, #0
 8007396:	6933      	ldr	r3, [r6, #16]
 8007398:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800739c:	6918      	ldr	r0, [r3, #16]
 800739e:	f000 fd97 	bl	8007ed0 <__hi0bits>
 80073a2:	f1c0 0020 	rsb	r0, r0, #32
 80073a6:	9b06      	ldr	r3, [sp, #24]
 80073a8:	4418      	add	r0, r3
 80073aa:	f010 001f 	ands.w	r0, r0, #31
 80073ae:	f000 8094 	beq.w	80074da <_dtoa_r+0x922>
 80073b2:	f1c0 0320 	rsb	r3, r0, #32
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	f340 8085 	ble.w	80074c6 <_dtoa_r+0x90e>
 80073bc:	9b05      	ldr	r3, [sp, #20]
 80073be:	f1c0 001c 	rsb	r0, r0, #28
 80073c2:	4403      	add	r3, r0
 80073c4:	9305      	str	r3, [sp, #20]
 80073c6:	9b06      	ldr	r3, [sp, #24]
 80073c8:	4403      	add	r3, r0
 80073ca:	4405      	add	r5, r0
 80073cc:	9306      	str	r3, [sp, #24]
 80073ce:	9b05      	ldr	r3, [sp, #20]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	dd05      	ble.n	80073e0 <_dtoa_r+0x828>
 80073d4:	4651      	mov	r1, sl
 80073d6:	461a      	mov	r2, r3
 80073d8:	4620      	mov	r0, r4
 80073da:	f000 fee1 	bl	80081a0 <__lshift>
 80073de:	4682      	mov	sl, r0
 80073e0:	9b06      	ldr	r3, [sp, #24]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	dd05      	ble.n	80073f2 <_dtoa_r+0x83a>
 80073e6:	4631      	mov	r1, r6
 80073e8:	461a      	mov	r2, r3
 80073ea:	4620      	mov	r0, r4
 80073ec:	f000 fed8 	bl	80081a0 <__lshift>
 80073f0:	4606      	mov	r6, r0
 80073f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d072      	beq.n	80074de <_dtoa_r+0x926>
 80073f8:	4631      	mov	r1, r6
 80073fa:	4650      	mov	r0, sl
 80073fc:	f000 ff3c 	bl	8008278 <__mcmp>
 8007400:	2800      	cmp	r0, #0
 8007402:	da6c      	bge.n	80074de <_dtoa_r+0x926>
 8007404:	2300      	movs	r3, #0
 8007406:	4651      	mov	r1, sl
 8007408:	220a      	movs	r2, #10
 800740a:	4620      	mov	r0, r4
 800740c:	f000 fd1a 	bl	8007e44 <__multadd>
 8007410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007412:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007416:	4682      	mov	sl, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 81b0 	beq.w	800777e <_dtoa_r+0xbc6>
 800741e:	2300      	movs	r3, #0
 8007420:	4639      	mov	r1, r7
 8007422:	220a      	movs	r2, #10
 8007424:	4620      	mov	r0, r4
 8007426:	f000 fd0d 	bl	8007e44 <__multadd>
 800742a:	9b01      	ldr	r3, [sp, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	4607      	mov	r7, r0
 8007430:	f300 8096 	bgt.w	8007560 <_dtoa_r+0x9a8>
 8007434:	9b07      	ldr	r3, [sp, #28]
 8007436:	2b02      	cmp	r3, #2
 8007438:	dc59      	bgt.n	80074ee <_dtoa_r+0x936>
 800743a:	e091      	b.n	8007560 <_dtoa_r+0x9a8>
 800743c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800743e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007442:	e758      	b.n	80072f6 <_dtoa_r+0x73e>
 8007444:	9b04      	ldr	r3, [sp, #16]
 8007446:	1e5e      	subs	r6, r3, #1
 8007448:	9b08      	ldr	r3, [sp, #32]
 800744a:	42b3      	cmp	r3, r6
 800744c:	bfbf      	itttt	lt
 800744e:	9b08      	ldrlt	r3, [sp, #32]
 8007450:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007452:	9608      	strlt	r6, [sp, #32]
 8007454:	1af3      	sublt	r3, r6, r3
 8007456:	bfb4      	ite	lt
 8007458:	18d2      	addlt	r2, r2, r3
 800745a:	1b9e      	subge	r6, r3, r6
 800745c:	9b04      	ldr	r3, [sp, #16]
 800745e:	bfbc      	itt	lt
 8007460:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007462:	2600      	movlt	r6, #0
 8007464:	2b00      	cmp	r3, #0
 8007466:	bfb7      	itett	lt
 8007468:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800746c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007470:	1a9d      	sublt	r5, r3, r2
 8007472:	2300      	movlt	r3, #0
 8007474:	e741      	b.n	80072fa <_dtoa_r+0x742>
 8007476:	9e08      	ldr	r6, [sp, #32]
 8007478:	9d05      	ldr	r5, [sp, #20]
 800747a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800747c:	e748      	b.n	8007310 <_dtoa_r+0x758>
 800747e:	9a08      	ldr	r2, [sp, #32]
 8007480:	e770      	b.n	8007364 <_dtoa_r+0x7ac>
 8007482:	9b07      	ldr	r3, [sp, #28]
 8007484:	2b01      	cmp	r3, #1
 8007486:	dc19      	bgt.n	80074bc <_dtoa_r+0x904>
 8007488:	9b02      	ldr	r3, [sp, #8]
 800748a:	b9bb      	cbnz	r3, 80074bc <_dtoa_r+0x904>
 800748c:	9b03      	ldr	r3, [sp, #12]
 800748e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007492:	b99b      	cbnz	r3, 80074bc <_dtoa_r+0x904>
 8007494:	9b03      	ldr	r3, [sp, #12]
 8007496:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800749a:	0d1b      	lsrs	r3, r3, #20
 800749c:	051b      	lsls	r3, r3, #20
 800749e:	b183      	cbz	r3, 80074c2 <_dtoa_r+0x90a>
 80074a0:	9b05      	ldr	r3, [sp, #20]
 80074a2:	3301      	adds	r3, #1
 80074a4:	9305      	str	r3, [sp, #20]
 80074a6:	9b06      	ldr	r3, [sp, #24]
 80074a8:	3301      	adds	r3, #1
 80074aa:	9306      	str	r3, [sp, #24]
 80074ac:	f04f 0801 	mov.w	r8, #1
 80074b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f47f af6f 	bne.w	8007396 <_dtoa_r+0x7de>
 80074b8:	2001      	movs	r0, #1
 80074ba:	e774      	b.n	80073a6 <_dtoa_r+0x7ee>
 80074bc:	f04f 0800 	mov.w	r8, #0
 80074c0:	e7f6      	b.n	80074b0 <_dtoa_r+0x8f8>
 80074c2:	4698      	mov	r8, r3
 80074c4:	e7f4      	b.n	80074b0 <_dtoa_r+0x8f8>
 80074c6:	d082      	beq.n	80073ce <_dtoa_r+0x816>
 80074c8:	9a05      	ldr	r2, [sp, #20]
 80074ca:	331c      	adds	r3, #28
 80074cc:	441a      	add	r2, r3
 80074ce:	9205      	str	r2, [sp, #20]
 80074d0:	9a06      	ldr	r2, [sp, #24]
 80074d2:	441a      	add	r2, r3
 80074d4:	441d      	add	r5, r3
 80074d6:	9206      	str	r2, [sp, #24]
 80074d8:	e779      	b.n	80073ce <_dtoa_r+0x816>
 80074da:	4603      	mov	r3, r0
 80074dc:	e7f4      	b.n	80074c8 <_dtoa_r+0x910>
 80074de:	9b04      	ldr	r3, [sp, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	dc37      	bgt.n	8007554 <_dtoa_r+0x99c>
 80074e4:	9b07      	ldr	r3, [sp, #28]
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	dd34      	ble.n	8007554 <_dtoa_r+0x99c>
 80074ea:	9b04      	ldr	r3, [sp, #16]
 80074ec:	9301      	str	r3, [sp, #4]
 80074ee:	9b01      	ldr	r3, [sp, #4]
 80074f0:	b963      	cbnz	r3, 800750c <_dtoa_r+0x954>
 80074f2:	4631      	mov	r1, r6
 80074f4:	2205      	movs	r2, #5
 80074f6:	4620      	mov	r0, r4
 80074f8:	f000 fca4 	bl	8007e44 <__multadd>
 80074fc:	4601      	mov	r1, r0
 80074fe:	4606      	mov	r6, r0
 8007500:	4650      	mov	r0, sl
 8007502:	f000 feb9 	bl	8008278 <__mcmp>
 8007506:	2800      	cmp	r0, #0
 8007508:	f73f adbb 	bgt.w	8007082 <_dtoa_r+0x4ca>
 800750c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800750e:	9d00      	ldr	r5, [sp, #0]
 8007510:	ea6f 0b03 	mvn.w	fp, r3
 8007514:	f04f 0800 	mov.w	r8, #0
 8007518:	4631      	mov	r1, r6
 800751a:	4620      	mov	r0, r4
 800751c:	f000 fc70 	bl	8007e00 <_Bfree>
 8007520:	2f00      	cmp	r7, #0
 8007522:	f43f aeab 	beq.w	800727c <_dtoa_r+0x6c4>
 8007526:	f1b8 0f00 	cmp.w	r8, #0
 800752a:	d005      	beq.n	8007538 <_dtoa_r+0x980>
 800752c:	45b8      	cmp	r8, r7
 800752e:	d003      	beq.n	8007538 <_dtoa_r+0x980>
 8007530:	4641      	mov	r1, r8
 8007532:	4620      	mov	r0, r4
 8007534:	f000 fc64 	bl	8007e00 <_Bfree>
 8007538:	4639      	mov	r1, r7
 800753a:	4620      	mov	r0, r4
 800753c:	f000 fc60 	bl	8007e00 <_Bfree>
 8007540:	e69c      	b.n	800727c <_dtoa_r+0x6c4>
 8007542:	2600      	movs	r6, #0
 8007544:	4637      	mov	r7, r6
 8007546:	e7e1      	b.n	800750c <_dtoa_r+0x954>
 8007548:	46bb      	mov	fp, r7
 800754a:	4637      	mov	r7, r6
 800754c:	e599      	b.n	8007082 <_dtoa_r+0x4ca>
 800754e:	bf00      	nop
 8007550:	40240000 	.word	0x40240000
 8007554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 80c8 	beq.w	80076ec <_dtoa_r+0xb34>
 800755c:	9b04      	ldr	r3, [sp, #16]
 800755e:	9301      	str	r3, [sp, #4]
 8007560:	2d00      	cmp	r5, #0
 8007562:	dd05      	ble.n	8007570 <_dtoa_r+0x9b8>
 8007564:	4639      	mov	r1, r7
 8007566:	462a      	mov	r2, r5
 8007568:	4620      	mov	r0, r4
 800756a:	f000 fe19 	bl	80081a0 <__lshift>
 800756e:	4607      	mov	r7, r0
 8007570:	f1b8 0f00 	cmp.w	r8, #0
 8007574:	d05b      	beq.n	800762e <_dtoa_r+0xa76>
 8007576:	6879      	ldr	r1, [r7, #4]
 8007578:	4620      	mov	r0, r4
 800757a:	f000 fc01 	bl	8007d80 <_Balloc>
 800757e:	4605      	mov	r5, r0
 8007580:	b928      	cbnz	r0, 800758e <_dtoa_r+0x9d6>
 8007582:	4b83      	ldr	r3, [pc, #524]	; (8007790 <_dtoa_r+0xbd8>)
 8007584:	4602      	mov	r2, r0
 8007586:	f240 21ef 	movw	r1, #751	; 0x2ef
 800758a:	f7ff bb2e 	b.w	8006bea <_dtoa_r+0x32>
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	3202      	adds	r2, #2
 8007592:	0092      	lsls	r2, r2, #2
 8007594:	f107 010c 	add.w	r1, r7, #12
 8007598:	300c      	adds	r0, #12
 800759a:	f001 f89b 	bl	80086d4 <memcpy>
 800759e:	2201      	movs	r2, #1
 80075a0:	4629      	mov	r1, r5
 80075a2:	4620      	mov	r0, r4
 80075a4:	f000 fdfc 	bl	80081a0 <__lshift>
 80075a8:	9b00      	ldr	r3, [sp, #0]
 80075aa:	3301      	adds	r3, #1
 80075ac:	9304      	str	r3, [sp, #16]
 80075ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075b2:	4413      	add	r3, r2
 80075b4:	9308      	str	r3, [sp, #32]
 80075b6:	9b02      	ldr	r3, [sp, #8]
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	46b8      	mov	r8, r7
 80075be:	9306      	str	r3, [sp, #24]
 80075c0:	4607      	mov	r7, r0
 80075c2:	9b04      	ldr	r3, [sp, #16]
 80075c4:	4631      	mov	r1, r6
 80075c6:	3b01      	subs	r3, #1
 80075c8:	4650      	mov	r0, sl
 80075ca:	9301      	str	r3, [sp, #4]
 80075cc:	f7ff fa69 	bl	8006aa2 <quorem>
 80075d0:	4641      	mov	r1, r8
 80075d2:	9002      	str	r0, [sp, #8]
 80075d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80075d8:	4650      	mov	r0, sl
 80075da:	f000 fe4d 	bl	8008278 <__mcmp>
 80075de:	463a      	mov	r2, r7
 80075e0:	9005      	str	r0, [sp, #20]
 80075e2:	4631      	mov	r1, r6
 80075e4:	4620      	mov	r0, r4
 80075e6:	f000 fe63 	bl	80082b0 <__mdiff>
 80075ea:	68c2      	ldr	r2, [r0, #12]
 80075ec:	4605      	mov	r5, r0
 80075ee:	bb02      	cbnz	r2, 8007632 <_dtoa_r+0xa7a>
 80075f0:	4601      	mov	r1, r0
 80075f2:	4650      	mov	r0, sl
 80075f4:	f000 fe40 	bl	8008278 <__mcmp>
 80075f8:	4602      	mov	r2, r0
 80075fa:	4629      	mov	r1, r5
 80075fc:	4620      	mov	r0, r4
 80075fe:	9209      	str	r2, [sp, #36]	; 0x24
 8007600:	f000 fbfe 	bl	8007e00 <_Bfree>
 8007604:	9b07      	ldr	r3, [sp, #28]
 8007606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007608:	9d04      	ldr	r5, [sp, #16]
 800760a:	ea43 0102 	orr.w	r1, r3, r2
 800760e:	9b06      	ldr	r3, [sp, #24]
 8007610:	4319      	orrs	r1, r3
 8007612:	d110      	bne.n	8007636 <_dtoa_r+0xa7e>
 8007614:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007618:	d029      	beq.n	800766e <_dtoa_r+0xab6>
 800761a:	9b05      	ldr	r3, [sp, #20]
 800761c:	2b00      	cmp	r3, #0
 800761e:	dd02      	ble.n	8007626 <_dtoa_r+0xa6e>
 8007620:	9b02      	ldr	r3, [sp, #8]
 8007622:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007626:	9b01      	ldr	r3, [sp, #4]
 8007628:	f883 9000 	strb.w	r9, [r3]
 800762c:	e774      	b.n	8007518 <_dtoa_r+0x960>
 800762e:	4638      	mov	r0, r7
 8007630:	e7ba      	b.n	80075a8 <_dtoa_r+0x9f0>
 8007632:	2201      	movs	r2, #1
 8007634:	e7e1      	b.n	80075fa <_dtoa_r+0xa42>
 8007636:	9b05      	ldr	r3, [sp, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	db04      	blt.n	8007646 <_dtoa_r+0xa8e>
 800763c:	9907      	ldr	r1, [sp, #28]
 800763e:	430b      	orrs	r3, r1
 8007640:	9906      	ldr	r1, [sp, #24]
 8007642:	430b      	orrs	r3, r1
 8007644:	d120      	bne.n	8007688 <_dtoa_r+0xad0>
 8007646:	2a00      	cmp	r2, #0
 8007648:	dded      	ble.n	8007626 <_dtoa_r+0xa6e>
 800764a:	4651      	mov	r1, sl
 800764c:	2201      	movs	r2, #1
 800764e:	4620      	mov	r0, r4
 8007650:	f000 fda6 	bl	80081a0 <__lshift>
 8007654:	4631      	mov	r1, r6
 8007656:	4682      	mov	sl, r0
 8007658:	f000 fe0e 	bl	8008278 <__mcmp>
 800765c:	2800      	cmp	r0, #0
 800765e:	dc03      	bgt.n	8007668 <_dtoa_r+0xab0>
 8007660:	d1e1      	bne.n	8007626 <_dtoa_r+0xa6e>
 8007662:	f019 0f01 	tst.w	r9, #1
 8007666:	d0de      	beq.n	8007626 <_dtoa_r+0xa6e>
 8007668:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800766c:	d1d8      	bne.n	8007620 <_dtoa_r+0xa68>
 800766e:	9a01      	ldr	r2, [sp, #4]
 8007670:	2339      	movs	r3, #57	; 0x39
 8007672:	7013      	strb	r3, [r2, #0]
 8007674:	462b      	mov	r3, r5
 8007676:	461d      	mov	r5, r3
 8007678:	3b01      	subs	r3, #1
 800767a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800767e:	2a39      	cmp	r2, #57	; 0x39
 8007680:	d06c      	beq.n	800775c <_dtoa_r+0xba4>
 8007682:	3201      	adds	r2, #1
 8007684:	701a      	strb	r2, [r3, #0]
 8007686:	e747      	b.n	8007518 <_dtoa_r+0x960>
 8007688:	2a00      	cmp	r2, #0
 800768a:	dd07      	ble.n	800769c <_dtoa_r+0xae4>
 800768c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007690:	d0ed      	beq.n	800766e <_dtoa_r+0xab6>
 8007692:	9a01      	ldr	r2, [sp, #4]
 8007694:	f109 0301 	add.w	r3, r9, #1
 8007698:	7013      	strb	r3, [r2, #0]
 800769a:	e73d      	b.n	8007518 <_dtoa_r+0x960>
 800769c:	9b04      	ldr	r3, [sp, #16]
 800769e:	9a08      	ldr	r2, [sp, #32]
 80076a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d043      	beq.n	8007730 <_dtoa_r+0xb78>
 80076a8:	4651      	mov	r1, sl
 80076aa:	2300      	movs	r3, #0
 80076ac:	220a      	movs	r2, #10
 80076ae:	4620      	mov	r0, r4
 80076b0:	f000 fbc8 	bl	8007e44 <__multadd>
 80076b4:	45b8      	cmp	r8, r7
 80076b6:	4682      	mov	sl, r0
 80076b8:	f04f 0300 	mov.w	r3, #0
 80076bc:	f04f 020a 	mov.w	r2, #10
 80076c0:	4641      	mov	r1, r8
 80076c2:	4620      	mov	r0, r4
 80076c4:	d107      	bne.n	80076d6 <_dtoa_r+0xb1e>
 80076c6:	f000 fbbd 	bl	8007e44 <__multadd>
 80076ca:	4680      	mov	r8, r0
 80076cc:	4607      	mov	r7, r0
 80076ce:	9b04      	ldr	r3, [sp, #16]
 80076d0:	3301      	adds	r3, #1
 80076d2:	9304      	str	r3, [sp, #16]
 80076d4:	e775      	b.n	80075c2 <_dtoa_r+0xa0a>
 80076d6:	f000 fbb5 	bl	8007e44 <__multadd>
 80076da:	4639      	mov	r1, r7
 80076dc:	4680      	mov	r8, r0
 80076de:	2300      	movs	r3, #0
 80076e0:	220a      	movs	r2, #10
 80076e2:	4620      	mov	r0, r4
 80076e4:	f000 fbae 	bl	8007e44 <__multadd>
 80076e8:	4607      	mov	r7, r0
 80076ea:	e7f0      	b.n	80076ce <_dtoa_r+0xb16>
 80076ec:	9b04      	ldr	r3, [sp, #16]
 80076ee:	9301      	str	r3, [sp, #4]
 80076f0:	9d00      	ldr	r5, [sp, #0]
 80076f2:	4631      	mov	r1, r6
 80076f4:	4650      	mov	r0, sl
 80076f6:	f7ff f9d4 	bl	8006aa2 <quorem>
 80076fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80076fe:	9b00      	ldr	r3, [sp, #0]
 8007700:	f805 9b01 	strb.w	r9, [r5], #1
 8007704:	1aea      	subs	r2, r5, r3
 8007706:	9b01      	ldr	r3, [sp, #4]
 8007708:	4293      	cmp	r3, r2
 800770a:	dd07      	ble.n	800771c <_dtoa_r+0xb64>
 800770c:	4651      	mov	r1, sl
 800770e:	2300      	movs	r3, #0
 8007710:	220a      	movs	r2, #10
 8007712:	4620      	mov	r0, r4
 8007714:	f000 fb96 	bl	8007e44 <__multadd>
 8007718:	4682      	mov	sl, r0
 800771a:	e7ea      	b.n	80076f2 <_dtoa_r+0xb3a>
 800771c:	9b01      	ldr	r3, [sp, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	bfc8      	it	gt
 8007722:	461d      	movgt	r5, r3
 8007724:	9b00      	ldr	r3, [sp, #0]
 8007726:	bfd8      	it	le
 8007728:	2501      	movle	r5, #1
 800772a:	441d      	add	r5, r3
 800772c:	f04f 0800 	mov.w	r8, #0
 8007730:	4651      	mov	r1, sl
 8007732:	2201      	movs	r2, #1
 8007734:	4620      	mov	r0, r4
 8007736:	f000 fd33 	bl	80081a0 <__lshift>
 800773a:	4631      	mov	r1, r6
 800773c:	4682      	mov	sl, r0
 800773e:	f000 fd9b 	bl	8008278 <__mcmp>
 8007742:	2800      	cmp	r0, #0
 8007744:	dc96      	bgt.n	8007674 <_dtoa_r+0xabc>
 8007746:	d102      	bne.n	800774e <_dtoa_r+0xb96>
 8007748:	f019 0f01 	tst.w	r9, #1
 800774c:	d192      	bne.n	8007674 <_dtoa_r+0xabc>
 800774e:	462b      	mov	r3, r5
 8007750:	461d      	mov	r5, r3
 8007752:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007756:	2a30      	cmp	r2, #48	; 0x30
 8007758:	d0fa      	beq.n	8007750 <_dtoa_r+0xb98>
 800775a:	e6dd      	b.n	8007518 <_dtoa_r+0x960>
 800775c:	9a00      	ldr	r2, [sp, #0]
 800775e:	429a      	cmp	r2, r3
 8007760:	d189      	bne.n	8007676 <_dtoa_r+0xabe>
 8007762:	f10b 0b01 	add.w	fp, fp, #1
 8007766:	2331      	movs	r3, #49	; 0x31
 8007768:	e796      	b.n	8007698 <_dtoa_r+0xae0>
 800776a:	4b0a      	ldr	r3, [pc, #40]	; (8007794 <_dtoa_r+0xbdc>)
 800776c:	f7ff ba99 	b.w	8006ca2 <_dtoa_r+0xea>
 8007770:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007772:	2b00      	cmp	r3, #0
 8007774:	f47f aa6d 	bne.w	8006c52 <_dtoa_r+0x9a>
 8007778:	4b07      	ldr	r3, [pc, #28]	; (8007798 <_dtoa_r+0xbe0>)
 800777a:	f7ff ba92 	b.w	8006ca2 <_dtoa_r+0xea>
 800777e:	9b01      	ldr	r3, [sp, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	dcb5      	bgt.n	80076f0 <_dtoa_r+0xb38>
 8007784:	9b07      	ldr	r3, [sp, #28]
 8007786:	2b02      	cmp	r3, #2
 8007788:	f73f aeb1 	bgt.w	80074ee <_dtoa_r+0x936>
 800778c:	e7b0      	b.n	80076f0 <_dtoa_r+0xb38>
 800778e:	bf00      	nop
 8007790:	08008964 	.word	0x08008964
 8007794:	080088c4 	.word	0x080088c4
 8007798:	080088e8 	.word	0x080088e8

0800779c <_free_r>:
 800779c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800779e:	2900      	cmp	r1, #0
 80077a0:	d044      	beq.n	800782c <_free_r+0x90>
 80077a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077a6:	9001      	str	r0, [sp, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f1a1 0404 	sub.w	r4, r1, #4
 80077ae:	bfb8      	it	lt
 80077b0:	18e4      	addlt	r4, r4, r3
 80077b2:	f000 fad9 	bl	8007d68 <__malloc_lock>
 80077b6:	4a1e      	ldr	r2, [pc, #120]	; (8007830 <_free_r+0x94>)
 80077b8:	9801      	ldr	r0, [sp, #4]
 80077ba:	6813      	ldr	r3, [r2, #0]
 80077bc:	b933      	cbnz	r3, 80077cc <_free_r+0x30>
 80077be:	6063      	str	r3, [r4, #4]
 80077c0:	6014      	str	r4, [r2, #0]
 80077c2:	b003      	add	sp, #12
 80077c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077c8:	f000 bad4 	b.w	8007d74 <__malloc_unlock>
 80077cc:	42a3      	cmp	r3, r4
 80077ce:	d908      	bls.n	80077e2 <_free_r+0x46>
 80077d0:	6825      	ldr	r5, [r4, #0]
 80077d2:	1961      	adds	r1, r4, r5
 80077d4:	428b      	cmp	r3, r1
 80077d6:	bf01      	itttt	eq
 80077d8:	6819      	ldreq	r1, [r3, #0]
 80077da:	685b      	ldreq	r3, [r3, #4]
 80077dc:	1949      	addeq	r1, r1, r5
 80077de:	6021      	streq	r1, [r4, #0]
 80077e0:	e7ed      	b.n	80077be <_free_r+0x22>
 80077e2:	461a      	mov	r2, r3
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	b10b      	cbz	r3, 80077ec <_free_r+0x50>
 80077e8:	42a3      	cmp	r3, r4
 80077ea:	d9fa      	bls.n	80077e2 <_free_r+0x46>
 80077ec:	6811      	ldr	r1, [r2, #0]
 80077ee:	1855      	adds	r5, r2, r1
 80077f0:	42a5      	cmp	r5, r4
 80077f2:	d10b      	bne.n	800780c <_free_r+0x70>
 80077f4:	6824      	ldr	r4, [r4, #0]
 80077f6:	4421      	add	r1, r4
 80077f8:	1854      	adds	r4, r2, r1
 80077fa:	42a3      	cmp	r3, r4
 80077fc:	6011      	str	r1, [r2, #0]
 80077fe:	d1e0      	bne.n	80077c2 <_free_r+0x26>
 8007800:	681c      	ldr	r4, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	6053      	str	r3, [r2, #4]
 8007806:	440c      	add	r4, r1
 8007808:	6014      	str	r4, [r2, #0]
 800780a:	e7da      	b.n	80077c2 <_free_r+0x26>
 800780c:	d902      	bls.n	8007814 <_free_r+0x78>
 800780e:	230c      	movs	r3, #12
 8007810:	6003      	str	r3, [r0, #0]
 8007812:	e7d6      	b.n	80077c2 <_free_r+0x26>
 8007814:	6825      	ldr	r5, [r4, #0]
 8007816:	1961      	adds	r1, r4, r5
 8007818:	428b      	cmp	r3, r1
 800781a:	bf04      	itt	eq
 800781c:	6819      	ldreq	r1, [r3, #0]
 800781e:	685b      	ldreq	r3, [r3, #4]
 8007820:	6063      	str	r3, [r4, #4]
 8007822:	bf04      	itt	eq
 8007824:	1949      	addeq	r1, r1, r5
 8007826:	6021      	streq	r1, [r4, #0]
 8007828:	6054      	str	r4, [r2, #4]
 800782a:	e7ca      	b.n	80077c2 <_free_r+0x26>
 800782c:	b003      	add	sp, #12
 800782e:	bd30      	pop	{r4, r5, pc}
 8007830:	200005cc 	.word	0x200005cc

08007834 <__sfputc_r>:
 8007834:	6893      	ldr	r3, [r2, #8]
 8007836:	3b01      	subs	r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	b410      	push	{r4}
 800783c:	6093      	str	r3, [r2, #8]
 800783e:	da08      	bge.n	8007852 <__sfputc_r+0x1e>
 8007840:	6994      	ldr	r4, [r2, #24]
 8007842:	42a3      	cmp	r3, r4
 8007844:	db01      	blt.n	800784a <__sfputc_r+0x16>
 8007846:	290a      	cmp	r1, #10
 8007848:	d103      	bne.n	8007852 <__sfputc_r+0x1e>
 800784a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800784e:	f000 be56 	b.w	80084fe <__swbuf_r>
 8007852:	6813      	ldr	r3, [r2, #0]
 8007854:	1c58      	adds	r0, r3, #1
 8007856:	6010      	str	r0, [r2, #0]
 8007858:	7019      	strb	r1, [r3, #0]
 800785a:	4608      	mov	r0, r1
 800785c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007860:	4770      	bx	lr

08007862 <__sfputs_r>:
 8007862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007864:	4606      	mov	r6, r0
 8007866:	460f      	mov	r7, r1
 8007868:	4614      	mov	r4, r2
 800786a:	18d5      	adds	r5, r2, r3
 800786c:	42ac      	cmp	r4, r5
 800786e:	d101      	bne.n	8007874 <__sfputs_r+0x12>
 8007870:	2000      	movs	r0, #0
 8007872:	e007      	b.n	8007884 <__sfputs_r+0x22>
 8007874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007878:	463a      	mov	r2, r7
 800787a:	4630      	mov	r0, r6
 800787c:	f7ff ffda 	bl	8007834 <__sfputc_r>
 8007880:	1c43      	adds	r3, r0, #1
 8007882:	d1f3      	bne.n	800786c <__sfputs_r+0xa>
 8007884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007888 <_vfiprintf_r>:
 8007888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788c:	460d      	mov	r5, r1
 800788e:	b09d      	sub	sp, #116	; 0x74
 8007890:	4614      	mov	r4, r2
 8007892:	4698      	mov	r8, r3
 8007894:	4606      	mov	r6, r0
 8007896:	b118      	cbz	r0, 80078a0 <_vfiprintf_r+0x18>
 8007898:	6a03      	ldr	r3, [r0, #32]
 800789a:	b90b      	cbnz	r3, 80078a0 <_vfiprintf_r+0x18>
 800789c:	f7fe fffc 	bl	8006898 <__sinit>
 80078a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078a2:	07d9      	lsls	r1, r3, #31
 80078a4:	d405      	bmi.n	80078b2 <_vfiprintf_r+0x2a>
 80078a6:	89ab      	ldrh	r3, [r5, #12]
 80078a8:	059a      	lsls	r2, r3, #22
 80078aa:	d402      	bmi.n	80078b2 <_vfiprintf_r+0x2a>
 80078ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078ae:	f7ff f8f6 	bl	8006a9e <__retarget_lock_acquire_recursive>
 80078b2:	89ab      	ldrh	r3, [r5, #12]
 80078b4:	071b      	lsls	r3, r3, #28
 80078b6:	d501      	bpl.n	80078bc <_vfiprintf_r+0x34>
 80078b8:	692b      	ldr	r3, [r5, #16]
 80078ba:	b99b      	cbnz	r3, 80078e4 <_vfiprintf_r+0x5c>
 80078bc:	4629      	mov	r1, r5
 80078be:	4630      	mov	r0, r6
 80078c0:	f000 fe5a 	bl	8008578 <__swsetup_r>
 80078c4:	b170      	cbz	r0, 80078e4 <_vfiprintf_r+0x5c>
 80078c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078c8:	07dc      	lsls	r4, r3, #31
 80078ca:	d504      	bpl.n	80078d6 <_vfiprintf_r+0x4e>
 80078cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078d0:	b01d      	add	sp, #116	; 0x74
 80078d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d6:	89ab      	ldrh	r3, [r5, #12]
 80078d8:	0598      	lsls	r0, r3, #22
 80078da:	d4f7      	bmi.n	80078cc <_vfiprintf_r+0x44>
 80078dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078de:	f7ff f8df 	bl	8006aa0 <__retarget_lock_release_recursive>
 80078e2:	e7f3      	b.n	80078cc <_vfiprintf_r+0x44>
 80078e4:	2300      	movs	r3, #0
 80078e6:	9309      	str	r3, [sp, #36]	; 0x24
 80078e8:	2320      	movs	r3, #32
 80078ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80078f2:	2330      	movs	r3, #48	; 0x30
 80078f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007aa8 <_vfiprintf_r+0x220>
 80078f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078fc:	f04f 0901 	mov.w	r9, #1
 8007900:	4623      	mov	r3, r4
 8007902:	469a      	mov	sl, r3
 8007904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007908:	b10a      	cbz	r2, 800790e <_vfiprintf_r+0x86>
 800790a:	2a25      	cmp	r2, #37	; 0x25
 800790c:	d1f9      	bne.n	8007902 <_vfiprintf_r+0x7a>
 800790e:	ebba 0b04 	subs.w	fp, sl, r4
 8007912:	d00b      	beq.n	800792c <_vfiprintf_r+0xa4>
 8007914:	465b      	mov	r3, fp
 8007916:	4622      	mov	r2, r4
 8007918:	4629      	mov	r1, r5
 800791a:	4630      	mov	r0, r6
 800791c:	f7ff ffa1 	bl	8007862 <__sfputs_r>
 8007920:	3001      	adds	r0, #1
 8007922:	f000 80a9 	beq.w	8007a78 <_vfiprintf_r+0x1f0>
 8007926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007928:	445a      	add	r2, fp
 800792a:	9209      	str	r2, [sp, #36]	; 0x24
 800792c:	f89a 3000 	ldrb.w	r3, [sl]
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 80a1 	beq.w	8007a78 <_vfiprintf_r+0x1f0>
 8007936:	2300      	movs	r3, #0
 8007938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800793c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007940:	f10a 0a01 	add.w	sl, sl, #1
 8007944:	9304      	str	r3, [sp, #16]
 8007946:	9307      	str	r3, [sp, #28]
 8007948:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800794c:	931a      	str	r3, [sp, #104]	; 0x68
 800794e:	4654      	mov	r4, sl
 8007950:	2205      	movs	r2, #5
 8007952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007956:	4854      	ldr	r0, [pc, #336]	; (8007aa8 <_vfiprintf_r+0x220>)
 8007958:	f7f8 fc62 	bl	8000220 <memchr>
 800795c:	9a04      	ldr	r2, [sp, #16]
 800795e:	b9d8      	cbnz	r0, 8007998 <_vfiprintf_r+0x110>
 8007960:	06d1      	lsls	r1, r2, #27
 8007962:	bf44      	itt	mi
 8007964:	2320      	movmi	r3, #32
 8007966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800796a:	0713      	lsls	r3, r2, #28
 800796c:	bf44      	itt	mi
 800796e:	232b      	movmi	r3, #43	; 0x2b
 8007970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007974:	f89a 3000 	ldrb.w	r3, [sl]
 8007978:	2b2a      	cmp	r3, #42	; 0x2a
 800797a:	d015      	beq.n	80079a8 <_vfiprintf_r+0x120>
 800797c:	9a07      	ldr	r2, [sp, #28]
 800797e:	4654      	mov	r4, sl
 8007980:	2000      	movs	r0, #0
 8007982:	f04f 0c0a 	mov.w	ip, #10
 8007986:	4621      	mov	r1, r4
 8007988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800798c:	3b30      	subs	r3, #48	; 0x30
 800798e:	2b09      	cmp	r3, #9
 8007990:	d94d      	bls.n	8007a2e <_vfiprintf_r+0x1a6>
 8007992:	b1b0      	cbz	r0, 80079c2 <_vfiprintf_r+0x13a>
 8007994:	9207      	str	r2, [sp, #28]
 8007996:	e014      	b.n	80079c2 <_vfiprintf_r+0x13a>
 8007998:	eba0 0308 	sub.w	r3, r0, r8
 800799c:	fa09 f303 	lsl.w	r3, r9, r3
 80079a0:	4313      	orrs	r3, r2
 80079a2:	9304      	str	r3, [sp, #16]
 80079a4:	46a2      	mov	sl, r4
 80079a6:	e7d2      	b.n	800794e <_vfiprintf_r+0xc6>
 80079a8:	9b03      	ldr	r3, [sp, #12]
 80079aa:	1d19      	adds	r1, r3, #4
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	9103      	str	r1, [sp, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	bfbb      	ittet	lt
 80079b4:	425b      	neglt	r3, r3
 80079b6:	f042 0202 	orrlt.w	r2, r2, #2
 80079ba:	9307      	strge	r3, [sp, #28]
 80079bc:	9307      	strlt	r3, [sp, #28]
 80079be:	bfb8      	it	lt
 80079c0:	9204      	strlt	r2, [sp, #16]
 80079c2:	7823      	ldrb	r3, [r4, #0]
 80079c4:	2b2e      	cmp	r3, #46	; 0x2e
 80079c6:	d10c      	bne.n	80079e2 <_vfiprintf_r+0x15a>
 80079c8:	7863      	ldrb	r3, [r4, #1]
 80079ca:	2b2a      	cmp	r3, #42	; 0x2a
 80079cc:	d134      	bne.n	8007a38 <_vfiprintf_r+0x1b0>
 80079ce:	9b03      	ldr	r3, [sp, #12]
 80079d0:	1d1a      	adds	r2, r3, #4
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	9203      	str	r2, [sp, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	bfb8      	it	lt
 80079da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80079de:	3402      	adds	r4, #2
 80079e0:	9305      	str	r3, [sp, #20]
 80079e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007ab8 <_vfiprintf_r+0x230>
 80079e6:	7821      	ldrb	r1, [r4, #0]
 80079e8:	2203      	movs	r2, #3
 80079ea:	4650      	mov	r0, sl
 80079ec:	f7f8 fc18 	bl	8000220 <memchr>
 80079f0:	b138      	cbz	r0, 8007a02 <_vfiprintf_r+0x17a>
 80079f2:	9b04      	ldr	r3, [sp, #16]
 80079f4:	eba0 000a 	sub.w	r0, r0, sl
 80079f8:	2240      	movs	r2, #64	; 0x40
 80079fa:	4082      	lsls	r2, r0
 80079fc:	4313      	orrs	r3, r2
 80079fe:	3401      	adds	r4, #1
 8007a00:	9304      	str	r3, [sp, #16]
 8007a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a06:	4829      	ldr	r0, [pc, #164]	; (8007aac <_vfiprintf_r+0x224>)
 8007a08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a0c:	2206      	movs	r2, #6
 8007a0e:	f7f8 fc07 	bl	8000220 <memchr>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	d03f      	beq.n	8007a96 <_vfiprintf_r+0x20e>
 8007a16:	4b26      	ldr	r3, [pc, #152]	; (8007ab0 <_vfiprintf_r+0x228>)
 8007a18:	bb1b      	cbnz	r3, 8007a62 <_vfiprintf_r+0x1da>
 8007a1a:	9b03      	ldr	r3, [sp, #12]
 8007a1c:	3307      	adds	r3, #7
 8007a1e:	f023 0307 	bic.w	r3, r3, #7
 8007a22:	3308      	adds	r3, #8
 8007a24:	9303      	str	r3, [sp, #12]
 8007a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a28:	443b      	add	r3, r7
 8007a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a2c:	e768      	b.n	8007900 <_vfiprintf_r+0x78>
 8007a2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a32:	460c      	mov	r4, r1
 8007a34:	2001      	movs	r0, #1
 8007a36:	e7a6      	b.n	8007986 <_vfiprintf_r+0xfe>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	3401      	adds	r4, #1
 8007a3c:	9305      	str	r3, [sp, #20]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	f04f 0c0a 	mov.w	ip, #10
 8007a44:	4620      	mov	r0, r4
 8007a46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a4a:	3a30      	subs	r2, #48	; 0x30
 8007a4c:	2a09      	cmp	r2, #9
 8007a4e:	d903      	bls.n	8007a58 <_vfiprintf_r+0x1d0>
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d0c6      	beq.n	80079e2 <_vfiprintf_r+0x15a>
 8007a54:	9105      	str	r1, [sp, #20]
 8007a56:	e7c4      	b.n	80079e2 <_vfiprintf_r+0x15a>
 8007a58:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e7f0      	b.n	8007a44 <_vfiprintf_r+0x1bc>
 8007a62:	ab03      	add	r3, sp, #12
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	462a      	mov	r2, r5
 8007a68:	4b12      	ldr	r3, [pc, #72]	; (8007ab4 <_vfiprintf_r+0x22c>)
 8007a6a:	a904      	add	r1, sp, #16
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	f7fe fa0b 	bl	8005e88 <_printf_float>
 8007a72:	4607      	mov	r7, r0
 8007a74:	1c78      	adds	r0, r7, #1
 8007a76:	d1d6      	bne.n	8007a26 <_vfiprintf_r+0x19e>
 8007a78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a7a:	07d9      	lsls	r1, r3, #31
 8007a7c:	d405      	bmi.n	8007a8a <_vfiprintf_r+0x202>
 8007a7e:	89ab      	ldrh	r3, [r5, #12]
 8007a80:	059a      	lsls	r2, r3, #22
 8007a82:	d402      	bmi.n	8007a8a <_vfiprintf_r+0x202>
 8007a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a86:	f7ff f80b 	bl	8006aa0 <__retarget_lock_release_recursive>
 8007a8a:	89ab      	ldrh	r3, [r5, #12]
 8007a8c:	065b      	lsls	r3, r3, #25
 8007a8e:	f53f af1d 	bmi.w	80078cc <_vfiprintf_r+0x44>
 8007a92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a94:	e71c      	b.n	80078d0 <_vfiprintf_r+0x48>
 8007a96:	ab03      	add	r3, sp, #12
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	462a      	mov	r2, r5
 8007a9c:	4b05      	ldr	r3, [pc, #20]	; (8007ab4 <_vfiprintf_r+0x22c>)
 8007a9e:	a904      	add	r1, sp, #16
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f7fe fc95 	bl	80063d0 <_printf_i>
 8007aa6:	e7e4      	b.n	8007a72 <_vfiprintf_r+0x1ea>
 8007aa8:	08008975 	.word	0x08008975
 8007aac:	0800897f 	.word	0x0800897f
 8007ab0:	08005e89 	.word	0x08005e89
 8007ab4:	08007863 	.word	0x08007863
 8007ab8:	0800897b 	.word	0x0800897b

08007abc <malloc>:
 8007abc:	4b02      	ldr	r3, [pc, #8]	; (8007ac8 <malloc+0xc>)
 8007abe:	4601      	mov	r1, r0
 8007ac0:	6818      	ldr	r0, [r3, #0]
 8007ac2:	f000 b823 	b.w	8007b0c <_malloc_r>
 8007ac6:	bf00      	nop
 8007ac8:	20000064 	.word	0x20000064

08007acc <sbrk_aligned>:
 8007acc:	b570      	push	{r4, r5, r6, lr}
 8007ace:	4e0e      	ldr	r6, [pc, #56]	; (8007b08 <sbrk_aligned+0x3c>)
 8007ad0:	460c      	mov	r4, r1
 8007ad2:	6831      	ldr	r1, [r6, #0]
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	b911      	cbnz	r1, 8007ade <sbrk_aligned+0x12>
 8007ad8:	f000 fdda 	bl	8008690 <_sbrk_r>
 8007adc:	6030      	str	r0, [r6, #0]
 8007ade:	4621      	mov	r1, r4
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	f000 fdd5 	bl	8008690 <_sbrk_r>
 8007ae6:	1c43      	adds	r3, r0, #1
 8007ae8:	d00a      	beq.n	8007b00 <sbrk_aligned+0x34>
 8007aea:	1cc4      	adds	r4, r0, #3
 8007aec:	f024 0403 	bic.w	r4, r4, #3
 8007af0:	42a0      	cmp	r0, r4
 8007af2:	d007      	beq.n	8007b04 <sbrk_aligned+0x38>
 8007af4:	1a21      	subs	r1, r4, r0
 8007af6:	4628      	mov	r0, r5
 8007af8:	f000 fdca 	bl	8008690 <_sbrk_r>
 8007afc:	3001      	adds	r0, #1
 8007afe:	d101      	bne.n	8007b04 <sbrk_aligned+0x38>
 8007b00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007b04:	4620      	mov	r0, r4
 8007b06:	bd70      	pop	{r4, r5, r6, pc}
 8007b08:	200005d0 	.word	0x200005d0

08007b0c <_malloc_r>:
 8007b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b10:	1ccd      	adds	r5, r1, #3
 8007b12:	f025 0503 	bic.w	r5, r5, #3
 8007b16:	3508      	adds	r5, #8
 8007b18:	2d0c      	cmp	r5, #12
 8007b1a:	bf38      	it	cc
 8007b1c:	250c      	movcc	r5, #12
 8007b1e:	2d00      	cmp	r5, #0
 8007b20:	4607      	mov	r7, r0
 8007b22:	db01      	blt.n	8007b28 <_malloc_r+0x1c>
 8007b24:	42a9      	cmp	r1, r5
 8007b26:	d905      	bls.n	8007b34 <_malloc_r+0x28>
 8007b28:	230c      	movs	r3, #12
 8007b2a:	603b      	str	r3, [r7, #0]
 8007b2c:	2600      	movs	r6, #0
 8007b2e:	4630      	mov	r0, r6
 8007b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007c08 <_malloc_r+0xfc>
 8007b38:	f000 f916 	bl	8007d68 <__malloc_lock>
 8007b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8007b40:	461c      	mov	r4, r3
 8007b42:	bb5c      	cbnz	r4, 8007b9c <_malloc_r+0x90>
 8007b44:	4629      	mov	r1, r5
 8007b46:	4638      	mov	r0, r7
 8007b48:	f7ff ffc0 	bl	8007acc <sbrk_aligned>
 8007b4c:	1c43      	adds	r3, r0, #1
 8007b4e:	4604      	mov	r4, r0
 8007b50:	d155      	bne.n	8007bfe <_malloc_r+0xf2>
 8007b52:	f8d8 4000 	ldr.w	r4, [r8]
 8007b56:	4626      	mov	r6, r4
 8007b58:	2e00      	cmp	r6, #0
 8007b5a:	d145      	bne.n	8007be8 <_malloc_r+0xdc>
 8007b5c:	2c00      	cmp	r4, #0
 8007b5e:	d048      	beq.n	8007bf2 <_malloc_r+0xe6>
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	4631      	mov	r1, r6
 8007b64:	4638      	mov	r0, r7
 8007b66:	eb04 0903 	add.w	r9, r4, r3
 8007b6a:	f000 fd91 	bl	8008690 <_sbrk_r>
 8007b6e:	4581      	cmp	r9, r0
 8007b70:	d13f      	bne.n	8007bf2 <_malloc_r+0xe6>
 8007b72:	6821      	ldr	r1, [r4, #0]
 8007b74:	1a6d      	subs	r5, r5, r1
 8007b76:	4629      	mov	r1, r5
 8007b78:	4638      	mov	r0, r7
 8007b7a:	f7ff ffa7 	bl	8007acc <sbrk_aligned>
 8007b7e:	3001      	adds	r0, #1
 8007b80:	d037      	beq.n	8007bf2 <_malloc_r+0xe6>
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	442b      	add	r3, r5
 8007b86:	6023      	str	r3, [r4, #0]
 8007b88:	f8d8 3000 	ldr.w	r3, [r8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d038      	beq.n	8007c02 <_malloc_r+0xf6>
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	42a2      	cmp	r2, r4
 8007b94:	d12b      	bne.n	8007bee <_malloc_r+0xe2>
 8007b96:	2200      	movs	r2, #0
 8007b98:	605a      	str	r2, [r3, #4]
 8007b9a:	e00f      	b.n	8007bbc <_malloc_r+0xb0>
 8007b9c:	6822      	ldr	r2, [r4, #0]
 8007b9e:	1b52      	subs	r2, r2, r5
 8007ba0:	d41f      	bmi.n	8007be2 <_malloc_r+0xd6>
 8007ba2:	2a0b      	cmp	r2, #11
 8007ba4:	d917      	bls.n	8007bd6 <_malloc_r+0xca>
 8007ba6:	1961      	adds	r1, r4, r5
 8007ba8:	42a3      	cmp	r3, r4
 8007baa:	6025      	str	r5, [r4, #0]
 8007bac:	bf18      	it	ne
 8007bae:	6059      	strne	r1, [r3, #4]
 8007bb0:	6863      	ldr	r3, [r4, #4]
 8007bb2:	bf08      	it	eq
 8007bb4:	f8c8 1000 	streq.w	r1, [r8]
 8007bb8:	5162      	str	r2, [r4, r5]
 8007bba:	604b      	str	r3, [r1, #4]
 8007bbc:	4638      	mov	r0, r7
 8007bbe:	f104 060b 	add.w	r6, r4, #11
 8007bc2:	f000 f8d7 	bl	8007d74 <__malloc_unlock>
 8007bc6:	f026 0607 	bic.w	r6, r6, #7
 8007bca:	1d23      	adds	r3, r4, #4
 8007bcc:	1af2      	subs	r2, r6, r3
 8007bce:	d0ae      	beq.n	8007b2e <_malloc_r+0x22>
 8007bd0:	1b9b      	subs	r3, r3, r6
 8007bd2:	50a3      	str	r3, [r4, r2]
 8007bd4:	e7ab      	b.n	8007b2e <_malloc_r+0x22>
 8007bd6:	42a3      	cmp	r3, r4
 8007bd8:	6862      	ldr	r2, [r4, #4]
 8007bda:	d1dd      	bne.n	8007b98 <_malloc_r+0x8c>
 8007bdc:	f8c8 2000 	str.w	r2, [r8]
 8007be0:	e7ec      	b.n	8007bbc <_malloc_r+0xb0>
 8007be2:	4623      	mov	r3, r4
 8007be4:	6864      	ldr	r4, [r4, #4]
 8007be6:	e7ac      	b.n	8007b42 <_malloc_r+0x36>
 8007be8:	4634      	mov	r4, r6
 8007bea:	6876      	ldr	r6, [r6, #4]
 8007bec:	e7b4      	b.n	8007b58 <_malloc_r+0x4c>
 8007bee:	4613      	mov	r3, r2
 8007bf0:	e7cc      	b.n	8007b8c <_malloc_r+0x80>
 8007bf2:	230c      	movs	r3, #12
 8007bf4:	603b      	str	r3, [r7, #0]
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	f000 f8bc 	bl	8007d74 <__malloc_unlock>
 8007bfc:	e797      	b.n	8007b2e <_malloc_r+0x22>
 8007bfe:	6025      	str	r5, [r4, #0]
 8007c00:	e7dc      	b.n	8007bbc <_malloc_r+0xb0>
 8007c02:	605b      	str	r3, [r3, #4]
 8007c04:	deff      	udf	#255	; 0xff
 8007c06:	bf00      	nop
 8007c08:	200005cc 	.word	0x200005cc

08007c0c <__sflush_r>:
 8007c0c:	898a      	ldrh	r2, [r1, #12]
 8007c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c12:	4605      	mov	r5, r0
 8007c14:	0710      	lsls	r0, r2, #28
 8007c16:	460c      	mov	r4, r1
 8007c18:	d458      	bmi.n	8007ccc <__sflush_r+0xc0>
 8007c1a:	684b      	ldr	r3, [r1, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	dc05      	bgt.n	8007c2c <__sflush_r+0x20>
 8007c20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	dc02      	bgt.n	8007c2c <__sflush_r+0x20>
 8007c26:	2000      	movs	r0, #0
 8007c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c2e:	2e00      	cmp	r6, #0
 8007c30:	d0f9      	beq.n	8007c26 <__sflush_r+0x1a>
 8007c32:	2300      	movs	r3, #0
 8007c34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c38:	682f      	ldr	r7, [r5, #0]
 8007c3a:	6a21      	ldr	r1, [r4, #32]
 8007c3c:	602b      	str	r3, [r5, #0]
 8007c3e:	d032      	beq.n	8007ca6 <__sflush_r+0x9a>
 8007c40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c42:	89a3      	ldrh	r3, [r4, #12]
 8007c44:	075a      	lsls	r2, r3, #29
 8007c46:	d505      	bpl.n	8007c54 <__sflush_r+0x48>
 8007c48:	6863      	ldr	r3, [r4, #4]
 8007c4a:	1ac0      	subs	r0, r0, r3
 8007c4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c4e:	b10b      	cbz	r3, 8007c54 <__sflush_r+0x48>
 8007c50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c52:	1ac0      	subs	r0, r0, r3
 8007c54:	2300      	movs	r3, #0
 8007c56:	4602      	mov	r2, r0
 8007c58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c5a:	6a21      	ldr	r1, [r4, #32]
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	47b0      	blx	r6
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	89a3      	ldrh	r3, [r4, #12]
 8007c64:	d106      	bne.n	8007c74 <__sflush_r+0x68>
 8007c66:	6829      	ldr	r1, [r5, #0]
 8007c68:	291d      	cmp	r1, #29
 8007c6a:	d82b      	bhi.n	8007cc4 <__sflush_r+0xb8>
 8007c6c:	4a29      	ldr	r2, [pc, #164]	; (8007d14 <__sflush_r+0x108>)
 8007c6e:	410a      	asrs	r2, r1
 8007c70:	07d6      	lsls	r6, r2, #31
 8007c72:	d427      	bmi.n	8007cc4 <__sflush_r+0xb8>
 8007c74:	2200      	movs	r2, #0
 8007c76:	6062      	str	r2, [r4, #4]
 8007c78:	04d9      	lsls	r1, r3, #19
 8007c7a:	6922      	ldr	r2, [r4, #16]
 8007c7c:	6022      	str	r2, [r4, #0]
 8007c7e:	d504      	bpl.n	8007c8a <__sflush_r+0x7e>
 8007c80:	1c42      	adds	r2, r0, #1
 8007c82:	d101      	bne.n	8007c88 <__sflush_r+0x7c>
 8007c84:	682b      	ldr	r3, [r5, #0]
 8007c86:	b903      	cbnz	r3, 8007c8a <__sflush_r+0x7e>
 8007c88:	6560      	str	r0, [r4, #84]	; 0x54
 8007c8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c8c:	602f      	str	r7, [r5, #0]
 8007c8e:	2900      	cmp	r1, #0
 8007c90:	d0c9      	beq.n	8007c26 <__sflush_r+0x1a>
 8007c92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c96:	4299      	cmp	r1, r3
 8007c98:	d002      	beq.n	8007ca0 <__sflush_r+0x94>
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	f7ff fd7e 	bl	800779c <_free_r>
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	6360      	str	r0, [r4, #52]	; 0x34
 8007ca4:	e7c0      	b.n	8007c28 <__sflush_r+0x1c>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	4628      	mov	r0, r5
 8007caa:	47b0      	blx	r6
 8007cac:	1c41      	adds	r1, r0, #1
 8007cae:	d1c8      	bne.n	8007c42 <__sflush_r+0x36>
 8007cb0:	682b      	ldr	r3, [r5, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d0c5      	beq.n	8007c42 <__sflush_r+0x36>
 8007cb6:	2b1d      	cmp	r3, #29
 8007cb8:	d001      	beq.n	8007cbe <__sflush_r+0xb2>
 8007cba:	2b16      	cmp	r3, #22
 8007cbc:	d101      	bne.n	8007cc2 <__sflush_r+0xb6>
 8007cbe:	602f      	str	r7, [r5, #0]
 8007cc0:	e7b1      	b.n	8007c26 <__sflush_r+0x1a>
 8007cc2:	89a3      	ldrh	r3, [r4, #12]
 8007cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cc8:	81a3      	strh	r3, [r4, #12]
 8007cca:	e7ad      	b.n	8007c28 <__sflush_r+0x1c>
 8007ccc:	690f      	ldr	r7, [r1, #16]
 8007cce:	2f00      	cmp	r7, #0
 8007cd0:	d0a9      	beq.n	8007c26 <__sflush_r+0x1a>
 8007cd2:	0793      	lsls	r3, r2, #30
 8007cd4:	680e      	ldr	r6, [r1, #0]
 8007cd6:	bf08      	it	eq
 8007cd8:	694b      	ldreq	r3, [r1, #20]
 8007cda:	600f      	str	r7, [r1, #0]
 8007cdc:	bf18      	it	ne
 8007cde:	2300      	movne	r3, #0
 8007ce0:	eba6 0807 	sub.w	r8, r6, r7
 8007ce4:	608b      	str	r3, [r1, #8]
 8007ce6:	f1b8 0f00 	cmp.w	r8, #0
 8007cea:	dd9c      	ble.n	8007c26 <__sflush_r+0x1a>
 8007cec:	6a21      	ldr	r1, [r4, #32]
 8007cee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cf0:	4643      	mov	r3, r8
 8007cf2:	463a      	mov	r2, r7
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	47b0      	blx	r6
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	dc06      	bgt.n	8007d0a <__sflush_r+0xfe>
 8007cfc:	89a3      	ldrh	r3, [r4, #12]
 8007cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d02:	81a3      	strh	r3, [r4, #12]
 8007d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d08:	e78e      	b.n	8007c28 <__sflush_r+0x1c>
 8007d0a:	4407      	add	r7, r0
 8007d0c:	eba8 0800 	sub.w	r8, r8, r0
 8007d10:	e7e9      	b.n	8007ce6 <__sflush_r+0xda>
 8007d12:	bf00      	nop
 8007d14:	dfbffffe 	.word	0xdfbffffe

08007d18 <_fflush_r>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	690b      	ldr	r3, [r1, #16]
 8007d1c:	4605      	mov	r5, r0
 8007d1e:	460c      	mov	r4, r1
 8007d20:	b913      	cbnz	r3, 8007d28 <_fflush_r+0x10>
 8007d22:	2500      	movs	r5, #0
 8007d24:	4628      	mov	r0, r5
 8007d26:	bd38      	pop	{r3, r4, r5, pc}
 8007d28:	b118      	cbz	r0, 8007d32 <_fflush_r+0x1a>
 8007d2a:	6a03      	ldr	r3, [r0, #32]
 8007d2c:	b90b      	cbnz	r3, 8007d32 <_fflush_r+0x1a>
 8007d2e:	f7fe fdb3 	bl	8006898 <__sinit>
 8007d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0f3      	beq.n	8007d22 <_fflush_r+0xa>
 8007d3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d3c:	07d0      	lsls	r0, r2, #31
 8007d3e:	d404      	bmi.n	8007d4a <_fflush_r+0x32>
 8007d40:	0599      	lsls	r1, r3, #22
 8007d42:	d402      	bmi.n	8007d4a <_fflush_r+0x32>
 8007d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d46:	f7fe feaa 	bl	8006a9e <__retarget_lock_acquire_recursive>
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	f7ff ff5d 	bl	8007c0c <__sflush_r>
 8007d52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d54:	07da      	lsls	r2, r3, #31
 8007d56:	4605      	mov	r5, r0
 8007d58:	d4e4      	bmi.n	8007d24 <_fflush_r+0xc>
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	059b      	lsls	r3, r3, #22
 8007d5e:	d4e1      	bmi.n	8007d24 <_fflush_r+0xc>
 8007d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d62:	f7fe fe9d 	bl	8006aa0 <__retarget_lock_release_recursive>
 8007d66:	e7dd      	b.n	8007d24 <_fflush_r+0xc>

08007d68 <__malloc_lock>:
 8007d68:	4801      	ldr	r0, [pc, #4]	; (8007d70 <__malloc_lock+0x8>)
 8007d6a:	f7fe be98 	b.w	8006a9e <__retarget_lock_acquire_recursive>
 8007d6e:	bf00      	nop
 8007d70:	200005c8 	.word	0x200005c8

08007d74 <__malloc_unlock>:
 8007d74:	4801      	ldr	r0, [pc, #4]	; (8007d7c <__malloc_unlock+0x8>)
 8007d76:	f7fe be93 	b.w	8006aa0 <__retarget_lock_release_recursive>
 8007d7a:	bf00      	nop
 8007d7c:	200005c8 	.word	0x200005c8

08007d80 <_Balloc>:
 8007d80:	b570      	push	{r4, r5, r6, lr}
 8007d82:	69c6      	ldr	r6, [r0, #28]
 8007d84:	4604      	mov	r4, r0
 8007d86:	460d      	mov	r5, r1
 8007d88:	b976      	cbnz	r6, 8007da8 <_Balloc+0x28>
 8007d8a:	2010      	movs	r0, #16
 8007d8c:	f7ff fe96 	bl	8007abc <malloc>
 8007d90:	4602      	mov	r2, r0
 8007d92:	61e0      	str	r0, [r4, #28]
 8007d94:	b920      	cbnz	r0, 8007da0 <_Balloc+0x20>
 8007d96:	4b18      	ldr	r3, [pc, #96]	; (8007df8 <_Balloc+0x78>)
 8007d98:	4818      	ldr	r0, [pc, #96]	; (8007dfc <_Balloc+0x7c>)
 8007d9a:	216b      	movs	r1, #107	; 0x6b
 8007d9c:	f000 fca8 	bl	80086f0 <__assert_func>
 8007da0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007da4:	6006      	str	r6, [r0, #0]
 8007da6:	60c6      	str	r6, [r0, #12]
 8007da8:	69e6      	ldr	r6, [r4, #28]
 8007daa:	68f3      	ldr	r3, [r6, #12]
 8007dac:	b183      	cbz	r3, 8007dd0 <_Balloc+0x50>
 8007dae:	69e3      	ldr	r3, [r4, #28]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007db6:	b9b8      	cbnz	r0, 8007de8 <_Balloc+0x68>
 8007db8:	2101      	movs	r1, #1
 8007dba:	fa01 f605 	lsl.w	r6, r1, r5
 8007dbe:	1d72      	adds	r2, r6, #5
 8007dc0:	0092      	lsls	r2, r2, #2
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	f000 fcb2 	bl	800872c <_calloc_r>
 8007dc8:	b160      	cbz	r0, 8007de4 <_Balloc+0x64>
 8007dca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007dce:	e00e      	b.n	8007dee <_Balloc+0x6e>
 8007dd0:	2221      	movs	r2, #33	; 0x21
 8007dd2:	2104      	movs	r1, #4
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f000 fca9 	bl	800872c <_calloc_r>
 8007dda:	69e3      	ldr	r3, [r4, #28]
 8007ddc:	60f0      	str	r0, [r6, #12]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e4      	bne.n	8007dae <_Balloc+0x2e>
 8007de4:	2000      	movs	r0, #0
 8007de6:	bd70      	pop	{r4, r5, r6, pc}
 8007de8:	6802      	ldr	r2, [r0, #0]
 8007dea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007dee:	2300      	movs	r3, #0
 8007df0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007df4:	e7f7      	b.n	8007de6 <_Balloc+0x66>
 8007df6:	bf00      	nop
 8007df8:	080088f5 	.word	0x080088f5
 8007dfc:	08008986 	.word	0x08008986

08007e00 <_Bfree>:
 8007e00:	b570      	push	{r4, r5, r6, lr}
 8007e02:	69c6      	ldr	r6, [r0, #28]
 8007e04:	4605      	mov	r5, r0
 8007e06:	460c      	mov	r4, r1
 8007e08:	b976      	cbnz	r6, 8007e28 <_Bfree+0x28>
 8007e0a:	2010      	movs	r0, #16
 8007e0c:	f7ff fe56 	bl	8007abc <malloc>
 8007e10:	4602      	mov	r2, r0
 8007e12:	61e8      	str	r0, [r5, #28]
 8007e14:	b920      	cbnz	r0, 8007e20 <_Bfree+0x20>
 8007e16:	4b09      	ldr	r3, [pc, #36]	; (8007e3c <_Bfree+0x3c>)
 8007e18:	4809      	ldr	r0, [pc, #36]	; (8007e40 <_Bfree+0x40>)
 8007e1a:	218f      	movs	r1, #143	; 0x8f
 8007e1c:	f000 fc68 	bl	80086f0 <__assert_func>
 8007e20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e24:	6006      	str	r6, [r0, #0]
 8007e26:	60c6      	str	r6, [r0, #12]
 8007e28:	b13c      	cbz	r4, 8007e3a <_Bfree+0x3a>
 8007e2a:	69eb      	ldr	r3, [r5, #28]
 8007e2c:	6862      	ldr	r2, [r4, #4]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e34:	6021      	str	r1, [r4, #0]
 8007e36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
 8007e3c:	080088f5 	.word	0x080088f5
 8007e40:	08008986 	.word	0x08008986

08007e44 <__multadd>:
 8007e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e48:	690d      	ldr	r5, [r1, #16]
 8007e4a:	4607      	mov	r7, r0
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	461e      	mov	r6, r3
 8007e50:	f101 0c14 	add.w	ip, r1, #20
 8007e54:	2000      	movs	r0, #0
 8007e56:	f8dc 3000 	ldr.w	r3, [ip]
 8007e5a:	b299      	uxth	r1, r3
 8007e5c:	fb02 6101 	mla	r1, r2, r1, r6
 8007e60:	0c1e      	lsrs	r6, r3, #16
 8007e62:	0c0b      	lsrs	r3, r1, #16
 8007e64:	fb02 3306 	mla	r3, r2, r6, r3
 8007e68:	b289      	uxth	r1, r1
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e70:	4285      	cmp	r5, r0
 8007e72:	f84c 1b04 	str.w	r1, [ip], #4
 8007e76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e7a:	dcec      	bgt.n	8007e56 <__multadd+0x12>
 8007e7c:	b30e      	cbz	r6, 8007ec2 <__multadd+0x7e>
 8007e7e:	68a3      	ldr	r3, [r4, #8]
 8007e80:	42ab      	cmp	r3, r5
 8007e82:	dc19      	bgt.n	8007eb8 <__multadd+0x74>
 8007e84:	6861      	ldr	r1, [r4, #4]
 8007e86:	4638      	mov	r0, r7
 8007e88:	3101      	adds	r1, #1
 8007e8a:	f7ff ff79 	bl	8007d80 <_Balloc>
 8007e8e:	4680      	mov	r8, r0
 8007e90:	b928      	cbnz	r0, 8007e9e <__multadd+0x5a>
 8007e92:	4602      	mov	r2, r0
 8007e94:	4b0c      	ldr	r3, [pc, #48]	; (8007ec8 <__multadd+0x84>)
 8007e96:	480d      	ldr	r0, [pc, #52]	; (8007ecc <__multadd+0x88>)
 8007e98:	21ba      	movs	r1, #186	; 0xba
 8007e9a:	f000 fc29 	bl	80086f0 <__assert_func>
 8007e9e:	6922      	ldr	r2, [r4, #16]
 8007ea0:	3202      	adds	r2, #2
 8007ea2:	f104 010c 	add.w	r1, r4, #12
 8007ea6:	0092      	lsls	r2, r2, #2
 8007ea8:	300c      	adds	r0, #12
 8007eaa:	f000 fc13 	bl	80086d4 <memcpy>
 8007eae:	4621      	mov	r1, r4
 8007eb0:	4638      	mov	r0, r7
 8007eb2:	f7ff ffa5 	bl	8007e00 <_Bfree>
 8007eb6:	4644      	mov	r4, r8
 8007eb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ebc:	3501      	adds	r5, #1
 8007ebe:	615e      	str	r6, [r3, #20]
 8007ec0:	6125      	str	r5, [r4, #16]
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec8:	08008964 	.word	0x08008964
 8007ecc:	08008986 	.word	0x08008986

08007ed0 <__hi0bits>:
 8007ed0:	0c03      	lsrs	r3, r0, #16
 8007ed2:	041b      	lsls	r3, r3, #16
 8007ed4:	b9d3      	cbnz	r3, 8007f0c <__hi0bits+0x3c>
 8007ed6:	0400      	lsls	r0, r0, #16
 8007ed8:	2310      	movs	r3, #16
 8007eda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ede:	bf04      	itt	eq
 8007ee0:	0200      	lsleq	r0, r0, #8
 8007ee2:	3308      	addeq	r3, #8
 8007ee4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ee8:	bf04      	itt	eq
 8007eea:	0100      	lsleq	r0, r0, #4
 8007eec:	3304      	addeq	r3, #4
 8007eee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ef2:	bf04      	itt	eq
 8007ef4:	0080      	lsleq	r0, r0, #2
 8007ef6:	3302      	addeq	r3, #2
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	db05      	blt.n	8007f08 <__hi0bits+0x38>
 8007efc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007f00:	f103 0301 	add.w	r3, r3, #1
 8007f04:	bf08      	it	eq
 8007f06:	2320      	moveq	r3, #32
 8007f08:	4618      	mov	r0, r3
 8007f0a:	4770      	bx	lr
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	e7e4      	b.n	8007eda <__hi0bits+0xa>

08007f10 <__lo0bits>:
 8007f10:	6803      	ldr	r3, [r0, #0]
 8007f12:	f013 0207 	ands.w	r2, r3, #7
 8007f16:	d00c      	beq.n	8007f32 <__lo0bits+0x22>
 8007f18:	07d9      	lsls	r1, r3, #31
 8007f1a:	d422      	bmi.n	8007f62 <__lo0bits+0x52>
 8007f1c:	079a      	lsls	r2, r3, #30
 8007f1e:	bf49      	itett	mi
 8007f20:	085b      	lsrmi	r3, r3, #1
 8007f22:	089b      	lsrpl	r3, r3, #2
 8007f24:	6003      	strmi	r3, [r0, #0]
 8007f26:	2201      	movmi	r2, #1
 8007f28:	bf5c      	itt	pl
 8007f2a:	6003      	strpl	r3, [r0, #0]
 8007f2c:	2202      	movpl	r2, #2
 8007f2e:	4610      	mov	r0, r2
 8007f30:	4770      	bx	lr
 8007f32:	b299      	uxth	r1, r3
 8007f34:	b909      	cbnz	r1, 8007f3a <__lo0bits+0x2a>
 8007f36:	0c1b      	lsrs	r3, r3, #16
 8007f38:	2210      	movs	r2, #16
 8007f3a:	b2d9      	uxtb	r1, r3
 8007f3c:	b909      	cbnz	r1, 8007f42 <__lo0bits+0x32>
 8007f3e:	3208      	adds	r2, #8
 8007f40:	0a1b      	lsrs	r3, r3, #8
 8007f42:	0719      	lsls	r1, r3, #28
 8007f44:	bf04      	itt	eq
 8007f46:	091b      	lsreq	r3, r3, #4
 8007f48:	3204      	addeq	r2, #4
 8007f4a:	0799      	lsls	r1, r3, #30
 8007f4c:	bf04      	itt	eq
 8007f4e:	089b      	lsreq	r3, r3, #2
 8007f50:	3202      	addeq	r2, #2
 8007f52:	07d9      	lsls	r1, r3, #31
 8007f54:	d403      	bmi.n	8007f5e <__lo0bits+0x4e>
 8007f56:	085b      	lsrs	r3, r3, #1
 8007f58:	f102 0201 	add.w	r2, r2, #1
 8007f5c:	d003      	beq.n	8007f66 <__lo0bits+0x56>
 8007f5e:	6003      	str	r3, [r0, #0]
 8007f60:	e7e5      	b.n	8007f2e <__lo0bits+0x1e>
 8007f62:	2200      	movs	r2, #0
 8007f64:	e7e3      	b.n	8007f2e <__lo0bits+0x1e>
 8007f66:	2220      	movs	r2, #32
 8007f68:	e7e1      	b.n	8007f2e <__lo0bits+0x1e>
	...

08007f6c <__i2b>:
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	460c      	mov	r4, r1
 8007f70:	2101      	movs	r1, #1
 8007f72:	f7ff ff05 	bl	8007d80 <_Balloc>
 8007f76:	4602      	mov	r2, r0
 8007f78:	b928      	cbnz	r0, 8007f86 <__i2b+0x1a>
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <__i2b+0x24>)
 8007f7c:	4805      	ldr	r0, [pc, #20]	; (8007f94 <__i2b+0x28>)
 8007f7e:	f240 1145 	movw	r1, #325	; 0x145
 8007f82:	f000 fbb5 	bl	80086f0 <__assert_func>
 8007f86:	2301      	movs	r3, #1
 8007f88:	6144      	str	r4, [r0, #20]
 8007f8a:	6103      	str	r3, [r0, #16]
 8007f8c:	bd10      	pop	{r4, pc}
 8007f8e:	bf00      	nop
 8007f90:	08008964 	.word	0x08008964
 8007f94:	08008986 	.word	0x08008986

08007f98 <__multiply>:
 8007f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9c:	4691      	mov	r9, r2
 8007f9e:	690a      	ldr	r2, [r1, #16]
 8007fa0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	bfb8      	it	lt
 8007fa8:	460b      	movlt	r3, r1
 8007faa:	460c      	mov	r4, r1
 8007fac:	bfbc      	itt	lt
 8007fae:	464c      	movlt	r4, r9
 8007fb0:	4699      	movlt	r9, r3
 8007fb2:	6927      	ldr	r7, [r4, #16]
 8007fb4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007fb8:	68a3      	ldr	r3, [r4, #8]
 8007fba:	6861      	ldr	r1, [r4, #4]
 8007fbc:	eb07 060a 	add.w	r6, r7, sl
 8007fc0:	42b3      	cmp	r3, r6
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	bfb8      	it	lt
 8007fc6:	3101      	addlt	r1, #1
 8007fc8:	f7ff feda 	bl	8007d80 <_Balloc>
 8007fcc:	b930      	cbnz	r0, 8007fdc <__multiply+0x44>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	4b44      	ldr	r3, [pc, #272]	; (80080e4 <__multiply+0x14c>)
 8007fd2:	4845      	ldr	r0, [pc, #276]	; (80080e8 <__multiply+0x150>)
 8007fd4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007fd8:	f000 fb8a 	bl	80086f0 <__assert_func>
 8007fdc:	f100 0514 	add.w	r5, r0, #20
 8007fe0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007fe4:	462b      	mov	r3, r5
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	4543      	cmp	r3, r8
 8007fea:	d321      	bcc.n	8008030 <__multiply+0x98>
 8007fec:	f104 0314 	add.w	r3, r4, #20
 8007ff0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ff4:	f109 0314 	add.w	r3, r9, #20
 8007ff8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ffc:	9202      	str	r2, [sp, #8]
 8007ffe:	1b3a      	subs	r2, r7, r4
 8008000:	3a15      	subs	r2, #21
 8008002:	f022 0203 	bic.w	r2, r2, #3
 8008006:	3204      	adds	r2, #4
 8008008:	f104 0115 	add.w	r1, r4, #21
 800800c:	428f      	cmp	r7, r1
 800800e:	bf38      	it	cc
 8008010:	2204      	movcc	r2, #4
 8008012:	9201      	str	r2, [sp, #4]
 8008014:	9a02      	ldr	r2, [sp, #8]
 8008016:	9303      	str	r3, [sp, #12]
 8008018:	429a      	cmp	r2, r3
 800801a:	d80c      	bhi.n	8008036 <__multiply+0x9e>
 800801c:	2e00      	cmp	r6, #0
 800801e:	dd03      	ble.n	8008028 <__multiply+0x90>
 8008020:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008024:	2b00      	cmp	r3, #0
 8008026:	d05b      	beq.n	80080e0 <__multiply+0x148>
 8008028:	6106      	str	r6, [r0, #16]
 800802a:	b005      	add	sp, #20
 800802c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008030:	f843 2b04 	str.w	r2, [r3], #4
 8008034:	e7d8      	b.n	8007fe8 <__multiply+0x50>
 8008036:	f8b3 a000 	ldrh.w	sl, [r3]
 800803a:	f1ba 0f00 	cmp.w	sl, #0
 800803e:	d024      	beq.n	800808a <__multiply+0xf2>
 8008040:	f104 0e14 	add.w	lr, r4, #20
 8008044:	46a9      	mov	r9, r5
 8008046:	f04f 0c00 	mov.w	ip, #0
 800804a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800804e:	f8d9 1000 	ldr.w	r1, [r9]
 8008052:	fa1f fb82 	uxth.w	fp, r2
 8008056:	b289      	uxth	r1, r1
 8008058:	fb0a 110b 	mla	r1, sl, fp, r1
 800805c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008060:	f8d9 2000 	ldr.w	r2, [r9]
 8008064:	4461      	add	r1, ip
 8008066:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800806a:	fb0a c20b 	mla	r2, sl, fp, ip
 800806e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008072:	b289      	uxth	r1, r1
 8008074:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008078:	4577      	cmp	r7, lr
 800807a:	f849 1b04 	str.w	r1, [r9], #4
 800807e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008082:	d8e2      	bhi.n	800804a <__multiply+0xb2>
 8008084:	9a01      	ldr	r2, [sp, #4]
 8008086:	f845 c002 	str.w	ip, [r5, r2]
 800808a:	9a03      	ldr	r2, [sp, #12]
 800808c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008090:	3304      	adds	r3, #4
 8008092:	f1b9 0f00 	cmp.w	r9, #0
 8008096:	d021      	beq.n	80080dc <__multiply+0x144>
 8008098:	6829      	ldr	r1, [r5, #0]
 800809a:	f104 0c14 	add.w	ip, r4, #20
 800809e:	46ae      	mov	lr, r5
 80080a0:	f04f 0a00 	mov.w	sl, #0
 80080a4:	f8bc b000 	ldrh.w	fp, [ip]
 80080a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80080ac:	fb09 220b 	mla	r2, r9, fp, r2
 80080b0:	4452      	add	r2, sl
 80080b2:	b289      	uxth	r1, r1
 80080b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80080b8:	f84e 1b04 	str.w	r1, [lr], #4
 80080bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80080c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80080c4:	f8be 1000 	ldrh.w	r1, [lr]
 80080c8:	fb09 110a 	mla	r1, r9, sl, r1
 80080cc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80080d0:	4567      	cmp	r7, ip
 80080d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80080d6:	d8e5      	bhi.n	80080a4 <__multiply+0x10c>
 80080d8:	9a01      	ldr	r2, [sp, #4]
 80080da:	50a9      	str	r1, [r5, r2]
 80080dc:	3504      	adds	r5, #4
 80080de:	e799      	b.n	8008014 <__multiply+0x7c>
 80080e0:	3e01      	subs	r6, #1
 80080e2:	e79b      	b.n	800801c <__multiply+0x84>
 80080e4:	08008964 	.word	0x08008964
 80080e8:	08008986 	.word	0x08008986

080080ec <__pow5mult>:
 80080ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f0:	4615      	mov	r5, r2
 80080f2:	f012 0203 	ands.w	r2, r2, #3
 80080f6:	4606      	mov	r6, r0
 80080f8:	460f      	mov	r7, r1
 80080fa:	d007      	beq.n	800810c <__pow5mult+0x20>
 80080fc:	4c25      	ldr	r4, [pc, #148]	; (8008194 <__pow5mult+0xa8>)
 80080fe:	3a01      	subs	r2, #1
 8008100:	2300      	movs	r3, #0
 8008102:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008106:	f7ff fe9d 	bl	8007e44 <__multadd>
 800810a:	4607      	mov	r7, r0
 800810c:	10ad      	asrs	r5, r5, #2
 800810e:	d03d      	beq.n	800818c <__pow5mult+0xa0>
 8008110:	69f4      	ldr	r4, [r6, #28]
 8008112:	b97c      	cbnz	r4, 8008134 <__pow5mult+0x48>
 8008114:	2010      	movs	r0, #16
 8008116:	f7ff fcd1 	bl	8007abc <malloc>
 800811a:	4602      	mov	r2, r0
 800811c:	61f0      	str	r0, [r6, #28]
 800811e:	b928      	cbnz	r0, 800812c <__pow5mult+0x40>
 8008120:	4b1d      	ldr	r3, [pc, #116]	; (8008198 <__pow5mult+0xac>)
 8008122:	481e      	ldr	r0, [pc, #120]	; (800819c <__pow5mult+0xb0>)
 8008124:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008128:	f000 fae2 	bl	80086f0 <__assert_func>
 800812c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008130:	6004      	str	r4, [r0, #0]
 8008132:	60c4      	str	r4, [r0, #12]
 8008134:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008138:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800813c:	b94c      	cbnz	r4, 8008152 <__pow5mult+0x66>
 800813e:	f240 2171 	movw	r1, #625	; 0x271
 8008142:	4630      	mov	r0, r6
 8008144:	f7ff ff12 	bl	8007f6c <__i2b>
 8008148:	2300      	movs	r3, #0
 800814a:	f8c8 0008 	str.w	r0, [r8, #8]
 800814e:	4604      	mov	r4, r0
 8008150:	6003      	str	r3, [r0, #0]
 8008152:	f04f 0900 	mov.w	r9, #0
 8008156:	07eb      	lsls	r3, r5, #31
 8008158:	d50a      	bpl.n	8008170 <__pow5mult+0x84>
 800815a:	4639      	mov	r1, r7
 800815c:	4622      	mov	r2, r4
 800815e:	4630      	mov	r0, r6
 8008160:	f7ff ff1a 	bl	8007f98 <__multiply>
 8008164:	4639      	mov	r1, r7
 8008166:	4680      	mov	r8, r0
 8008168:	4630      	mov	r0, r6
 800816a:	f7ff fe49 	bl	8007e00 <_Bfree>
 800816e:	4647      	mov	r7, r8
 8008170:	106d      	asrs	r5, r5, #1
 8008172:	d00b      	beq.n	800818c <__pow5mult+0xa0>
 8008174:	6820      	ldr	r0, [r4, #0]
 8008176:	b938      	cbnz	r0, 8008188 <__pow5mult+0x9c>
 8008178:	4622      	mov	r2, r4
 800817a:	4621      	mov	r1, r4
 800817c:	4630      	mov	r0, r6
 800817e:	f7ff ff0b 	bl	8007f98 <__multiply>
 8008182:	6020      	str	r0, [r4, #0]
 8008184:	f8c0 9000 	str.w	r9, [r0]
 8008188:	4604      	mov	r4, r0
 800818a:	e7e4      	b.n	8008156 <__pow5mult+0x6a>
 800818c:	4638      	mov	r0, r7
 800818e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008192:	bf00      	nop
 8008194:	08008ad0 	.word	0x08008ad0
 8008198:	080088f5 	.word	0x080088f5
 800819c:	08008986 	.word	0x08008986

080081a0 <__lshift>:
 80081a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a4:	460c      	mov	r4, r1
 80081a6:	6849      	ldr	r1, [r1, #4]
 80081a8:	6923      	ldr	r3, [r4, #16]
 80081aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80081ae:	68a3      	ldr	r3, [r4, #8]
 80081b0:	4607      	mov	r7, r0
 80081b2:	4691      	mov	r9, r2
 80081b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80081b8:	f108 0601 	add.w	r6, r8, #1
 80081bc:	42b3      	cmp	r3, r6
 80081be:	db0b      	blt.n	80081d8 <__lshift+0x38>
 80081c0:	4638      	mov	r0, r7
 80081c2:	f7ff fddd 	bl	8007d80 <_Balloc>
 80081c6:	4605      	mov	r5, r0
 80081c8:	b948      	cbnz	r0, 80081de <__lshift+0x3e>
 80081ca:	4602      	mov	r2, r0
 80081cc:	4b28      	ldr	r3, [pc, #160]	; (8008270 <__lshift+0xd0>)
 80081ce:	4829      	ldr	r0, [pc, #164]	; (8008274 <__lshift+0xd4>)
 80081d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80081d4:	f000 fa8c 	bl	80086f0 <__assert_func>
 80081d8:	3101      	adds	r1, #1
 80081da:	005b      	lsls	r3, r3, #1
 80081dc:	e7ee      	b.n	80081bc <__lshift+0x1c>
 80081de:	2300      	movs	r3, #0
 80081e0:	f100 0114 	add.w	r1, r0, #20
 80081e4:	f100 0210 	add.w	r2, r0, #16
 80081e8:	4618      	mov	r0, r3
 80081ea:	4553      	cmp	r3, sl
 80081ec:	db33      	blt.n	8008256 <__lshift+0xb6>
 80081ee:	6920      	ldr	r0, [r4, #16]
 80081f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081f4:	f104 0314 	add.w	r3, r4, #20
 80081f8:	f019 091f 	ands.w	r9, r9, #31
 80081fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008200:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008204:	d02b      	beq.n	800825e <__lshift+0xbe>
 8008206:	f1c9 0e20 	rsb	lr, r9, #32
 800820a:	468a      	mov	sl, r1
 800820c:	2200      	movs	r2, #0
 800820e:	6818      	ldr	r0, [r3, #0]
 8008210:	fa00 f009 	lsl.w	r0, r0, r9
 8008214:	4310      	orrs	r0, r2
 8008216:	f84a 0b04 	str.w	r0, [sl], #4
 800821a:	f853 2b04 	ldr.w	r2, [r3], #4
 800821e:	459c      	cmp	ip, r3
 8008220:	fa22 f20e 	lsr.w	r2, r2, lr
 8008224:	d8f3      	bhi.n	800820e <__lshift+0x6e>
 8008226:	ebac 0304 	sub.w	r3, ip, r4
 800822a:	3b15      	subs	r3, #21
 800822c:	f023 0303 	bic.w	r3, r3, #3
 8008230:	3304      	adds	r3, #4
 8008232:	f104 0015 	add.w	r0, r4, #21
 8008236:	4584      	cmp	ip, r0
 8008238:	bf38      	it	cc
 800823a:	2304      	movcc	r3, #4
 800823c:	50ca      	str	r2, [r1, r3]
 800823e:	b10a      	cbz	r2, 8008244 <__lshift+0xa4>
 8008240:	f108 0602 	add.w	r6, r8, #2
 8008244:	3e01      	subs	r6, #1
 8008246:	4638      	mov	r0, r7
 8008248:	612e      	str	r6, [r5, #16]
 800824a:	4621      	mov	r1, r4
 800824c:	f7ff fdd8 	bl	8007e00 <_Bfree>
 8008250:	4628      	mov	r0, r5
 8008252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008256:	f842 0f04 	str.w	r0, [r2, #4]!
 800825a:	3301      	adds	r3, #1
 800825c:	e7c5      	b.n	80081ea <__lshift+0x4a>
 800825e:	3904      	subs	r1, #4
 8008260:	f853 2b04 	ldr.w	r2, [r3], #4
 8008264:	f841 2f04 	str.w	r2, [r1, #4]!
 8008268:	459c      	cmp	ip, r3
 800826a:	d8f9      	bhi.n	8008260 <__lshift+0xc0>
 800826c:	e7ea      	b.n	8008244 <__lshift+0xa4>
 800826e:	bf00      	nop
 8008270:	08008964 	.word	0x08008964
 8008274:	08008986 	.word	0x08008986

08008278 <__mcmp>:
 8008278:	b530      	push	{r4, r5, lr}
 800827a:	6902      	ldr	r2, [r0, #16]
 800827c:	690c      	ldr	r4, [r1, #16]
 800827e:	1b12      	subs	r2, r2, r4
 8008280:	d10e      	bne.n	80082a0 <__mcmp+0x28>
 8008282:	f100 0314 	add.w	r3, r0, #20
 8008286:	3114      	adds	r1, #20
 8008288:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800828c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008290:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008294:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008298:	42a5      	cmp	r5, r4
 800829a:	d003      	beq.n	80082a4 <__mcmp+0x2c>
 800829c:	d305      	bcc.n	80082aa <__mcmp+0x32>
 800829e:	2201      	movs	r2, #1
 80082a0:	4610      	mov	r0, r2
 80082a2:	bd30      	pop	{r4, r5, pc}
 80082a4:	4283      	cmp	r3, r0
 80082a6:	d3f3      	bcc.n	8008290 <__mcmp+0x18>
 80082a8:	e7fa      	b.n	80082a0 <__mcmp+0x28>
 80082aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082ae:	e7f7      	b.n	80082a0 <__mcmp+0x28>

080082b0 <__mdiff>:
 80082b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b4:	460c      	mov	r4, r1
 80082b6:	4606      	mov	r6, r0
 80082b8:	4611      	mov	r1, r2
 80082ba:	4620      	mov	r0, r4
 80082bc:	4690      	mov	r8, r2
 80082be:	f7ff ffdb 	bl	8008278 <__mcmp>
 80082c2:	1e05      	subs	r5, r0, #0
 80082c4:	d110      	bne.n	80082e8 <__mdiff+0x38>
 80082c6:	4629      	mov	r1, r5
 80082c8:	4630      	mov	r0, r6
 80082ca:	f7ff fd59 	bl	8007d80 <_Balloc>
 80082ce:	b930      	cbnz	r0, 80082de <__mdiff+0x2e>
 80082d0:	4b3a      	ldr	r3, [pc, #232]	; (80083bc <__mdiff+0x10c>)
 80082d2:	4602      	mov	r2, r0
 80082d4:	f240 2137 	movw	r1, #567	; 0x237
 80082d8:	4839      	ldr	r0, [pc, #228]	; (80083c0 <__mdiff+0x110>)
 80082da:	f000 fa09 	bl	80086f0 <__assert_func>
 80082de:	2301      	movs	r3, #1
 80082e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80082e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e8:	bfa4      	itt	ge
 80082ea:	4643      	movge	r3, r8
 80082ec:	46a0      	movge	r8, r4
 80082ee:	4630      	mov	r0, r6
 80082f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80082f4:	bfa6      	itte	ge
 80082f6:	461c      	movge	r4, r3
 80082f8:	2500      	movge	r5, #0
 80082fa:	2501      	movlt	r5, #1
 80082fc:	f7ff fd40 	bl	8007d80 <_Balloc>
 8008300:	b920      	cbnz	r0, 800830c <__mdiff+0x5c>
 8008302:	4b2e      	ldr	r3, [pc, #184]	; (80083bc <__mdiff+0x10c>)
 8008304:	4602      	mov	r2, r0
 8008306:	f240 2145 	movw	r1, #581	; 0x245
 800830a:	e7e5      	b.n	80082d8 <__mdiff+0x28>
 800830c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008310:	6926      	ldr	r6, [r4, #16]
 8008312:	60c5      	str	r5, [r0, #12]
 8008314:	f104 0914 	add.w	r9, r4, #20
 8008318:	f108 0514 	add.w	r5, r8, #20
 800831c:	f100 0e14 	add.w	lr, r0, #20
 8008320:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008324:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008328:	f108 0210 	add.w	r2, r8, #16
 800832c:	46f2      	mov	sl, lr
 800832e:	2100      	movs	r1, #0
 8008330:	f859 3b04 	ldr.w	r3, [r9], #4
 8008334:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008338:	fa11 f88b 	uxtah	r8, r1, fp
 800833c:	b299      	uxth	r1, r3
 800833e:	0c1b      	lsrs	r3, r3, #16
 8008340:	eba8 0801 	sub.w	r8, r8, r1
 8008344:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008348:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800834c:	fa1f f888 	uxth.w	r8, r8
 8008350:	1419      	asrs	r1, r3, #16
 8008352:	454e      	cmp	r6, r9
 8008354:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008358:	f84a 3b04 	str.w	r3, [sl], #4
 800835c:	d8e8      	bhi.n	8008330 <__mdiff+0x80>
 800835e:	1b33      	subs	r3, r6, r4
 8008360:	3b15      	subs	r3, #21
 8008362:	f023 0303 	bic.w	r3, r3, #3
 8008366:	3304      	adds	r3, #4
 8008368:	3415      	adds	r4, #21
 800836a:	42a6      	cmp	r6, r4
 800836c:	bf38      	it	cc
 800836e:	2304      	movcc	r3, #4
 8008370:	441d      	add	r5, r3
 8008372:	4473      	add	r3, lr
 8008374:	469e      	mov	lr, r3
 8008376:	462e      	mov	r6, r5
 8008378:	4566      	cmp	r6, ip
 800837a:	d30e      	bcc.n	800839a <__mdiff+0xea>
 800837c:	f10c 0203 	add.w	r2, ip, #3
 8008380:	1b52      	subs	r2, r2, r5
 8008382:	f022 0203 	bic.w	r2, r2, #3
 8008386:	3d03      	subs	r5, #3
 8008388:	45ac      	cmp	ip, r5
 800838a:	bf38      	it	cc
 800838c:	2200      	movcc	r2, #0
 800838e:	4413      	add	r3, r2
 8008390:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008394:	b17a      	cbz	r2, 80083b6 <__mdiff+0x106>
 8008396:	6107      	str	r7, [r0, #16]
 8008398:	e7a4      	b.n	80082e4 <__mdiff+0x34>
 800839a:	f856 8b04 	ldr.w	r8, [r6], #4
 800839e:	fa11 f288 	uxtah	r2, r1, r8
 80083a2:	1414      	asrs	r4, r2, #16
 80083a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80083a8:	b292      	uxth	r2, r2
 80083aa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80083ae:	f84e 2b04 	str.w	r2, [lr], #4
 80083b2:	1421      	asrs	r1, r4, #16
 80083b4:	e7e0      	b.n	8008378 <__mdiff+0xc8>
 80083b6:	3f01      	subs	r7, #1
 80083b8:	e7ea      	b.n	8008390 <__mdiff+0xe0>
 80083ba:	bf00      	nop
 80083bc:	08008964 	.word	0x08008964
 80083c0:	08008986 	.word	0x08008986

080083c4 <__d2b>:
 80083c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80083c8:	460f      	mov	r7, r1
 80083ca:	2101      	movs	r1, #1
 80083cc:	ec59 8b10 	vmov	r8, r9, d0
 80083d0:	4616      	mov	r6, r2
 80083d2:	f7ff fcd5 	bl	8007d80 <_Balloc>
 80083d6:	4604      	mov	r4, r0
 80083d8:	b930      	cbnz	r0, 80083e8 <__d2b+0x24>
 80083da:	4602      	mov	r2, r0
 80083dc:	4b24      	ldr	r3, [pc, #144]	; (8008470 <__d2b+0xac>)
 80083de:	4825      	ldr	r0, [pc, #148]	; (8008474 <__d2b+0xb0>)
 80083e0:	f240 310f 	movw	r1, #783	; 0x30f
 80083e4:	f000 f984 	bl	80086f0 <__assert_func>
 80083e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80083ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083f0:	bb2d      	cbnz	r5, 800843e <__d2b+0x7a>
 80083f2:	9301      	str	r3, [sp, #4]
 80083f4:	f1b8 0300 	subs.w	r3, r8, #0
 80083f8:	d026      	beq.n	8008448 <__d2b+0x84>
 80083fa:	4668      	mov	r0, sp
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	f7ff fd87 	bl	8007f10 <__lo0bits>
 8008402:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008406:	b1e8      	cbz	r0, 8008444 <__d2b+0x80>
 8008408:	f1c0 0320 	rsb	r3, r0, #32
 800840c:	fa02 f303 	lsl.w	r3, r2, r3
 8008410:	430b      	orrs	r3, r1
 8008412:	40c2      	lsrs	r2, r0
 8008414:	6163      	str	r3, [r4, #20]
 8008416:	9201      	str	r2, [sp, #4]
 8008418:	9b01      	ldr	r3, [sp, #4]
 800841a:	61a3      	str	r3, [r4, #24]
 800841c:	2b00      	cmp	r3, #0
 800841e:	bf14      	ite	ne
 8008420:	2202      	movne	r2, #2
 8008422:	2201      	moveq	r2, #1
 8008424:	6122      	str	r2, [r4, #16]
 8008426:	b1bd      	cbz	r5, 8008458 <__d2b+0x94>
 8008428:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800842c:	4405      	add	r5, r0
 800842e:	603d      	str	r5, [r7, #0]
 8008430:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008434:	6030      	str	r0, [r6, #0]
 8008436:	4620      	mov	r0, r4
 8008438:	b003      	add	sp, #12
 800843a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800843e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008442:	e7d6      	b.n	80083f2 <__d2b+0x2e>
 8008444:	6161      	str	r1, [r4, #20]
 8008446:	e7e7      	b.n	8008418 <__d2b+0x54>
 8008448:	a801      	add	r0, sp, #4
 800844a:	f7ff fd61 	bl	8007f10 <__lo0bits>
 800844e:	9b01      	ldr	r3, [sp, #4]
 8008450:	6163      	str	r3, [r4, #20]
 8008452:	3020      	adds	r0, #32
 8008454:	2201      	movs	r2, #1
 8008456:	e7e5      	b.n	8008424 <__d2b+0x60>
 8008458:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800845c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008460:	6038      	str	r0, [r7, #0]
 8008462:	6918      	ldr	r0, [r3, #16]
 8008464:	f7ff fd34 	bl	8007ed0 <__hi0bits>
 8008468:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800846c:	e7e2      	b.n	8008434 <__d2b+0x70>
 800846e:	bf00      	nop
 8008470:	08008964 	.word	0x08008964
 8008474:	08008986 	.word	0x08008986

08008478 <__sread>:
 8008478:	b510      	push	{r4, lr}
 800847a:	460c      	mov	r4, r1
 800847c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008480:	f000 f8f4 	bl	800866c <_read_r>
 8008484:	2800      	cmp	r0, #0
 8008486:	bfab      	itete	ge
 8008488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800848a:	89a3      	ldrhlt	r3, [r4, #12]
 800848c:	181b      	addge	r3, r3, r0
 800848e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008492:	bfac      	ite	ge
 8008494:	6563      	strge	r3, [r4, #84]	; 0x54
 8008496:	81a3      	strhlt	r3, [r4, #12]
 8008498:	bd10      	pop	{r4, pc}

0800849a <__swrite>:
 800849a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800849e:	461f      	mov	r7, r3
 80084a0:	898b      	ldrh	r3, [r1, #12]
 80084a2:	05db      	lsls	r3, r3, #23
 80084a4:	4605      	mov	r5, r0
 80084a6:	460c      	mov	r4, r1
 80084a8:	4616      	mov	r6, r2
 80084aa:	d505      	bpl.n	80084b8 <__swrite+0x1e>
 80084ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084b0:	2302      	movs	r3, #2
 80084b2:	2200      	movs	r2, #0
 80084b4:	f000 f8c8 	bl	8008648 <_lseek_r>
 80084b8:	89a3      	ldrh	r3, [r4, #12]
 80084ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084c2:	81a3      	strh	r3, [r4, #12]
 80084c4:	4632      	mov	r2, r6
 80084c6:	463b      	mov	r3, r7
 80084c8:	4628      	mov	r0, r5
 80084ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084ce:	f000 b8ef 	b.w	80086b0 <_write_r>

080084d2 <__sseek>:
 80084d2:	b510      	push	{r4, lr}
 80084d4:	460c      	mov	r4, r1
 80084d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084da:	f000 f8b5 	bl	8008648 <_lseek_r>
 80084de:	1c43      	adds	r3, r0, #1
 80084e0:	89a3      	ldrh	r3, [r4, #12]
 80084e2:	bf15      	itete	ne
 80084e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80084e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80084ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80084ee:	81a3      	strheq	r3, [r4, #12]
 80084f0:	bf18      	it	ne
 80084f2:	81a3      	strhne	r3, [r4, #12]
 80084f4:	bd10      	pop	{r4, pc}

080084f6 <__sclose>:
 80084f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084fa:	f000 b895 	b.w	8008628 <_close_r>

080084fe <__swbuf_r>:
 80084fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008500:	460e      	mov	r6, r1
 8008502:	4614      	mov	r4, r2
 8008504:	4605      	mov	r5, r0
 8008506:	b118      	cbz	r0, 8008510 <__swbuf_r+0x12>
 8008508:	6a03      	ldr	r3, [r0, #32]
 800850a:	b90b      	cbnz	r3, 8008510 <__swbuf_r+0x12>
 800850c:	f7fe f9c4 	bl	8006898 <__sinit>
 8008510:	69a3      	ldr	r3, [r4, #24]
 8008512:	60a3      	str	r3, [r4, #8]
 8008514:	89a3      	ldrh	r3, [r4, #12]
 8008516:	071a      	lsls	r2, r3, #28
 8008518:	d525      	bpl.n	8008566 <__swbuf_r+0x68>
 800851a:	6923      	ldr	r3, [r4, #16]
 800851c:	b31b      	cbz	r3, 8008566 <__swbuf_r+0x68>
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	6922      	ldr	r2, [r4, #16]
 8008522:	1a98      	subs	r0, r3, r2
 8008524:	6963      	ldr	r3, [r4, #20]
 8008526:	b2f6      	uxtb	r6, r6
 8008528:	4283      	cmp	r3, r0
 800852a:	4637      	mov	r7, r6
 800852c:	dc04      	bgt.n	8008538 <__swbuf_r+0x3a>
 800852e:	4621      	mov	r1, r4
 8008530:	4628      	mov	r0, r5
 8008532:	f7ff fbf1 	bl	8007d18 <_fflush_r>
 8008536:	b9e0      	cbnz	r0, 8008572 <__swbuf_r+0x74>
 8008538:	68a3      	ldr	r3, [r4, #8]
 800853a:	3b01      	subs	r3, #1
 800853c:	60a3      	str	r3, [r4, #8]
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	1c5a      	adds	r2, r3, #1
 8008542:	6022      	str	r2, [r4, #0]
 8008544:	701e      	strb	r6, [r3, #0]
 8008546:	6962      	ldr	r2, [r4, #20]
 8008548:	1c43      	adds	r3, r0, #1
 800854a:	429a      	cmp	r2, r3
 800854c:	d004      	beq.n	8008558 <__swbuf_r+0x5a>
 800854e:	89a3      	ldrh	r3, [r4, #12]
 8008550:	07db      	lsls	r3, r3, #31
 8008552:	d506      	bpl.n	8008562 <__swbuf_r+0x64>
 8008554:	2e0a      	cmp	r6, #10
 8008556:	d104      	bne.n	8008562 <__swbuf_r+0x64>
 8008558:	4621      	mov	r1, r4
 800855a:	4628      	mov	r0, r5
 800855c:	f7ff fbdc 	bl	8007d18 <_fflush_r>
 8008560:	b938      	cbnz	r0, 8008572 <__swbuf_r+0x74>
 8008562:	4638      	mov	r0, r7
 8008564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008566:	4621      	mov	r1, r4
 8008568:	4628      	mov	r0, r5
 800856a:	f000 f805 	bl	8008578 <__swsetup_r>
 800856e:	2800      	cmp	r0, #0
 8008570:	d0d5      	beq.n	800851e <__swbuf_r+0x20>
 8008572:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008576:	e7f4      	b.n	8008562 <__swbuf_r+0x64>

08008578 <__swsetup_r>:
 8008578:	b538      	push	{r3, r4, r5, lr}
 800857a:	4b2a      	ldr	r3, [pc, #168]	; (8008624 <__swsetup_r+0xac>)
 800857c:	4605      	mov	r5, r0
 800857e:	6818      	ldr	r0, [r3, #0]
 8008580:	460c      	mov	r4, r1
 8008582:	b118      	cbz	r0, 800858c <__swsetup_r+0x14>
 8008584:	6a03      	ldr	r3, [r0, #32]
 8008586:	b90b      	cbnz	r3, 800858c <__swsetup_r+0x14>
 8008588:	f7fe f986 	bl	8006898 <__sinit>
 800858c:	89a3      	ldrh	r3, [r4, #12]
 800858e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008592:	0718      	lsls	r0, r3, #28
 8008594:	d422      	bmi.n	80085dc <__swsetup_r+0x64>
 8008596:	06d9      	lsls	r1, r3, #27
 8008598:	d407      	bmi.n	80085aa <__swsetup_r+0x32>
 800859a:	2309      	movs	r3, #9
 800859c:	602b      	str	r3, [r5, #0]
 800859e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085a2:	81a3      	strh	r3, [r4, #12]
 80085a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085a8:	e034      	b.n	8008614 <__swsetup_r+0x9c>
 80085aa:	0758      	lsls	r0, r3, #29
 80085ac:	d512      	bpl.n	80085d4 <__swsetup_r+0x5c>
 80085ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085b0:	b141      	cbz	r1, 80085c4 <__swsetup_r+0x4c>
 80085b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085b6:	4299      	cmp	r1, r3
 80085b8:	d002      	beq.n	80085c0 <__swsetup_r+0x48>
 80085ba:	4628      	mov	r0, r5
 80085bc:	f7ff f8ee 	bl	800779c <_free_r>
 80085c0:	2300      	movs	r3, #0
 80085c2:	6363      	str	r3, [r4, #52]	; 0x34
 80085c4:	89a3      	ldrh	r3, [r4, #12]
 80085c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085ca:	81a3      	strh	r3, [r4, #12]
 80085cc:	2300      	movs	r3, #0
 80085ce:	6063      	str	r3, [r4, #4]
 80085d0:	6923      	ldr	r3, [r4, #16]
 80085d2:	6023      	str	r3, [r4, #0]
 80085d4:	89a3      	ldrh	r3, [r4, #12]
 80085d6:	f043 0308 	orr.w	r3, r3, #8
 80085da:	81a3      	strh	r3, [r4, #12]
 80085dc:	6923      	ldr	r3, [r4, #16]
 80085de:	b94b      	cbnz	r3, 80085f4 <__swsetup_r+0x7c>
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085ea:	d003      	beq.n	80085f4 <__swsetup_r+0x7c>
 80085ec:	4621      	mov	r1, r4
 80085ee:	4628      	mov	r0, r5
 80085f0:	f7fe f9ae 	bl	8006950 <__smakebuf_r>
 80085f4:	89a0      	ldrh	r0, [r4, #12]
 80085f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085fa:	f010 0301 	ands.w	r3, r0, #1
 80085fe:	d00a      	beq.n	8008616 <__swsetup_r+0x9e>
 8008600:	2300      	movs	r3, #0
 8008602:	60a3      	str	r3, [r4, #8]
 8008604:	6963      	ldr	r3, [r4, #20]
 8008606:	425b      	negs	r3, r3
 8008608:	61a3      	str	r3, [r4, #24]
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	b943      	cbnz	r3, 8008620 <__swsetup_r+0xa8>
 800860e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008612:	d1c4      	bne.n	800859e <__swsetup_r+0x26>
 8008614:	bd38      	pop	{r3, r4, r5, pc}
 8008616:	0781      	lsls	r1, r0, #30
 8008618:	bf58      	it	pl
 800861a:	6963      	ldrpl	r3, [r4, #20]
 800861c:	60a3      	str	r3, [r4, #8]
 800861e:	e7f4      	b.n	800860a <__swsetup_r+0x92>
 8008620:	2000      	movs	r0, #0
 8008622:	e7f7      	b.n	8008614 <__swsetup_r+0x9c>
 8008624:	20000064 	.word	0x20000064

08008628 <_close_r>:
 8008628:	b538      	push	{r3, r4, r5, lr}
 800862a:	4d06      	ldr	r5, [pc, #24]	; (8008644 <_close_r+0x1c>)
 800862c:	2300      	movs	r3, #0
 800862e:	4604      	mov	r4, r0
 8008630:	4608      	mov	r0, r1
 8008632:	602b      	str	r3, [r5, #0]
 8008634:	f7f9 f9bb 	bl	80019ae <_close>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d102      	bne.n	8008642 <_close_r+0x1a>
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	b103      	cbz	r3, 8008642 <_close_r+0x1a>
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	200005d4 	.word	0x200005d4

08008648 <_lseek_r>:
 8008648:	b538      	push	{r3, r4, r5, lr}
 800864a:	4d07      	ldr	r5, [pc, #28]	; (8008668 <_lseek_r+0x20>)
 800864c:	4604      	mov	r4, r0
 800864e:	4608      	mov	r0, r1
 8008650:	4611      	mov	r1, r2
 8008652:	2200      	movs	r2, #0
 8008654:	602a      	str	r2, [r5, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	f7f9 f9d0 	bl	80019fc <_lseek>
 800865c:	1c43      	adds	r3, r0, #1
 800865e:	d102      	bne.n	8008666 <_lseek_r+0x1e>
 8008660:	682b      	ldr	r3, [r5, #0]
 8008662:	b103      	cbz	r3, 8008666 <_lseek_r+0x1e>
 8008664:	6023      	str	r3, [r4, #0]
 8008666:	bd38      	pop	{r3, r4, r5, pc}
 8008668:	200005d4 	.word	0x200005d4

0800866c <_read_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4d07      	ldr	r5, [pc, #28]	; (800868c <_read_r+0x20>)
 8008670:	4604      	mov	r4, r0
 8008672:	4608      	mov	r0, r1
 8008674:	4611      	mov	r1, r2
 8008676:	2200      	movs	r2, #0
 8008678:	602a      	str	r2, [r5, #0]
 800867a:	461a      	mov	r2, r3
 800867c:	f7f9 f97a 	bl	8001974 <_read>
 8008680:	1c43      	adds	r3, r0, #1
 8008682:	d102      	bne.n	800868a <_read_r+0x1e>
 8008684:	682b      	ldr	r3, [r5, #0]
 8008686:	b103      	cbz	r3, 800868a <_read_r+0x1e>
 8008688:	6023      	str	r3, [r4, #0]
 800868a:	bd38      	pop	{r3, r4, r5, pc}
 800868c:	200005d4 	.word	0x200005d4

08008690 <_sbrk_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	4d06      	ldr	r5, [pc, #24]	; (80086ac <_sbrk_r+0x1c>)
 8008694:	2300      	movs	r3, #0
 8008696:	4604      	mov	r4, r0
 8008698:	4608      	mov	r0, r1
 800869a:	602b      	str	r3, [r5, #0]
 800869c:	f7f9 f9bc 	bl	8001a18 <_sbrk>
 80086a0:	1c43      	adds	r3, r0, #1
 80086a2:	d102      	bne.n	80086aa <_sbrk_r+0x1a>
 80086a4:	682b      	ldr	r3, [r5, #0]
 80086a6:	b103      	cbz	r3, 80086aa <_sbrk_r+0x1a>
 80086a8:	6023      	str	r3, [r4, #0]
 80086aa:	bd38      	pop	{r3, r4, r5, pc}
 80086ac:	200005d4 	.word	0x200005d4

080086b0 <_write_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	4d07      	ldr	r5, [pc, #28]	; (80086d0 <_write_r+0x20>)
 80086b4:	4604      	mov	r4, r0
 80086b6:	4608      	mov	r0, r1
 80086b8:	4611      	mov	r1, r2
 80086ba:	2200      	movs	r2, #0
 80086bc:	602a      	str	r2, [r5, #0]
 80086be:	461a      	mov	r2, r3
 80086c0:	f7f8 fc18 	bl	8000ef4 <_write>
 80086c4:	1c43      	adds	r3, r0, #1
 80086c6:	d102      	bne.n	80086ce <_write_r+0x1e>
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	b103      	cbz	r3, 80086ce <_write_r+0x1e>
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	bd38      	pop	{r3, r4, r5, pc}
 80086d0:	200005d4 	.word	0x200005d4

080086d4 <memcpy>:
 80086d4:	440a      	add	r2, r1
 80086d6:	4291      	cmp	r1, r2
 80086d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80086dc:	d100      	bne.n	80086e0 <memcpy+0xc>
 80086de:	4770      	bx	lr
 80086e0:	b510      	push	{r4, lr}
 80086e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086ea:	4291      	cmp	r1, r2
 80086ec:	d1f9      	bne.n	80086e2 <memcpy+0xe>
 80086ee:	bd10      	pop	{r4, pc}

080086f0 <__assert_func>:
 80086f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086f2:	4614      	mov	r4, r2
 80086f4:	461a      	mov	r2, r3
 80086f6:	4b09      	ldr	r3, [pc, #36]	; (800871c <__assert_func+0x2c>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4605      	mov	r5, r0
 80086fc:	68d8      	ldr	r0, [r3, #12]
 80086fe:	b14c      	cbz	r4, 8008714 <__assert_func+0x24>
 8008700:	4b07      	ldr	r3, [pc, #28]	; (8008720 <__assert_func+0x30>)
 8008702:	9100      	str	r1, [sp, #0]
 8008704:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008708:	4906      	ldr	r1, [pc, #24]	; (8008724 <__assert_func+0x34>)
 800870a:	462b      	mov	r3, r5
 800870c:	f000 f836 	bl	800877c <fiprintf>
 8008710:	f000 f853 	bl	80087ba <abort>
 8008714:	4b04      	ldr	r3, [pc, #16]	; (8008728 <__assert_func+0x38>)
 8008716:	461c      	mov	r4, r3
 8008718:	e7f3      	b.n	8008702 <__assert_func+0x12>
 800871a:	bf00      	nop
 800871c:	20000064 	.word	0x20000064
 8008720:	08008be7 	.word	0x08008be7
 8008724:	08008bf4 	.word	0x08008bf4
 8008728:	08008c22 	.word	0x08008c22

0800872c <_calloc_r>:
 800872c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800872e:	fba1 2402 	umull	r2, r4, r1, r2
 8008732:	b94c      	cbnz	r4, 8008748 <_calloc_r+0x1c>
 8008734:	4611      	mov	r1, r2
 8008736:	9201      	str	r2, [sp, #4]
 8008738:	f7ff f9e8 	bl	8007b0c <_malloc_r>
 800873c:	9a01      	ldr	r2, [sp, #4]
 800873e:	4605      	mov	r5, r0
 8008740:	b930      	cbnz	r0, 8008750 <_calloc_r+0x24>
 8008742:	4628      	mov	r0, r5
 8008744:	b003      	add	sp, #12
 8008746:	bd30      	pop	{r4, r5, pc}
 8008748:	220c      	movs	r2, #12
 800874a:	6002      	str	r2, [r0, #0]
 800874c:	2500      	movs	r5, #0
 800874e:	e7f8      	b.n	8008742 <_calloc_r+0x16>
 8008750:	4621      	mov	r1, r4
 8008752:	f7fe f94b 	bl	80069ec <memset>
 8008756:	e7f4      	b.n	8008742 <_calloc_r+0x16>

08008758 <__ascii_mbtowc>:
 8008758:	b082      	sub	sp, #8
 800875a:	b901      	cbnz	r1, 800875e <__ascii_mbtowc+0x6>
 800875c:	a901      	add	r1, sp, #4
 800875e:	b142      	cbz	r2, 8008772 <__ascii_mbtowc+0x1a>
 8008760:	b14b      	cbz	r3, 8008776 <__ascii_mbtowc+0x1e>
 8008762:	7813      	ldrb	r3, [r2, #0]
 8008764:	600b      	str	r3, [r1, #0]
 8008766:	7812      	ldrb	r2, [r2, #0]
 8008768:	1e10      	subs	r0, r2, #0
 800876a:	bf18      	it	ne
 800876c:	2001      	movne	r0, #1
 800876e:	b002      	add	sp, #8
 8008770:	4770      	bx	lr
 8008772:	4610      	mov	r0, r2
 8008774:	e7fb      	b.n	800876e <__ascii_mbtowc+0x16>
 8008776:	f06f 0001 	mvn.w	r0, #1
 800877a:	e7f8      	b.n	800876e <__ascii_mbtowc+0x16>

0800877c <fiprintf>:
 800877c:	b40e      	push	{r1, r2, r3}
 800877e:	b503      	push	{r0, r1, lr}
 8008780:	4601      	mov	r1, r0
 8008782:	ab03      	add	r3, sp, #12
 8008784:	4805      	ldr	r0, [pc, #20]	; (800879c <fiprintf+0x20>)
 8008786:	f853 2b04 	ldr.w	r2, [r3], #4
 800878a:	6800      	ldr	r0, [r0, #0]
 800878c:	9301      	str	r3, [sp, #4]
 800878e:	f7ff f87b 	bl	8007888 <_vfiprintf_r>
 8008792:	b002      	add	sp, #8
 8008794:	f85d eb04 	ldr.w	lr, [sp], #4
 8008798:	b003      	add	sp, #12
 800879a:	4770      	bx	lr
 800879c:	20000064 	.word	0x20000064

080087a0 <__ascii_wctomb>:
 80087a0:	b149      	cbz	r1, 80087b6 <__ascii_wctomb+0x16>
 80087a2:	2aff      	cmp	r2, #255	; 0xff
 80087a4:	bf85      	ittet	hi
 80087a6:	238a      	movhi	r3, #138	; 0x8a
 80087a8:	6003      	strhi	r3, [r0, #0]
 80087aa:	700a      	strbls	r2, [r1, #0]
 80087ac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80087b0:	bf98      	it	ls
 80087b2:	2001      	movls	r0, #1
 80087b4:	4770      	bx	lr
 80087b6:	4608      	mov	r0, r1
 80087b8:	4770      	bx	lr

080087ba <abort>:
 80087ba:	b508      	push	{r3, lr}
 80087bc:	2006      	movs	r0, #6
 80087be:	f000 f82b 	bl	8008818 <raise>
 80087c2:	2001      	movs	r0, #1
 80087c4:	f7f9 f8cc 	bl	8001960 <_exit>

080087c8 <_raise_r>:
 80087c8:	291f      	cmp	r1, #31
 80087ca:	b538      	push	{r3, r4, r5, lr}
 80087cc:	4604      	mov	r4, r0
 80087ce:	460d      	mov	r5, r1
 80087d0:	d904      	bls.n	80087dc <_raise_r+0x14>
 80087d2:	2316      	movs	r3, #22
 80087d4:	6003      	str	r3, [r0, #0]
 80087d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087da:	bd38      	pop	{r3, r4, r5, pc}
 80087dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80087de:	b112      	cbz	r2, 80087e6 <_raise_r+0x1e>
 80087e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087e4:	b94b      	cbnz	r3, 80087fa <_raise_r+0x32>
 80087e6:	4620      	mov	r0, r4
 80087e8:	f000 f830 	bl	800884c <_getpid_r>
 80087ec:	462a      	mov	r2, r5
 80087ee:	4601      	mov	r1, r0
 80087f0:	4620      	mov	r0, r4
 80087f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087f6:	f000 b817 	b.w	8008828 <_kill_r>
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d00a      	beq.n	8008814 <_raise_r+0x4c>
 80087fe:	1c59      	adds	r1, r3, #1
 8008800:	d103      	bne.n	800880a <_raise_r+0x42>
 8008802:	2316      	movs	r3, #22
 8008804:	6003      	str	r3, [r0, #0]
 8008806:	2001      	movs	r0, #1
 8008808:	e7e7      	b.n	80087da <_raise_r+0x12>
 800880a:	2400      	movs	r4, #0
 800880c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008810:	4628      	mov	r0, r5
 8008812:	4798      	blx	r3
 8008814:	2000      	movs	r0, #0
 8008816:	e7e0      	b.n	80087da <_raise_r+0x12>

08008818 <raise>:
 8008818:	4b02      	ldr	r3, [pc, #8]	; (8008824 <raise+0xc>)
 800881a:	4601      	mov	r1, r0
 800881c:	6818      	ldr	r0, [r3, #0]
 800881e:	f7ff bfd3 	b.w	80087c8 <_raise_r>
 8008822:	bf00      	nop
 8008824:	20000064 	.word	0x20000064

08008828 <_kill_r>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	4d07      	ldr	r5, [pc, #28]	; (8008848 <_kill_r+0x20>)
 800882c:	2300      	movs	r3, #0
 800882e:	4604      	mov	r4, r0
 8008830:	4608      	mov	r0, r1
 8008832:	4611      	mov	r1, r2
 8008834:	602b      	str	r3, [r5, #0]
 8008836:	f7f9 f883 	bl	8001940 <_kill>
 800883a:	1c43      	adds	r3, r0, #1
 800883c:	d102      	bne.n	8008844 <_kill_r+0x1c>
 800883e:	682b      	ldr	r3, [r5, #0]
 8008840:	b103      	cbz	r3, 8008844 <_kill_r+0x1c>
 8008842:	6023      	str	r3, [r4, #0]
 8008844:	bd38      	pop	{r3, r4, r5, pc}
 8008846:	bf00      	nop
 8008848:	200005d4 	.word	0x200005d4

0800884c <_getpid_r>:
 800884c:	f7f9 b870 	b.w	8001930 <_getpid>

08008850 <_init>:
 8008850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008852:	bf00      	nop
 8008854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008856:	bc08      	pop	{r3}
 8008858:	469e      	mov	lr, r3
 800885a:	4770      	bx	lr

0800885c <_fini>:
 800885c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885e:	bf00      	nop
 8008860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008862:	bc08      	pop	{r3}
 8008864:	469e      	mov	lr, r3
 8008866:	4770      	bx	lr
